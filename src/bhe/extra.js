"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const Suggestions = require("suggestions");
class InputAndSubmitFlex extends index_1.Div {
    constructor({ placeholder, suggestions }) {
        super({ cls: 'input-and-submit-flex' });
        const uppercase = /[A-Z]/;
        const illegal = /[^(a-z0-9|_)]/;
        const inputElem = index_1.input({ placeholder })
            .on({
            change: (ev) => {
                this.toggleSubmitButtonOnInput();
            }, input: (ev) => {
                this.toggleSubmitButtonOnInput();
            },
            keydown: (ev) => {
                console.log('keydown', ev);
                if (ev.ctrlKey || ev.altKey || ev.key.length > 1) {
                    return;
                }
                if (ev.key.match(uppercase)) {
                    ev.preventDefault();
                    this.inputElem.e.value += ev.key.toLowerCase();
                }
                else if ([' ', ',', '-',].includes(ev.key)) {
                    ev.preventDefault();
                    this.inputElem.e.value += '_';
                }
                else if (ev.key.match(illegal)) {
                    ev.preventDefault();
                }
            },
        });
        const submitButton = index_1.button({ cls: 'inactive', html: 'Submit' });
        this.cacheAppend({ inputElem, submitButton });
        const fileSuggestions = new Suggestions(inputElem.e, suggestions, {
            limit: 2,
            minLength: 1,
        });
    }
    toggleSubmitButtonOnInput() {
        if (this.inputElem.e.value) {
            this.submitButton.replaceClass('inactive', 'active');
        }
        else {
            this.submitButton.replaceClass('active', 'inactive');
        }
    }
}
class InputSection extends index_1.Div {
    constructor({ placeholder, h3text, suggestions }) {
        super({ cls: 'input-section' });
        const inputAndSubmitFlex = new InputAndSubmitFlex({ placeholder, suggestions });
        const subtitle = index_1.elem({ tag: 'h3', text: h3text });
        this.cacheAppend({ subtitle, inputAndSubmitFlex });
    }
}
exports.InputSection = InputSection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleHRyYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUF1RTtBQUV2RSwyQ0FBMEM7QUFFMUMsTUFBTSxrQkFBbUIsU0FBUSxXQUFHO0lBSWhDLFlBQVksRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFO1FBQ3BDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRyx1QkFBdUIsRUFBRSxDQUFDLENBQUM7UUFDekMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDO1FBQzFCLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQztRQUNoQyxNQUFNLFNBQVMsR0FBRyxhQUFLLENBQUMsRUFBRSxXQUFXLEVBQUUsQ0FBQzthQUNuQyxFQUFFLENBQUM7WUFDQSxNQUFNLEVBQUcsQ0FBQyxFQUFTLEVBQUUsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7WUFDckMsQ0FBQyxFQUFFLEtBQUssRUFBRyxDQUFDLEVBQWMsRUFBRSxFQUFFO2dCQUMxQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztZQUNyQyxDQUFDO1lBQ0QsT0FBTyxFQUFHLENBQUMsRUFBaUIsRUFBRSxFQUFFO2dCQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDM0IsSUFBSyxFQUFFLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFHO29CQUNoRCxPQUFPO2lCQUNWO2dCQUNELElBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUc7b0JBQzNCLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7aUJBQ2xEO3FCQUFNLElBQUssQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUc7b0JBQzlDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQztpQkFDakM7cUJBQU0sSUFBSyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRztvQkFDaEMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO2lCQUV2QjtZQUVMLENBQUM7U0FFSixDQUFDLENBQUM7UUFDUCxNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsRUFBRSxHQUFHLEVBQUcsVUFBVSxFQUFFLElBQUksRUFBRyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRW5FLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUM5QyxNQUFNLGVBQWUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRTtZQUM5RCxLQUFLLEVBQUcsQ0FBQztZQUNULFNBQVMsRUFBRyxDQUFDO1NBQ2hCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCx5QkFBeUI7UUFDckIsSUFBSyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUc7WUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1NBQ3ZEO2FBQU07WUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUE7U0FFdkQ7SUFDTCxDQUFDO0NBQ0o7QUFFRCxNQUFhLFlBQWEsU0FBUSxXQUFHO0lBR2pDLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRTtRQUM1QyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUcsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUNqQyxNQUFNLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLENBQUMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNoRixNQUFNLFFBQVEsR0FBRyxZQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsSUFBSSxFQUFFLElBQUksRUFBRyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDSjtBQVRELG9DQVNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnV0dG9uLCBidXR0b24sIGRpdiwgRGl2LCBlbGVtLCBJbnB1dCwgaW5wdXQgfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgKiBhcyBTdWdnZXN0aW9ucyBmcm9tICdzdWdnZXN0aW9ucydcblxuY2xhc3MgSW5wdXRBbmRTdWJtaXRGbGV4IGV4dGVuZHMgRGl2IHtcbiAgICBzdWJtaXRCdXR0b246IEJ1dHRvbjtcbiAgICBpbnB1dEVsZW06IElucHV0O1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKHsgcGxhY2Vob2xkZXIsIHN1Z2dlc3Rpb25zIH0pIHtcbiAgICAgICAgc3VwZXIoeyBjbHMgOiAnaW5wdXQtYW5kLXN1Ym1pdC1mbGV4JyB9KTtcbiAgICAgICAgY29uc3QgdXBwZXJjYXNlID0gL1tBLVpdLztcbiAgICAgICAgY29uc3QgaWxsZWdhbCA9IC9bXihhLXowLTl8XyldLztcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtID0gaW5wdXQoeyBwbGFjZWhvbGRlciB9KVxuICAgICAgICAgICAgLm9uKHtcbiAgICAgICAgICAgICAgICBjaGFuZ2UgOiAoZXY6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpO1xuICAgICAgICAgICAgICAgIH0sIGlucHV0IDogKGV2OiBJbnB1dEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAga2V5ZG93biA6IChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygna2V5ZG93bicsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBldi5jdHJsS2V5IHx8IGV2LmFsdEtleSB8fCBldi5rZXkubGVuZ3RoID4gMSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIGV2LmtleS5tYXRjaCh1cHBlcmNhc2UpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFbGVtLmUudmFsdWUgKz0gZXYua2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIFsgJyAnLCAnLCcsICctJywgXS5pbmNsdWRlcyhldi5rZXkpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFbGVtLmUudmFsdWUgKz0gJ18nO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBldi5rZXkubWF0Y2goaWxsZWdhbCkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBidXR0b24oeyBjbHMgOiAnaW5hY3RpdmUnLCBodG1sIDogJ1N1Ym1pdCcgfSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNhY2hlQXBwZW5kKHsgaW5wdXRFbGVtLCBzdWJtaXRCdXR0b24gfSk7XG4gICAgICAgIGNvbnN0IGZpbGVTdWdnZXN0aW9ucyA9IG5ldyBTdWdnZXN0aW9ucyhpbnB1dEVsZW0uZSwgc3VnZ2VzdGlvbnMsIHtcbiAgICAgICAgICAgIGxpbWl0IDogMixcbiAgICAgICAgICAgIG1pbkxlbmd0aCA6IDEsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICB0b2dnbGVTdWJtaXRCdXR0b25PbklucHV0KCkge1xuICAgICAgICBpZiAoIHRoaXMuaW5wdXRFbGVtLmUudmFsdWUgKSB7XG4gICAgICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvbi5yZXBsYWNlQ2xhc3MoJ2luYWN0aXZlJywgJ2FjdGl2ZScpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvbi5yZXBsYWNlQ2xhc3MoJ2FjdGl2ZScsICdpbmFjdGl2ZScpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIElucHV0U2VjdGlvbiBleHRlbmRzIERpdiB7XG4gICAgaW5wdXRBbmRTdWJtaXRGbGV4OiBJbnB1dEFuZFN1Ym1pdEZsZXg7XG4gICAgXG4gICAgY29uc3RydWN0b3IoeyBwbGFjZWhvbGRlciwgaDN0ZXh0LCBzdWdnZXN0aW9ucyB9KSB7XG4gICAgICAgIHN1cGVyKHsgY2xzIDogJ2lucHV0LXNlY3Rpb24nIH0pO1xuICAgICAgICBjb25zdCBpbnB1dEFuZFN1Ym1pdEZsZXggPSBuZXcgSW5wdXRBbmRTdWJtaXRGbGV4KHsgcGxhY2Vob2xkZXIsIHN1Z2dlc3Rpb25zIH0pO1xuICAgICAgICBjb25zdCBzdWJ0aXRsZSA9IGVsZW0oeyB0YWcgOiAnaDMnLCB0ZXh0IDogaDN0ZXh0IH0pO1xuICAgICAgICB0aGlzLmNhY2hlQXBwZW5kKHsgc3VidGl0bGUsIGlucHV0QW5kU3VibWl0RmxleCB9KTtcbiAgICB9XG59XG4iXX0=