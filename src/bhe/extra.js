"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const Suggestions = require("suggestions");
class InputAndSubmitFlex extends index_1.Div {
    constructor(options) {
        super({ cls: 'input-and-submit-flex' });
        const { placeholder, suggestions, illegalRegex } = options;
        const illegal = (illegalRegex !== null && illegalRegex !== void 0 ? illegalRegex : /[^(a-z0-9A-Z|_.)]/);
        this._suggestions = suggestions;
        const inputElem = index_1.input({ placeholder })
            .on({
            change: (ev) => {
                this.toggleSubmitButtonOnInput();
            }, input: (ev) => {
                this.toggleSubmitButtonOnInput();
            },
            keydown: (ev) => {
                if (ev.ctrlKey || ev.altKey || ev.key.length > 1) {
                    return;
                }
                if ([' ', ',', '-',].includes(ev.key)) {
                    ev.preventDefault();
                    this.inputElem.value += '_';
                }
                else if (ev.key.match(illegal)) {
                    ev.preventDefault();
                }
            },
        });
        const submitButton = index_1.button({ cls: 'inactive' });
        this.cacheAppend({ inputElem, submitButton });
        new Suggestions(inputElem.e, suggestions, {
            limit: 2,
            minLength: 0,
        });
    }
    toggleSubmitButtonOnInput() {
        const inputOk = !!this.inputElem.value;
        this.submitButton
            .toggleClass('active', inputOk)
            .toggleClass('inactive', !inputOk);
        if (inputOk) {
            this.inputElem.removeClass('invalid');
        }
    }
}
class InputSection extends index_1.Div {
    constructor(options) {
        super({ cls: 'input-section' });
        const { h3text, placeholder, suggestions, illegalRegex } = options;
        const inputAndSubmitFlex = new InputAndSubmitFlex({
            placeholder,
            suggestions,
            illegalRegex
        });
        const subtitle = index_1.elem({ tag: 'h3', text: h3text });
        this.cacheAppend({ subtitle, inputAndSubmitFlex });
    }
}
exports.InputSection = InputSection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleHRyYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUF1RTtBQUV2RSwyQ0FBMEM7QUFRMUMsTUFBTSxrQkFBbUIsU0FBUSxXQUFHO0lBS2hDLFlBQVksT0FBa0M7UUFDMUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLHVCQUF1QixFQUFFLENBQUMsQ0FBQztRQUN6QyxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFM0QsTUFBTSxPQUFPLElBQUcsWUFBWSxhQUFaLFlBQVksY0FBWixZQUFZLEdBQUksbUJBQW1CLENBQUEsQ0FBQztRQUNwRCxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUNoQyxNQUFNLFNBQVMsR0FBRyxhQUFLLENBQUMsRUFBRSxXQUFXLEVBQUUsQ0FBQzthQUNuQyxFQUFFLENBQUM7WUFDQSxNQUFNLEVBQUcsQ0FBQyxFQUFTLEVBQUUsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7WUFDckMsQ0FBQyxFQUFFLEtBQUssRUFBRyxDQUFDLEVBQWMsRUFBRSxFQUFFO2dCQUMxQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztZQUNyQyxDQUFDO1lBQ0QsT0FBTyxFQUFHLENBQUMsRUFBaUIsRUFBRSxFQUFFO2dCQUM1QixJQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUc7b0JBQ2hELE9BQU87aUJBQ1Y7Z0JBRUQsSUFBSyxDQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRztvQkFDdkMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUM7aUJBQy9CO3FCQUFNLElBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUc7b0JBQ2hDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztpQkFFdkI7WUFFTCxDQUFDO1NBRUosQ0FBQyxDQUFDO1FBQ1AsTUFBTSxZQUFZLEdBQUcsY0FBTSxDQUFDLEVBQUUsR0FBRyxFQUFHLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFFbEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLElBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFO1lBQ3RDLEtBQUssRUFBRyxDQUFDO1lBQ1QsU0FBUyxFQUFHLENBQUM7U0FDaEIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELHlCQUF5QjtRQUNyQixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVk7YUFDWixXQUFXLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQzthQUM5QixXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkMsSUFBSyxPQUFPLEVBQUc7WUFDWCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtTQUN4QztJQUtMLENBQUM7Q0FDSjtBQVNELE1BQWEsWUFBYSxTQUFRLFdBQUc7SUFHakMsWUFBWSxPQUE0QjtRQUNwQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUcsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUNqQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ25FLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQztZQUM5QyxXQUFXO1lBQ1gsV0FBVztZQUNYLFlBQVk7U0FDZixDQUFDLENBQUM7UUFDSCxNQUFNLFFBQVEsR0FBRyxZQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsSUFBSSxFQUFFLElBQUksRUFBRyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDSjtBQWRELG9DQWNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnV0dG9uLCBidXR0b24sIGRpdiwgRGl2LCBlbGVtLCBJbnB1dCwgaW5wdXQgfSBmcm9tIFwiLi9pbmRleFwiO1xuXG5pbXBvcnQgKiBhcyBTdWdnZXN0aW9ucyBmcm9tICdzdWdnZXN0aW9ucydcblxuaW50ZXJmYWNlIElucHV0QW5kU3VibWl0RmxleE9wdGlvbnMge1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmcsXG4gICAgc3VnZ2VzdGlvbnM6IHN0cmluZ1tdLFxuICAgIGlsbGVnYWxSZWdleD86IFJlZ0V4cFxufVxuXG5jbGFzcyBJbnB1dEFuZFN1Ym1pdEZsZXggZXh0ZW5kcyBEaXYge1xuICAgIHN1Ym1pdEJ1dHRvbjogQnV0dG9uO1xuICAgIGlucHV0RWxlbTogSW5wdXQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfc3VnZ2VzdGlvbnM6IHN0cmluZ1tdO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IElucHV0QW5kU3VibWl0RmxleE9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoeyBjbHMgOiAnaW5wdXQtYW5kLXN1Ym1pdC1mbGV4JyB9KTtcbiAgICAgICAgY29uc3QgeyBwbGFjZWhvbGRlciwgc3VnZ2VzdGlvbnMsIGlsbGVnYWxSZWdleCB9ID0gb3B0aW9ucztcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGlsbGVnYWwgPSBpbGxlZ2FsUmVnZXggPz8gL1teKGEtejAtOUEtWnxfLildLztcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9ucztcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtID0gaW5wdXQoeyBwbGFjZWhvbGRlciB9KVxuICAgICAgICAgICAgLm9uKHtcbiAgICAgICAgICAgICAgICBjaGFuZ2UgOiAoZXY6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpO1xuICAgICAgICAgICAgICAgIH0sIGlucHV0IDogKGV2OiBJbnB1dEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAga2V5ZG93biA6IChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGV2LmN0cmxLZXkgfHwgZXYuYWx0S2V5IHx8IGV2LmtleS5sZW5ndGggPiAxICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIFsgJyAnLCAnLCcsICctJywgXS5pbmNsdWRlcyhldi5rZXkpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFbGVtLnZhbHVlICs9ICdfJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggZXYua2V5Lm1hdGNoKGlsbGVnYWwpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gYnV0dG9uKHsgY2xzIDogJ2luYWN0aXZlJyB9KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2FjaGVBcHBlbmQoeyBpbnB1dEVsZW0sIHN1Ym1pdEJ1dHRvbiB9KTtcbiAgICAgICAgbmV3IFN1Z2dlc3Rpb25zKGlucHV0RWxlbS5lLCBzdWdnZXN0aW9ucywge1xuICAgICAgICAgICAgbGltaXQgOiAyLFxuICAgICAgICAgICAgbWluTGVuZ3RoIDogMCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHRvZ2dsZVN1Ym1pdEJ1dHRvbk9uSW5wdXQoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0T2sgPSAhIXRoaXMuaW5wdXRFbGVtLnZhbHVlO1xuICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvblxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCdhY3RpdmUnLCBpbnB1dE9rKVxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCdpbmFjdGl2ZScsICFpbnB1dE9rKTtcbiAgICAgICAgaWYgKCBpbnB1dE9rICkge1xuICAgICAgICAgICAgdGhpcy5pbnB1dEVsZW0ucmVtb3ZlQ2xhc3MoJ2ludmFsaWQnKVxuICAgICAgICB9XG4gICAgICAgIC8qaWYgKCB0aGlzLl9vdmVyd3JpdGVXYXJuICYmIGlucHV0T2sgKSB7XG4gICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvbi50b2dnbGVDbGFzcygnd2FybicsIHRoaXMuX3N1Z2dlc3Rpb25zLmxvd2VyQWxsKCkuaW5jbHVkZXModGhpcy5pbnB1dEVsZW0udmFsdWUubG93ZXIoKSkpO1xuICAgICAgICAgfSovXG4gICAgICAgIFxuICAgIH1cbn1cblxuaW50ZXJmYWNlIElucHV0U2VjdGlvbk9wdGlvbnMge1xuICAgIGgzdGV4dDogc3RyaW5nLFxuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmcsXG4gICAgc3VnZ2VzdGlvbnM6IHN0cmluZ1tdLFxuICAgIGlsbGVnYWxSZWdleD86IFJlZ0V4cFxufVxuXG5leHBvcnQgY2xhc3MgSW5wdXRTZWN0aW9uIGV4dGVuZHMgRGl2IHtcbiAgICBpbnB1dEFuZFN1Ym1pdEZsZXg6IElucHV0QW5kU3VibWl0RmxleDtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJbnB1dFNlY3Rpb25PcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHsgY2xzIDogJ2lucHV0LXNlY3Rpb24nIH0pO1xuICAgICAgICBjb25zdCB7IGgzdGV4dCwgcGxhY2Vob2xkZXIsIHN1Z2dlc3Rpb25zLCBpbGxlZ2FsUmVnZXggfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGlucHV0QW5kU3VibWl0RmxleCA9IG5ldyBJbnB1dEFuZFN1Ym1pdEZsZXgoe1xuICAgICAgICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICAgICAgICBzdWdnZXN0aW9ucyxcbiAgICAgICAgICAgIGlsbGVnYWxSZWdleFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3VidGl0bGUgPSBlbGVtKHsgdGFnIDogJ2gzJywgdGV4dCA6IGgzdGV4dCB9KTtcbiAgICAgICAgdGhpcy5jYWNoZUFwcGVuZCh7IHN1YnRpdGxlLCBpbnB1dEFuZFN1Ym1pdEZsZXggfSk7XG4gICAgfVxufVxuIl19