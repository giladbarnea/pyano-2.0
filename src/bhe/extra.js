"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const Suggestions = require("suggestions");
class InputAndSubmitFlex extends index_1.Div {
    constructor(options) {
        super({ cls: 'input-and-submit-flex' });
        const { placeholder, suggestions, illegalRegex } = options;
        const illegal = (illegalRegex !== null && illegalRegex !== void 0 ? illegalRegex : /[^(a-z0-9A-Z|_.)]/);
        this._suggestions = suggestions;
        const inputElem = index_1.input({ placeholder })
            .on({
            change: (ev) => {
                this.toggleSubmitButtonOnInput();
            }, input: (ev) => {
                this.toggleSubmitButtonOnInput();
            },
            keydown: (ev) => {
                if (ev.ctrlKey || ev.altKey || ev.key.length > 1) {
                    return;
                }
                if ([' ', ',', '-',].includes(ev.key)) {
                    ev.preventDefault();
                    this.input.value += '_';
                }
                else if (ev.key.match(illegal)) {
                    ev.preventDefault();
                }
            },
        });
        const submit = index_1.button({ cls: 'inactive' });
        this.cacheAppend({ input: inputElem, submit });
        new Suggestions(inputElem.e, suggestions, {
            limit: 2,
            minLength: 0,
        });
    }
    toggleSubmitButtonOnInput() {
        const inputOk = !!this.input.value;
        this.submit
            .toggleClass('active', inputOk)
            .toggleClass('inactive', !inputOk);
        if (inputOk) {
            this.input.removeClass('invalid');
        }
    }
}
class InputSection extends index_1.Div {
    constructor(options) {
        super({ cls: 'input-section' });
        const { h3text, placeholder, suggestions, illegalRegex } = options;
        const flex = new InputAndSubmitFlex({
            placeholder,
            suggestions,
            illegalRegex
        });
        const subtitle = index_1.elem({ tag: 'h3', text: h3text });
        this.cacheAppend({ subtitle, flex });
    }
}
exports.InputSection = InputSection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleHRyYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUF1RTtBQUV2RSwyQ0FBMEM7QUFRMUMsTUFBTSxrQkFBbUIsU0FBUSxXQUFHO0lBS2hDLFlBQVksT0FBa0M7UUFDMUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLHVCQUF1QixFQUFFLENBQUMsQ0FBQztRQUN6QyxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFM0QsTUFBTSxPQUFPLElBQUcsWUFBWSxhQUFaLFlBQVksY0FBWixZQUFZLEdBQUksbUJBQW1CLENBQUEsQ0FBQztRQUNwRCxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUNoQyxNQUFNLFNBQVMsR0FBRyxhQUFLLENBQUMsRUFBRSxXQUFXLEVBQUUsQ0FBQzthQUNuQyxFQUFFLENBQUM7WUFDQSxNQUFNLEVBQUcsQ0FBQyxFQUFTLEVBQUUsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7WUFDckMsQ0FBQyxFQUFFLEtBQUssRUFBRyxDQUFDLEVBQWMsRUFBRSxFQUFFO2dCQUMxQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztZQUNyQyxDQUFDO1lBQ0QsT0FBTyxFQUFHLENBQUMsRUFBaUIsRUFBRSxFQUFFO2dCQUM1QixJQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUc7b0JBQ2hELE9BQU87aUJBQ1Y7Z0JBRUQsSUFBSyxDQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRztvQkFDdkMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUM7aUJBQzNCO3FCQUFNLElBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUc7b0JBQ2hDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztpQkFFdkI7WUFFTCxDQUFDO1NBRUosQ0FBQyxDQUFDO1FBQ1AsTUFBTSxNQUFNLEdBQUcsY0FBTSxDQUFDLEVBQUUsR0FBRyxFQUFHLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFFNUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUM5QyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRTtZQUN0QyxLQUFLLEVBQUcsQ0FBQztZQUNULFNBQVMsRUFBRyxDQUFDO1NBQ2hCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCx5QkFBeUI7UUFDckIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ25DLElBQUksQ0FBQyxNQUFNO2FBQ04sV0FBVyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUM7YUFDOUIsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLElBQUssT0FBTyxFQUFHO1lBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUE7U0FDcEM7SUFLTCxDQUFDO0NBQ0o7QUFTRCxNQUFhLFlBQWEsU0FBUSxXQUFHO0lBR2pDLFlBQVksT0FBNEI7UUFDcEMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDakMsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNuRSxNQUFNLElBQUksR0FBRyxJQUFJLGtCQUFrQixDQUFDO1lBQ2hDLFdBQVc7WUFDWCxXQUFXO1lBQ1gsWUFBWTtTQUNmLENBQUMsQ0FBQztRQUNILE1BQU0sUUFBUSxHQUFHLFlBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRyxJQUFJLEVBQUUsSUFBSSxFQUFHLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Q0FDSjtBQWRELG9DQWNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnV0dG9uLCBidXR0b24sIGRpdiwgRGl2LCBlbGVtLCBJbnB1dCwgaW5wdXQgfSBmcm9tIFwiLi9pbmRleFwiO1xuXG5pbXBvcnQgKiBhcyBTdWdnZXN0aW9ucyBmcm9tICdzdWdnZXN0aW9ucydcblxuaW50ZXJmYWNlIElucHV0QW5kU3VibWl0RmxleE9wdGlvbnMge1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmcsXG4gICAgc3VnZ2VzdGlvbnM6IHN0cmluZ1tdLFxuICAgIGlsbGVnYWxSZWdleD86IFJlZ0V4cFxufVxuXG5jbGFzcyBJbnB1dEFuZFN1Ym1pdEZsZXggZXh0ZW5kcyBEaXYge1xuICAgIHN1Ym1pdDogQnV0dG9uO1xuICAgIGlucHV0OiBJbnB1dDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zdWdnZXN0aW9uczogc3RyaW5nW107XG4gICAgXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogSW5wdXRBbmRTdWJtaXRGbGV4T3B0aW9ucykge1xuICAgICAgICBzdXBlcih7IGNscyA6ICdpbnB1dC1hbmQtc3VibWl0LWZsZXgnIH0pO1xuICAgICAgICBjb25zdCB7IHBsYWNlaG9sZGVyLCBzdWdnZXN0aW9ucywgaWxsZWdhbFJlZ2V4IH0gPSBvcHRpb25zO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaWxsZWdhbCA9IGlsbGVnYWxSZWdleCA/PyAvW14oYS16MC05QS1afF8uKV0vO1xuICAgICAgICB0aGlzLl9zdWdnZXN0aW9ucyA9IHN1Z2dlc3Rpb25zO1xuICAgICAgICBjb25zdCBpbnB1dEVsZW0gPSBpbnB1dCh7IHBsYWNlaG9sZGVyIH0pXG4gICAgICAgICAgICAub24oe1xuICAgICAgICAgICAgICAgIGNoYW5nZSA6IChldjogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVTdWJtaXRCdXR0b25PbklucHV0KCk7XG4gICAgICAgICAgICAgICAgfSwgaW5wdXQgOiAoZXY6IElucHV0RXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVTdWJtaXRCdXR0b25PbklucHV0KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBrZXlkb3duIDogKGV2OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggZXYuY3RybEtleSB8fCBldi5hbHRLZXkgfHwgZXYua2V5Lmxlbmd0aCA+IDEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggWyAnICcsICcsJywgJy0nLCBdLmluY2x1ZGVzKGV2LmtleSkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC52YWx1ZSArPSAnXyc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGV2LmtleS5tYXRjaChpbGxlZ2FsKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN1Ym1pdCA9IGJ1dHRvbih7IGNscyA6ICdpbmFjdGl2ZScgfSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNhY2hlQXBwZW5kKHsgaW5wdXQ6aW5wdXRFbGVtLCBzdWJtaXQgfSk7XG4gICAgICAgIG5ldyBTdWdnZXN0aW9ucyhpbnB1dEVsZW0uZSwgc3VnZ2VzdGlvbnMsIHtcbiAgICAgICAgICAgIGxpbWl0IDogMixcbiAgICAgICAgICAgIG1pbkxlbmd0aCA6IDAsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICB0b2dnbGVTdWJtaXRCdXR0b25PbklucHV0KCkge1xuICAgICAgICBjb25zdCBpbnB1dE9rID0gISF0aGlzLmlucHV0LnZhbHVlO1xuICAgICAgICB0aGlzLnN1Ym1pdFxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCdhY3RpdmUnLCBpbnB1dE9rKVxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCdpbmFjdGl2ZScsICFpbnB1dE9rKTtcbiAgICAgICAgaWYgKCBpbnB1dE9rICkge1xuICAgICAgICAgICAgdGhpcy5pbnB1dC5yZW1vdmVDbGFzcygnaW52YWxpZCcpXG4gICAgICAgIH1cbiAgICAgICAgLyppZiAoIHRoaXMuX292ZXJ3cml0ZVdhcm4gJiYgaW5wdXRPayApIHtcbiAgICAgICAgIHRoaXMuc3VibWl0LnRvZ2dsZUNsYXNzKCd3YXJuJywgdGhpcy5fc3VnZ2VzdGlvbnMubG93ZXJBbGwoKS5pbmNsdWRlcyh0aGlzLmlucHV0RWxlbS52YWx1ZS5sb3dlcigpKSk7XG4gICAgICAgICB9Ki9cbiAgICAgICAgXG4gICAgfVxufVxuXG5pbnRlcmZhY2UgSW5wdXRTZWN0aW9uT3B0aW9ucyB7XG4gICAgaDN0ZXh0OiBzdHJpbmcsXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZyxcbiAgICBzdWdnZXN0aW9uczogc3RyaW5nW10sXG4gICAgaWxsZWdhbFJlZ2V4PzogUmVnRXhwXG59XG5cbmV4cG9ydCBjbGFzcyBJbnB1dFNlY3Rpb24gZXh0ZW5kcyBEaXYge1xuICAgIGZsZXg6IElucHV0QW5kU3VibWl0RmxleDtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJbnB1dFNlY3Rpb25PcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHsgY2xzIDogJ2lucHV0LXNlY3Rpb24nIH0pO1xuICAgICAgICBjb25zdCB7IGgzdGV4dCwgcGxhY2Vob2xkZXIsIHN1Z2dlc3Rpb25zLCBpbGxlZ2FsUmVnZXggfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZsZXggPSBuZXcgSW5wdXRBbmRTdWJtaXRGbGV4KHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgc3VnZ2VzdGlvbnMsXG4gICAgICAgICAgICBpbGxlZ2FsUmVnZXhcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN1YnRpdGxlID0gZWxlbSh7IHRhZyA6ICdoMycsIHRleHQgOiBoM3RleHQgfSk7XG4gICAgICAgIHRoaXMuY2FjaGVBcHBlbmQoeyBzdWJ0aXRsZSwgZmxleCB9KTtcbiAgICB9XG59XG4iXX0=