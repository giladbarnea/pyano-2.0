"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const Suggestions = require("suggestions");
class InputAndSubmitFlex extends index_1.Div {
    constructor(options) {
        super({ cls: 'input-and-submit-flex' });
        const { placeholder, suggestions, overwriteWarn } = options;
        const illegal = /[^(a-z0-9A-Z|_.)]/;
        this._overwriteWarn = overwriteWarn;
        this._suggestions = suggestions;
        const inputElem = index_1.input({ placeholder })
            .on({
            change: (ev) => {
                this.toggleSubmitButtonOnInput();
            }, input: (ev) => {
                this.toggleSubmitButtonOnInput();
            },
            keydown: (ev) => {
                if (ev.ctrlKey || ev.altKey || ev.key.length > 1) {
                    return;
                }
                if ([' ', ',', '-',].includes(ev.key)) {
                    ev.preventDefault();
                    this.inputElem.value += '_';
                }
                else if (ev.key.match(illegal)) {
                    ev.preventDefault();
                }
            },
        });
        const submitButton = index_1.button({ cls: 'inactive' });
        this.cacheAppend({ inputElem, submitButton });
        new Suggestions(inputElem.e, suggestions, {
            limit: 2,
            minLength: 1,
        });
    }
    toggleSubmitButtonOnInput() {
        const inputOk = !!this.inputElem.value;
        this.submitButton
            .toggleClass('active', inputOk)
            .toggleClass('inactive', !inputOk);
        if (inputOk) {
            this.inputElem.removeClass('invalid');
        }
        if (this._overwriteWarn && inputOk) {
            this.submitButton.toggleClass('warn', this._suggestions.lowerAll().includes(this.inputElem.value.lower()));
        }
    }
}
class InputSection extends index_1.Div {
    constructor(options) {
        super({ cls: 'input-section' });
        const { h3text, placeholder, suggestions, overwriteWarn } = options;
        const inputAndSubmitFlex = new InputAndSubmitFlex({
            placeholder,
            suggestions,
            overwriteWarn: (overwriteWarn !== null && overwriteWarn !== void 0 ? overwriteWarn : false)
        });
        const subtitle = index_1.elem({ tag: 'h3', text: h3text });
        this.cacheAppend({ subtitle, inputAndSubmitFlex });
    }
}
exports.InputSection = InputSection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleHRyYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUF1RTtBQUV2RSwyQ0FBMEM7QUFRMUMsTUFBTSxrQkFBbUIsU0FBUSxXQUFHO0lBTWhDLFlBQVksT0FBa0M7UUFDMUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLHVCQUF1QixFQUFFLENBQUMsQ0FBQztRQUN6QyxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDNUQsTUFBTSxPQUFPLEdBQUcsbUJBQW1CLENBQUM7UUFDcEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7UUFDcEMsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7UUFDaEMsTUFBTSxTQUFTLEdBQUcsYUFBSyxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUM7YUFDbkMsRUFBRSxDQUFDO1lBQ0EsTUFBTSxFQUFHLENBQUMsRUFBUyxFQUFFLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1lBQ3JDLENBQUMsRUFBRSxLQUFLLEVBQUcsQ0FBQyxFQUFjLEVBQUUsRUFBRTtnQkFDMUIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7WUFDckMsQ0FBQztZQUNELE9BQU8sRUFBRyxDQUFDLEVBQWlCLEVBQUUsRUFBRTtnQkFDNUIsSUFBSyxFQUFFLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFHO29CQUNoRCxPQUFPO2lCQUNWO2dCQUVELElBQUssQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUc7b0JBQ3ZDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDO2lCQUMvQjtxQkFBTSxJQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFHO29CQUNoQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7aUJBRXZCO1lBRUwsQ0FBQztTQUVKLENBQUMsQ0FBQztRQUNQLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUM5QyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRTtZQUN0QyxLQUFLLEVBQUcsQ0FBQztZQUNULFNBQVMsRUFBRyxDQUFDO1NBQ2hCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCx5QkFBeUI7UUFDckIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZO2FBQ1osV0FBVyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUM7YUFDOUIsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLElBQUssT0FBTyxFQUFHO1lBQ1gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUE7U0FDeEM7UUFDRCxJQUFLLElBQUksQ0FBQyxjQUFjLElBQUksT0FBTyxFQUFHO1lBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDOUc7SUFFTCxDQUFDO0NBQ0o7QUFTRCxNQUFhLFlBQWEsU0FBUSxXQUFHO0lBR2pDLFlBQVksT0FBNEI7UUFDcEMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDakMsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNwRSxNQUFNLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLENBQUM7WUFDOUMsV0FBVztZQUNYLFdBQVc7WUFDWCxhQUFhLEdBQUcsYUFBYSxhQUFiLGFBQWEsY0FBYixhQUFhLEdBQUksS0FBSyxDQUFBO1NBQ3pDLENBQUMsQ0FBQztRQUNILE1BQU0sUUFBUSxHQUFHLFlBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRyxJQUFJLEVBQUUsSUFBSSxFQUFHLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNKO0FBZEQsb0NBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdXR0b24sIGJ1dHRvbiwgZGl2LCBEaXYsIGVsZW0sIElucHV0LCBpbnB1dCB9IGZyb20gXCIuL2luZGV4XCI7XG5cbmltcG9ydCAqIGFzIFN1Z2dlc3Rpb25zIGZyb20gJ3N1Z2dlc3Rpb25zJ1xuXG5pbnRlcmZhY2UgSW5wdXRBbmRTdWJtaXRGbGV4T3B0aW9ucyB7XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZyxcbiAgICBzdWdnZXN0aW9uczogc3RyaW5nW10sXG4gICAgb3ZlcndyaXRlV2Fybj86IGJvb2xlYW5cbn1cblxuY2xhc3MgSW5wdXRBbmRTdWJtaXRGbGV4IGV4dGVuZHMgRGl2IHtcbiAgICBzdWJtaXRCdXR0b246IEJ1dHRvbjtcbiAgICBpbnB1dEVsZW06IElucHV0O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX292ZXJ3cml0ZVdhcm46IGJvb2xlYW47XG4gICAgcHJpdmF0ZSByZWFkb25seSBfc3VnZ2VzdGlvbnM6IHN0cmluZ1tdO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IElucHV0QW5kU3VibWl0RmxleE9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoeyBjbHMgOiAnaW5wdXQtYW5kLXN1Ym1pdC1mbGV4JyB9KTtcbiAgICAgICAgY29uc3QgeyBwbGFjZWhvbGRlciwgc3VnZ2VzdGlvbnMsIG92ZXJ3cml0ZVdhcm4gfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGlsbGVnYWwgPSAvW14oYS16MC05QS1afF8uKV0vO1xuICAgICAgICB0aGlzLl9vdmVyd3JpdGVXYXJuID0gb3ZlcndyaXRlV2FybjtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9ucztcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtID0gaW5wdXQoeyBwbGFjZWhvbGRlciB9KVxuICAgICAgICAgICAgLm9uKHtcbiAgICAgICAgICAgICAgICBjaGFuZ2UgOiAoZXY6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpO1xuICAgICAgICAgICAgICAgIH0sIGlucHV0IDogKGV2OiBJbnB1dEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAga2V5ZG93biA6IChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGV2LmN0cmxLZXkgfHwgZXYuYWx0S2V5IHx8IGV2LmtleS5sZW5ndGggPiAxICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIFsgJyAnLCAnLCcsICctJywgXS5pbmNsdWRlcyhldi5rZXkpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFbGVtLnZhbHVlICs9ICdfJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggZXYua2V5Lm1hdGNoKGlsbGVnYWwpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gYnV0dG9uKHsgY2xzIDogJ2luYWN0aXZlJyB9KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2FjaGVBcHBlbmQoeyBpbnB1dEVsZW0sIHN1Ym1pdEJ1dHRvbiB9KTtcbiAgICAgICAgbmV3IFN1Z2dlc3Rpb25zKGlucHV0RWxlbS5lLCBzdWdnZXN0aW9ucywge1xuICAgICAgICAgICAgbGltaXQgOiAyLFxuICAgICAgICAgICAgbWluTGVuZ3RoIDogMSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHRvZ2dsZVN1Ym1pdEJ1dHRvbk9uSW5wdXQoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0T2sgPSAhIXRoaXMuaW5wdXRFbGVtLnZhbHVlO1xuICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvblxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCdhY3RpdmUnLCBpbnB1dE9rKVxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCdpbmFjdGl2ZScsICFpbnB1dE9rKTtcbiAgICAgICAgaWYgKCBpbnB1dE9rICkge1xuICAgICAgICAgICAgdGhpcy5pbnB1dEVsZW0ucmVtb3ZlQ2xhc3MoJ2ludmFsaWQnKVxuICAgICAgICB9XG4gICAgICAgIGlmICggdGhpcy5fb3ZlcndyaXRlV2FybiAmJiBpbnB1dE9rICkge1xuICAgICAgICAgICAgdGhpcy5zdWJtaXRCdXR0b24udG9nZ2xlQ2xhc3MoJ3dhcm4nLCB0aGlzLl9zdWdnZXN0aW9ucy5sb3dlckFsbCgpLmluY2x1ZGVzKHRoaXMuaW5wdXRFbGVtLnZhbHVlLmxvd2VyKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG59XG5cbmludGVyZmFjZSBJbnB1dFNlY3Rpb25PcHRpb25zIHtcbiAgICBoM3RleHQ6IHN0cmluZyxcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nLFxuICAgIHN1Z2dlc3Rpb25zOiBzdHJpbmdbXSxcbiAgICBvdmVyd3JpdGVXYXJuPzogYm9vbGVhblxufVxuXG5leHBvcnQgY2xhc3MgSW5wdXRTZWN0aW9uIGV4dGVuZHMgRGl2IHtcbiAgICBpbnB1dEFuZFN1Ym1pdEZsZXg6IElucHV0QW5kU3VibWl0RmxleDtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJbnB1dFNlY3Rpb25PcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHsgY2xzIDogJ2lucHV0LXNlY3Rpb24nIH0pO1xuICAgICAgICBjb25zdCB7IGgzdGV4dCwgcGxhY2Vob2xkZXIsIHN1Z2dlc3Rpb25zLCBvdmVyd3JpdGVXYXJuIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBpbnB1dEFuZFN1Ym1pdEZsZXggPSBuZXcgSW5wdXRBbmRTdWJtaXRGbGV4KHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgc3VnZ2VzdGlvbnMsXG4gICAgICAgICAgICBvdmVyd3JpdGVXYXJuIDogb3ZlcndyaXRlV2FybiA/PyBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3VidGl0bGUgPSBlbGVtKHsgdGFnIDogJ2gzJywgdGV4dCA6IGgzdGV4dCB9KTtcbiAgICAgICAgdGhpcy5jYWNoZUFwcGVuZCh7IHN1YnRpdGxlLCBpbnB1dEFuZFN1Ym1pdEZsZXggfSk7XG4gICAgfVxufVxuIl19