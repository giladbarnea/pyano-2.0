"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const Suggestions = require("suggestions");
class InputAndSubmitFlex extends index_1.Div {
    constructor(options) {
        super({ cls: 'input-and-submit-flex' });
        const { placeholder, suggestions, overwriteWarn } = options;
        const uppercase = /[A-Z]/;
        const illegal = /[^(a-z0-9|_)]/;
        this._overwriteWarn = overwriteWarn;
        this._suggestions = suggestions;
        const inputElem = index_1.input({ placeholder })
            .on({
            change: (ev) => {
                this.toggleSubmitButtonOnInput();
            }, input: (ev) => {
                this.toggleSubmitButtonOnInput();
            },
            keydown: (ev) => {
                if (ev.ctrlKey || ev.altKey || ev.key.length > 1) {
                    return;
                }
                if (ev.key.match(uppercase)) {
                    ev.preventDefault();
                    this.inputElem.e.value += ev.key.toLowerCase();
                }
                else if ([' ', ',', '-',].includes(ev.key)) {
                    ev.preventDefault();
                    this.inputElem.e.value += '_';
                }
                else if (ev.key.match(illegal)) {
                    ev.preventDefault();
                }
            },
        });
        const submitButton = index_1.button({ cls: 'inactive' });
        this.cacheAppend({ inputElem, submitButton });
        new Suggestions(inputElem.e, suggestions, {
            limit: 2,
            minLength: 1,
        });
    }
    toggleSubmitButtonOnInput() {
        const inputOk = !!this.inputElem.e.value;
        this.submitButton
            .toggleClass('active', inputOk)
            .toggleClass('inactive', !inputOk);
        if (this._overwriteWarn && inputOk) {
            this.submitButton.toggleClass('warn', this._suggestions.includes(this.inputElem.e.value));
        }
    }
}
class InputSection extends index_1.Div {
    constructor(options) {
        super({ cls: 'input-section' });
        const { h3text, placeholder, suggestions, overwriteWarn } = options;
        const inputAndSubmitFlex = new InputAndSubmitFlex({
            placeholder,
            suggestions,
            overwriteWarn: (overwriteWarn !== null && overwriteWarn !== void 0 ? overwriteWarn : false)
        });
        const subtitle = index_1.elem({ tag: 'h3', text: h3text });
        this.cacheAppend({ subtitle, inputAndSubmitFlex });
    }
}
exports.InputSection = InputSection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleHRyYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUF1RTtBQUV2RSwyQ0FBMEM7QUFRMUMsTUFBTSxrQkFBbUIsU0FBUSxXQUFHO0lBTWhDLFlBQVksT0FBa0M7UUFDMUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLHVCQUF1QixFQUFFLENBQUMsQ0FBQztRQUN6QyxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDNUQsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDO1FBQzFCLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQztRQUNoQyxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNwQyxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUNoQyxNQUFNLFNBQVMsR0FBRyxhQUFLLENBQUMsRUFBRSxXQUFXLEVBQUUsQ0FBQzthQUNuQyxFQUFFLENBQUM7WUFDQSxNQUFNLEVBQUcsQ0FBQyxFQUFTLEVBQUUsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7WUFDckMsQ0FBQyxFQUFFLEtBQUssRUFBRyxDQUFDLEVBQWMsRUFBRSxFQUFFO2dCQUMxQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztZQUNyQyxDQUFDO1lBQ0QsT0FBTyxFQUFHLENBQUMsRUFBaUIsRUFBRSxFQUFFO2dCQUM1QixJQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUc7b0JBQ2hELE9BQU87aUJBQ1Y7Z0JBQ0QsSUFBSyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRztvQkFDM0IsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDbEQ7cUJBQU0sSUFBSyxDQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRztvQkFDOUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDO2lCQUNqQztxQkFBTSxJQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFHO29CQUNoQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7aUJBRXZCO1lBRUwsQ0FBQztTQUVKLENBQUMsQ0FBQztRQUNQLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUM5QyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRTtZQUN0QyxLQUFLLEVBQUcsQ0FBQztZQUNULFNBQVMsRUFBRyxDQUFDO1NBQ2hCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCx5QkFBeUI7UUFDckIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUN6QyxJQUFJLENBQUMsWUFBWTthQUNaLFdBQVcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDO2FBQzlCLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2QyxJQUFLLElBQUksQ0FBQyxjQUFjLElBQUksT0FBTyxFQUFHO1lBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzdGO0lBRUwsQ0FBQztDQUNKO0FBU0QsTUFBYSxZQUFhLFNBQVEsV0FBRztJQUdqQyxZQUFZLE9BQTRCO1FBQ3BDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDcEUsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixDQUFDO1lBQzlDLFdBQVc7WUFDWCxXQUFXO1lBQ1gsYUFBYSxHQUFHLGFBQWEsYUFBYixhQUFhLGNBQWIsYUFBYSxHQUFJLEtBQUssQ0FBQTtTQUN6QyxDQUFDLENBQUM7UUFDSCxNQUFNLFFBQVEsR0FBRyxZQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsSUFBSSxFQUFFLElBQUksRUFBRyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDSjtBQWRELG9DQWNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnV0dG9uLCBidXR0b24sIGRpdiwgRGl2LCBlbGVtLCBJbnB1dCwgaW5wdXQgfSBmcm9tIFwiLi9pbmRleFwiO1xuXG5pbXBvcnQgKiBhcyBTdWdnZXN0aW9ucyBmcm9tICdzdWdnZXN0aW9ucydcblxuaW50ZXJmYWNlIElucHV0QW5kU3VibWl0RmxleE9wdGlvbnMge1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmcsXG4gICAgc3VnZ2VzdGlvbnM6IHN0cmluZ1tdLFxuICAgIG92ZXJ3cml0ZVdhcm4/OiBib29sZWFuXG59XG5cbmNsYXNzIElucHV0QW5kU3VibWl0RmxleCBleHRlbmRzIERpdiB7XG4gICAgc3VibWl0QnV0dG9uOiBCdXR0b247XG4gICAgaW5wdXRFbGVtOiBJbnB1dDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9vdmVyd3JpdGVXYXJuOiBib29sZWFuO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3N1Z2dlc3Rpb25zOiBzdHJpbmdbXTtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJbnB1dEFuZFN1Ym1pdEZsZXhPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHsgY2xzIDogJ2lucHV0LWFuZC1zdWJtaXQtZmxleCcgfSk7XG4gICAgICAgIGNvbnN0IHsgcGxhY2Vob2xkZXIsIHN1Z2dlc3Rpb25zLCBvdmVyd3JpdGVXYXJuIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB1cHBlcmNhc2UgPSAvW0EtWl0vO1xuICAgICAgICBjb25zdCBpbGxlZ2FsID0gL1teKGEtejAtOXxfKV0vO1xuICAgICAgICB0aGlzLl9vdmVyd3JpdGVXYXJuID0gb3ZlcndyaXRlV2FybjtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9ucztcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtID0gaW5wdXQoeyBwbGFjZWhvbGRlciB9KVxuICAgICAgICAgICAgLm9uKHtcbiAgICAgICAgICAgICAgICBjaGFuZ2UgOiAoZXY6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpO1xuICAgICAgICAgICAgICAgIH0sIGlucHV0IDogKGV2OiBJbnB1dEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAga2V5ZG93biA6IChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGV2LmN0cmxLZXkgfHwgZXYuYWx0S2V5IHx8IGV2LmtleS5sZW5ndGggPiAxICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICggZXYua2V5Lm1hdGNoKHVwcGVyY2FzZSkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dEVsZW0uZS52YWx1ZSArPSBldi5rZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggWyAnICcsICcsJywgJy0nLCBdLmluY2x1ZGVzKGV2LmtleSkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dEVsZW0uZS52YWx1ZSArPSAnXyc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGV2LmtleS5tYXRjaChpbGxlZ2FsKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGJ1dHRvbih7IGNscyA6ICdpbmFjdGl2ZScgfSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNhY2hlQXBwZW5kKHsgaW5wdXRFbGVtLCBzdWJtaXRCdXR0b24gfSk7XG4gICAgICAgIG5ldyBTdWdnZXN0aW9ucyhpbnB1dEVsZW0uZSwgc3VnZ2VzdGlvbnMsIHtcbiAgICAgICAgICAgIGxpbWl0IDogMixcbiAgICAgICAgICAgIG1pbkxlbmd0aCA6IDEsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICB0b2dnbGVTdWJtaXRCdXR0b25PbklucHV0KCkge1xuICAgICAgICBjb25zdCBpbnB1dE9rID0gISF0aGlzLmlucHV0RWxlbS5lLnZhbHVlO1xuICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvblxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCdhY3RpdmUnLCBpbnB1dE9rKVxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCdpbmFjdGl2ZScsICFpbnB1dE9rKTtcbiAgICAgICAgaWYgKCB0aGlzLl9vdmVyd3JpdGVXYXJuICYmIGlucHV0T2sgKSB7XG4gICAgICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvbi50b2dnbGVDbGFzcygnd2FybicsIHRoaXMuX3N1Z2dlc3Rpb25zLmluY2x1ZGVzKHRoaXMuaW5wdXRFbGVtLmUudmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG59XG5cbmludGVyZmFjZSBJbnB1dFNlY3Rpb25PcHRpb25zIHtcbiAgICBoM3RleHQ6IHN0cmluZyxcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nLFxuICAgIHN1Z2dlc3Rpb25zOiBzdHJpbmdbXSxcbiAgICBvdmVyd3JpdGVXYXJuPzogYm9vbGVhblxufVxuXG5leHBvcnQgY2xhc3MgSW5wdXRTZWN0aW9uIGV4dGVuZHMgRGl2IHtcbiAgICBpbnB1dEFuZFN1Ym1pdEZsZXg6IElucHV0QW5kU3VibWl0RmxleDtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJbnB1dFNlY3Rpb25PcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHsgY2xzIDogJ2lucHV0LXNlY3Rpb24nIH0pO1xuICAgICAgICBjb25zdCB7IGgzdGV4dCwgcGxhY2Vob2xkZXIsIHN1Z2dlc3Rpb25zLCBvdmVyd3JpdGVXYXJuIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBpbnB1dEFuZFN1Ym1pdEZsZXggPSBuZXcgSW5wdXRBbmRTdWJtaXRGbGV4KHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgc3VnZ2VzdGlvbnMsXG4gICAgICAgICAgICBvdmVyd3JpdGVXYXJuIDogb3ZlcndyaXRlV2FybiA/PyBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3VidGl0bGUgPSBlbGVtKHsgdGFnIDogJ2gzJywgdGV4dCA6IGgzdGV4dCB9KTtcbiAgICAgICAgdGhpcy5jYWNoZUFwcGVuZCh7IHN1YnRpdGxlLCBpbnB1dEFuZFN1Ym1pdEZsZXggfSk7XG4gICAgfVxufVxuIl19