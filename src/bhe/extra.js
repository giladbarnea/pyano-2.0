"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const Suggestions = require("suggestions");
class InputAndSubmitFlex extends index_1.Div {
    constructor(options) {
        super({ cls: 'input-and-submit-flex' });
        const { placeholder, suggestions, overwriteWarn } = options;
        const uppercase = /[A-Z]/;
        const illegal = /[^(a-z0-9|_.)]/;
        this._overwriteWarn = overwriteWarn;
        this._suggestions = suggestions;
        const inputElem = index_1.input({ placeholder })
            .on({
            change: (ev) => {
                this.toggleSubmitButtonOnInput();
            }, input: (ev) => {
                this.toggleSubmitButtonOnInput();
            },
            keydown: (ev) => {
                if (ev.ctrlKey || ev.altKey || ev.key.length > 1) {
                    return;
                }
                if (ev.key.match(uppercase)) {
                    ev.preventDefault();
                    this.inputElem.value += ev.key.toLowerCase();
                }
                else if ([' ', ',', '-',].includes(ev.key)) {
                    ev.preventDefault();
                    this.inputElem.value += '_';
                }
                else if (ev.key.match(illegal)) {
                    ev.preventDefault();
                }
            },
        });
        const submitButton = index_1.button({ cls: 'inactive' });
        this.cacheAppend({ inputElem, submitButton });
        new Suggestions(inputElem.e, suggestions, {
            limit: 2,
            minLength: 1,
        });
    }
    toggleSubmitButtonOnInput() {
        const inputOk = !!this.inputElem.value;
        this.submitButton
            .toggleClass('active', inputOk)
            .toggleClass('inactive', !inputOk);
        if (inputOk) {
            this.inputElem.removeClass('invalid');
        }
        if (this._overwriteWarn && inputOk) {
            this.submitButton.toggleClass('warn', this._suggestions.includes(this.inputElem.value));
        }
    }
}
class InputSection extends index_1.Div {
    constructor(options) {
        super({ cls: 'input-section' });
        const { h3text, placeholder, suggestions, overwriteWarn } = options;
        const inputAndSubmitFlex = new InputAndSubmitFlex({
            placeholder,
            suggestions,
            overwriteWarn: (overwriteWarn !== null && overwriteWarn !== void 0 ? overwriteWarn : false)
        });
        const subtitle = index_1.elem({ tag: 'h3', text: h3text });
        this.cacheAppend({ subtitle, inputAndSubmitFlex });
    }
}
exports.InputSection = InputSection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleHRyYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUF1RTtBQUV2RSwyQ0FBMEM7QUFRMUMsTUFBTSxrQkFBbUIsU0FBUSxXQUFHO0lBTWhDLFlBQVksT0FBa0M7UUFDMUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLHVCQUF1QixFQUFFLENBQUMsQ0FBQztRQUN6QyxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDNUQsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDO1FBQzFCLE1BQU0sT0FBTyxHQUFHLGdCQUFnQixDQUFDO1FBQ2pDLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO1FBQ2hDLE1BQU0sU0FBUyxHQUFHLGFBQUssQ0FBQyxFQUFFLFdBQVcsRUFBRSxDQUFDO2FBQ25DLEVBQUUsQ0FBQztZQUNBLE1BQU0sRUFBRyxDQUFDLEVBQVMsRUFBRSxFQUFFO2dCQUNuQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztZQUNyQyxDQUFDLEVBQUUsS0FBSyxFQUFHLENBQUMsRUFBYyxFQUFFLEVBQUU7Z0JBQzFCLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1lBQ3JDLENBQUM7WUFDRCxPQUFPLEVBQUcsQ0FBQyxFQUFpQixFQUFFLEVBQUU7Z0JBQzVCLElBQUssRUFBRSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRztvQkFDaEQsT0FBTztpQkFDVjtnQkFDRCxJQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFHO29CQUMzQixFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7b0JBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7aUJBQ2hEO3FCQUFNLElBQUssQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUc7b0JBQzlDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDO2lCQUMvQjtxQkFBTSxJQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFHO29CQUNoQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7aUJBRXZCO1lBRUwsQ0FBQztTQUVKLENBQUMsQ0FBQztRQUNQLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUM5QyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRTtZQUN0QyxLQUFLLEVBQUcsQ0FBQztZQUNULFNBQVMsRUFBRyxDQUFDO1NBQ2hCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCx5QkFBeUI7UUFDckIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZO2FBQ1osV0FBVyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUM7YUFDOUIsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLElBQUssT0FBTyxFQUFHO1lBQ1gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUE7U0FDeEM7UUFDRCxJQUFLLElBQUksQ0FBQyxjQUFjLElBQUksT0FBTyxFQUFHO1lBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDM0Y7SUFFTCxDQUFDO0NBQ0o7QUFTRCxNQUFhLFlBQWEsU0FBUSxXQUFHO0lBR2pDLFlBQVksT0FBNEI7UUFDcEMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDakMsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNwRSxNQUFNLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLENBQUM7WUFDOUMsV0FBVztZQUNYLFdBQVc7WUFDWCxhQUFhLEdBQUcsYUFBYSxhQUFiLGFBQWEsY0FBYixhQUFhLEdBQUksS0FBSyxDQUFBO1NBQ3pDLENBQUMsQ0FBQztRQUNILE1BQU0sUUFBUSxHQUFHLFlBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRyxJQUFJLEVBQUUsSUFBSSxFQUFHLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNKO0FBZEQsb0NBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdXR0b24sIGJ1dHRvbiwgZGl2LCBEaXYsIGVsZW0sIElucHV0LCBpbnB1dCB9IGZyb20gXCIuL2luZGV4XCI7XG5cbmltcG9ydCAqIGFzIFN1Z2dlc3Rpb25zIGZyb20gJ3N1Z2dlc3Rpb25zJ1xuXG5pbnRlcmZhY2UgSW5wdXRBbmRTdWJtaXRGbGV4T3B0aW9ucyB7XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZyxcbiAgICBzdWdnZXN0aW9uczogc3RyaW5nW10sXG4gICAgb3ZlcndyaXRlV2Fybj86IGJvb2xlYW5cbn1cblxuY2xhc3MgSW5wdXRBbmRTdWJtaXRGbGV4IGV4dGVuZHMgRGl2IHtcbiAgICBzdWJtaXRCdXR0b246IEJ1dHRvbjtcbiAgICBpbnB1dEVsZW06IElucHV0O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX292ZXJ3cml0ZVdhcm46IGJvb2xlYW47XG4gICAgcHJpdmF0ZSByZWFkb25seSBfc3VnZ2VzdGlvbnM6IHN0cmluZ1tdO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IElucHV0QW5kU3VibWl0RmxleE9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoeyBjbHMgOiAnaW5wdXQtYW5kLXN1Ym1pdC1mbGV4JyB9KTtcbiAgICAgICAgY29uc3QgeyBwbGFjZWhvbGRlciwgc3VnZ2VzdGlvbnMsIG92ZXJ3cml0ZVdhcm4gfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHVwcGVyY2FzZSA9IC9bQS1aXS87XG4gICAgICAgIGNvbnN0IGlsbGVnYWwgPSAvW14oYS16MC05fF8uKV0vO1xuICAgICAgICB0aGlzLl9vdmVyd3JpdGVXYXJuID0gb3ZlcndyaXRlV2FybjtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9ucztcbiAgICAgICAgY29uc3QgaW5wdXRFbGVtID0gaW5wdXQoeyBwbGFjZWhvbGRlciB9KVxuICAgICAgICAgICAgLm9uKHtcbiAgICAgICAgICAgICAgICBjaGFuZ2UgOiAoZXY6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpO1xuICAgICAgICAgICAgICAgIH0sIGlucHV0IDogKGV2OiBJbnB1dEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAga2V5ZG93biA6IChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGV2LmN0cmxLZXkgfHwgZXYuYWx0S2V5IHx8IGV2LmtleS5sZW5ndGggPiAxICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICggZXYua2V5Lm1hdGNoKHVwcGVyY2FzZSkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dEVsZW0udmFsdWUgKz0gZXYua2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIFsgJyAnLCAnLCcsICctJywgXS5pbmNsdWRlcyhldi5rZXkpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFbGVtLnZhbHVlICs9ICdfJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggZXYua2V5Lm1hdGNoKGlsbGVnYWwpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gYnV0dG9uKHsgY2xzIDogJ2luYWN0aXZlJyB9KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2FjaGVBcHBlbmQoeyBpbnB1dEVsZW0sIHN1Ym1pdEJ1dHRvbiB9KTtcbiAgICAgICAgbmV3IFN1Z2dlc3Rpb25zKGlucHV0RWxlbS5lLCBzdWdnZXN0aW9ucywge1xuICAgICAgICAgICAgbGltaXQgOiAyLFxuICAgICAgICAgICAgbWluTGVuZ3RoIDogMSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHRvZ2dsZVN1Ym1pdEJ1dHRvbk9uSW5wdXQoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0T2sgPSAhIXRoaXMuaW5wdXRFbGVtLnZhbHVlO1xuICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvblxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCdhY3RpdmUnLCBpbnB1dE9rKVxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCdpbmFjdGl2ZScsICFpbnB1dE9rKTtcbiAgICAgICAgaWYgKCBpbnB1dE9rICkge1xuICAgICAgICAgICAgdGhpcy5pbnB1dEVsZW0ucmVtb3ZlQ2xhc3MoJ2ludmFsaWQnKVxuICAgICAgICB9XG4gICAgICAgIGlmICggdGhpcy5fb3ZlcndyaXRlV2FybiAmJiBpbnB1dE9rICkge1xuICAgICAgICAgICAgdGhpcy5zdWJtaXRCdXR0b24udG9nZ2xlQ2xhc3MoJ3dhcm4nLCB0aGlzLl9zdWdnZXN0aW9ucy5pbmNsdWRlcyh0aGlzLmlucHV0RWxlbS52YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbn1cblxuaW50ZXJmYWNlIElucHV0U2VjdGlvbk9wdGlvbnMge1xuICAgIGgzdGV4dDogc3RyaW5nLFxuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmcsXG4gICAgc3VnZ2VzdGlvbnM6IHN0cmluZ1tdLFxuICAgIG92ZXJ3cml0ZVdhcm4/OiBib29sZWFuXG59XG5cbmV4cG9ydCBjbGFzcyBJbnB1dFNlY3Rpb24gZXh0ZW5kcyBEaXYge1xuICAgIGlucHV0QW5kU3VibWl0RmxleDogSW5wdXRBbmRTdWJtaXRGbGV4O1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IElucHV0U2VjdGlvbk9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoeyBjbHMgOiAnaW5wdXQtc2VjdGlvbicgfSk7XG4gICAgICAgIGNvbnN0IHsgaDN0ZXh0LCBwbGFjZWhvbGRlciwgc3VnZ2VzdGlvbnMsIG92ZXJ3cml0ZVdhcm4gfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGlucHV0QW5kU3VibWl0RmxleCA9IG5ldyBJbnB1dEFuZFN1Ym1pdEZsZXgoe1xuICAgICAgICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICAgICAgICBzdWdnZXN0aW9ucyxcbiAgICAgICAgICAgIG92ZXJ3cml0ZVdhcm4gOiBvdmVyd3JpdGVXYXJuID8/IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdWJ0aXRsZSA9IGVsZW0oeyB0YWcgOiAnaDMnLCB0ZXh0IDogaDN0ZXh0IH0pO1xuICAgICAgICB0aGlzLmNhY2hlQXBwZW5kKHsgc3VidGl0bGUsIGlucHV0QW5kU3VibWl0RmxleCB9KTtcbiAgICB9XG59XG4iXX0=