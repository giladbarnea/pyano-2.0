"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const Suggestions = require("suggestions");
class InputAndSubmitFlex extends index_1.Div {
    constructor(options) {
        super({ cls: 'input-and-submit-flex' });
        const { placeholder, suggestions, overwriteWarn } = options;
        const uppercase = /[A-Z]/;
        const illegal = /[^(a-z0-9|_)]/;
        this._overwriteWarn = overwriteWarn;
        this._suggestions = suggestions;
        const inputElem = index_1.input({ placeholder })
            .on({
            change: (ev) => {
                this.toggleSubmitButtonOnInput();
            }, input: (ev) => {
                this.toggleSubmitButtonOnInput();
            },
            keydown: (ev) => {
                if (ev.ctrlKey || ev.altKey || ev.key.length > 1) {
                    return;
                }
                if (ev.key.match(uppercase)) {
                    ev.preventDefault();
                    this.inputElem.e.value += ev.key.toLowerCase();
                }
                else if ([' ', ',', '-',].includes(ev.key)) {
                    ev.preventDefault();
                    this.inputElem.e.value += '_';
                }
                else if (ev.key.match(illegal)) {
                    ev.preventDefault();
                }
            },
        });
        const submitButton = index_1.button({ cls: 'inactive' });
        this.cacheAppend({ inputElem, submitButton });
        new Suggestions(inputElem.e, suggestions, {
            limit: 2,
            minLength: 1,
        });
    }
    toggleSubmitButtonOnInput() {
        this.submitButton
            .toggleClass('active', !!this.inputElem.e.value)
            .toggleClass('inactive', !this.inputElem.e.value);
        if (this._overwriteWarn) {
            this.submitButton.toggleClass('warn', this._suggestions.includes(this.inputElem.e.value));
        }
    }
}
class InputSection extends index_1.Div {
    constructor(options) {
        super({ cls: 'input-section' });
        const { h3text, placeholder, suggestions, overwriteWarn } = options;
        const inputAndSubmitFlex = new InputAndSubmitFlex({
            placeholder,
            suggestions,
            overwriteWarn: (overwriteWarn !== null && overwriteWarn !== void 0 ? overwriteWarn : true)
        });
        const subtitle = index_1.elem({ tag: 'h3', text: h3text });
        this.cacheAppend({ subtitle, inputAndSubmitFlex });
    }
}
exports.InputSection = InputSection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleHRyYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUF1RTtBQUV2RSwyQ0FBMEM7QUFRMUMsTUFBTSxrQkFBbUIsU0FBUSxXQUFHO0lBTWhDLFlBQVksT0FBa0M7UUFDMUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLHVCQUF1QixFQUFFLENBQUMsQ0FBQztRQUN6QyxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDNUQsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDO1FBQzFCLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQztRQUNoQyxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNwQyxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUNoQyxNQUFNLFNBQVMsR0FBRyxhQUFLLENBQUMsRUFBRSxXQUFXLEVBQUUsQ0FBQzthQUNuQyxFQUFFLENBQUM7WUFDQSxNQUFNLEVBQUcsQ0FBQyxFQUFTLEVBQUUsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7WUFDckMsQ0FBQyxFQUFFLEtBQUssRUFBRyxDQUFDLEVBQWMsRUFBRSxFQUFFO2dCQUMxQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztZQUNyQyxDQUFDO1lBQ0QsT0FBTyxFQUFHLENBQUMsRUFBaUIsRUFBRSxFQUFFO2dCQUM1QixJQUFLLEVBQUUsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUc7b0JBQ2hELE9BQU87aUJBQ1Y7Z0JBQ0QsSUFBSyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRztvQkFDM0IsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztpQkFDbEQ7cUJBQU0sSUFBSyxDQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRztvQkFDOUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDO2lCQUNqQztxQkFBTSxJQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFHO29CQUNoQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7aUJBRXZCO1lBRUwsQ0FBQztTQUVKLENBQUMsQ0FBQztRQUNQLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBRWxELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUM5QyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRTtZQUN0QyxLQUFLLEVBQUcsQ0FBQztZQUNULFNBQVMsRUFBRyxDQUFDO1NBQ2hCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCx5QkFBeUI7UUFDckIsSUFBSSxDQUFDLFlBQVk7YUFDWixXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7YUFDL0MsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RELElBQUssSUFBSSxDQUFDLGNBQWMsRUFBRztZQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQU01RjtJQU9MLENBQUM7Q0FDSjtBQVNELE1BQWEsWUFBYSxTQUFRLFdBQUc7SUFHakMsWUFBWSxPQUE0QjtRQUNwQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUcsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUNqQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQ3BFLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQztZQUM5QyxXQUFXO1lBQ1gsV0FBVztZQUNYLGFBQWEsR0FBRyxhQUFhLGFBQWIsYUFBYSxjQUFiLGFBQWEsR0FBSSxJQUFJLENBQUE7U0FDeEMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxRQUFRLEdBQUcsWUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFHLElBQUksRUFBRSxJQUFJLEVBQUcsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBQ0o7QUFkRCxvQ0FjQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1dHRvbiwgYnV0dG9uLCBkaXYsIERpdiwgZWxlbSwgSW5wdXQsIGlucHV0IH0gZnJvbSBcIi4vaW5kZXhcIjtcblxuaW1wb3J0ICogYXMgU3VnZ2VzdGlvbnMgZnJvbSAnc3VnZ2VzdGlvbnMnXG5cbmludGVyZmFjZSBJbnB1dEFuZFN1Ym1pdEZsZXhPcHRpb25zIHtcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nLFxuICAgIHN1Z2dlc3Rpb25zOiBzdHJpbmdbXSxcbiAgICBvdmVyd3JpdGVXYXJuPzogYm9vbGVhblxufVxuXG5jbGFzcyBJbnB1dEFuZFN1Ym1pdEZsZXggZXh0ZW5kcyBEaXYge1xuICAgIHN1Ym1pdEJ1dHRvbjogQnV0dG9uO1xuICAgIGlucHV0RWxlbTogSW5wdXQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfb3ZlcndyaXRlV2FybjogYm9vbGVhbjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zdWdnZXN0aW9uczogc3RyaW5nW107XG4gICAgXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogSW5wdXRBbmRTdWJtaXRGbGV4T3B0aW9ucykge1xuICAgICAgICBzdXBlcih7IGNscyA6ICdpbnB1dC1hbmQtc3VibWl0LWZsZXgnIH0pO1xuICAgICAgICBjb25zdCB7IHBsYWNlaG9sZGVyLCBzdWdnZXN0aW9ucywgb3ZlcndyaXRlV2FybiB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgdXBwZXJjYXNlID0gL1tBLVpdLztcbiAgICAgICAgY29uc3QgaWxsZWdhbCA9IC9bXihhLXowLTl8XyldLztcbiAgICAgICAgdGhpcy5fb3ZlcndyaXRlV2FybiA9IG92ZXJ3cml0ZVdhcm47XG4gICAgICAgIHRoaXMuX3N1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbnM7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbSA9IGlucHV0KHsgcGxhY2Vob2xkZXIgfSlcbiAgICAgICAgICAgIC5vbih7XG4gICAgICAgICAgICAgICAgY2hhbmdlIDogKGV2OiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVN1Ym1pdEJ1dHRvbk9uSW5wdXQoKTtcbiAgICAgICAgICAgICAgICB9LCBpbnB1dCA6IChldjogSW5wdXRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVN1Ym1pdEJ1dHRvbk9uSW5wdXQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGtleWRvd24gOiAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBldi5jdHJsS2V5IHx8IGV2LmFsdEtleSB8fCBldi5rZXkubGVuZ3RoID4gMSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIGV2LmtleS5tYXRjaCh1cHBlcmNhc2UpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFbGVtLmUudmFsdWUgKz0gZXYua2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIFsgJyAnLCAnLCcsICctJywgXS5pbmNsdWRlcyhldi5rZXkpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFbGVtLmUudmFsdWUgKz0gJ18nO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBldi5rZXkubWF0Y2goaWxsZWdhbCkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBidXR0b24oeyBjbHMgOiAnaW5hY3RpdmUnIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jYWNoZUFwcGVuZCh7IGlucHV0RWxlbSwgc3VibWl0QnV0dG9uIH0pO1xuICAgICAgICBuZXcgU3VnZ2VzdGlvbnMoaW5wdXRFbGVtLmUsIHN1Z2dlc3Rpb25zLCB7XG4gICAgICAgICAgICBsaW1pdCA6IDIsXG4gICAgICAgICAgICBtaW5MZW5ndGggOiAxLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgdG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpIHtcbiAgICAgICAgdGhpcy5zdWJtaXRCdXR0b25cbiAgICAgICAgICAgIC50b2dnbGVDbGFzcygnYWN0aXZlJywgISF0aGlzLmlucHV0RWxlbS5lLnZhbHVlKVxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCdpbmFjdGl2ZScsICF0aGlzLmlucHV0RWxlbS5lLnZhbHVlKTtcbiAgICAgICAgaWYgKCB0aGlzLl9vdmVyd3JpdGVXYXJuICkge1xuICAgICAgICAgICAgdGhpcy5zdWJtaXRCdXR0b24udG9nZ2xlQ2xhc3MoJ3dhcm4nLHRoaXMuX3N1Z2dlc3Rpb25zLmluY2x1ZGVzKHRoaXMuaW5wdXRFbGVtLmUudmFsdWUpKTtcbiAgICAgICAgICAgIC8qaWYgKCB0aGlzLl9zdWdnZXN0aW9ucy5pbmNsdWRlcyh0aGlzLmlucHV0RWxlbS5lLnZhbHVlKSApIHtcbiAgICAgICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvbi5hZGRDbGFzcygnd2FybicpXG4gICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvbi5yZW1vdmVDbGFzcygnd2FybicpXG4gICAgICAgICAgICAgfSovXG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgKCB0aGlzLmlucHV0RWxlbS5lLnZhbHVlICkge1xuICAgICAgICAvLyAgICAgdGhpcy5zdWJtaXRCdXR0b24ucmVwbGFjZUNsYXNzKCdpbmFjdGl2ZScsICdhY3RpdmUnKVxuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgdGhpcy5zdWJtaXRCdXR0b24ucmVwbGFjZUNsYXNzKCdhY3RpdmUnLCAnaW5hY3RpdmUnKVxuICAgICAgICAvL1xuICAgICAgICAvLyB9XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgSW5wdXRTZWN0aW9uT3B0aW9ucyB7XG4gICAgaDN0ZXh0OiBzdHJpbmcsXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZyxcbiAgICBzdWdnZXN0aW9uczogc3RyaW5nW10sXG4gICAgb3ZlcndyaXRlV2Fybj86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIElucHV0U2VjdGlvbiBleHRlbmRzIERpdiB7XG4gICAgaW5wdXRBbmRTdWJtaXRGbGV4OiBJbnB1dEFuZFN1Ym1pdEZsZXg7XG4gICAgXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogSW5wdXRTZWN0aW9uT3B0aW9ucykge1xuICAgICAgICBzdXBlcih7IGNscyA6ICdpbnB1dC1zZWN0aW9uJyB9KTtcbiAgICAgICAgY29uc3QgeyBoM3RleHQsIHBsYWNlaG9sZGVyLCBzdWdnZXN0aW9ucywgb3ZlcndyaXRlV2FybiB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgaW5wdXRBbmRTdWJtaXRGbGV4ID0gbmV3IElucHV0QW5kU3VibWl0RmxleCh7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcixcbiAgICAgICAgICAgIHN1Z2dlc3Rpb25zLFxuICAgICAgICAgICAgb3ZlcndyaXRlV2FybiA6IG92ZXJ3cml0ZVdhcm4gPz8gdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3VidGl0bGUgPSBlbGVtKHsgdGFnIDogJ2gzJywgdGV4dCA6IGgzdGV4dCB9KTtcbiAgICAgICAgdGhpcy5jYWNoZUFwcGVuZCh7IHN1YnRpdGxlLCBpbnB1dEFuZFN1Ym1pdEZsZXggfSk7XG4gICAgfVxufVxuIl19