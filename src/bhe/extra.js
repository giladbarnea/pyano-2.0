"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
class InputAndSubmitFlex extends index_1.Div {
    constructor({ placeholder }) {
        super({ cls: 'input-and-submit-flex' });
        const uppercase = /[A-Z]/;
        const illegal = /[^(a-z0-9|_)]/;
        const inputElem = index_1.input({ placeholder })
            .on({
            change: (ev) => {
                this.toggleSubmitButtonOnInput();
            }, input: (ev) => {
                this.toggleSubmitButtonOnInput();
            },
            keydown: (ev) => {
                console.log('keydown', ev);
                if (ev.ctrlKey || ev.altKey || ev.key.length > 1) {
                    return;
                }
                if (ev.key.match(uppercase)) {
                    ev.preventDefault();
                    this.inputElem.e.value += ev.key.toLowerCase();
                }
                else if ([' ', ',', '-',].includes(ev.key)) {
                    ev.preventDefault();
                    this.inputElem.e.value += '_';
                }
                else if (ev.key.match(illegal)) {
                    ev.preventDefault();
                }
            },
        });
        const submitButton = index_1.button({ cls: 'inactive', html: 'Submit' });
        this.cacheAppend({ inputElem, submitButton });
    }
    toggleSubmitButtonOnInput() {
        if (this.inputElem.e.value) {
            this.submitButton.replaceClass('inactive', 'active');
        }
        else {
            this.submitButton.replaceClass('active', 'inactive');
        }
    }
}
class InputSection extends index_1.Div {
    constructor({ placeholder, h3text }) {
        super({ cls: 'input-section' });
        const inputAndSubmitFlex = new InputAndSubmitFlex({ placeholder });
        const subtitle = index_1.elem({ tag: 'h3', text: h3text });
        this.cacheAppend({ subtitle, inputAndSubmitFlex });
    }
}
exports.InputSection = InputSection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleHRyYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUF1RTtBQUV2RSxNQUFNLGtCQUFtQixTQUFRLFdBQUc7SUFJaEMsWUFBWSxFQUFFLFdBQVcsRUFBRTtRQUN2QixLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUcsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQztRQUMxQixNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUM7UUFDaEMsTUFBTSxTQUFTLEdBQUcsYUFBSyxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUM7YUFDbkMsRUFBRSxDQUFDO1lBQ0EsTUFBTSxFQUFHLENBQUMsRUFBUyxFQUFFLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1lBQ3JDLENBQUMsRUFBRSxLQUFLLEVBQUcsQ0FBQyxFQUFjLEVBQUUsRUFBRTtnQkFDMUIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7WUFDckMsQ0FBQztZQUNELE9BQU8sRUFBRyxDQUFDLEVBQWlCLEVBQUUsRUFBRTtnQkFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzNCLElBQUssRUFBRSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRztvQkFDaEQsT0FBTztpQkFDVjtnQkFDRCxJQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFHO29CQUMzQixFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7b0JBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO2lCQUNsRDtxQkFBTSxJQUFLLENBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFHO29CQUM5QyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7b0JBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUM7aUJBQ2pDO3FCQUFNLElBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUc7b0JBQ2hDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztpQkFFdkI7WUFFTCxDQUFDO1NBRUosQ0FBQyxDQUFDO1FBQ1AsTUFBTSxZQUFZLEdBQUcsY0FBTSxDQUFDLEVBQUUsR0FBRyxFQUFHLFVBQVUsRUFBRSxJQUFJLEVBQUcsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELHlCQUF5QjtRQUNyQixJQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRztZQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUE7U0FDdkQ7YUFBTTtZQUNILElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQTtTQUV2RDtJQUNMLENBQUM7Q0FDSjtBQUVELE1BQWEsWUFBYSxTQUFRLFdBQUc7SUFHakMsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUU7UUFDL0IsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDakMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNuRSxNQUFNLFFBQVEsR0FBRyxZQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsSUFBSSxFQUFFLElBQUksRUFBRyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDSjtBQVRELG9DQVNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnV0dG9uLCBidXR0b24sIGRpdiwgRGl2LCBlbGVtLCBJbnB1dCwgaW5wdXQgfSBmcm9tIFwiLi9pbmRleFwiO1xuXG5jbGFzcyBJbnB1dEFuZFN1Ym1pdEZsZXggZXh0ZW5kcyBEaXYge1xuICAgIHN1Ym1pdEJ1dHRvbjogQnV0dG9uO1xuICAgIGlucHV0RWxlbTogSW5wdXQ7XG4gICAgXG4gICAgY29uc3RydWN0b3IoeyBwbGFjZWhvbGRlciB9KSB7XG4gICAgICAgIHN1cGVyKHsgY2xzIDogJ2lucHV0LWFuZC1zdWJtaXQtZmxleCcgfSk7XG4gICAgICAgIGNvbnN0IHVwcGVyY2FzZSA9IC9bQS1aXS87XG4gICAgICAgIGNvbnN0IGlsbGVnYWwgPSAvW14oYS16MC05fF8pXS87XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbSA9IGlucHV0KHsgcGxhY2Vob2xkZXIgfSlcbiAgICAgICAgICAgIC5vbih7XG4gICAgICAgICAgICAgICAgY2hhbmdlIDogKGV2OiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVN1Ym1pdEJ1dHRvbk9uSW5wdXQoKTtcbiAgICAgICAgICAgICAgICB9LCBpbnB1dCA6IChldjogSW5wdXRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVN1Ym1pdEJ1dHRvbk9uSW5wdXQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGtleWRvd24gOiAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2tleWRvd24nLCBldik7XG4gICAgICAgICAgICAgICAgICAgIGlmICggZXYuY3RybEtleSB8fCBldi5hbHRLZXkgfHwgZXYua2V5Lmxlbmd0aCA+IDEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBldi5rZXkubWF0Y2godXBwZXJjYXNlKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0RWxlbS5lLnZhbHVlICs9IGV2LmtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBbICcgJywgJywnLCAnLScsIF0uaW5jbHVkZXMoZXYua2V5KSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0RWxlbS5lLnZhbHVlICs9ICdfJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggZXYua2V5Lm1hdGNoKGlsbGVnYWwpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gYnV0dG9uKHsgY2xzIDogJ2luYWN0aXZlJywgaHRtbCA6ICdTdWJtaXQnIH0pO1xuICAgICAgICB0aGlzLmNhY2hlQXBwZW5kKHsgaW5wdXRFbGVtLCBzdWJtaXRCdXR0b24gfSk7XG4gICAgfVxuICAgIFxuICAgIHRvZ2dsZVN1Ym1pdEJ1dHRvbk9uSW5wdXQoKSB7XG4gICAgICAgIGlmICggdGhpcy5pbnB1dEVsZW0uZS52YWx1ZSApIHtcbiAgICAgICAgICAgIHRoaXMuc3VibWl0QnV0dG9uLnJlcGxhY2VDbGFzcygnaW5hY3RpdmUnLCAnYWN0aXZlJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3VibWl0QnV0dG9uLnJlcGxhY2VDbGFzcygnYWN0aXZlJywgJ2luYWN0aXZlJylcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW5wdXRTZWN0aW9uIGV4dGVuZHMgRGl2IHtcbiAgICBpbnB1dEFuZFN1Ym1pdEZsZXg6IElucHV0QW5kU3VibWl0RmxleDtcbiAgICBcbiAgICBjb25zdHJ1Y3Rvcih7IHBsYWNlaG9sZGVyLCBoM3RleHQgfSkge1xuICAgICAgICBzdXBlcih7IGNscyA6ICdpbnB1dC1zZWN0aW9uJyB9KTtcbiAgICAgICAgY29uc3QgaW5wdXRBbmRTdWJtaXRGbGV4ID0gbmV3IElucHV0QW5kU3VibWl0RmxleCh7IHBsYWNlaG9sZGVyIH0pO1xuICAgICAgICBjb25zdCBzdWJ0aXRsZSA9IGVsZW0oeyB0YWcgOiAnaDMnLCB0ZXh0IDogaDN0ZXh0IH0pO1xuICAgICAgICB0aGlzLmNhY2hlQXBwZW5kKHsgc3VidGl0bGUsIGlucHV0QW5kU3VibWl0RmxleCB9KTtcbiAgICB9XG59XG4iXX0=