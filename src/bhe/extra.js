"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
class InputAndSubmitFlex extends index_1.Div {
    constructor({ placeholder }) {
        super({ cls: 'input-and-submit-flex' });
        const uppercase = /[A-Z]/;
        const illegal = /[^(a-z0-9|_)]/;
        const inputElem = index_1.input({ placeholder })
            .on({
            change: (ev) => {
                console.log('change', ev);
                this.toggleSubmitButtonOnInput();
            }, input: (ev) => {
                console.log('input', ev);
                this.toggleSubmitButtonOnInput();
            },
            keydown: (ev) => {
                console.log('keydown', ev);
                if (ev.ctrlKey || ev.altKey || ev.key.length > 1) {
                    return;
                }
                if (ev.key.match(uppercase)) {
                    ev.preventDefault();
                    this.inputElem.e.value += ev.key.toLowerCase();
                }
                else if ([' ', ',', '-',].includes(ev.key)) {
                    ev.preventDefault();
                    this.inputElem.e.value += '_';
                }
                else if (ev.key.match(illegal)) {
                    ev.preventDefault();
                }
            },
        });
        const submitButton = index_1.button({ cls: 'inactive', html: 'Submit' });
        this.cacheAppend({ inputElem, submitButton });
    }
    toggleSubmitButtonOnInput() {
    }
}
class InputSection extends index_1.Div {
    constructor({ placeholder, h3text }) {
        super({ cls: 'input-section' });
        const inputAndSubmitFlex = new InputAndSubmitFlex({ placeholder });
        const subtitle = index_1.elem({ tag: 'h3', text: h3text });
        this.cacheAppend({ subtitle, inputAndSubmitFlex });
    }
}
exports.InputSection = InputSection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleHRyYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUF1RTtBQUV2RSxNQUFNLGtCQUFtQixTQUFRLFdBQUc7SUFJaEMsWUFBWSxFQUFFLFdBQVcsRUFBRTtRQUN2QixLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUcsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQztRQUMxQixNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUM7UUFDaEMsTUFBTSxTQUFTLEdBQUcsYUFBSyxDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUM7YUFDbkMsRUFBRSxDQUFDO1lBQ0EsTUFBTSxFQUFHLENBQUMsRUFBUyxFQUFFLEVBQUU7Z0JBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMxQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztZQUNyQyxDQUFDLEVBQUUsS0FBSyxFQUFHLENBQUMsRUFBYyxFQUFFLEVBQUU7Z0JBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUN6QixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztZQUNyQyxDQUFDO1lBQ0QsT0FBTyxFQUFHLENBQUMsRUFBaUIsRUFBRSxFQUFFO2dCQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDM0IsSUFBSyxFQUFFLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFHO29CQUNoRCxPQUFPO2lCQUNWO2dCQUNELElBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUc7b0JBQzNCLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7aUJBQ2xEO3FCQUFNLElBQUssQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUc7b0JBQzlDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQztpQkFDakM7cUJBQU0sSUFBSyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRztvQkFDaEMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO2lCQUV2QjtZQUVMLENBQUM7U0FFSixDQUFDLENBQUM7UUFDUCxNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsRUFBRSxHQUFHLEVBQUcsVUFBVSxFQUFFLElBQUksRUFBRyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQseUJBQXlCO0lBRXpCLENBQUM7Q0FDSjtBQUVELE1BQWEsWUFBYSxTQUFRLFdBQUc7SUFHakMsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUU7UUFDL0IsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDakMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGtCQUFrQixDQUFDLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNuRSxNQUFNLFFBQVEsR0FBRyxZQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsSUFBSSxFQUFFLElBQUksRUFBRyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDSjtBQVRELG9DQVNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnV0dG9uLCBidXR0b24sIGRpdiwgRGl2LCBlbGVtLCBJbnB1dCwgaW5wdXQgfSBmcm9tIFwiLi9pbmRleFwiO1xuXG5jbGFzcyBJbnB1dEFuZFN1Ym1pdEZsZXggZXh0ZW5kcyBEaXYge1xuICAgIHN1Ym1pdEJ1dHRvbjogQnV0dG9uO1xuICAgIGlucHV0RWxlbTogSW5wdXQ7XG4gICAgXG4gICAgY29uc3RydWN0b3IoeyBwbGFjZWhvbGRlciB9KSB7XG4gICAgICAgIHN1cGVyKHsgY2xzIDogJ2lucHV0LWFuZC1zdWJtaXQtZmxleCcgfSk7XG4gICAgICAgIGNvbnN0IHVwcGVyY2FzZSA9IC9bQS1aXS87XG4gICAgICAgIGNvbnN0IGlsbGVnYWwgPSAvW14oYS16MC05fF8pXS87XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbSA9IGlucHV0KHsgcGxhY2Vob2xkZXIgfSlcbiAgICAgICAgICAgIC5vbih7XG4gICAgICAgICAgICAgICAgY2hhbmdlIDogKGV2OiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2hhbmdlJywgZXYpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVN1Ym1pdEJ1dHRvbk9uSW5wdXQoKTtcbiAgICAgICAgICAgICAgICB9LCBpbnB1dCA6IChldjogSW5wdXRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaW5wdXQnLCBldik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAga2V5ZG93biA6IChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygna2V5ZG93bicsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBldi5jdHJsS2V5IHx8IGV2LmFsdEtleSB8fCBldi5rZXkubGVuZ3RoID4gMSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIGV2LmtleS5tYXRjaCh1cHBlcmNhc2UpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFbGVtLmUudmFsdWUgKz0gZXYua2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIFsgJyAnLCAnLCcsICctJywgXS5pbmNsdWRlcyhldi5rZXkpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRFbGVtLmUudmFsdWUgKz0gJ18nO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBldi5rZXkubWF0Y2goaWxsZWdhbCkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBidXR0b24oeyBjbHMgOiAnaW5hY3RpdmUnLCBodG1sIDogJ1N1Ym1pdCcgfSk7XG4gICAgICAgIHRoaXMuY2FjaGVBcHBlbmQoeyBpbnB1dEVsZW0sIHN1Ym1pdEJ1dHRvbiB9KTtcbiAgICB9XG4gICAgXG4gICAgdG9nZ2xlU3VibWl0QnV0dG9uT25JbnB1dCgpIHtcbiAgICBcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnB1dFNlY3Rpb24gZXh0ZW5kcyBEaXYge1xuICAgIGlucHV0QW5kU3VibWl0RmxleDogSW5wdXRBbmRTdWJtaXRGbGV4O1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKHsgcGxhY2Vob2xkZXIsIGgzdGV4dCB9KSB7XG4gICAgICAgIHN1cGVyKHsgY2xzIDogJ2lucHV0LXNlY3Rpb24nIH0pO1xuICAgICAgICBjb25zdCBpbnB1dEFuZFN1Ym1pdEZsZXggPSBuZXcgSW5wdXRBbmRTdWJtaXRGbGV4KHsgcGxhY2Vob2xkZXIgfSk7XG4gICAgICAgIGNvbnN0IHN1YnRpdGxlID0gZWxlbSh7IHRhZyA6ICdoMycsIHRleHQgOiBoM3RleHQgfSk7XG4gICAgICAgIHRoaXMuY2FjaGVBcHBlbmQoeyBzdWJ0aXRsZSwgaW5wdXRBbmRTdWJtaXRGbGV4IH0pO1xuICAgIH1cbn1cbiJdfQ==