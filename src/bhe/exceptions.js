class BadArgumentsAmountError extends Error {
    constructor(expectedArgsNum, passedArgs, details) {
        const requiresExactNumOfArgs = !Array.isArray(expectedArgsNum);
        const argsWithValues = BadArgumentsAmountError.getArgsWithValues(passedArgs);
        const argNamesValues = BadArgumentsAmountError.getArgNamesValues(argsWithValues);
        let message;
        if (requiresExactNumOfArgs) {
            message = `Didn't receive exactly ${expectedArgsNum} arg. `;
        }
        else {
            message = `Didn't receive between ${expectedArgsNum[0]} to ${expectedArgsNum[1]} args. `;
        }
        message += `Instead, out of ${Object.keys(passedArgs).length} received (${Object.keys(passedArgs)}), ${Object.keys(argsWithValues).length} had value: "${argNamesValues}". ${details ? 'Details: ' + details : ''}`;
        super(message);
    }
    static getArgNamesValues(argsWithValues) {
        return Object.entries(argsWithValues)
            .flatMap(([argname, argval]) => `${argname}: ${argval}`)
            .join('", "');
    }
    static getArgsWithValues(passedArgs) {
        const argsWithValues = {};
        for (let [argname, argval] of Object.entries(passedArgs)) {
            if (argval !== undefined)
                argsWithValues[argname] = argval;
        }
        return argsWithValues;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZXB0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4Y2VwdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTSx1QkFBd0IsU0FBUSxLQUFLO0lBS3ZDLFlBQVksZUFBNEMsRUFBRSxVQUFrQixFQUFFLE9BQWdCO1FBQzFGLE1BQU0sc0JBQXNCLEdBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sY0FBYyxHQUFHLHVCQUF1QixDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdFLE1BQU0sY0FBYyxHQUFXLHVCQUF1QixDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3pGLElBQUksT0FBTyxDQUFDO1FBQ1osSUFBSyxzQkFBc0IsRUFBRztZQUMxQixPQUFPLEdBQUcsMEJBQTBCLGVBQWUsUUFBUSxDQUFBO1NBQzlEO2FBQU07WUFDSCxPQUFPLEdBQUcsMEJBQTBCLGVBQWUsQ0FBQyxDQUFDLENBQUMsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQTtTQUMzRjtRQUNELE9BQU8sSUFBSSxtQkFBbUIsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLGNBQWMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sZ0JBQWdCLGNBQWMsTUFBTSxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3BOLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLGNBQXNCO1FBQzNDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7YUFFdkIsT0FBTyxDQUFDLENBQUMsQ0FBRSxPQUFPLEVBQUUsTUFBTSxDQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsT0FBTyxLQUFLLE1BQU0sRUFBRSxDQUFDO2FBQ3pELElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFVBQWtCO1FBQ3ZDLE1BQU0sY0FBYyxHQUFXLEVBQUUsQ0FBQztRQUNsQyxLQUFNLElBQUksQ0FBRSxPQUFPLEVBQUUsTUFBTSxDQUFFLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRztZQUMxRCxJQUFLLE1BQU0sS0FBSyxTQUFTO2dCQUNyQixjQUFjLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDO1NBQ3hDO1FBQ0QsT0FBTyxjQUFjLENBQUM7SUFDMUIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyoqVGhyb3duIHdoZW4gZWl0aGVyIHRvbyBtdWNoIG9yIG5vdCBlbm91Z2ggYXJndW1lbnRzIHdlcmUgcGFzc2VkLiBQcmludHMgd2hhdCB3YXMgZXhwZWN0ZWQgYW5kIHdoYXQgd2FzIGFjdHVhbGx5IHBhc3NlZC4qL1xuY2xhc3MgQmFkQXJndW1lbnRzQW1vdW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqQHBhcmFtIGV4cGVjdGVkQXJnc051bSAtIEJlaW5nIGEgbnVtYmVyIGFuZCBub3QgYXJyYXksIGl0IGltcGxpZXMgZnVuY3Rpb24gcmVxdWlyZXMgYW4gZXhhY3QgbnVtYmVyIG9mIGFyZ3MqL1xuICAgIGNvbnN0cnVjdG9yKGV4cGVjdGVkQXJnc051bTogbnVtYmVyLCBwYXNzZWRBcmdzOiBvYmplY3QsIGRldGFpbHM/OiBzdHJpbmcpXG4gICAgLyoqQHBhcmFtIGV4cGVjdGVkQXJnc051bSAtIEJlaW5nIGEgMi10dXBsZSBhbmQgbm90IGEgbnVtYmVyLCBpbXBsaWVzIGZ1bmN0aW9uIHJlcXVpcmVzIGJldHdlZW4gdGhpcyBhbmQgdGhhdCBudW1iZXIgb2YgYXJncyovXG4gICAgY29uc3RydWN0b3IoZXhwZWN0ZWRBcmdzTnVtOiBbIG51bWJlciwgbnVtYmVyIF0sIHBhc3NlZEFyZ3M6IG9iamVjdCwgZGV0YWlscz86IHN0cmluZylcbiAgICBjb25zdHJ1Y3RvcihleHBlY3RlZEFyZ3NOdW06IG51bWJlciB8IFsgbnVtYmVyLCBudW1iZXIgXSwgcGFzc2VkQXJnczogb2JqZWN0LCBkZXRhaWxzPzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHJlcXVpcmVzRXhhY3ROdW1PZkFyZ3M6IGJvb2xlYW4gPSAhQXJyYXkuaXNBcnJheShleHBlY3RlZEFyZ3NOdW0pO1xuICAgICAgICBjb25zdCBhcmdzV2l0aFZhbHVlcyA9IEJhZEFyZ3VtZW50c0Ftb3VudEVycm9yLmdldEFyZ3NXaXRoVmFsdWVzKHBhc3NlZEFyZ3MpO1xuICAgICAgICBjb25zdCBhcmdOYW1lc1ZhbHVlczogc3RyaW5nID0gQmFkQXJndW1lbnRzQW1vdW50RXJyb3IuZ2V0QXJnTmFtZXNWYWx1ZXMoYXJnc1dpdGhWYWx1ZXMpO1xuICAgICAgICBsZXQgbWVzc2FnZTtcbiAgICAgICAgaWYgKCByZXF1aXJlc0V4YWN0TnVtT2ZBcmdzICkge1xuICAgICAgICAgICAgbWVzc2FnZSA9IGBEaWRuJ3QgcmVjZWl2ZSBleGFjdGx5ICR7ZXhwZWN0ZWRBcmdzTnVtfSBhcmcuIGBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgRGlkbid0IHJlY2VpdmUgYmV0d2VlbiAke2V4cGVjdGVkQXJnc051bVswXX0gdG8gJHtleHBlY3RlZEFyZ3NOdW1bMV19IGFyZ3MuIGBcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlICs9IGBJbnN0ZWFkLCBvdXQgb2YgJHtPYmplY3Qua2V5cyhwYXNzZWRBcmdzKS5sZW5ndGh9IHJlY2VpdmVkICgke09iamVjdC5rZXlzKHBhc3NlZEFyZ3MpfSksICR7T2JqZWN0LmtleXMoYXJnc1dpdGhWYWx1ZXMpLmxlbmd0aH0gaGFkIHZhbHVlOiBcIiR7YXJnTmFtZXNWYWx1ZXN9XCIuICR7ZGV0YWlscyA/ICdEZXRhaWxzOiAnICsgZGV0YWlscyA6ICcnfWA7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgZ2V0QXJnTmFtZXNWYWx1ZXMoYXJnc1dpdGhWYWx1ZXM6IG9iamVjdCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZW50cmllcyhhcmdzV2l0aFZhbHVlcylcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgIC5mbGF0TWFwKChbIGFyZ25hbWUsIGFyZ3ZhbCBdKSA9PiBgJHthcmduYW1lfTogJHthcmd2YWx9YClcbiAgICAgICAgICAgICAgICAgICAgIC5qb2luKCdcIiwgXCInKTtcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIGdldEFyZ3NXaXRoVmFsdWVzKHBhc3NlZEFyZ3M6IG9iamVjdCkge1xuICAgICAgICBjb25zdCBhcmdzV2l0aFZhbHVlczogb2JqZWN0ID0ge307XG4gICAgICAgIGZvciAoIGxldCBbIGFyZ25hbWUsIGFyZ3ZhbCBdIG9mIE9iamVjdC5lbnRyaWVzKHBhc3NlZEFyZ3MpICkge1xuICAgICAgICAgICAgaWYgKCBhcmd2YWwgIT09IHVuZGVmaW5lZCApXG4gICAgICAgICAgICAgICAgYXJnc1dpdGhWYWx1ZXNbYXJnbmFtZV0gPSBhcmd2YWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZ3NXaXRoVmFsdWVzO1xuICAgIH1cbn1cblxuXG5cbiJdfQ==