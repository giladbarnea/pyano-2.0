"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("./bhe");
const MyStore_1 = require("./MyStore");
const MyAlert_1 = require("./MyAlert");
const util = require("./util");
console.group('Glob.ts');
const BigConfig = new MyStore_1.BigConfigCls(true);
let skipFade = false;
const MainContent = bhe_1.elem({ id: 'main_content' });
const Sidebar = bhe_1.visualbhe({ id: 'sidebar' });
const Title = bhe_1.visualbhe({ id: 'title' });
const Document = bhe_1.elem({ htmlElement: document });
const NavigationButtons = bhe_1.visualbhe({
    id: 'navigation_buttons', children: {
        exit: '.exit',
        minimize: '.minimize',
    }
});
NavigationButtons.exit.click(async () => {
    let { value: shouldExit } = await MyAlert_1.default.big.warning({
        title: 'Are you sure you want to exit?',
        confirmButtonColor: '#dc3545',
    });
    if (shouldExit)
        util.getCurrentWindow().close();
});
NavigationButtons.minimize.click(() => util.getCurrentWindow().minimize());
async function toggle(action, ...args) {
    const promises = [];
    for (let a of args) {
        switch (a) {
            case "Title":
                promises.push(Title[action]());
                break;
            case "NavigationButtons":
                promises.push(NavigationButtons[action]());
                break;
            case "Sidebar":
                promises.push(Sidebar[action]());
                break;
        }
    }
    return await Promise.all(promises);
}
async function hide(...args) {
    return await toggle("hide", ...args);
}
async function display(...args) {
    return await toggle("display", ...args);
}
console.groupEnd();
exports.default = { skipFade, MainContent, Sidebar, Title, BigConfig, Document, NavigationButtons, hide, display };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2xvYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkdsb2IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBc0U7QUFDdEUsdUNBQXlDO0FBQ3pDLHVDQUFnQztBQUNoQywrQkFBK0I7QUFHL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUV6QixNQUFNLFNBQVMsR0FBRyxJQUFJLHNCQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekMsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLE1BQU0sV0FBVyxHQUFHLFVBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sT0FBTyxHQUFHLGVBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQzlDLE1BQU0sS0FBSyxHQUFHLGVBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRyxPQUFPLEVBQUUsQ0FBMkUsQ0FBQztBQUVwSCxNQUFNLFFBQVEsR0FBRyxVQUFJLENBQUMsRUFBRSxXQUFXLEVBQUcsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNsRCxNQUFNLGlCQUFpQixHQUFHLGVBQVMsQ0FBQztJQUNoQyxFQUFFLEVBQUcsb0JBQW9CLEVBQUUsUUFBUSxFQUFHO1FBQ2xDLElBQUksRUFBRyxPQUFPO1FBQ2QsUUFBUSxFQUFHLFdBQVc7S0FFekI7Q0FDSixDQUF5RSxDQUFDO0FBQzNFLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDcEMsSUFBSSxFQUFFLEtBQUssRUFBRyxVQUFVLEVBQUUsR0FBRyxNQUFNLGlCQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUNuRCxLQUFLLEVBQUcsZ0NBQWdDO1FBQ3hDLGtCQUFrQixFQUFHLFNBQVM7S0FDakMsQ0FBQyxDQUFDO0lBQ0gsSUFBSyxVQUFVO1FBQ1gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDeEMsQ0FBQyxDQUFDLENBQUM7QUFDSCxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFFM0UsS0FBSyxVQUFVLE1BQU0sQ0FBQyxNQUEwQixFQUFFLEdBQUcsSUFBbUQ7SUFDcEcsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLEtBQU0sSUFBSSxDQUFDLElBQUksSUFBSSxFQUFHO1FBQ2xCLFFBQVMsQ0FBQyxFQUFHO1lBQ1QsS0FBSyxPQUFPO2dCQUNSLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDL0IsTUFBTTtZQUNWLEtBQUssbUJBQW1CO2dCQUNwQixRQUFRLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDM0MsTUFBTTtZQUNWLEtBQUssU0FBUztnQkFDVixRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2pDLE1BQU07U0FDYjtLQUNKO0lBQ0QsT0FBTyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELEtBQUssVUFBVSxJQUFJLENBQUMsR0FBRyxJQUFtRDtJQUN0RSxPQUFPLE1BQU0sTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxLQUFLLFVBQVUsT0FBTyxDQUFDLEdBQUcsSUFBbUQ7SUFDekUsT0FBTyxNQUFNLE1BQU0sQ0FBQyxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ25CLGtCQUFlLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmV0dGVySFRNTEVsZW1lbnQsIGVsZW0sIFZpc3VhbEJIRSwgdmlzdWFsYmhlIH0gZnJvbSBcIi4vYmhlXCI7XG5pbXBvcnQgeyBCaWdDb25maWdDbHMgfSBmcm9tIFwiLi9NeVN0b3JlXCI7XG5pbXBvcnQgTXlBbGVydCBmcm9tIFwiLi9NeUFsZXJ0XCI7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gXCIuL3V0aWxcIjtcblxuLyoqaW1wb3J0IEdsb2IgZnJvbSAnLi9HbG9iJyovXG5jb25zb2xlLmdyb3VwKCdHbG9iLnRzJyk7XG5cbmNvbnN0IEJpZ0NvbmZpZyA9IG5ldyBCaWdDb25maWdDbHModHJ1ZSk7XG5sZXQgc2tpcEZhZGUgPSBmYWxzZTtcbmNvbnN0IE1haW5Db250ZW50ID0gZWxlbSh7IGlkIDogJ21haW5fY29udGVudCcgfSk7XG5jb25zdCBTaWRlYmFyID0gdmlzdWFsYmhlKHsgaWQgOiAnc2lkZWJhcicgfSk7XG5jb25zdCBUaXRsZSA9IHZpc3VhbGJoZSh7IGlkIDogJ3RpdGxlJyB9KSBhcyBWaXN1YWxCSEUgJiB7IGxldmVsaDM6IEJldHRlckhUTUxFbGVtZW50LCB0cmlhbGgzOiBCZXR0ZXJIVE1MRWxlbWVudCB9O1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgRG9jdW1lbnQgPSBlbGVtKHsgaHRtbEVsZW1lbnQgOiBkb2N1bWVudCB9KTtcbmNvbnN0IE5hdmlnYXRpb25CdXR0b25zID0gdmlzdWFsYmhlKHtcbiAgICBpZCA6ICduYXZpZ2F0aW9uX2J1dHRvbnMnLCBjaGlsZHJlbiA6IHtcbiAgICAgICAgZXhpdCA6ICcuZXhpdCcsXG4gICAgICAgIG1pbmltaXplIDogJy5taW5pbWl6ZScsXG4gICAgICAgIFxuICAgIH1cbn0pIGFzIFZpc3VhbEJIRSAmIHsgZXhpdDogQmV0dGVySFRNTEVsZW1lbnQsIG1pbmltaXplOiBCZXR0ZXJIVE1MRWxlbWVudCB9O1xuTmF2aWdhdGlvbkJ1dHRvbnMuZXhpdC5jbGljayhhc3luYyAoKSA9PiB7XG4gICAgbGV0IHsgdmFsdWUgOiBzaG91bGRFeGl0IH0gPSBhd2FpdCBNeUFsZXJ0LmJpZy53YXJuaW5nKHtcbiAgICAgICAgdGl0bGUgOiAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGV4aXQ/JyxcbiAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yIDogJyNkYzM1NDUnLFxuICAgIH0pO1xuICAgIGlmICggc2hvdWxkRXhpdCApXG4gICAgICAgIHV0aWwuZ2V0Q3VycmVudFdpbmRvdygpLmNsb3NlKCk7XG59KTtcbk5hdmlnYXRpb25CdXR0b25zLm1pbmltaXplLmNsaWNrKCgpID0+IHV0aWwuZ2V0Q3VycmVudFdpbmRvdygpLm1pbmltaXplKCkpO1xuXG5hc3luYyBmdW5jdGlvbiB0b2dnbGUoYWN0aW9uOiBcImhpZGVcIiB8IFwiZGlzcGxheVwiLCAuLi5hcmdzOiAoXCJUaXRsZVwiIHwgXCJOYXZpZ2F0aW9uQnV0dG9uc1wiIHwgXCJTaWRlYmFyXCIpW10pOiBQcm9taXNlPHVua25vd25bXT4ge1xuICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgZm9yICggbGV0IGEgb2YgYXJncyApIHtcbiAgICAgICAgc3dpdGNoICggYSApIHtcbiAgICAgICAgICAgIGNhc2UgXCJUaXRsZVwiOlxuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goVGl0bGVbYWN0aW9uXSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJOYXZpZ2F0aW9uQnV0dG9uc1wiOlxuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goTmF2aWdhdGlvbkJ1dHRvbnNbYWN0aW9uXSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJTaWRlYmFyXCI6XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChTaWRlYmFyW2FjdGlvbl0oKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaGlkZSguLi5hcmdzOiAoXCJUaXRsZVwiIHwgXCJOYXZpZ2F0aW9uQnV0dG9uc1wiIHwgXCJTaWRlYmFyXCIpW10pOiBQcm9taXNlPHVua25vd25bXT4ge1xuICAgIHJldHVybiBhd2FpdCB0b2dnbGUoXCJoaWRlXCIsIC4uLmFyZ3MpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkaXNwbGF5KC4uLmFyZ3M6IChcIlRpdGxlXCIgfCBcIk5hdmlnYXRpb25CdXR0b25zXCIgfCBcIlNpZGViYXJcIilbXSk6IFByb21pc2U8dW5rbm93bltdPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRvZ2dsZShcImRpc3BsYXlcIiwgLi4uYXJncyk7XG59XG5cbmNvbnNvbGUuZ3JvdXBFbmQoKTtcbmV4cG9ydCBkZWZhdWx0IHsgc2tpcEZhZGUsIE1haW5Db250ZW50LCBTaWRlYmFyLCBUaXRsZSwgQmlnQ29uZmlnLCBEb2N1bWVudCwgTmF2aWdhdGlvbkJ1dHRvbnMsIGhpZGUsIGRpc3BsYXkgfVxuIl19