"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("./bhe");
const MyStore_1 = require("./MyStore");
const MyAlert_1 = require("./MyAlert");
const util = require("./util");
const fs = require("fs");
console.group('Glob.ts');
const BigConfig = new MyStore_1.BigConfigCls(true);
let skipFade = false;
const MainContent = bhe_1.elem({ id: 'main_content' });
const Sidebar = bhe_1.visualbhe({ id: 'sidebar' });
const Title = bhe_1.visualbhe({ id: 'title' });
const Document = bhe_1.elem({ htmlElement: document });
const NavigationButtons = bhe_1.visualbhe({
    id: 'navigation_buttons', children: {
        exit: '.exit',
        minimize: '.minimize',
    }
});
NavigationButtons.exit.click(async () => {
    let options = {
        title: 'Are you sure you want to exit?',
        confirmButtonColor: '#dc3545',
    };
    if (LOG || fs.existsSync(SESSION_PATH_ABS)) {
        options = Object.assign(Object.assign({}, options), { input: "checkbox", inputValue: `delete`, onBeforeOpen: modal => {
                let el = bhe_1.elem({
                    htmlElement: modal,
                    children: { label: '.swal2-label', checkbox: '#swal2-checkbox' }
                });
                el.checkbox.css({ height: '22px', width: '22px' });
                el.label
                    .css({ fontSize: '22px' })
                    .html(`Delete this session's errors dir (${path.relative(ROOT_PATH_ABS, SESSION_PATH_ABS)})`);
            } });
    }
    let shouldExit = await MyAlert_1.default.big.confirm(options);
    console.log({ shouldExit });
    if (shouldExit) {
        util.getCurrentWindow().close();
    }
});
NavigationButtons.minimize.click(() => util.getCurrentWindow().minimize());
async function toggle(action, ...args) {
    const promises = [];
    for (let a of args) {
        switch (a) {
            case "Title":
                promises.push(Title[action]());
                break;
            case "NavigationButtons":
                promises.push(NavigationButtons[action]());
                break;
            case "Sidebar":
                promises.push(Sidebar[action]());
                break;
        }
    }
    return await Promise.all(promises);
}
async function hide(...args) {
    return await toggle("hide", ...args);
}
async function display(...args) {
    return await toggle("display", ...args);
}
console.groupEnd();
exports.default = { skipFade, MainContent, Sidebar, Title, BigConfig, Document, NavigationButtons, hide, display };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2xvYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkdsb2IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBc0U7QUFDdEUsdUNBQXlDO0FBQ3pDLHVDQUFnQztBQUNoQywrQkFBK0I7QUFDL0IseUJBQXdCO0FBR3hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFekIsTUFBTSxTQUFTLEdBQUcsSUFBSSxzQkFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pDLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztBQUNyQixNQUFNLFdBQVcsR0FBRyxVQUFJLENBQUMsRUFBRSxFQUFFLEVBQUcsY0FBYyxFQUFFLENBQUMsQ0FBQztBQUNsRCxNQUFNLE9BQU8sR0FBRyxlQUFTLENBQUMsRUFBRSxFQUFFLEVBQUcsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUM5QyxNQUFNLEtBQUssR0FBRyxlQUFTLENBQUMsRUFBRSxFQUFFLEVBQUcsT0FBTyxFQUFFLENBQTJFLENBQUM7QUFFcEgsTUFBTSxRQUFRLEdBQUcsVUFBSSxDQUFDLEVBQUUsV0FBVyxFQUFHLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDbEQsTUFBTSxpQkFBaUIsR0FBRyxlQUFTLENBQUM7SUFDaEMsRUFBRSxFQUFHLG9CQUFvQixFQUFFLFFBQVEsRUFBRztRQUNsQyxJQUFJLEVBQUcsT0FBTztRQUNkLFFBQVEsRUFBRyxXQUFXO0tBRXpCO0NBQ0osQ0FBeUUsQ0FBQztBQUMzRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ3BDLElBQUksT0FBTyxHQUFHO1FBQ1YsS0FBSyxFQUFHLGdDQUFnQztRQUN4QyxrQkFBa0IsRUFBRyxTQUFTO0tBQ2pDLENBQUM7SUFDRixJQUFLLEdBQUcsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLEVBQUc7UUFDMUMsT0FBTyxtQ0FDQSxPQUFPLEtBRVYsS0FBSyxFQUFHLFVBQVUsRUFDbEIsVUFBVSxFQUFHLFFBQVEsRUFDckIsWUFBWSxFQUFHLEtBQUssQ0FBQyxFQUFFO2dCQUNuQixJQUFJLEVBQUUsR0FBRyxVQUFJLENBQUM7b0JBQ1YsV0FBVyxFQUFHLEtBQUs7b0JBQ25CLFFBQVEsRUFBRyxFQUFFLEtBQUssRUFBRyxjQUFjLEVBQUUsUUFBUSxFQUFHLGlCQUFpQixFQUFFO2lCQUN0RSxDQUFDLENBQUM7Z0JBR0gsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQUcsTUFBTSxFQUFFLEtBQUssRUFBRyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2dCQUVyRCxFQUFFLENBQUMsS0FBSztxQkFDTCxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQUcsTUFBTSxFQUFFLENBQUM7cUJBQzFCLElBQUksQ0FBQyxxQ0FBcUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFcEcsQ0FBQyxHQUNKLENBQUE7S0FDSjtJQUtELElBQUksVUFBVSxHQUFHLE1BQU0saUJBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBSzVCLElBQUssVUFBVSxFQUFHO1FBQ2QsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDbkM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUNILGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUUzRSxLQUFLLFVBQVUsTUFBTSxDQUFDLE1BQTBCLEVBQUUsR0FBRyxJQUFtRDtJQUNwRyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDcEIsS0FBTSxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUc7UUFDbEIsUUFBUyxDQUFDLEVBQUc7WUFDVCxLQUFLLE9BQU87Z0JBQ1IsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUMvQixNQUFNO1lBQ1YsS0FBSyxtQkFBbUI7Z0JBQ3BCLFFBQVEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUMzQyxNQUFNO1lBQ1YsS0FBSyxTQUFTO2dCQUNWLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDakMsTUFBTTtTQUNiO0tBQ0o7SUFDRCxPQUFPLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRUQsS0FBSyxVQUFVLElBQUksQ0FBQyxHQUFHLElBQW1EO0lBQ3RFLE9BQU8sTUFBTSxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVELEtBQUssVUFBVSxPQUFPLENBQUMsR0FBRyxJQUFtRDtJQUN6RSxPQUFPLE1BQU0sTUFBTSxDQUFDLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFFRCxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDbkIsa0JBQWUsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZXR0ZXJIVE1MRWxlbWVudCwgZWxlbSwgVmlzdWFsQkhFLCB2aXN1YWxiaGUgfSBmcm9tIFwiLi9iaGVcIjtcbmltcG9ydCB7IEJpZ0NvbmZpZ0NscyB9IGZyb20gXCIuL015U3RvcmVcIjtcbmltcG9ydCBNeUFsZXJ0IGZyb20gXCIuL015QWxlcnRcIjtcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCJcblxuLyoqaW1wb3J0IEdsb2IgZnJvbSAnLi9HbG9iJyovXG5jb25zb2xlLmdyb3VwKCdHbG9iLnRzJyk7XG5cbmNvbnN0IEJpZ0NvbmZpZyA9IG5ldyBCaWdDb25maWdDbHModHJ1ZSk7XG5sZXQgc2tpcEZhZGUgPSBmYWxzZTtcbmNvbnN0IE1haW5Db250ZW50ID0gZWxlbSh7IGlkIDogJ21haW5fY29udGVudCcgfSk7XG5jb25zdCBTaWRlYmFyID0gdmlzdWFsYmhlKHsgaWQgOiAnc2lkZWJhcicgfSk7XG5jb25zdCBUaXRsZSA9IHZpc3VhbGJoZSh7IGlkIDogJ3RpdGxlJyB9KSBhcyBWaXN1YWxCSEUgJiB7IGxldmVsaDM6IEJldHRlckhUTUxFbGVtZW50LCB0cmlhbGgzOiBCZXR0ZXJIVE1MRWxlbWVudCB9O1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgRG9jdW1lbnQgPSBlbGVtKHsgaHRtbEVsZW1lbnQgOiBkb2N1bWVudCB9KTtcbmNvbnN0IE5hdmlnYXRpb25CdXR0b25zID0gdmlzdWFsYmhlKHtcbiAgICBpZCA6ICduYXZpZ2F0aW9uX2J1dHRvbnMnLCBjaGlsZHJlbiA6IHtcbiAgICAgICAgZXhpdCA6ICcuZXhpdCcsXG4gICAgICAgIG1pbmltaXplIDogJy5taW5pbWl6ZScsXG4gICAgICAgIFxuICAgIH1cbn0pIGFzIFZpc3VhbEJIRSAmIHsgZXhpdDogQmV0dGVySFRNTEVsZW1lbnQsIG1pbmltaXplOiBCZXR0ZXJIVE1MRWxlbWVudCB9O1xuTmF2aWdhdGlvbkJ1dHRvbnMuZXhpdC5jbGljayhhc3luYyAoKSA9PiB7XG4gICAgbGV0IG9wdGlvbnMgPSB7XG4gICAgICAgIHRpdGxlIDogJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBleGl0PycsXG4gICAgICAgIGNvbmZpcm1CdXR0b25Db2xvciA6ICcjZGMzNTQ1JyxcbiAgICB9O1xuICAgIGlmICggTE9HIHx8IGZzLmV4aXN0c1N5bmMoU0VTU0lPTl9QQVRIX0FCUykgKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgaW5wdXQgOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgICBpbnB1dFZhbHVlIDogYGRlbGV0ZWAsXG4gICAgICAgICAgICBvbkJlZm9yZU9wZW4gOiBtb2RhbCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGVsID0gZWxlbSh7XG4gICAgICAgICAgICAgICAgICAgIGh0bWxFbGVtZW50IDogbW9kYWwsXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuIDogeyBsYWJlbCA6ICcuc3dhbDItbGFiZWwnLCBjaGVja2JveCA6ICcjc3dhbDItY2hlY2tib3gnIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgZWwuY2hlY2tib3guY3NzKHsgaGVpZ2h0IDogJzIycHgnLCB3aWR0aCA6ICcyMnB4JyB9KTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgZWwubGFiZWxcbiAgICAgICAgICAgICAgICAgIC5jc3MoeyBmb250U2l6ZSA6ICcyMnB4JyB9KVxuICAgICAgICAgICAgICAgICAgLmh0bWwoYERlbGV0ZSB0aGlzIHNlc3Npb24ncyBlcnJvcnMgZGlyICgke3BhdGgucmVsYXRpdmUoUk9PVF9QQVRIX0FCUywgU0VTU0lPTl9QQVRIX0FCUyl9KWApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vLy8gMDogZXhpdCBub3QgZGVsZXRlXG4gICAgLy8vLyAxOiBleGl0IHllcyBkZWxldGVcbiAgICAvLy8vIHVuZGVmaW5lZDogY2FuY2VsXG4gICAgbGV0IHNob3VsZEV4aXQgPSBhd2FpdCBNeUFsZXJ0LmJpZy5jb25maXJtKG9wdGlvbnMpO1xuICAgIGNvbnNvbGUubG9nKHsgc2hvdWxkRXhpdCB9KTtcbiAgICAvKmlmICggdmFsdWUgPT09IDEgKSB7XG4gICAgICAgIGNvbnN0IHJpbXJhZiA9IHJlcXVpcmUoJ3JpbXJhZicpO1xuICAgICAgICByaW1yYWYoU0VTU0lPTl9QQVRIX0FCUywgY29uc29sZS5sb2cpO1xuICAgIH0qL1xuICAgIGlmICggc2hvdWxkRXhpdCApIHtcbiAgICAgICAgdXRpbC5nZXRDdXJyZW50V2luZG93KCkuY2xvc2UoKTtcbiAgICB9XG59KTtcbk5hdmlnYXRpb25CdXR0b25zLm1pbmltaXplLmNsaWNrKCgpID0+IHV0aWwuZ2V0Q3VycmVudFdpbmRvdygpLm1pbmltaXplKCkpO1xuXG5hc3luYyBmdW5jdGlvbiB0b2dnbGUoYWN0aW9uOiBcImhpZGVcIiB8IFwiZGlzcGxheVwiLCAuLi5hcmdzOiAoXCJUaXRsZVwiIHwgXCJOYXZpZ2F0aW9uQnV0dG9uc1wiIHwgXCJTaWRlYmFyXCIpW10pOiBQcm9taXNlPHVua25vd25bXT4ge1xuICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgZm9yICggbGV0IGEgb2YgYXJncyApIHtcbiAgICAgICAgc3dpdGNoICggYSApIHtcbiAgICAgICAgICAgIGNhc2UgXCJUaXRsZVwiOlxuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goVGl0bGVbYWN0aW9uXSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJOYXZpZ2F0aW9uQnV0dG9uc1wiOlxuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goTmF2aWdhdGlvbkJ1dHRvbnNbYWN0aW9uXSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJTaWRlYmFyXCI6XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChTaWRlYmFyW2FjdGlvbl0oKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaGlkZSguLi5hcmdzOiAoXCJUaXRsZVwiIHwgXCJOYXZpZ2F0aW9uQnV0dG9uc1wiIHwgXCJTaWRlYmFyXCIpW10pOiBQcm9taXNlPHVua25vd25bXT4ge1xuICAgIHJldHVybiBhd2FpdCB0b2dnbGUoXCJoaWRlXCIsIC4uLmFyZ3MpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkaXNwbGF5KC4uLmFyZ3M6IChcIlRpdGxlXCIgfCBcIk5hdmlnYXRpb25CdXR0b25zXCIgfCBcIlNpZGViYXJcIilbXSk6IFByb21pc2U8dW5rbm93bltdPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRvZ2dsZShcImRpc3BsYXlcIiwgLi4uYXJncyk7XG59XG5cbmNvbnNvbGUuZ3JvdXBFbmQoKTtcbmV4cG9ydCBkZWZhdWx0IHsgc2tpcEZhZGUsIE1haW5Db250ZW50LCBTaWRlYmFyLCBUaXRsZSwgQmlnQ29uZmlnLCBEb2N1bWVudCwgTmF2aWdhdGlvbkJ1dHRvbnMsIGhpZGUsIGRpc3BsYXkgfVxuIl19