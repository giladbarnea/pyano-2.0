"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MyStore_1 = require("./MyStore");
const MyAlert_1 = require("./MyAlert");
const util = require("./util");
const fs = require("fs");
const extra_1 = require("./bhe/extra");
const betterhtmlelement_1 = require("betterhtmlelement");
console.group('Glob.ts');
const BigConfig = new MyStore_1.BigConfigCls(true);
let skipFade = false;
const MainContent = betterhtmlelement_1.elem({ byid: 'main_content' });
const Sidebar = extra_1.visualbhe({ byid: 'sidebar' });
const Title = extra_1.visualbhe({ byid: 'title' });
const Document = betterhtmlelement_1.elem({ htmlElement: document });
const NavigationButtons = extra_1.visualbhe({
    byid: 'navigation_buttons', children: {
        exit: '.exit',
        minimize: '.minimize',
    }
});
NavigationButtons.exit.click(async () => {
    let options = {
        title: 'Are you sure you want to exit?',
        confirmButtonColor: '#dc3545',
    };
    if (LOG || fs.existsSync(SESSION_PATH_ABS)) {
        options = Object.assign(Object.assign({}, options), { input: "checkbox", inputValue: `delete`, onBeforeOpen: modal => {
                let el = betterhtmlelement_1.elem({
                    htmlElement: modal,
                    children: { label: '.swal2-label', checkbox: '#swal2-checkbox' }
                });
                el.checkbox.css({ height: '22px', width: '22px' });
                el.label
                    .css({ fontSize: '22px' })
                    .html(`Delete this session's errors dir (${path.relative(ROOT_PATH_ABS, SESSION_PATH_ABS)})`);
            } });
    }
    let shouldExit = await MyAlert_1.default.big.confirm(options);
    console.log({ shouldExit });
    if (shouldExit) {
        util.getCurrentWindow().close();
    }
});
NavigationButtons.minimize.click(() => util.getCurrentWindow().minimize());
async function toggle(action, ...args) {
    const promises = [];
    for (let a of args) {
        switch (a) {
            case "Title":
                promises.push(Title[action]());
                break;
            case "NavigationButtons":
                promises.push(NavigationButtons[action]());
                break;
            case "Sidebar":
                promises.push(Sidebar[action]());
                break;
        }
    }
    return await Promise.all(promises);
}
async function hide(...args) {
    return await toggle("hide", ...args);
}
async function display(...args) {
    return await toggle("display", ...args);
}
console.groupEnd();
exports.default = { skipFade, MainContent, Sidebar, Title, BigConfig, Document, NavigationButtons, hide, display };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2xvYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkdsb2IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx1Q0FBeUM7QUFDekMsdUNBQWdDO0FBQ2hDLCtCQUErQjtBQUMvQix5QkFBd0I7QUFDeEIsdUNBQW1EO0FBQ25ELHlEQUE0RDtBQUc1RCxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXpCLE1BQU0sU0FBUyxHQUFHLElBQUksc0JBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QyxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7QUFDckIsTUFBTSxXQUFXLEdBQUcsd0JBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0FBQ25ELE1BQU0sT0FBTyxHQUFHLGlCQUFTLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUMvQyxNQUFNLEtBQUssR0FBRyxpQkFBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUEyRSxDQUFDO0FBRXJILE1BQU0sUUFBUSxHQUFHLHdCQUFJLENBQUMsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNqRCxNQUFNLGlCQUFpQixHQUFHLGlCQUFTLENBQUM7SUFDaEMsSUFBSSxFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRTtRQUNsQyxJQUFJLEVBQUUsT0FBTztRQUNiLFFBQVEsRUFBRSxXQUFXO0tBRXhCO0NBQ0osQ0FBeUUsQ0FBQztBQUMzRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ3BDLElBQUksT0FBTyxHQUFHO1FBQ1YsS0FBSyxFQUFFLGdDQUFnQztRQUN2QyxrQkFBa0IsRUFBRSxTQUFTO0tBQ2hDLENBQUM7SUFDRixJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7UUFDeEMsT0FBTyxtQ0FDQSxPQUFPLEtBRVYsS0FBSyxFQUFFLFVBQVUsRUFDakIsVUFBVSxFQUFFLFFBQVEsRUFDcEIsWUFBWSxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUNsQixJQUFJLEVBQUUsR0FBRyx3QkFBSSxDQUFDO29CQUNWLFdBQVcsRUFBRSxLQUFLO29CQUNsQixRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRTtpQkFDbkUsQ0FBQyxDQUFDO2dCQUdILEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztnQkFFbkQsRUFBRSxDQUFDLEtBQUs7cUJBQ0gsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDO3FCQUN6QixJQUFJLENBQUMscUNBQXFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXRHLENBQUMsR0FDSixDQUFBO0tBQ0o7SUFLRCxJQUFJLFVBQVUsR0FBRyxNQUFNLGlCQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUs1QixJQUFJLFVBQVUsRUFBRTtRQUNaLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ25DO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDSCxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFFM0UsS0FBSyxVQUFVLE1BQU0sQ0FBQyxNQUEwQixFQUFFLEdBQUcsSUFBbUQ7SUFDcEcsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLEtBQUssSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFO1FBQ2hCLFFBQVEsQ0FBQyxFQUFFO1lBQ1AsS0FBSyxPQUFPO2dCQUNSLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDL0IsTUFBTTtZQUNWLEtBQUssbUJBQW1CO2dCQUNwQixRQUFRLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDM0MsTUFBTTtZQUNWLEtBQUssU0FBUztnQkFDVixRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2pDLE1BQU07U0FDYjtLQUNKO0lBQ0QsT0FBTyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELEtBQUssVUFBVSxJQUFJLENBQUMsR0FBRyxJQUFtRDtJQUN0RSxPQUFPLE1BQU0sTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxLQUFLLFVBQVUsT0FBTyxDQUFDLEdBQUcsSUFBbUQ7SUFDekUsT0FBTyxNQUFNLE1BQU0sQ0FBQyxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ25CLGtCQUFlLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHsgQmV0dGVySFRNTEVsZW1lbnQsIGVsZW0gfSBmcm9tIFwiLi9iaGVcIjtcbmltcG9ydCB7IEJpZ0NvbmZpZ0NscyB9IGZyb20gXCIuL015U3RvcmVcIjtcbmltcG9ydCBNeUFsZXJ0IGZyb20gXCIuL015QWxlcnRcIjtcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCJcbmltcG9ydCB7IFZpc3VhbEJIRSwgdmlzdWFsYmhlIH0gZnJvbSBcIi4vYmhlL2V4dHJhXCI7XG5pbXBvcnQgeyBCZXR0ZXJIVE1MRWxlbWVudCwgZWxlbSB9IGZyb20gXCJiZXR0ZXJodG1sZWxlbWVudFwiO1xuXG4vKippbXBvcnQgR2xvYiBmcm9tICcuL0dsb2InKi9cbmNvbnNvbGUuZ3JvdXAoJ0dsb2IudHMnKTtcblxuY29uc3QgQmlnQ29uZmlnID0gbmV3IEJpZ0NvbmZpZ0Nscyh0cnVlKTtcbmxldCBza2lwRmFkZSA9IGZhbHNlO1xuY29uc3QgTWFpbkNvbnRlbnQgPSBlbGVtKHsgYnlpZDogJ21haW5fY29udGVudCcgfSk7XG5jb25zdCBTaWRlYmFyID0gdmlzdWFsYmhlKHsgYnlpZDogJ3NpZGViYXInIH0pO1xuY29uc3QgVGl0bGUgPSB2aXN1YWxiaGUoeyBieWlkOiAndGl0bGUnIH0pIGFzIFZpc3VhbEJIRSAmIHsgbGV2ZWxoMzogQmV0dGVySFRNTEVsZW1lbnQsIHRyaWFsaDM6IEJldHRlckhUTUxFbGVtZW50IH07XG4vLyBAdHMtaWdub3JlXG5jb25zdCBEb2N1bWVudCA9IGVsZW0oeyBodG1sRWxlbWVudDogZG9jdW1lbnQgfSk7XG5jb25zdCBOYXZpZ2F0aW9uQnV0dG9ucyA9IHZpc3VhbGJoZSh7XG4gICAgYnlpZDogJ25hdmlnYXRpb25fYnV0dG9ucycsIGNoaWxkcmVuOiB7XG4gICAgICAgIGV4aXQ6ICcuZXhpdCcsXG4gICAgICAgIG1pbmltaXplOiAnLm1pbmltaXplJyxcblxuICAgIH1cbn0pIGFzIFZpc3VhbEJIRSAmIHsgZXhpdDogQmV0dGVySFRNTEVsZW1lbnQsIG1pbmltaXplOiBCZXR0ZXJIVE1MRWxlbWVudCB9O1xuTmF2aWdhdGlvbkJ1dHRvbnMuZXhpdC5jbGljayhhc3luYyAoKSA9PiB7XG4gICAgbGV0IG9wdGlvbnMgPSB7XG4gICAgICAgIHRpdGxlOiAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGV4aXQ/JyxcbiAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAnI2RjMzU0NScsXG4gICAgfTtcbiAgICBpZiAoTE9HIHx8IGZzLmV4aXN0c1N5bmMoU0VTU0lPTl9QQVRIX0FCUykpIHtcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBpbnB1dDogXCJjaGVja2JveFwiLFxuICAgICAgICAgICAgaW5wdXRWYWx1ZTogYGRlbGV0ZWAsXG4gICAgICAgICAgICBvbkJlZm9yZU9wZW46IG1vZGFsID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZWwgPSBlbGVtKHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbEVsZW1lbnQ6IG1vZGFsLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogeyBsYWJlbDogJy5zd2FsMi1sYWJlbCcsIGNoZWNrYm94OiAnI3N3YWwyLWNoZWNrYm94JyB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgZWwuY2hlY2tib3guY3NzKHsgaGVpZ2h0OiAnMjJweCcsIHdpZHRoOiAnMjJweCcgfSk7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGVsLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgIC5jc3MoeyBmb250U2l6ZTogJzIycHgnIH0pXG4gICAgICAgICAgICAgICAgICAgIC5odG1sKGBEZWxldGUgdGhpcyBzZXNzaW9uJ3MgZXJyb3JzIGRpciAoJHtwYXRoLnJlbGF0aXZlKFJPT1RfUEFUSF9BQlMsIFNFU1NJT05fUEFUSF9BQlMpfSlgKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8vLyAwOiBleGl0IG5vdCBkZWxldGVcbiAgICAvLy8vIDE6IGV4aXQgeWVzIGRlbGV0ZVxuICAgIC8vLy8gdW5kZWZpbmVkOiBjYW5jZWxcbiAgICBsZXQgc2hvdWxkRXhpdCA9IGF3YWl0IE15QWxlcnQuYmlnLmNvbmZpcm0ob3B0aW9ucyk7XG4gICAgY29uc29sZS5sb2coeyBzaG91bGRFeGl0IH0pO1xuICAgIC8qaWYgKCB2YWx1ZSA9PT0gMSApIHtcbiAgICAgICAgY29uc3QgcmltcmFmID0gcmVxdWlyZSgncmltcmFmJyk7XG4gICAgICAgIHJpbXJhZihTRVNTSU9OX1BBVEhfQUJTLCBjb25zb2xlLmxvZyk7XG4gICAgfSovXG4gICAgaWYgKHNob3VsZEV4aXQpIHtcbiAgICAgICAgdXRpbC5nZXRDdXJyZW50V2luZG93KCkuY2xvc2UoKTtcbiAgICB9XG59KTtcbk5hdmlnYXRpb25CdXR0b25zLm1pbmltaXplLmNsaWNrKCgpID0+IHV0aWwuZ2V0Q3VycmVudFdpbmRvdygpLm1pbmltaXplKCkpO1xuXG5hc3luYyBmdW5jdGlvbiB0b2dnbGUoYWN0aW9uOiBcImhpZGVcIiB8IFwiZGlzcGxheVwiLCAuLi5hcmdzOiAoXCJUaXRsZVwiIHwgXCJOYXZpZ2F0aW9uQnV0dG9uc1wiIHwgXCJTaWRlYmFyXCIpW10pOiBQcm9taXNlPHVua25vd25bXT4ge1xuICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgZm9yIChsZXQgYSBvZiBhcmdzKSB7XG4gICAgICAgIHN3aXRjaCAoYSkge1xuICAgICAgICAgICAgY2FzZSBcIlRpdGxlXCI6XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChUaXRsZVthY3Rpb25dKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIk5hdmlnYXRpb25CdXR0b25zXCI6XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChOYXZpZ2F0aW9uQnV0dG9uc1thY3Rpb25dKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlNpZGViYXJcIjpcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKFNpZGViYXJbYWN0aW9uXSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBoaWRlKC4uLmFyZ3M6IChcIlRpdGxlXCIgfCBcIk5hdmlnYXRpb25CdXR0b25zXCIgfCBcIlNpZGViYXJcIilbXSk6IFByb21pc2U8dW5rbm93bltdPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRvZ2dsZShcImhpZGVcIiwgLi4uYXJncyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRpc3BsYXkoLi4uYXJnczogKFwiVGl0bGVcIiB8IFwiTmF2aWdhdGlvbkJ1dHRvbnNcIiB8IFwiU2lkZWJhclwiKVtdKTogUHJvbWlzZTx1bmtub3duW10+IHtcbiAgICByZXR1cm4gYXdhaXQgdG9nZ2xlKFwiZGlzcGxheVwiLCAuLi5hcmdzKTtcbn1cblxuY29uc29sZS5ncm91cEVuZCgpO1xuZXhwb3J0IGRlZmF1bHQgeyBza2lwRmFkZSwgTWFpbkNvbnRlbnQsIFNpZGViYXIsIFRpdGxlLCBCaWdDb25maWcsIERvY3VtZW50LCBOYXZpZ2F0aW9uQnV0dG9ucywgaGlkZSwgZGlzcGxheSB9XG4iXX0=