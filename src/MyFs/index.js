"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.log('MyFs.index.ts');
const fs = require("fs");
const path = require("path");
const util_1 = require("../util");
function mkdir(pathLike, options) {
    console.warn('MyFs.mkdir: should use vanilla mkdirSync.');
    return new Promise(resolve => fs.mkdir(pathLike, options, err => resolve(!util_1.bool(err))));
}
function path_exists(pathLike) {
    console.warn('MyFs.path_exists: should use vanilla existsSync.');
    return new Promise(resolve => fs.access(pathLike, fs.constants.F_OK, err => resolve(!util_1.bool(err))));
}
function is_name(pathLike) {
    return path.basename(pathLike) === pathLike;
}
function replace_ext(pathLike, ext) {
    if (ext.startsWith('.'))
        ext = ext.slice(1);
    return `${remove_ext(pathLike)}.${ext}`;
}
function remove_ext(pathLike) {
    return path.join(path.dirname(pathLike), path.basename(pathLike, path.extname(pathLike)));
}
function push_before_ext(pathLike, push) {
    let ext = path.extname(pathLike);
    return `${remove_ext(pathLike)}${push}${ext}`;
}
function split_ext(pathLike) {
    const ext = path.extname(pathLike);
    const filename = path.basename(pathLike, ext);
    return [filename, ext];
}
function basename(pathLike, ext) {
    console.warn('MyFs.basename: this just wraps vanilla path.basename.');
    if (!ext)
        return path.basename(pathLike);
    return path.basename(pathLike, ext);
}
function remove(pathLike) {
    console.warn('MyFs.remove: this just wraps unlinkSync.');
    fs.unlinkSync(pathLike);
}
exports.default = { mkdir, path_exists, split_ext, replace_ext, remove_ext, push_before_ext, is_name, basename, remove };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFN0IseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixrQ0FBK0I7QUFHL0IsU0FBUyxLQUFLLENBQUMsUUFBZ0IsRUFBRSxPQUFnRDtJQUM3RSxPQUFPLENBQUMsSUFBSSxDQUFDLDJDQUEyQyxDQUFDLENBQUM7SUFDMUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUN6QixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakUsQ0FBQztBQUdELFNBQVMsV0FBVyxDQUFDLFFBQWdCO0lBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0RBQWtELENBQUMsQ0FBQztJQUNqRSxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQ3pCLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVFLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxRQUFnQjtJQUM3QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssUUFBUSxDQUFBO0FBQy9DLENBQUM7QUFHRCxTQUFTLFdBQVcsQ0FBQyxRQUFnQixFQUFFLEdBQVc7SUFDOUMsSUFBSyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztRQUNwQixHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QixPQUFPLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzVDLENBQUM7QUFTRCxTQUFTLFVBQVUsQ0FBQyxRQUFnQjtJQUNoQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5RixDQUFDO0FBSUQsU0FBUyxlQUFlLENBQUMsUUFBZ0IsRUFBRSxJQUFxQjtJQUU1RCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLE9BQU8sR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2xELENBQUM7QUFNRCxTQUFTLFNBQVMsQ0FBQyxRQUFnQjtJQUkvQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLE9BQU8sQ0FBRSxRQUFRLEVBQUUsR0FBRyxDQUFFLENBQUM7QUFDN0IsQ0FBQztBQUdELFNBQVMsUUFBUSxDQUFDLFFBQWdCLEVBQUUsR0FBWTtJQUM1QyxPQUFPLENBQUMsSUFBSSxDQUFDLHVEQUF1RCxDQUFDLENBQUM7SUFDdEUsSUFBSyxDQUFDLEdBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBR0QsU0FBUyxNQUFNLENBQUMsUUFBZ0I7SUFDNUIsT0FBTyxDQUFDLElBQUksQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0lBQ3pELEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVELGtCQUFlLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImNvbnNvbGUubG9nKCdNeUZzLmluZGV4LnRzJyk7XG4vKippbXBvcnQgbXlmcyBmcm9tIFwiLi4vTXlGc1wiOyovXG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IGJvb2wgfSBmcm9tIFwiLi4vdXRpbFwiO1xuXG4vKipAZGVwcmVjYXRlZCovXG5mdW5jdGlvbiBta2RpcihwYXRoTGlrZTogc3RyaW5nLCBvcHRpb25zOiB7IG1vZGU/OiBudW1iZXI7IHJlY3Vyc2l2ZT86IGJvb2xlYW47IH0pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zb2xlLndhcm4oJ015RnMubWtkaXI6IHNob3VsZCB1c2UgdmFuaWxsYSBta2RpclN5bmMuJyk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT5cbiAgICAgICAgZnMubWtkaXIocGF0aExpa2UsIG9wdGlvbnMsIGVyciA9PiByZXNvbHZlKCFib29sKGVycikpKSk7XG59XG5cbi8qKkBkZXByZWNhdGVkKi9cbmZ1bmN0aW9uIHBhdGhfZXhpc3RzKHBhdGhMaWtlOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zb2xlLndhcm4oJ015RnMucGF0aF9leGlzdHM6IHNob3VsZCB1c2UgdmFuaWxsYSBleGlzdHNTeW5jLicpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+XG4gICAgICAgIGZzLmFjY2VzcyhwYXRoTGlrZSwgZnMuY29uc3RhbnRzLkZfT0ssIGVyciA9PiByZXNvbHZlKCFib29sKGVycikpKSk7XG59XG5cbmZ1bmN0aW9uIGlzX25hbWUocGF0aExpa2U6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwYXRoLmJhc2VuYW1lKHBhdGhMaWtlKSA9PT0gcGF0aExpa2Vcbn1cblxuLyoqe0BsaW5rIHJlbW92ZV9leHQgVXNlcyByZW1vdmVfZXh0fSovXG5mdW5jdGlvbiByZXBsYWNlX2V4dChwYXRoTGlrZTogc3RyaW5nLCBleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKCBleHQuc3RhcnRzV2l0aCgnLicpIClcbiAgICAgICAgZXh0ID0gZXh0LnNsaWNlKDEpO1xuICAgIHJldHVybiBgJHtyZW1vdmVfZXh0KHBhdGhMaWtlKX0uJHtleHR9YDtcbn1cblxuXG4vKipcbiAqIEBleGFtcGxlXG4gKiByZW1vdmVfZXh0KFwiZXhwZXJpbWVudHMvdHJ1dGhzL2Z1cl9lbGlzZV9CLnR4dFwiKVxuICogPj4+IGV4cGVyaW1lbnRzL3RydXRocy9mdXJfZWxpc2VfQlxuICogcmVtb3ZlX2V4dChcImZ1cl9lbGlzZV9CLnR4dFwiKVxuICogPj4+IGZ1cl9lbGlzZV9CICovXG5mdW5jdGlvbiByZW1vdmVfZXh0KHBhdGhMaWtlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBwYXRoLmpvaW4ocGF0aC5kaXJuYW1lKHBhdGhMaWtlKSwgcGF0aC5iYXNlbmFtZShwYXRoTGlrZSwgcGF0aC5leHRuYW1lKHBhdGhMaWtlKSkpO1xufVxuXG5cbi8qKntAbGluayByZW1vdmVfZXh0IFVzZXMgcmVtb3ZlX2V4dH0gKi9cbmZ1bmN0aW9uIHB1c2hfYmVmb3JlX2V4dChwYXRoTGlrZTogc3RyaW5nLCBwdXNoOiBzdHJpbmcgfCBudW1iZXIpOiBzdHJpbmcge1xuICAgIC8vIHNhZmUgYmVjYXVzZSBwYXRoLmV4dG5hbWUgcmV0dXJucyAnJyBpZiBubyBleHRcbiAgICBsZXQgZXh0ID0gcGF0aC5leHRuYW1lKHBhdGhMaWtlKTtcbiAgICByZXR1cm4gYCR7cmVtb3ZlX2V4dChwYXRoTGlrZSl9JHtwdXNofSR7ZXh0fWA7XG59XG5cbi8qKkBleGFtcGxlXG4gKiBjb25zdCBbIGZpbGVuYW1lLCBleHQgXSA9IG15ZnMuc3BsaXRfZXh0KFwic2h1YmkuZHViaVwiKTtcbiAqID4+PiBmaWxlbmFtZSAgICAgLy8gXCJzaHViaVwiXG4gKiA+Pj4gZXh0ICAgICAgICAgIC8vIFwiLmR1YmlcIiovXG5mdW5jdGlvbiBzcGxpdF9leHQocGF0aExpa2U6IHN0cmluZyk6IFsgc3RyaW5nLCBzdHJpbmcgXSB7XG4gICAgLy8gJ3NodWJpLicgICAgICAgICAnc2h1YmknLCAnLidcbiAgICAvLyAnc2h1YmknICAgICAgICAgICdzaHViaScsICcnXG4gICAgLy8gJy9ob21lL3NodWJpJyAgICAnc2h1YmknLCAnJ1xuICAgIGNvbnN0IGV4dCA9IHBhdGguZXh0bmFtZShwYXRoTGlrZSk7XG4gICAgY29uc3QgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKHBhdGhMaWtlLCBleHQpO1xuICAgIHJldHVybiBbIGZpbGVuYW1lLCBleHQgXTtcbn1cblxuLyoqQGRlcHJlY2F0ZWQqL1xuZnVuY3Rpb24gYmFzZW5hbWUocGF0aExpa2U6IHN0cmluZywgZXh0Pzogc3RyaW5nKSB7XG4gICAgY29uc29sZS53YXJuKCdNeUZzLmJhc2VuYW1lOiB0aGlzIGp1c3Qgd3JhcHMgdmFuaWxsYSBwYXRoLmJhc2VuYW1lLicpO1xuICAgIGlmICggIWV4dCApXG4gICAgICAgIHJldHVybiBwYXRoLmJhc2VuYW1lKHBhdGhMaWtlKTtcbiAgICByZXR1cm4gcGF0aC5iYXNlbmFtZShwYXRoTGlrZSwgZXh0KTtcbn1cblxuLyoqQGRlcHJlY2F0ZWQqL1xuZnVuY3Rpb24gcmVtb3ZlKHBhdGhMaWtlOiBzdHJpbmcpIHtcbiAgICBjb25zb2xlLndhcm4oJ015RnMucmVtb3ZlOiB0aGlzIGp1c3Qgd3JhcHMgdW5saW5rU3luYy4nKTtcbiAgICBmcy51bmxpbmtTeW5jKHBhdGhMaWtlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBta2RpciwgcGF0aF9leGlzdHMsIHNwbGl0X2V4dCwgcmVwbGFjZV9leHQsIHJlbW92ZV9leHQsIHB1c2hfYmVmb3JlX2V4dCwgaXNfbmFtZSwgYmFzZW5hbWUsIHJlbW92ZSB9XG4iXX0=