"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const util_1 = require("../util");
function mkdir(pathLike, options) {
    console.warn('MyFs.mkdir: should use vanilla mkdirSync.');
    return new Promise(resolve => fs.mkdir(pathLike, options, err => resolve(!util_1.bool(err))));
}
function path_exists(pathLike) {
    console.warn('MyFs.path_exists: should use vanilla existsSync.');
    return new Promise(resolve => fs.access(pathLike, fs.constants.F_OK, err => resolve(!util_1.bool(err))));
}
/**{@link remove_ext Uses remove_ext}*/
function replace_ext(pathLike, ext) {
    if (ext.startsWith('.'))
        ext = ext.slice(1);
    return `${remove_ext(pathLike)}.${ext}`;
}
/**
 * @example
 * remove_ext("experiments/truths/fur_elise_B.txt")
 * >>> experiments/truths/fur_elise_B
 * remove_ext("fur_elise_B.txt")
 * >>> fur_elise_B */
function remove_ext(pathLike) {
    return path.join(path.dirname(pathLike), path.basename(pathLike, path.extname(pathLike)));
}
/**{@link remove_ext Uses remove_ext} */
function push_before_ext(pathLike, push) {
    // safe because path.extname returns '' if no ext
    let ext = path.extname(pathLike);
    return `${remove_ext(pathLike)}${push}${ext}`;
}
function basename(pathLike, ext) {
    console.warn('MyFs.basename: this just wraps vanilla path.basename.');
    if (!ext)
        return path.basename(pathLike);
    return path.basename(pathLike, ext);
}
function remove(pathLike) {
    console.warn('MyFs.remove: this just wraps unlinkSync.');
    fs.unlinkSync(pathLike);
}
exports.default = { mkdir, path_exists, replace_ext, remove_ext, push_before_ext, basename, remove };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUF5QjtBQUN6QixrQ0FBK0I7QUFHL0IsU0FBUyxLQUFLLENBQUMsUUFBZ0IsRUFBRSxPQUFnRDtJQUM3RSxPQUFPLENBQUMsSUFBSSxDQUFDLDJDQUEyQyxDQUFDLENBQUM7SUFDMUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUN6QixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakUsQ0FBQztBQUdELFNBQVMsV0FBVyxDQUFDLFFBQWdCO0lBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0RBQWtELENBQUMsQ0FBQztJQUNqRSxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQ3pCLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVFLENBQUM7QUFHRCx1Q0FBdUM7QUFDdkMsU0FBUyxXQUFXLENBQUMsUUFBZ0IsRUFBRSxHQUFXO0lBQzlDLElBQUssR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7UUFDcEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkIsT0FBTyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUM1QyxDQUFDO0FBR0Q7Ozs7O3FCQUtxQjtBQUNyQixTQUFTLFVBQVUsQ0FBQyxRQUFnQjtJQUNoQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5RixDQUFDO0FBR0Qsd0NBQXdDO0FBQ3hDLFNBQVMsZUFBZSxDQUFDLFFBQWdCLEVBQUUsSUFBcUI7SUFDNUQsaURBQWlEO0lBQ2pELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDakMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDbEQsQ0FBQztBQUdELFNBQVMsUUFBUSxDQUFDLFFBQWdCLEVBQUUsR0FBWTtJQUM1QyxPQUFPLENBQUMsSUFBSSxDQUFDLHVEQUF1RCxDQUFDLENBQUM7SUFDdEUsSUFBSyxDQUFDLEdBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBR0QsU0FBUyxNQUFNLENBQUMsUUFBZ0I7SUFDNUIsT0FBTyxDQUFDLElBQUksQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0lBQ3pELEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVELGtCQUFlLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IGJvb2wgfSBmcm9tIFwiLi4vdXRpbFwiO1xuXG5cbmZ1bmN0aW9uIG1rZGlyKHBhdGhMaWtlOiBzdHJpbmcsIG9wdGlvbnM6IHsgbW9kZT86IG51bWJlcjsgcmVjdXJzaXZlPzogYm9vbGVhbjsgfSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnNvbGUud2FybignTXlGcy5ta2Rpcjogc2hvdWxkIHVzZSB2YW5pbGxhIG1rZGlyU3luYy4nKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PlxuICAgICAgICBmcy5ta2RpcihwYXRoTGlrZSwgb3B0aW9ucywgZXJyID0+IHJlc29sdmUoIWJvb2woZXJyKSkpKTtcbn1cblxuXG5mdW5jdGlvbiBwYXRoX2V4aXN0cyhwYXRoTGlrZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc29sZS53YXJuKCdNeUZzLnBhdGhfZXhpc3RzOiBzaG91bGQgdXNlIHZhbmlsbGEgZXhpc3RzU3luYy4nKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PlxuICAgICAgICBmcy5hY2Nlc3MocGF0aExpa2UsIGZzLmNvbnN0YW50cy5GX09LLCBlcnIgPT4gcmVzb2x2ZSghYm9vbChlcnIpKSkpO1xufVxuXG5cbi8qKntAbGluayByZW1vdmVfZXh0IFVzZXMgcmVtb3ZlX2V4dH0qL1xuZnVuY3Rpb24gcmVwbGFjZV9leHQocGF0aExpa2U6IHN0cmluZywgZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICggZXh0LnN0YXJ0c1dpdGgoJy4nKSApXG4gICAgICAgIGV4dCA9IGV4dC5zbGljZSgxKTtcbiAgICByZXR1cm4gYCR7cmVtb3ZlX2V4dChwYXRoTGlrZSl9LiR7ZXh0fWA7XG59XG5cblxuLyoqXG4gKiBAZXhhbXBsZVxuICogcmVtb3ZlX2V4dChcImV4cGVyaW1lbnRzL3RydXRocy9mdXJfZWxpc2VfQi50eHRcIilcbiAqID4+PiBleHBlcmltZW50cy90cnV0aHMvZnVyX2VsaXNlX0JcbiAqIHJlbW92ZV9leHQoXCJmdXJfZWxpc2VfQi50eHRcIilcbiAqID4+PiBmdXJfZWxpc2VfQiAqL1xuZnVuY3Rpb24gcmVtb3ZlX2V4dChwYXRoTGlrZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gcGF0aC5qb2luKHBhdGguZGlybmFtZShwYXRoTGlrZSksIHBhdGguYmFzZW5hbWUocGF0aExpa2UsIHBhdGguZXh0bmFtZShwYXRoTGlrZSkpKTtcbn1cblxuXG4vKip7QGxpbmsgcmVtb3ZlX2V4dCBVc2VzIHJlbW92ZV9leHR9ICovXG5mdW5jdGlvbiBwdXNoX2JlZm9yZV9leHQocGF0aExpa2U6IHN0cmluZywgcHVzaDogc3RyaW5nIHwgbnVtYmVyKTogc3RyaW5nIHtcbiAgICAvLyBzYWZlIGJlY2F1c2UgcGF0aC5leHRuYW1lIHJldHVybnMgJycgaWYgbm8gZXh0XG4gICAgbGV0IGV4dCA9IHBhdGguZXh0bmFtZShwYXRoTGlrZSk7XG4gICAgcmV0dXJuIGAke3JlbW92ZV9leHQocGF0aExpa2UpfSR7cHVzaH0ke2V4dH1gO1xufVxuXG5cbmZ1bmN0aW9uIGJhc2VuYW1lKHBhdGhMaWtlOiBzdHJpbmcsIGV4dD86IHN0cmluZykge1xuICAgIGNvbnNvbGUud2FybignTXlGcy5iYXNlbmFtZTogdGhpcyBqdXN0IHdyYXBzIHZhbmlsbGEgcGF0aC5iYXNlbmFtZS4nKTtcbiAgICBpZiAoICFleHQgKVxuICAgICAgICByZXR1cm4gcGF0aC5iYXNlbmFtZShwYXRoTGlrZSk7XG4gICAgcmV0dXJuIHBhdGguYmFzZW5hbWUocGF0aExpa2UsIGV4dCk7XG59XG5cblxuZnVuY3Rpb24gcmVtb3ZlKHBhdGhMaWtlOiBzdHJpbmcpIHtcbiAgICBjb25zb2xlLndhcm4oJ015RnMucmVtb3ZlOiB0aGlzIGp1c3Qgd3JhcHMgdW5saW5rU3luYy4nKTtcbiAgICBmcy51bmxpbmtTeW5jKHBhdGhMaWtlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBta2RpciwgcGF0aF9leGlzdHMsIHJlcGxhY2VfZXh0LCByZW1vdmVfZXh0LCBwdXNoX2JlZm9yZV9leHQsIGJhc2VuYW1lLCByZW1vdmUgfVxuIl19