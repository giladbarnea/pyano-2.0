"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
function mkdir(pathLike, options) {
    console.warn('MyFs.mkdir: should use vanilla mkdirSync.');
    return new Promise(resolve => fs.mkdir(pathLike, options, err => resolve(!bool(err))));
}
function path_exists(pathLike) {
    console.warn('MyFs.path_exists: should use vanilla existsSync.');
    return new Promise(resolve => fs.access(pathLike, fs.constants.F_OK, err => resolve(!bool(err))));
}
/**{@link remove_ext Uses remove_ext}*/
function replace_ext(pathLike, ext) {
    if (ext.startsWith('.'))
        ext = ext.slice(1);
    return `${remove_ext(pathLike)}.${ext}`;
}
/**
 * @example
 * remove_ext("experiments/truths/fur_elise_B.txt")
 * >>> experiments/truths/fur_elise_B
 * remove_ext("fur_elise_B.txt")
 * >>> fur_elise_B */
function remove_ext(pathLike) {
    return path.join(path.dirname(pathLike), path.basename(pathLike, path.extname(pathLike)));
}
/**{@link remove_ext Uses remove_ext} */
function push_before_ext(pathLike, push) {
    let ext = path.extname(pathLike);
    return `${remove_ext(pathLike)}${push}${ext}`;
}
function basename(pathLike, ext) {
    console.warn('MyFs.basename: this just wraps vanilla path.basename.');
    if (!ext)
        return path.basename(pathLike);
    return path.basename(pathLike, ext);
}
function remove(pathLike) {
    console.warn('MyFs.remove: this just wraps unlinkSync.');
    fs.unlinkSync(pathLike);
}
exports.default = { mkdir, path_exists, replace_ext, remove_ext, push_before_ext, basename, remove };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUF5QjtBQUd6QixTQUFTLEtBQUssQ0FBQyxRQUFnQixFQUFFLE9BQWdEO0lBQzdFLE9BQU8sQ0FBQyxJQUFJLENBQUMsMkNBQTJDLENBQUMsQ0FBQztJQUMxRCxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBR0QsU0FBUyxXQUFXLENBQUMsUUFBZ0I7SUFDakMsT0FBTyxDQUFDLElBQUksQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0lBQ2pFLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FDekIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUUsQ0FBQztBQUdELHVDQUF1QztBQUN2QyxTQUFTLFdBQVcsQ0FBQyxRQUFnQixFQUFFLEdBQVc7SUFDOUMsSUFBSyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztRQUNwQixHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QixPQUFPLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzVDLENBQUM7QUFHRDs7Ozs7cUJBS3FCO0FBQ3JCLFNBQVMsVUFBVSxDQUFDLFFBQWdCO0lBQ2hDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlGLENBQUM7QUFHRCx3Q0FBd0M7QUFDeEMsU0FBUyxlQUFlLENBQUMsUUFBZ0IsRUFBRSxJQUFxQjtJQUM1RCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLE9BQU8sR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2xELENBQUM7QUFHRCxTQUFTLFFBQVEsQ0FBQyxRQUFnQixFQUFFLEdBQVk7SUFDNUMsT0FBTyxDQUFDLElBQUksQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0lBQ3RFLElBQUssQ0FBQyxHQUFHO1FBQ0wsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUdELFNBQVMsTUFBTSxDQUFDLFFBQWdCO0lBQzVCLE9BQU8sQ0FBQyxJQUFJLENBQUMsMENBQTBDLENBQUMsQ0FBQztJQUN6RCxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFFRCxrQkFBZSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5cblxuZnVuY3Rpb24gbWtkaXIocGF0aExpa2U6IHN0cmluZywgb3B0aW9uczogeyBtb2RlPzogbnVtYmVyOyByZWN1cnNpdmU/OiBib29sZWFuOyB9KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc29sZS53YXJuKCdNeUZzLm1rZGlyOiBzaG91bGQgdXNlIHZhbmlsbGEgbWtkaXJTeW5jLicpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+XG4gICAgICAgIGZzLm1rZGlyKHBhdGhMaWtlLCBvcHRpb25zLCBlcnIgPT4gcmVzb2x2ZSghYm9vbChlcnIpKSkpO1xufVxuXG5cbmZ1bmN0aW9uIHBhdGhfZXhpc3RzKHBhdGhMaWtlOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zb2xlLndhcm4oJ015RnMucGF0aF9leGlzdHM6IHNob3VsZCB1c2UgdmFuaWxsYSBleGlzdHNTeW5jLicpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+XG4gICAgICAgIGZzLmFjY2VzcyhwYXRoTGlrZSwgZnMuY29uc3RhbnRzLkZfT0ssIGVyciA9PiByZXNvbHZlKCFib29sKGVycikpKSk7XG59XG5cblxuLyoqe0BsaW5rIHJlbW92ZV9leHQgVXNlcyByZW1vdmVfZXh0fSovXG5mdW5jdGlvbiByZXBsYWNlX2V4dChwYXRoTGlrZTogc3RyaW5nLCBleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKCBleHQuc3RhcnRzV2l0aCgnLicpIClcbiAgICAgICAgZXh0ID0gZXh0LnNsaWNlKDEpO1xuICAgIHJldHVybiBgJHtyZW1vdmVfZXh0KHBhdGhMaWtlKX0uJHtleHR9YDtcbn1cblxuXG4vKipcbiAqIEBleGFtcGxlXG4gKiByZW1vdmVfZXh0KFwiZXhwZXJpbWVudHMvdHJ1dGhzL2Z1cl9lbGlzZV9CLnR4dFwiKVxuICogPj4+IGV4cGVyaW1lbnRzL3RydXRocy9mdXJfZWxpc2VfQlxuICogcmVtb3ZlX2V4dChcImZ1cl9lbGlzZV9CLnR4dFwiKVxuICogPj4+IGZ1cl9lbGlzZV9CICovXG5mdW5jdGlvbiByZW1vdmVfZXh0KHBhdGhMaWtlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBwYXRoLmpvaW4ocGF0aC5kaXJuYW1lKHBhdGhMaWtlKSwgcGF0aC5iYXNlbmFtZShwYXRoTGlrZSwgcGF0aC5leHRuYW1lKHBhdGhMaWtlKSkpO1xufVxuXG5cbi8qKntAbGluayByZW1vdmVfZXh0IFVzZXMgcmVtb3ZlX2V4dH0gKi9cbmZ1bmN0aW9uIHB1c2hfYmVmb3JlX2V4dChwYXRoTGlrZTogc3RyaW5nLCBwdXNoOiBzdHJpbmcgfCBudW1iZXIpOiBzdHJpbmcge1xuICAgIGxldCBleHQgPSBwYXRoLmV4dG5hbWUocGF0aExpa2UpO1xuICAgIHJldHVybiBgJHtyZW1vdmVfZXh0KHBhdGhMaWtlKX0ke3B1c2h9JHtleHR9YDtcbn1cblxuXG5mdW5jdGlvbiBiYXNlbmFtZShwYXRoTGlrZTogc3RyaW5nLCBleHQ/OiBzdHJpbmcpIHtcbiAgICBjb25zb2xlLndhcm4oJ015RnMuYmFzZW5hbWU6IHRoaXMganVzdCB3cmFwcyB2YW5pbGxhIHBhdGguYmFzZW5hbWUuJyk7XG4gICAgaWYgKCAhZXh0IClcbiAgICAgICAgcmV0dXJuIHBhdGguYmFzZW5hbWUocGF0aExpa2UpO1xuICAgIHJldHVybiBwYXRoLmJhc2VuYW1lKHBhdGhMaWtlLCBleHQpO1xufVxuXG5cbmZ1bmN0aW9uIHJlbW92ZShwYXRoTGlrZTogc3RyaW5nKSB7XG4gICAgY29uc29sZS53YXJuKCdNeUZzLnJlbW92ZTogdGhpcyBqdXN0IHdyYXBzIHVubGlua1N5bmMuJyk7XG4gICAgZnMudW5saW5rU3luYyhwYXRoTGlrZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgbWtkaXIsIHBhdGhfZXhpc3RzLCByZXBsYWNlX2V4dCwgcmVtb3ZlX2V4dCwgcHVzaF9iZWZvcmVfZXh0LCBiYXNlbmFtZSwgcmVtb3ZlIH1cbiJdfQ==