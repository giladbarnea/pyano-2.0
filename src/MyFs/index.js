"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.log('MyFs.index.ts');
const fs = require("fs");
const path = require("path");
const util_1 = require("../util");
function mkdir(pathLike, options) {
    console.warn('MyFs.mkdir: should use vanilla mkdirSync.');
    return new Promise(resolve => fs.mkdir(pathLike, options, err => resolve(!util_1.bool(err))));
}
function path_exists(pathLike) {
    console.warn('MyFs.path_exists: should use vanilla existsSync.');
    return new Promise(resolve => fs.access(pathLike, fs.constants.F_OK, err => resolve(!util_1.bool(err))));
}
function replace_ext(pathLike, ext) {
    if (ext.startsWith('.'))
        ext = ext.slice(1);
    return `${remove_ext(pathLike)}.${ext}`;
}
function remove_ext(pathLike) {
    return path.join(path.dirname(pathLike), path.basename(pathLike, path.extname(pathLike)));
}
function push_before_ext(pathLike, push) {
    let ext = path.extname(pathLike);
    return `${remove_ext(pathLike)}${push}${ext}`;
}
function split_ext(pathLike) {
    const ext = path.extname(pathLike);
    const filename = path.basename(pathLike, ext);
    return [filename, ext];
}
function basename(pathLike, ext) {
    console.warn('MyFs.basename: this just wraps vanilla path.basename.');
    if (!ext)
        return path.basename(pathLike);
    return path.basename(pathLike, ext);
}
function remove(pathLike) {
    console.warn('MyFs.remove: this just wraps unlinkSync.');
    fs.unlinkSync(pathLike);
}
exports.default = { mkdir, path_exists, split_ext, replace_ext, remove_ext, push_before_ext, basename, remove };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFN0IseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixrQ0FBK0I7QUFHL0IsU0FBUyxLQUFLLENBQUMsUUFBZ0IsRUFBRSxPQUFnRDtJQUM3RSxPQUFPLENBQUMsSUFBSSxDQUFDLDJDQUEyQyxDQUFDLENBQUM7SUFDMUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUN6QixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakUsQ0FBQztBQUdELFNBQVMsV0FBVyxDQUFDLFFBQWdCO0lBQ2pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0RBQWtELENBQUMsQ0FBQztJQUNqRSxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQ3pCLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVFLENBQUM7QUFJRCxTQUFTLFdBQVcsQ0FBQyxRQUFnQixFQUFFLEdBQVc7SUFDOUMsSUFBSyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztRQUNwQixHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QixPQUFPLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzVDLENBQUM7QUFTRCxTQUFTLFVBQVUsQ0FBQyxRQUFnQjtJQUNoQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5RixDQUFDO0FBSUQsU0FBUyxlQUFlLENBQUMsUUFBZ0IsRUFBRSxJQUFxQjtJQUU1RCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLE9BQU8sR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2xELENBQUM7QUFNRCxTQUFTLFNBQVMsQ0FBQyxRQUFnQjtJQUMvQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLE9BQU8sQ0FBRSxRQUFRLEVBQUUsR0FBRyxDQUFFLENBQUM7QUFDN0IsQ0FBQztBQUdELFNBQVMsUUFBUSxDQUFDLFFBQWdCLEVBQUUsR0FBWTtJQUM1QyxPQUFPLENBQUMsSUFBSSxDQUFDLHVEQUF1RCxDQUFDLENBQUM7SUFDdEUsSUFBSyxDQUFDLEdBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBR0QsU0FBUyxNQUFNLENBQUMsUUFBZ0I7SUFDNUIsT0FBTyxDQUFDLElBQUksQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0lBQ3pELEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQUVELGtCQUFlLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiY29uc29sZS5sb2coJ015RnMuaW5kZXgudHMnKTtcbi8qKmltcG9ydCBteWZzIGZyb20gXCIuLi9NeUZzXCI7Ki9cbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgYm9vbCB9IGZyb20gXCIuLi91dGlsXCI7XG5cbi8qKkBkZXByZWNhdGVkKi9cbmZ1bmN0aW9uIG1rZGlyKHBhdGhMaWtlOiBzdHJpbmcsIG9wdGlvbnM6IHsgbW9kZT86IG51bWJlcjsgcmVjdXJzaXZlPzogYm9vbGVhbjsgfSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnNvbGUud2FybignTXlGcy5ta2Rpcjogc2hvdWxkIHVzZSB2YW5pbGxhIG1rZGlyU3luYy4nKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PlxuICAgICAgICBmcy5ta2RpcihwYXRoTGlrZSwgb3B0aW9ucywgZXJyID0+IHJlc29sdmUoIWJvb2woZXJyKSkpKTtcbn1cblxuLyoqQGRlcHJlY2F0ZWQqL1xuZnVuY3Rpb24gcGF0aF9leGlzdHMocGF0aExpa2U6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnNvbGUud2FybignTXlGcy5wYXRoX2V4aXN0czogc2hvdWxkIHVzZSB2YW5pbGxhIGV4aXN0c1N5bmMuJyk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT5cbiAgICAgICAgZnMuYWNjZXNzKHBhdGhMaWtlLCBmcy5jb25zdGFudHMuRl9PSywgZXJyID0+IHJlc29sdmUoIWJvb2woZXJyKSkpKTtcbn1cblxuXG4vKip7QGxpbmsgcmVtb3ZlX2V4dCBVc2VzIHJlbW92ZV9leHR9Ki9cbmZ1bmN0aW9uIHJlcGxhY2VfZXh0KHBhdGhMaWtlOiBzdHJpbmcsIGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIGV4dC5zdGFydHNXaXRoKCcuJykgKVxuICAgICAgICBleHQgPSBleHQuc2xpY2UoMSk7XG4gICAgcmV0dXJuIGAke3JlbW92ZV9leHQocGF0aExpa2UpfS4ke2V4dH1gO1xufVxuXG5cbi8qKlxuICogQGV4YW1wbGVcbiAqIHJlbW92ZV9leHQoXCJleHBlcmltZW50cy90cnV0aHMvZnVyX2VsaXNlX0IudHh0XCIpXG4gKiA+Pj4gZXhwZXJpbWVudHMvdHJ1dGhzL2Z1cl9lbGlzZV9CXG4gKiByZW1vdmVfZXh0KFwiZnVyX2VsaXNlX0IudHh0XCIpXG4gKiA+Pj4gZnVyX2VsaXNlX0IgKi9cbmZ1bmN0aW9uIHJlbW92ZV9leHQocGF0aExpa2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHBhdGguam9pbihwYXRoLmRpcm5hbWUocGF0aExpa2UpLCBwYXRoLmJhc2VuYW1lKHBhdGhMaWtlLCBwYXRoLmV4dG5hbWUocGF0aExpa2UpKSk7XG59XG5cblxuLyoqe0BsaW5rIHJlbW92ZV9leHQgVXNlcyByZW1vdmVfZXh0fSAqL1xuZnVuY3Rpb24gcHVzaF9iZWZvcmVfZXh0KHBhdGhMaWtlOiBzdHJpbmcsIHB1c2g6IHN0cmluZyB8IG51bWJlcik6IHN0cmluZyB7XG4gICAgLy8gc2FmZSBiZWNhdXNlIHBhdGguZXh0bmFtZSByZXR1cm5zICcnIGlmIG5vIGV4dFxuICAgIGxldCBleHQgPSBwYXRoLmV4dG5hbWUocGF0aExpa2UpO1xuICAgIHJldHVybiBgJHtyZW1vdmVfZXh0KHBhdGhMaWtlKX0ke3B1c2h9JHtleHR9YDtcbn1cblxuLyoqQGV4YW1wbGVcbiAqIGNvbnN0IFsgZmlsZW5hbWUsIGV4dCBdID0gbXlmcy5zcGxpdF9leHQoXCJzaHViaS5kdWJpXCIpO1xuICogPj4+IGZpbGVuYW1lICAgICAvLyBcInNodWJpXCJcbiAqID4+PiBleHQgICAgICAgICAgLy8gXCIuZHViaVwiKi9cbmZ1bmN0aW9uIHNwbGl0X2V4dChwYXRoTGlrZTogc3RyaW5nKTogWyBzdHJpbmcsIHN0cmluZyBdIHtcbiAgICBjb25zdCBleHQgPSBwYXRoLmV4dG5hbWUocGF0aExpa2UpO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gcGF0aC5iYXNlbmFtZShwYXRoTGlrZSwgZXh0KTtcbiAgICByZXR1cm4gWyBmaWxlbmFtZSwgZXh0IF07XG59XG5cbi8qKkBkZXByZWNhdGVkKi9cbmZ1bmN0aW9uIGJhc2VuYW1lKHBhdGhMaWtlOiBzdHJpbmcsIGV4dD86IHN0cmluZykge1xuICAgIGNvbnNvbGUud2FybignTXlGcy5iYXNlbmFtZTogdGhpcyBqdXN0IHdyYXBzIHZhbmlsbGEgcGF0aC5iYXNlbmFtZS4nKTtcbiAgICBpZiAoICFleHQgKVxuICAgICAgICByZXR1cm4gcGF0aC5iYXNlbmFtZShwYXRoTGlrZSk7XG4gICAgcmV0dXJuIHBhdGguYmFzZW5hbWUocGF0aExpa2UsIGV4dCk7XG59XG5cbi8qKkBkZXByZWNhdGVkKi9cbmZ1bmN0aW9uIHJlbW92ZShwYXRoTGlrZTogc3RyaW5nKSB7XG4gICAgY29uc29sZS53YXJuKCdNeUZzLnJlbW92ZTogdGhpcyBqdXN0IHdyYXBzIHVubGlua1N5bmMuJyk7XG4gICAgZnMudW5saW5rU3luYyhwYXRoTGlrZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgbWtkaXIsIHBhdGhfZXhpc3RzLCBzcGxpdF9leHQsIHJlcGxhY2VfZXh0LCByZW1vdmVfZXh0LCBwdXNoX2JlZm9yZV9leHQsIGJhc2VuYW1lLCByZW1vdmUgfVxuIl19