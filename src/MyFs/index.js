"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.log('MyFs.index.ts');
const fs = require("fs");
const path = require("path");
const util_1 = require("../util");
function is_name(pathLike) {
    return path.basename(pathLike) === pathLike;
}
function replace_ext(pathLike, ext) {
    if (ext.startsWith('.'))
        ext = ext.slice(1);
    return `${remove_ext(pathLike)}.${ext}`;
}
function remove_ext(pathLike) {
    return path.join(path.dirname(pathLike), path.basename(pathLike, path.extname(pathLike)));
}
function push_before_ext(pathLike, push) {
    let ext = path.extname(pathLike);
    return `${remove_ext(pathLike)}${push}${ext}`;
}
function split_ext(pathLike) {
    const ext = path.extname(pathLike);
    const filename = path.basename(pathLike, ext);
    return [filename, ext];
}
function createIfNotExists(path) {
    try {
        if (!fs.existsSync(path)) {
            fs.mkdirSync(path);
            console.warn(`createIfNotExists(path) created: ${path}`);
            return false;
        }
        return true;
    }
    catch (e) {
        console.error(`createIfNotExists(${path})`, e);
    }
}
function isEmpty(abspath, { recursive }) {
    const items = fs.readdirSync(abspath);
    if (!recursive) {
        return !util_1.bool(items);
    }
    for (let item of items) {
        const itemAbs = path.join(abspath, item);
        let stats = fs.statSync(itemAbs);
        if (stats.isDirectory()) {
            let empty = isEmpty(itemAbs, { recursive: true });
            if (!empty) {
                return false;
            }
        }
        else {
            return false;
        }
    }
    return true;
}
function getEmptyDirs(abspath) {
    const emptyDirs = [];
    const items = fs.readdirSync(abspath);
    if (!util_1.bool(items))
        return [abspath];
    for (let item of items) {
        const itemAbs = path.join(abspath, item);
        let stats = fs.statSync(itemAbs);
        if (stats.isDirectory()) {
            if (isEmpty(itemAbs, { recursive: true })) {
                emptyDirs.push(itemAbs);
            }
            else {
                emptyDirs.push(...getEmptyDirs(itemAbs));
            }
        }
    }
    return emptyDirs;
}
exports.default = {
    split_ext,
    replace_ext,
    remove_ext,
    push_before_ext,
    is_name,
    createIfNotExists,
    isEmpty,
    getEmptyDirs
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDN0IseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixrQ0FBK0I7QUFHL0IsU0FBUyxPQUFPLENBQUMsUUFBZ0I7SUFDN0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLFFBQVEsQ0FBQTtBQUMvQyxDQUFDO0FBR0QsU0FBUyxXQUFXLENBQUMsUUFBZ0IsRUFBRSxHQUFXO0lBQzlDLElBQUssR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7UUFDcEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkIsT0FBTyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUM1QyxDQUFDO0FBU0QsU0FBUyxVQUFVLENBQUMsUUFBZ0I7SUFDaEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDOUYsQ0FBQztBQUlELFNBQVMsZUFBZSxDQUFDLFFBQWdCLEVBQUUsSUFBcUI7SUFFNUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxPQUFPLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNsRCxDQUFDO0FBTUQsU0FBUyxTQUFTLENBQUMsUUFBZ0I7SUFJL0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5QyxPQUFPLENBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBRSxDQUFDO0FBQzdCLENBQUM7QUFHRCxTQUFTLGlCQUFpQixDQUFDLElBQVk7SUFDbkMsSUFBSTtRQUNBLElBQUssQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFHO1lBQ3hCLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkIsT0FBTyxDQUFDLElBQUksQ0FBQyxvQ0FBb0MsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN6RCxPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUNELE9BQU8sSUFBSSxDQUFDO0tBR2Y7SUFBQyxPQUFRLENBQUMsRUFBRztRQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2xEO0FBQ0wsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLE9BQWUsRUFBRSxFQUFFLFNBQVMsRUFBMEI7SUFDbkUsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QyxJQUFLLENBQUMsU0FBUyxFQUFHO1FBQ2QsT0FBTyxDQUFDLFdBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtLQUN0QjtJQUNELEtBQU0sSUFBSSxJQUFJLElBQUksS0FBSyxFQUFHO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFakMsSUFBSyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUc7WUFDdkIsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ25ELElBQUssQ0FBQyxLQUFLLEVBQUc7Z0JBQ1YsT0FBTyxLQUFLLENBQUM7YUFDaEI7U0FDSjthQUFNO1lBQ0gsT0FBTyxLQUFLLENBQUM7U0FDaEI7S0FDSjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBRWhCLENBQUM7QUFHRCxTQUFTLFlBQVksQ0FBQyxPQUFlO0lBQ2pDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNyQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXRDLElBQUssQ0FBQyxXQUFJLENBQUMsS0FBSyxDQUFDO1FBQ2IsT0FBTyxDQUFFLE9BQU8sQ0FBRSxDQUFDO0lBRXZCLEtBQU0sSUFBSSxJQUFJLElBQUksS0FBSyxFQUFHO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakMsSUFBSyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUc7WUFDdkIsSUFBSyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFHLElBQUksRUFBRSxDQUFDLEVBQUc7Z0JBQzFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDM0I7aUJBQU07Z0JBQ0gsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQzVDO1NBQ0o7S0FDSjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBRXJCLENBQUM7QUFFRCxrQkFBZTtJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLGVBQWU7SUFDZixPQUFPO0lBQ1AsaUJBQWlCO0lBQ2pCLE9BQU87SUFDUCxZQUFZO0NBQ2YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKmltcG9ydCBteWZzIGZyb20gXCIuLi9NeUZzXCI7Ki9cbmNvbnNvbGUubG9nKCdNeUZzLmluZGV4LnRzJyk7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IGJvb2wgfSBmcm9tIFwiLi4vdXRpbFwiO1xuXG5cbmZ1bmN0aW9uIGlzX25hbWUocGF0aExpa2U6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwYXRoLmJhc2VuYW1lKHBhdGhMaWtlKSA9PT0gcGF0aExpa2Vcbn1cblxuLyoqe0BsaW5rIHJlbW92ZV9leHQgVXNlcyByZW1vdmVfZXh0fSovXG5mdW5jdGlvbiByZXBsYWNlX2V4dChwYXRoTGlrZTogc3RyaW5nLCBleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKCBleHQuc3RhcnRzV2l0aCgnLicpIClcbiAgICAgICAgZXh0ID0gZXh0LnNsaWNlKDEpO1xuICAgIHJldHVybiBgJHtyZW1vdmVfZXh0KHBhdGhMaWtlKX0uJHtleHR9YDtcbn1cblxuXG4vKipcbiAqIEBleGFtcGxlXG4gKiByZW1vdmVfZXh0KFwiZXhwZXJpbWVudHMvdHJ1dGhzL2Z1cl9lbGlzZV9CLnR4dFwiKVxuICogPj4+IGV4cGVyaW1lbnRzL3RydXRocy9mdXJfZWxpc2VfQlxuICogcmVtb3ZlX2V4dChcImZ1cl9lbGlzZV9CLnR4dFwiKVxuICogPj4+IGZ1cl9lbGlzZV9CICovXG5mdW5jdGlvbiByZW1vdmVfZXh0KHBhdGhMaWtlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBwYXRoLmpvaW4ocGF0aC5kaXJuYW1lKHBhdGhMaWtlKSwgcGF0aC5iYXNlbmFtZShwYXRoTGlrZSwgcGF0aC5leHRuYW1lKHBhdGhMaWtlKSkpO1xufVxuXG5cbi8qKntAbGluayByZW1vdmVfZXh0IFVzZXMgcmVtb3ZlX2V4dH0gKi9cbmZ1bmN0aW9uIHB1c2hfYmVmb3JlX2V4dChwYXRoTGlrZTogc3RyaW5nLCBwdXNoOiBzdHJpbmcgfCBudW1iZXIpOiBzdHJpbmcge1xuICAgIC8vIHNhZmUgYmVjYXVzZSBwYXRoLmV4dG5hbWUgcmV0dXJucyAnJyBpZiBubyBleHRcbiAgICBsZXQgZXh0ID0gcGF0aC5leHRuYW1lKHBhdGhMaWtlKTtcbiAgICByZXR1cm4gYCR7cmVtb3ZlX2V4dChwYXRoTGlrZSl9JHtwdXNofSR7ZXh0fWA7XG59XG5cbi8qKkBleGFtcGxlXG4gKiBjb25zdCBbIGZpbGVuYW1lLCBleHQgXSA9IG15ZnMuc3BsaXRfZXh0KFwic2h1YmkuZHViaVwiKTtcbiAqID4+PiBmaWxlbmFtZSAgICAgLy8gXCJzaHViaVwiXG4gKiA+Pj4gZXh0ICAgICAgICAgIC8vIFwiLmR1YmlcIiovXG5mdW5jdGlvbiBzcGxpdF9leHQocGF0aExpa2U6IHN0cmluZyk6IFsgc3RyaW5nLCBzdHJpbmcgXSB7XG4gICAgLy8gJ3NodWJpLicgICAgICAgICAnc2h1YmknLCAnLidcbiAgICAvLyAnc2h1YmknICAgICAgICAgICdzaHViaScsICcnXG4gICAgLy8gJy9ob21lL3NodWJpJyAgICAnc2h1YmknLCAnJ1xuICAgIGNvbnN0IGV4dCA9IHBhdGguZXh0bmFtZShwYXRoTGlrZSk7XG4gICAgY29uc3QgZmlsZW5hbWUgPSBwYXRoLmJhc2VuYW1lKHBhdGhMaWtlLCBleHQpO1xuICAgIHJldHVybiBbIGZpbGVuYW1lLCBleHQgXTtcbn1cblxuLyoqUmV0dXJucyB3aGV0aGVyIGV4aXN0ZWQgYWxyZWFkeSovXG5mdW5jdGlvbiBjcmVhdGVJZk5vdEV4aXN0cyhwYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoICFmcy5leGlzdHNTeW5jKHBhdGgpICkge1xuICAgICAgICAgICAgZnMubWtkaXJTeW5jKHBhdGgpO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBjcmVhdGVJZk5vdEV4aXN0cyhwYXRoKSBjcmVhdGVkOiAke3BhdGh9YCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9IGNhdGNoICggZSApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgY3JlYXRlSWZOb3RFeGlzdHMoJHtwYXRofSlgLCBlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkoYWJzcGF0aDogc3RyaW5nLCB7IHJlY3Vyc2l2ZSB9OiB7IHJlY3Vyc2l2ZTogYm9vbGVhbiB9KTogYm9vbGVhbiB7XG4gICAgY29uc3QgaXRlbXMgPSBmcy5yZWFkZGlyU3luYyhhYnNwYXRoKTtcbiAgICBpZiAoICFyZWN1cnNpdmUgKSB7XG4gICAgICAgIHJldHVybiAhYm9vbChpdGVtcylcbiAgICB9XG4gICAgZm9yICggbGV0IGl0ZW0gb2YgaXRlbXMgKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1BYnMgPSBwYXRoLmpvaW4oYWJzcGF0aCwgaXRlbSk7XG4gICAgICAgIGxldCBzdGF0cyA9IGZzLnN0YXRTeW5jKGl0ZW1BYnMpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCBzdGF0cy5pc0RpcmVjdG9yeSgpICkge1xuICAgICAgICAgICAgbGV0IGVtcHR5ID0gaXNFbXB0eShpdGVtQWJzLCB7IHJlY3Vyc2l2ZSA6IHRydWUgfSk7XG4gICAgICAgICAgICBpZiAoICFlbXB0eSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gICAgXG59XG5cbi8qKlJldHVybnMgYSBsaXN0IG9mIGFic29sdXRlIHBhdGhzIG9mIGVtcHR5IGRpcnMqL1xuZnVuY3Rpb24gZ2V0RW1wdHlEaXJzKGFic3BhdGg6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBlbXB0eURpcnMgPSBbXTtcbiAgICBjb25zdCBpdGVtcyA9IGZzLnJlYWRkaXJTeW5jKGFic3BhdGgpO1xuICAgIFxuICAgIGlmICggIWJvb2woaXRlbXMpIClcbiAgICAgICAgcmV0dXJuIFsgYWJzcGF0aCBdO1xuICAgIFxuICAgIGZvciAoIGxldCBpdGVtIG9mIGl0ZW1zICkge1xuICAgICAgICBjb25zdCBpdGVtQWJzID0gcGF0aC5qb2luKGFic3BhdGgsIGl0ZW0pO1xuICAgICAgICBsZXQgc3RhdHMgPSBmcy5zdGF0U3luYyhpdGVtQWJzKTtcbiAgICAgICAgaWYgKCBzdGF0cy5pc0RpcmVjdG9yeSgpICkge1xuICAgICAgICAgICAgaWYgKCBpc0VtcHR5KGl0ZW1BYnMsIHsgcmVjdXJzaXZlIDogdHJ1ZSB9KSApIHtcbiAgICAgICAgICAgICAgICBlbXB0eURpcnMucHVzaChpdGVtQWJzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZW1wdHlEaXJzLnB1c2goLi4uZ2V0RW1wdHlEaXJzKGl0ZW1BYnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW1wdHlEaXJzO1xuICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgc3BsaXRfZXh0LFxuICAgIHJlcGxhY2VfZXh0LFxuICAgIHJlbW92ZV9leHQsXG4gICAgcHVzaF9iZWZvcmVfZXh0LFxuICAgIGlzX25hbWUsXG4gICAgY3JlYXRlSWZOb3RFeGlzdHMsXG4gICAgaXNFbXB0eSxcbiAgICBnZXRFbXB0eURpcnNcbn1cbiJdfQ==