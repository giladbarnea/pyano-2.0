"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.log('src/Alert/index.ts');
const sweetalert2_1 = require("sweetalert2");
function alertFn() {
    console.log('alertFn');
}
const smallMixin = sweetalert2_1.default.mixin({
    animation: false,
    customClass: 'animated fadeIn',
    position: "bottom-start",
    showConfirmButton: false,
    timer: 8000,
    toast: true,
});
const withConfirm = {
    cancelButtonText: "No",
    confirmButtonText: "Yes",
    showCancelButton: true,
    showConfirmButton: true,
    timer: null,
};
const blockingOptions = {
    allowEnterKey: false,
    allowEscapeKey: false,
    allowOutsideClick: false,
    animation: false,
    customClass: 'animated fadeIn',
    showCancelButton: false,
    showCloseButton: false,
    showConfirmButton: false,
};
const blockingSwalMixin = sweetalert2_1.default.mixin(blockingOptions);
const small = {
    _question(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'question' }));
    },
    _info(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'info' }));
    },
    _success(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'success' }));
    },
    _error(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'error' }));
    },
    _warning(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { showConfirmButton: true, type: 'warning' }));
    },
    error(title, text) {
        return smallMixin.fire({
            title,
            text,
            type: "error",
        });
    },
    info(title, text = null, showConfirmBtns = false) {
        let infoOptions = {
            title,
            text,
            type: "info",
        };
        if (showConfirmBtns)
            infoOptions = Object.assign(Object.assign({}, infoOptions), withConfirm);
        return smallMixin.fire(infoOptions);
    },
    success(title, text = null, timer = 4000) {
        return smallMixin.fire({
            title,
            text,
            type: "success",
            timer
        });
    },
    warning(title, text = null, showConfirmBtns = false) {
        let warningOptions = {
            title,
            text,
            type: "warning"
        };
        if (showConfirmBtns)
            warningOptions = Object.assign(Object.assign({}, warningOptions), withConfirm);
        return smallMixin.fire(warningOptions);
    },
};
exports.default = { alertFn, small };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNsQyw2Q0FBd0U7QUFFeEUsU0FBUyxPQUFPO0lBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRUQsTUFBTSxVQUFVLEdBQUcscUJBQUksQ0FBQyxLQUFLLENBQUM7SUFDMUIsU0FBUyxFQUFHLEtBQUs7SUFDakIsV0FBVyxFQUFHLGlCQUFpQjtJQUMvQixRQUFRLEVBQUcsY0FBYztJQUN6QixpQkFBaUIsRUFBRyxLQUFLO0lBQ3pCLEtBQUssRUFBRyxJQUFJO0lBQ1osS0FBSyxFQUFHLElBQUk7Q0FFZixDQUFDLENBQUM7QUFDSCxNQUFNLFdBQVcsR0FBRztJQUNoQixnQkFBZ0IsRUFBRyxJQUFJO0lBQ3ZCLGlCQUFpQixFQUFHLEtBQUs7SUFDekIsZ0JBQWdCLEVBQUcsSUFBSTtJQUN2QixpQkFBaUIsRUFBRyxJQUFJO0lBQ3hCLEtBQUssRUFBRyxJQUFJO0NBRWYsQ0FBQztBQUNGLE1BQU0sZUFBZSxHQUFHO0lBQ3BCLGFBQWEsRUFBRyxLQUFLO0lBQ3JCLGNBQWMsRUFBRyxLQUFLO0lBQ3RCLGlCQUFpQixFQUFHLEtBQUs7SUFDekIsU0FBUyxFQUFHLEtBQUs7SUFDakIsV0FBVyxFQUFHLGlCQUFpQjtJQUMvQixnQkFBZ0IsRUFBRyxLQUFLO0lBQ3hCLGVBQWUsRUFBRyxLQUFLO0lBQ3ZCLGlCQUFpQixFQUFHLEtBQUs7Q0FFNUIsQ0FBQztBQUNGLE1BQU0saUJBQWlCLEdBQUcscUJBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7QUFZdEQsTUFBTSxLQUFLLEdBQVU7SUFDakIsU0FBUyxDQUFDLE9BQU87UUFDYixPQUFPLFVBQVUsQ0FBQyxJQUFJLGlDQUFNLE9BQU8sR0FBSyxFQUFFLElBQUksRUFBRyxVQUFVLEVBQUUsRUFBRyxDQUFBO0lBQ3BFLENBQUM7SUFDRCxLQUFLLENBQUMsT0FBTztRQUNULE9BQU8sVUFBVSxDQUFDLElBQUksaUNBQU0sT0FBTyxHQUFLLEVBQUUsSUFBSSxFQUFHLE1BQU0sRUFBRSxFQUFHLENBQUE7SUFDaEUsQ0FBQztJQUNELFFBQVEsQ0FBQyxPQUFPO1FBQ1osT0FBTyxVQUFVLENBQUMsSUFBSSxpQ0FBTSxPQUFPLEdBQUssRUFBRSxJQUFJLEVBQUcsU0FBUyxFQUFFLEVBQUcsQ0FBQTtJQUNuRSxDQUFDO0lBQ0QsTUFBTSxDQUFDLE9BQU87UUFDVixPQUFPLFVBQVUsQ0FBQyxJQUFJLGlDQUFNLE9BQU8sR0FBSyxFQUFFLElBQUksRUFBRyxPQUFPLEVBQUUsRUFBRyxDQUFBO0lBQ2pFLENBQUM7SUFDRCxRQUFRLENBQUMsT0FBTztRQUNaLE9BQU8sVUFBVSxDQUFDLElBQUksaUNBQ2YsT0FBTyxHQUNQLEVBQUUsaUJBQWlCLEVBQUcsSUFBSSxFQUFFLElBQUksRUFBRyxTQUFTLEVBQUUsRUFDbkQsQ0FBQTtJQUNOLENBQUM7SUFDRCxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUk7UUFDYixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDbkIsS0FBSztZQUNMLElBQUk7WUFDSixJQUFJLEVBQUcsT0FBTztTQUVqQixDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLGVBQWUsR0FBRyxLQUFLO1FBQzVDLElBQUksV0FBVyxHQUFHO1lBQ2QsS0FBSztZQUNMLElBQUk7WUFDSixJQUFJLEVBQUcsTUFBTTtTQUNoQixDQUFDO1FBQ0YsSUFBSyxlQUFlO1lBQ2hCLFdBQVcsbUNBQVEsV0FBVyxHQUFLLFdBQVcsQ0FBRSxDQUFDO1FBQ3JELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLEtBQUssR0FBRyxJQUFJO1FBRXBDLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQztZQUNuQixLQUFLO1lBQ0wsSUFBSTtZQUNKLElBQUksRUFBRyxTQUFTO1lBQ2hCLEtBQUs7U0FDUixDQUFDLENBQUE7SUFDTixDQUFDO0lBQ0QsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLGVBQWUsR0FBRyxLQUFLO1FBQy9DLElBQUksY0FBYyxHQUFHO1lBQ2pCLEtBQUs7WUFDTCxJQUFJO1lBQ0osSUFBSSxFQUFHLFNBQVM7U0FDbkIsQ0FBQztRQUNGLElBQUssZUFBZTtZQUNoQixjQUFjLG1DQUFRLGNBQWMsR0FBSyxXQUFXLENBQUUsQ0FBQztRQUMzRCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDM0MsQ0FBQztDQUVKLENBQUM7QUFDRixrQkFBZSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnNvbGUubG9nKCdzcmMvQWxlcnQvaW5kZXgudHMnKTtcbmltcG9ydCBTd2FsLCB7IFN3ZWV0QWxlcnRSZXN1bHQsIFN3ZWV0QWxlcnRPcHRpb25zIH0gZnJvbSAnc3dlZXRhbGVydDInO1xuXG5mdW5jdGlvbiBhbGVydEZuKCkge1xuICAgIGNvbnNvbGUubG9nKCdhbGVydEZuJyk7XG59XG5cbmNvbnN0IHNtYWxsTWl4aW4gPSBTd2FsLm1peGluKHtcbiAgICBhbmltYXRpb24gOiBmYWxzZSxcbiAgICBjdXN0b21DbGFzcyA6ICdhbmltYXRlZCBmYWRlSW4nLFxuICAgIHBvc2l0aW9uIDogXCJib3R0b20tc3RhcnRcIixcbiAgICBzaG93Q29uZmlybUJ1dHRvbiA6IGZhbHNlLFxuICAgIHRpbWVyIDogODAwMCxcbiAgICB0b2FzdCA6IHRydWUsXG4gICAgXG59KTtcbmNvbnN0IHdpdGhDb25maXJtID0ge1xuICAgIGNhbmNlbEJ1dHRvblRleHQgOiBcIk5vXCIsXG4gICAgY29uZmlybUJ1dHRvblRleHQgOiBcIlllc1wiLFxuICAgIHNob3dDYW5jZWxCdXR0b24gOiB0cnVlLFxuICAgIHNob3dDb25maXJtQnV0dG9uIDogdHJ1ZSxcbiAgICB0aW1lciA6IG51bGwsXG4gICAgXG59O1xuY29uc3QgYmxvY2tpbmdPcHRpb25zID0ge1xuICAgIGFsbG93RW50ZXJLZXkgOiBmYWxzZSxcbiAgICBhbGxvd0VzY2FwZUtleSA6IGZhbHNlLFxuICAgIGFsbG93T3V0c2lkZUNsaWNrIDogZmFsc2UsXG4gICAgYW5pbWF0aW9uIDogZmFsc2UsXG4gICAgY3VzdG9tQ2xhc3MgOiAnYW5pbWF0ZWQgZmFkZUluJyxcbiAgICBzaG93Q2FuY2VsQnV0dG9uIDogZmFsc2UsIC8vIGRlZmF1bHQgZmFsc2VcbiAgICBzaG93Q2xvc2VCdXR0b24gOiBmYWxzZSwgLy8gZGVmYXVsdCBmYWxzZVxuICAgIHNob3dDb25maXJtQnV0dG9uIDogZmFsc2UsXG4gICAgXG59O1xuY29uc3QgYmxvY2tpbmdTd2FsTWl4aW4gPSBTd2FsLm1peGluKGJsb2NraW5nT3B0aW9ucyk7XG50eXBlIFNtYWxsID0ge1xuICAgIF9lcnJvcihvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgX2luZm8ob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIF9xdWVzdGlvbihvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgX3N1Y2Nlc3Mob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIF93YXJuaW5nKG9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBlcnJvcih0aXRsZTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIGluZm8odGl0bGU6IHN0cmluZywgdGV4dD86IChzdHJpbmcgfCBudWxsKSwgc2hvd0NvbmZpcm1CdG5zPzogYm9vbGVhbik6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgc3VjY2Vzcyh0aXRsZTogc3RyaW5nLCB0ZXh0PzogKHN0cmluZyB8IG51bGwpLCB0aW1lcj86IG51bWJlcik6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgd2FybmluZyh0aXRsZTogc3RyaW5nLCB0ZXh0PzogKHN0cmluZyB8IG51bGwpLCBzaG93Q29uZmlybUJ0bnM/OiBib29sZWFuKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0Pixcbn1cbmNvbnN0IHNtYWxsOiBTbWFsbCA9IHtcbiAgICBfcXVlc3Rpb24ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHsgLi4ub3B0aW9ucywgLi4ueyB0eXBlIDogJ3F1ZXN0aW9uJyB9IH0pXG4gICAgfSxcbiAgICBfaW5mbyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBzbWFsbE1peGluLmZpcmUoeyAuLi5vcHRpb25zLCAuLi57IHR5cGUgOiAnaW5mbycgfSB9KVxuICAgIH0sXG4gICAgX3N1Y2Nlc3Mob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHsgLi4ub3B0aW9ucywgLi4ueyB0eXBlIDogJ3N1Y2Nlc3MnIH0gfSlcbiAgICB9LFxuICAgIF9lcnJvcihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBzbWFsbE1peGluLmZpcmUoeyAuLi5vcHRpb25zLCAuLi57IHR5cGUgOiAnZXJyb3InIH0gfSlcbiAgICB9LFxuICAgIF93YXJuaW5nKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHNtYWxsTWl4aW4uZmlyZSh7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgLi4ueyBzaG93Q29uZmlybUJ1dHRvbiA6IHRydWUsIHR5cGUgOiAnd2FybmluZycgfVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgZXJyb3IodGl0bGUsIHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHNtYWxsTWl4aW4uZmlyZSh7XG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0eXBlIDogXCJlcnJvclwiLFxuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgaW5mbyh0aXRsZSwgdGV4dCA9IG51bGwsIHNob3dDb25maXJtQnRucyA9IGZhbHNlKSB7XG4gICAgICAgIGxldCBpbmZvT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHR5cGUgOiBcImluZm9cIixcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCBzaG93Q29uZmlybUJ0bnMgKVxuICAgICAgICAgICAgaW5mb09wdGlvbnMgPSB7IC4uLmluZm9PcHRpb25zLCAuLi53aXRoQ29uZmlybSB9O1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKGluZm9PcHRpb25zKTtcbiAgICB9LFxuICAgIHN1Y2Nlc3ModGl0bGUsIHRleHQgPSBudWxsLCB0aW1lciA9IDQwMDApIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzbWFsbE1peGluLmZpcmUoe1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdHlwZSA6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgdGltZXJcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIHdhcm5pbmcodGl0bGUsIHRleHQgPSBudWxsLCBzaG93Q29uZmlybUJ0bnMgPSBmYWxzZSkge1xuICAgICAgICBsZXQgd2FybmluZ09wdGlvbnMgPSB7XG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0eXBlIDogXCJ3YXJuaW5nXCJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCBzaG93Q29uZmlybUJ0bnMgKVxuICAgICAgICAgICAgd2FybmluZ09wdGlvbnMgPSB7IC4uLndhcm5pbmdPcHRpb25zLCAuLi53aXRoQ29uZmlybSB9O1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHdhcm5pbmdPcHRpb25zKTtcbiAgICB9LFxuICAgIFxufTtcbmV4cG9ydCBkZWZhdWx0IHsgYWxlcnRGbiwgc21hbGwgfTtcbiJdfQ==