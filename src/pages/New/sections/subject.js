"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../../bhe");
const util_1 = require("../../../util");
const Glob_1 = require("../../../Glob");
const electron_1 = require("electron");
class Input extends bhe_1.Div {
    constructor() {
        super({ cls: 'input' });
        const editable = bhe_1.span({ cls: 'editable' });
        this
            .attr({ contenteditable: true })
            .on({
            keydown: (ev) => this.doAutocomplete(ev),
            focus: (ev) => {
                console.log('input focus');
                this.sendEnd();
                electron_1.remote.getCurrentWindow().webContents.sendInputEvent({
                    type: "keyDown",
                    keyCode: 'Home',
                    modifiers: ['shift']
                });
            },
        })
            .cacheAppend({
            editable,
            autocomplete: bhe_1.span({ cls: 'autocomplete', text: 'Subject Id' }).on({
                focus: () => {
                    console.log('autocomplete focus');
                },
                change: (ev) => {
                    console.log('autocomplete change');
                },
            })
        });
    }
    reset({ inputMissing }) {
        if (inputMissing) {
            this.addClass('input-missing');
        }
        this.autocomplete.text('Subject Id');
        this.editable.text('');
    }
    sendEnd() {
        electron_1.remote.getCurrentWindow().webContents.sendInputEvent({
            type: "keyDown",
            keyCode: 'End',
            modifiers: []
        });
    }
    doAutocomplete(ev) {
        console.log('\ndoAutocomplete', ev);
        if (ev.ctrlKey || ['Backspace', 'Home', 'End', 'Delete'].includes(ev.key) || ev.key.includes('Arrow')) {
            if (ev.key === 'Backspace') {
                console.log(`Backspace, returning. editable text len: ${this.editable.text().length}, autocomplete text len: ${this.autocomplete.text().length}
                activeElement: ${document.activeElement.className}`, ev);
                const oldText = this.editable.text();
                if (oldText.length === 0) {
                    console.warn('oldText.length === 0, preventDefault, "Subject Id" and return');
                    this.autocomplete.text('Subject Id');
                    return ev.preventDefault();
                }
                this.autocomplete.text('');
                const newText = oldText.slice(0, oldText.length - 1);
                if (ev.ctrlKey || !util_1.bool(newText)) {
                    console.warn('!bool(newText) || ctrlKey, editable(""), preventDefault, "Subject Id" and return');
                    this.editable.text('');
                    this.autocomplete.text('Subject Id');
                    return ev.preventDefault();
                }
                this.editable.text(newText);
                this.sendEnd();
            }
            else {
                console.log('Functional, returning', ev);
            }
            return;
        }
        ev.preventDefault();
        if (ev.key === 'Tab') {
            this.editable.text(this.editable.text() + this.autocomplete.text());
            this.autocomplete.text('');
            this.sendEnd();
            return;
        }
        if (ev.key.match(/^[A-Z]/)) {
            console.log('Matched ^[A-Z], returning', ev);
            return;
        }
        const oldText = this.editable.text().lower().removeAll(/[^(a-z0-9|_)]/);
        let txt;
        if (util_1.bool(oldText))
            txt = oldText.toLowerCase() + ev.key;
        else
            txt = ev.key;
        this.editable.text(txt);
        const subjectSuggestion = subjects.find(s => s.startsWith(txt));
        this.removeClass('input-missing');
        if (subjectSuggestion) {
            this.autocomplete.html(subjectSuggestion.substr(txt.length));
            console.warn('changed autocomplete');
            this.sendEnd();
        }
        else {
            if (this.autocomplete.html()) {
                this.autocomplete.html('');
                console.warn('reset autocomplete');
            }
        }
        console.log({ txt, subjectSuggestion, 'this.autocomplete.text()': this.autocomplete.text() });
        console.log('\n');
    }
    onKeyDown(ev) {
        console.log('onKeyDown', ev);
        if (ev.key === 'Tab') {
            const value = this.editable.text() + this.autocomplete.text();
            this.editable.text(value);
            this.autocomplete.text('');
        }
    }
}
class SubjectDiv extends bhe_1.Div {
    constructor({ id }) {
        super({ id });
        const input = new Input();
        this.cacheAppend({ input });
    }
}
const subjectDiv = new SubjectDiv({ id: 'subject_div' });
const subjects = Glob_1.default.BigConfig.subjects;
exports.default = subjectDiv;
//# sourceMappingURL=data:application/json;base64,