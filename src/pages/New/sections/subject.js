"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../../bhe");
const Glob_1 = require("../../../Glob");
const electron_1 = require("electron");
class Input extends bhe_1.Div {
    constructor() {
        super({ cls: 'input' });
        const editable = bhe_1.span({ cls: 'editable' })
            .attr({ contenteditable: true });
        this
            .attr({ contenteditable: true })
            .on({
            keydown: (ev) => this.doAutocomplete(ev),
            focus: (ev) => {
                console.log('input focus');
            },
        })
            .cacheAppend({
            editable,
            autocomplete: bhe_1.span({ cls: 'autocomplete', text: 'Subject Id' }).on({
                focus: () => {
                    console.log('autocomplete focus');
                }
            })
        });
    }
    reset({ inputMissing }) {
        if (inputMissing) {
            this.addClass('input-missing');
        }
        this.autocomplete.text('Subject Id');
        this.editable.text('');
    }
    doAutocomplete(ev) {
        if (ev.ctrlKey || ['Backspace', 'Home', 'End'].includes(ev.key) || ev.key.includes('Arrow')) {
            console.log('Functional, returning', ev);
            return;
        }
        ev.preventDefault();
        if (ev.key.match(/^[A-Z]/)) {
            console.log('Matched ^[A-Z], returning', ev);
            return;
        }
        if (ev.key === 'a' && ev.ctrlKey) {
            electron_1.remote.getCurrentWindow().webContents.sendInputEvent({
                type: "keyDown",
                keyCode: 'Home',
                modifiers: ["shift"]
            });
        }
        console.log('doAutocomplete', ev);
        const txt = this.editable.text().toLowerCase() + ev.key;
        this.editable.text(txt);
        console.log({ 'this.editable.text()': this.editable.text(), txt });
        const subjectSuggestion = subjects.find(s => s.startsWith(txt));
        console.log({ subjectSuggestion });
        this.removeClass('input-missing');
        if (subjectSuggestion) {
            this.autocomplete.text(subjectSuggestion.substr(editableText.length));
        }
        else {
            this.autocomplete.text('');
        }
    }
    onKeyDown(ev) {
        console.log('onKeyDown', ev);
        if (ev.key === 'Tab') {
            const value = this.editable.text() + this.autocomplete.text();
            this.editable.text(value);
            this.autocomplete.text('');
        }
    }
}
class SubjectDiv extends bhe_1.Div {
    constructor({ id }) {
        super({ id });
        const input = new Input();
        this.cacheAppend({ input });
    }
}
const subjectDiv = new SubjectDiv({ id: 'subject_div' });
const subjects = Glob_1.default.BigConfig.subjects;
exports.default = subjectDiv;
//# sourceMappingURL=data:application/json;base64,