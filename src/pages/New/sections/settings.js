"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../../bhe");
const extra_1 = require("../../../bhe/extra");
const Glob_1 = require("../../../Glob");
const fs = require("fs");
const MyAlert_1 = require("../../../MyAlert");
const MyFs_1 = require("../../../MyFs");
const util = require("../../../util");
const MyStore_1 = require("../../../MyStore");
class SettingsDiv extends bhe_1.Div {
    constructor({ id }) {
        super({ id });
        const experimentType = Glob_1.default.BigConfig.experiment_type;
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const configs = fs.readdirSync(CONFIGS_PATH_ABS);
        const fileSection = new extra_1.InputSection({
            placeholder: `Current: ${subconfig.name}`,
            h3text: `Config File`,
            suggestions: configs,
        });
        const { submitButton: fileSubmit, inputElem: fileInput } = fileSection.inputAndSubmitFlex;
        fileSubmit.click(() => this.onFileSubmit(configs, subconfig));
        const subjects = Glob_1.default.BigConfig.subjects;
        const currentSubject = subconfig.subject;
        const subjectSection = new extra_1.InputSection({
            placeholder: `Current: ${currentSubject}`,
            h3text: 'Subject',
            suggestions: subjects
        });
        const { submitButton: subjectSubmit, inputElem: subjectInput } = subjectSection.inputAndSubmitFlex;
        subjectSubmit.click(() => this.onSubjectSubmit(currentSubject, subconfig));
        const truthsWith3TxtFiles = MyStore_1.getTruthsWith3TxtFiles();
        console.log({ truthsWith3TxtFiles });
        const truthSection = new extra_1.InputSection({
            placeholder: `Current: ${currentSubject}`,
            h3text: 'Truth',
            suggestions: truthsWith3TxtFiles
        });
        const subtitle = bhe_1.elem({ tag: 'h2', text: 'Settings' });
        this.cacheAppend({ subtitle, fileSection, subjectSection, truthSection });
    }
    onSubjectSubmit(currentSubject, subconfig) {
        const { submitButton: subjectSubmit, inputElem: subjectInput } = this.subjectSection.inputAndSubmitFlex;
        const value = subjectInput.value;
        if (currentSubject === value) {
            MyAlert_1.default.small.info(`${currentSubject} was already the chosen subject`);
        }
        else {
            subconfig.subject = value;
            MyAlert_1.default.small.success(`Subject set: ${value}.`);
            subjectInput.placeholder = `Current: ${value}`;
        }
        subjectSubmit.replaceClass('active', 'inactive');
        subjectInput.value = '';
    }
    async onFileSubmit(configs, subconfig) {
        const { submitButton: fileSubmit, inputElem: fileInput } = this.fileSection.inputAndSubmitFlex;
        let file = fileInput.value;
        console.log('file submit,', file);
        const [filename, ext] = MyFs_1.default.split_ext(file);
        if (!['.exam', '.test'].includes(ext)) {
            fileInput.addClass('invalid');
            MyAlert_1.default.small.warning('File name must end with either .exam or .test');
            return;
        }
        else {
            fileInput.removeClass('invalid');
        }
        const fileLower = file.lower();
        if (subconfig.name.lower() === fileLower) {
            MyAlert_1.default.small.info(`${subconfig.name} was already the chosen file`);
        }
        else {
            let action = "create";
            let overwrite = undefined;
            for (let cfg of configs) {
                if (cfg.lower() === fileLower) {
                    const { value } = await MyAlert_1.default.big.blocking({
                        title: `${cfg} already exists, what do you want to do?`,
                        confirmButtonText: 'Use it',
                        onBeforeOpen: (modal) => {
                            let el = bhe_1.elem({ htmlElement: modal, children: { actions: '.swal2-actions' } });
                            el.actions.append(bhe_1.button({ cls: "swal2-confirm swal2-styled warn", html: 'Overwrite it' })
                                .attr({ type: 'button' })
                                .css({ backgroundColor: '#FFC66D', color: 'black' })
                                .click((ev) => {
                                action = "overwrite";
                                overwrite = true;
                                file = cfg;
                                MyAlert_1.default.clickCancel();
                            }));
                        }
                    });
                    if (value) {
                        file = cfg;
                        action = "use";
                        overwrite = cfg;
                        console.log('Use it', { file, cfg, overwrite });
                        break;
                    }
                    else if (!overwrite) {
                        return;
                    }
                }
            }
            const experimentType = ext.slice(1);
            Glob_1.default.BigConfig.experiment_type = experimentType;
            console.log({ overwrite, action, file });
            if (typeof overwrite !== 'string') {
                Glob_1.default.BigConfig.setSubconfig(file, experimentType, subconfig);
                let verb = overwrite === undefined ? 'created' : 'overwritten';
                MyAlert_1.default.small.success(`Config ${verb}: ${file}.`);
            }
            else {
                Glob_1.default.BigConfig.setSubconfig(file, experimentType);
                MyAlert_1.default.small.success(`Config loaded: ${file}.`);
            }
            fileInput.placeholder = `Current: ${file}`;
            fileSubmit.replaceClass('active', 'inactive');
            fileInput.value = '';
            if (Glob_1.default.BigConfig.dev.reload_page_on_submit()) {
                await util.wait(3000);
                util.reloadPage();
            }
        }
        fileSubmit.replaceClass('active', 'inactive');
        fileInput.value = '';
    }
}
const settingsDiv = new SettingsDiv({ id: 'settings_div' });
exports.default = settingsDiv;
//# sourceMappingURL=data:application/json;base64,