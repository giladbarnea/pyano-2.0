"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../../bhe");
const electron_1 = require("electron");
const util_1 = require("../../../util");
const Glob_1 = require("../../../Glob");
class InputDiv extends bhe_1.Div {
    constructor() {
        super({ cls: 'input' });
        const editable = bhe_1.span({ cls: 'editable' });
        this
            .cacheAppend({
            editable,
        });
    }
}
class SubjectInput extends InputDiv {
    constructor() {
        super();
        const autocomplete = bhe_1.span({ cls: 'autocomplete', text: 'Subject Id' });
        this
            .on({
            keydown: (ev) => this.doAutocomplete(ev),
            focus: (ev) => {
                console.log('input focus');
                this.sendEnd();
                electron_1.remote.getCurrentWindow().webContents.sendInputEvent({
                    type: "keyDown",
                    keyCode: 'Home',
                    modifiers: ['shift']
                });
            },
        })
            .cacheAppend({
            autocomplete
        });
    }
    reset() {
        this.editable.text('');
        this.autocomplete
            .text('Subject Id')
            .removeAttr('hidden');
        submitButton
            .removeClass('active')
            .addClass('inactive')
            .html('Submit');
    }
    setText(newText) {
        this.autocomplete.attr({ hidden: true });
        this.editable.text(newText);
        submitButton
            .removeClass('inactive')
            .addClass('active')
            .html(newText);
    }
    sendEnd() {
        electron_1.remote.getCurrentWindow().webContents.sendInputEvent({
            type: "keyDown",
            keyCode: 'End',
            modifiers: []
        });
    }
    doAutocomplete(ev) {
        console.log('\ndoAutocomplete', ev);
        if (ev.ctrlKey || ['Backspace', 'Home', 'End', 'Delete'].includes(ev.key) || ev.key.includes('Arrow')) {
            if (ev.key === 'Backspace') {
                console.log(`Backspace, returning. editable text len: ${this.editable.text().length}, autocomplete text len: ${this.autocomplete.text().length}
                activeElement: ${document.activeElement.className}`, ev);
                const oldText = this.editable.text();
                if (oldText.length === 0) {
                    console.warn('oldText.length === 0, preventDefault, "Subject Id" and return');
                    this.reset();
                    return ev.preventDefault();
                }
                const newText = oldText.slice(0, oldText.length - 1);
                if (ev.ctrlKey || !util_1.bool(newText)) {
                    console.warn('!bool(newText) || ctrlKey, editable(""), preventDefault, "Subject Id" and return');
                    this.reset();
                    return ev.preventDefault();
                }
                this.setText(newText);
                this.sendEnd();
            }
            else {
                console.log('Functional, returning', ev);
            }
            return;
        }
        ev.preventDefault();
        if (ev.key === 'Tab') {
            let oldText = this.editable.text();
            if (this.autocomplete.attr('hidden') || !util_1.bool(oldText)) {
                return;
            }
            this.setText(oldText + this.autocomplete.text());
            this.sendEnd();
            return;
        }
        const illegal = /[^(a-z0-9|_)]/;
        if (ev.key.match(illegal)) {
            console.log('Matched [^(a-z0-9|_)], returning', ev);
            return;
        }
        const oldText = this.editable.text().lower().removeAll(illegal);
        let newText;
        if (util_1.bool(oldText))
            newText = oldText.toLowerCase() + ev.key;
        else
            newText = ev.key;
        this.setText(newText);
        const subjectSuggestion = subjects.find(s => s.startsWith(newText));
        this.removeClass('input-missing');
        if (subjectSuggestion) {
            this.autocomplete
                .text(subjectSuggestion.substr(newText.length))
                .removeAttr('hidden');
            console.warn('changed autocomplete');
        }
        else if (this.autocomplete.text()) {
            this.autocomplete.attr({ hidden: true });
            console.warn('hide autocomplete');
        }
        this.sendEnd();
        console.log({ newText, subjectSuggestion, 'this.autocomplete.text()': this.autocomplete.text() });
        console.log('\n');
    }
}
class SettingsDiv extends bhe_1.Div {
    constructor({ id }) {
        super({ id });
        const fileinput = bhe_1.input({ placeholder: 'Config file name' });
        const subtitle = bhe_1.elem({ tag: 'h2', text: 'Settings' });
        this.cacheAppend({ subtitle, fileinput });
    }
}
class SubjectDiv extends bhe_1.Div {
    constructor({ id }) {
        super({ id });
        const input = new SubjectInput();
        const subtitle = bhe_1.elem({ tag: 'h3', text: 'Subject' });
        this.cacheAppend({ subtitle, input });
    }
}
const subjectDiv = new SubjectDiv({ id: 'subject_div' });
const subjects = Glob_1.default.BigConfig.subjects;
const submitButton = bhe_1.button({ cls: 'inactive', html: 'Submit' });
subjectDiv.cacheAppend({ submitButton });
const settingsDiv = new SettingsDiv({ id: 'settings_div' })
    .cacheAppend({ subjectDiv });
exports.default = settingsDiv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXR0aW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBLHNDQUF3RjtBQUN4Rix1Q0FBa0M7QUFDbEMsd0NBQXFDO0FBQ3JDLHdDQUFpQztBQUVqQyxNQUFNLFFBQVMsU0FBUSxTQUFHO0lBR3RCO1FBQ0ksS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDekIsTUFBTSxRQUFRLEdBQUcsVUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFHLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFFNUMsSUFBSTthQUVDLFdBQVcsQ0FBQztZQUNULFFBQVE7U0FDWCxDQUFDLENBQUM7SUFDWCxDQUFDO0NBR0o7QUFFRCxNQUFNLFlBQWEsU0FBUSxRQUFRO0lBSS9CO1FBQ0ksS0FBSyxFQUFFLENBQUM7UUFDUixNQUFNLFlBQVksR0FBRyxVQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsY0FBYyxFQUFFLElBQUksRUFBRyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBRXpFLElBQUk7YUFFQyxFQUFFLENBQUM7WUFDQSxPQUFPLEVBQUcsQ0FBQyxFQUFpQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztZQUN4RCxLQUFLLEVBQUcsQ0FBQyxFQUFjLEVBQUUsRUFBRTtnQkFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNmLGlCQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDO29CQUNqRCxJQUFJLEVBQUcsU0FBUztvQkFDaEIsT0FBTyxFQUFHLE1BQU07b0JBQ2hCLFNBQVMsRUFBRyxDQUFFLE9BQU8sQ0FBRTtpQkFDMUIsQ0FBQyxDQUFBO1lBQ04sQ0FBQztTQUVKLENBQUM7YUFDRCxXQUFXLENBQUM7WUFDVCxZQUFZ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WSxFQUFFLEVBQUUsRUFBRTtRQUNkLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFZCxNQUFNLEtBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2pDLE1BQU0sUUFBUSxHQUFHLFVBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRyxJQUFJLEVBQUUsSUFBSSxFQUFHLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBQ3pDLENBQUM7Q0FHSjtBQUVELE1BQU0sVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLEVBQUUsRUFBRSxFQUFHLGFBQWEsRUFBRSxDQUFDLENBQUM7QUFDMUQsTUFBTSxRQUFRLEdBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDekMsTUFBTSxZQUFZLEdBQUcsWUFBTSxDQUFDLEVBQUUsR0FBRyxFQUFHLFVBQVUsRUFBRSxJQUFJLEVBQUcsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNuRSxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztBQUt6QyxNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRyxjQUFjLEVBQUUsQ0FBQztLQUN2RCxXQUFXLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQ2pDLGtCQUFlLFdBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vICogIHBhZ2VzL05ldy9zZWN0aW9ucy9zZXR0aW5nc1xuXG4vKipcbiAqIGltcG9ydCBzZWN0aW9ucyBmcm9tIFwiLi9zZWN0aW9uc1wiXG4gKiBzZWN0aW9ucy5zZXR0aW5ncyovXG5pbXBvcnQgeyBkaXYsIGVsZW0sIGJ1dHRvbiwgRGl2LCBCdXR0b24sIFNwYW4sIHNwYW4sIGlucHV0LCBJbnB1dCB9IGZyb20gXCIuLi8uLi8uLi9iaGVcIjtcbmltcG9ydCB7IHJlbW90ZSB9IGZyb20gXCJlbGVjdHJvblwiO1xuaW1wb3J0IHsgYm9vbCB9IGZyb20gXCIuLi8uLi8uLi91dGlsXCI7XG5pbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vLi4vR2xvYlwiO1xuXG5jbGFzcyBJbnB1dERpdiBleHRlbmRzIERpdiB7XG4gICAgZWRpdGFibGU6IFNwYW47XG4gICAgXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKHsgY2xzIDogJ2lucHV0JyB9KTtcbiAgICAgICAgY29uc3QgZWRpdGFibGUgPSBzcGFuKHsgY2xzIDogJ2VkaXRhYmxlJyB9KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXNcbiAgICAgICAgICAgIC8vIC5hdHRyKHsgY29udGVudGVkaXRhYmxlIDogdHJ1ZSB9KVxuICAgICAgICAgICAgLmNhY2hlQXBwZW5kKHtcbiAgICAgICAgICAgICAgICBlZGl0YWJsZSxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBcbn1cblxuY2xhc3MgU3ViamVjdElucHV0IGV4dGVuZHMgSW5wdXREaXYge1xuICAgIGVkaXRhYmxlOiBTcGFuO1xuICAgIGF1dG9jb21wbGV0ZTogU3BhbjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgY29uc3QgYXV0b2NvbXBsZXRlID0gc3Bhbih7IGNscyA6ICdhdXRvY29tcGxldGUnLCB0ZXh0IDogJ1N1YmplY3QgSWQnIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpc1xuICAgICAgICAgICAgLy8gLmF0dHIoeyBjb250ZW50ZWRpdGFibGUgOiB0cnVlIH0pXG4gICAgICAgICAgICAub24oe1xuICAgICAgICAgICAgICAgIGtleWRvd24gOiAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHRoaXMuZG9BdXRvY29tcGxldGUoZXYpLFxuICAgICAgICAgICAgICAgIGZvY3VzIDogKGV2OiBGb2N1c0V2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbnB1dCBmb2N1cycpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRFbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3RlLmdldEN1cnJlbnRXaW5kb3coKS53ZWJDb250ZW50cy5zZW5kSW5wdXRFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlIDogXCJrZXlEb3duXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlDb2RlIDogJ0hvbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzIDogWyAnc2hpZnQnIF1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYWNoZUFwcGVuZCh7XG4gICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlXG4gICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSByZXNldCgpIHtcbiAgICAgICAgdGhpcy5lZGl0YWJsZS50ZXh0KCcnKTtcbiAgICAgICAgdGhpcy5hdXRvY29tcGxldGVcbiAgICAgICAgICAgIC50ZXh0KCdTdWJqZWN0IElkJylcbiAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdoaWRkZW4nKTtcbiAgICAgICAgc3VibWl0QnV0dG9uXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2luYWN0aXZlJylcbiAgICAgICAgICAgIC5odG1sKCdTdWJtaXQnKVxuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIHNldFRleHQobmV3VGV4dDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLmF0dHIoeyBoaWRkZW4gOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLmVkaXRhYmxlLnRleHQobmV3VGV4dCk7XG4gICAgICAgIHN1Ym1pdEJ1dHRvblxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdpbmFjdGl2ZScpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgICAuaHRtbChuZXdUZXh0KVxuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIHNlbmRFbmQoKSB7XG4gICAgICAgIHJlbW90ZS5nZXRDdXJyZW50V2luZG93KCkud2ViQ29udGVudHMuc2VuZElucHV0RXZlbnQoe1xuICAgICAgICAgICAgdHlwZSA6IFwia2V5RG93blwiLFxuICAgICAgICAgICAga2V5Q29kZSA6ICdFbmQnLFxuICAgICAgICAgICAgbW9kaWZpZXJzIDogW11cbiAgICAgICAgfSlcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBkb0F1dG9jb21wbGV0ZShldjogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBjb25zb2xlLmxvZygnXFxuZG9BdXRvY29tcGxldGUnLCBldik7XG4gICAgICAgIGlmICggZXYuY3RybEtleSB8fCBbICdCYWNrc3BhY2UnLCAnSG9tZScsICdFbmQnLCAnRGVsZXRlJyBdLmluY2x1ZGVzKGV2LmtleSkgfHwgZXYua2V5LmluY2x1ZGVzKCdBcnJvdycpICkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIGV2LmtleSA9PT0gJ0JhY2tzcGFjZScgKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYEJhY2tzcGFjZSwgcmV0dXJuaW5nLiBlZGl0YWJsZSB0ZXh0IGxlbjogJHt0aGlzLmVkaXRhYmxlLnRleHQoKS5sZW5ndGh9LCBhdXRvY29tcGxldGUgdGV4dCBsZW46ICR7dGhpcy5hdXRvY29tcGxldGUudGV4dCgpLmxlbmd0aH1cbiAgICAgICAgICAgICAgICBhY3RpdmVFbGVtZW50OiAke2RvY3VtZW50LmFjdGl2ZUVsZW1lbnQuY2xhc3NOYW1lfWAsIGV2KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBvbGRUZXh0ID0gdGhpcy5lZGl0YWJsZS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCBvbGRUZXh0Lmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdvbGRUZXh0Lmxlbmd0aCA9PT0gMCwgcHJldmVudERlZmF1bHQsIFwiU3ViamVjdCBJZFwiIGFuZCByZXR1cm4nKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VGV4dCA9IG9sZFRleHQuc2xpY2UoMCwgb2xkVGV4dC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICBpZiAoIGV2LmN0cmxLZXkgfHwgIWJvb2wobmV3VGV4dCkgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignIWJvb2wobmV3VGV4dCkgfHwgY3RybEtleSwgZWRpdGFibGUoXCJcIiksIHByZXZlbnREZWZhdWx0LCBcIlN1YmplY3QgSWRcIiBhbmQgcmV0dXJuJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGV4dChuZXdUZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRFbmQoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIEFycm93LCBiYXJlIENvbnRyb2wgZXRjXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Z1bmN0aW9uYWwsIHJldHVybmluZycsIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKCBldi5rZXkgPT09ICdUYWInICkge1xuICAgICAgICAgICAgbGV0IG9sZFRleHQgPSB0aGlzLmVkaXRhYmxlLnRleHQoKTtcbiAgICAgICAgICAgIGlmICggdGhpcy5hdXRvY29tcGxldGUuYXR0cignaGlkZGVuJykgfHwgIWJvb2wob2xkVGV4dCkgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRUZXh0KG9sZFRleHQgKyB0aGlzLmF1dG9jb21wbGV0ZS50ZXh0KCkpO1xuICAgICAgICAgICAgdGhpcy5zZW5kRW5kKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWxsZWdhbCA9IC9bXihhLXowLTl8XyldLztcbiAgICAgICAgaWYgKCBldi5rZXkubWF0Y2goaWxsZWdhbCkgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTWF0Y2hlZCBbXihhLXowLTl8XyldLCByZXR1cm5pbmcnLCBldik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCBvbGRUZXh0ID0gdGhpcy5lZGl0YWJsZS50ZXh0KCkubG93ZXIoKS5yZW1vdmVBbGwoaWxsZWdhbCk7XG4gICAgICAgIGxldCBuZXdUZXh0O1xuICAgICAgICBpZiAoIGJvb2wob2xkVGV4dCkgKVxuICAgICAgICAgICAgbmV3VGV4dCA9IG9sZFRleHQudG9Mb3dlckNhc2UoKSArIGV2LmtleTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbmV3VGV4dCA9IGV2LmtleTtcbiAgICAgICAgdGhpcy5zZXRUZXh0KG5ld1RleHQpO1xuICAgICAgICAvLyB0aGlzLmVkaXRhYmxlLnRleHQobmV3VGV4dCk7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgY29uc3Qgc3ViamVjdFN1Z2dlc3Rpb24gPSBzdWJqZWN0cy5maW5kKHMgPT4gcy5zdGFydHNXaXRoKG5ld1RleHQpKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoJ2lucHV0LW1pc3NpbmcnKTtcbiAgICAgICAgLypzdWJtaXRCdXR0b25cbiAgICAgICAgIC5yZW1vdmVDbGFzcygnaW5hY3RpdmUnKVxuICAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgLmh0bWwobmV3VGV4dCk7Ki9cbiAgICAgICAgXG4gICAgICAgIGlmICggc3ViamVjdFN1Z2dlc3Rpb24gKSB7XG4gICAgICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZVxuICAgICAgICAgICAgICAgIC50ZXh0KHN1YmplY3RTdWdnZXN0aW9uLnN1YnN0cihuZXdUZXh0Lmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2hpZGRlbicpO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdjaGFuZ2VkIGF1dG9jb21wbGV0ZScpO1xuICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSBpZiAoIHRoaXMuYXV0b2NvbXBsZXRlLnRleHQoKSApIHtcbiAgICAgICAgICAgIC8vIHRoaXMuYXV0b2NvbXBsZXRlLmh0bWwoJycpO1xuICAgICAgICAgICAgdGhpcy5hdXRvY29tcGxldGUuYXR0cih7IGhpZGRlbiA6IHRydWUgfSk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ2hpZGUgYXV0b2NvbXBsZXRlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZW5kRW5kKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHsgbmV3VGV4dCwgc3ViamVjdFN1Z2dlc3Rpb24sICd0aGlzLmF1dG9jb21wbGV0ZS50ZXh0KCknIDogdGhpcy5hdXRvY29tcGxldGUudGV4dCgpIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ1xcbicpO1xuICAgIH1cbiAgICBcbn1cblxuY2xhc3MgU2V0dGluZ3NEaXYgZXh0ZW5kcyBEaXYge1xuICAgIGZpbGVpbnB1dDogSW5wdXQ7XG4gICAgXG4gICAgY29uc3RydWN0b3IoeyBpZCB9KSB7XG4gICAgICAgIHN1cGVyKHsgaWQgfSk7XG4gICAgICAgIC8vIGNvbnN0IGlucHV0ID0gbmV3IElucHV0RGl2KCk7XG4gICAgICAgIGNvbnN0IGZpbGVpbnB1dCA9IGlucHV0KHsgcGxhY2Vob2xkZXIgOiAnQ29uZmlnIGZpbGUgbmFtZScgfSk7XG4gICAgICAgIGNvbnN0IHN1YnRpdGxlID0gZWxlbSh7IHRhZyA6ICdoMicsIHRleHQgOiAnU2V0dGluZ3MnIH0pO1xuICAgICAgICB0aGlzLmNhY2hlQXBwZW5kKHsgc3VidGl0bGUsIGZpbGVpbnB1dCB9KVxuICAgICAgICAvKnRoaXMuY2FjaGVBcHBlbmQoe1xuICAgICAgICAgYWRkTGV2ZWxCdG4gOiBidXR0b24oeyBjbHMgOiAnYWN0aXZlJywgaHRtbCA6ICdBZGQgTGV2ZWwnLCBjbGljayA6IHRoaXMuYWRkTGV2ZWwgfSksXG4gICAgICAgICBcbiAgICAgICAgIH0pKi9cbiAgICB9XG4gICAgXG4gICAgXG59XG5cbmNsYXNzIFN1YmplY3REaXYgZXh0ZW5kcyBEaXYge1xuICAgIGlucHV0OiBTdWJqZWN0SW5wdXQ7XG4gICAgc3VibWl0QnV0dG9uOiBCdXR0b247XG4gICAgc3VidGl0bGU6IERpdjtcbiAgICBcbiAgICBjb25zdHJ1Y3Rvcih7IGlkIH0pIHtcbiAgICAgICAgc3VwZXIoeyBpZCB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGlucHV0ID0gbmV3IFN1YmplY3RJbnB1dCgpO1xuICAgICAgICBjb25zdCBzdWJ0aXRsZSA9IGVsZW0oeyB0YWcgOiAnaDMnLCB0ZXh0IDogJ1N1YmplY3QnIH0pO1xuICAgICAgICB0aGlzLmNhY2hlQXBwZW5kKHsgc3VidGl0bGUsIGlucHV0IH0pXG4gICAgfVxuICAgIFxuICAgIFxufVxuXG5jb25zdCBzdWJqZWN0RGl2ID0gbmV3IFN1YmplY3REaXYoeyBpZCA6ICdzdWJqZWN0X2RpdicgfSk7XG5jb25zdCBzdWJqZWN0cyA9IEdsb2IuQmlnQ29uZmlnLnN1YmplY3RzO1xuY29uc3Qgc3VibWl0QnV0dG9uID0gYnV0dG9uKHsgY2xzIDogJ2luYWN0aXZlJywgaHRtbCA6ICdTdWJtaXQnIH0pOyAvLyBvdXRzaWRlIFN1YmplY3REaXYgYmVjYXVzZSB1c2VkIGJ5IFN1YmplY3RJbnB1dFxuc3ViamVjdERpdi5jYWNoZUFwcGVuZCh7IHN1Ym1pdEJ1dHRvbiB9KTtcbi8vIC5hZGRDbGFzcygnaW5hY3RpdmUtYnRuJylcbi8vIC5odG1sKCdTdWJtaXQnKVxuLy8gLmNsaWNrKG9uU3VibWl0U3ViamVjdENsaWNrKTtcblxuY29uc3Qgc2V0dGluZ3NEaXYgPSBuZXcgU2V0dGluZ3NEaXYoeyBpZCA6ICdzZXR0aW5nc19kaXYnIH0pXG4gICAgLmNhY2hlQXBwZW5kKHsgc3ViamVjdERpdiB9KTtcbmV4cG9ydCBkZWZhdWx0IHNldHRpbmdzRGl2O1xuXG4iXX0=