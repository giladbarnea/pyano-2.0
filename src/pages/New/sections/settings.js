"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../../bhe");
const extra_1 = require("../../../bhe/extra");
const Glob_1 = require("../../../Glob");
const fs = require("fs");
const MyAlert_1 = require("../../../MyAlert");
const MyFs_1 = require("../../../MyFs");
class SettingsDiv extends bhe_1.Div {
    constructor({ id }) {
        super({ id });
        const experimentType = Glob_1.default.BigConfig.experiment_type;
        const subconfigFile = Glob_1.default.BigConfig[`${experimentType}_file`];
        const subconfig = Glob_1.default.BigConfig[experimentType];
        const configs = fs.readdirSync(CONFIGS_PATH_ABS);
        const fileSection = new extra_1.InputSection({
            placeholder: `Current: ${subconfigFile}`,
            h3text: 'Config File',
            suggestions: configs,
            overwriteWarn: true
        });
        const { submitButton: fileSubmit, inputElem: fileInput } = fileSection.inputAndSubmitFlex;
        fileSubmit.click(async (ev) => {
            const file = fileInput.value;
            console.log('file submit,', file);
            const [filename, ext] = MyFs_1.default.split_ext(file);
            if (!['.exam', '.test'].includes(ext)) {
                fileInput.addClass('invalid');
                MyAlert_1.default.small.warning('File name must end with either .exam or .test');
                return;
            }
            else {
                fileInput.removeClass('invalid');
            }
            const fileLower = file.lower();
            if (subconfigFile.lower() === fileLower) {
                MyAlert_1.default.small.info(`${subconfigFile} was already the chosen file`);
            }
            else {
                let overwrite;
                for (let cfg of configs) {
                    if (cfg.lower() === fileLower) {
                        const { value } = await MyAlert_1.default.big.blocking({ title: `Are you sure you want to overwrite ${cfg}?` });
                        if (value) {
                            overwrite = cfg;
                            break;
                        }
                        else {
                            return MyAlert_1.default.small.info('Not overwriting');
                        }
                    }
                }
                if (overwrite === undefined) {
                    const experimentType = ext.slice(1);
                    Glob_1.default.BigConfig.experiment_type = experimentType;
                    Glob_1.default.BigConfig.setSubconfig(file, experimentType, subconfig);
                }
                else {
                    const experimentType = ext.slice(1);
                    Glob_1.default.BigConfig.experiment_type = experimentType;
                    Glob_1.default.BigConfig.setSubconfig(file, experimentType);
                }
                MyAlert_1.default.small.success(`Config set: ${file}.`);
                fileInput.placeholder = `Current: ${file}`;
            }
            fileSubmit.replaceClass('active', 'inactive');
            fileInput.value = '';
        });
        const subjects = Glob_1.default.BigConfig.subjects;
        const currentSubject = subconfig.subject;
        const subjectSection = new extra_1.InputSection({
            placeholder: `Current: ${currentSubject}`,
            h3text: 'Subject',
            suggestions: subjects
        });
        const { submitButton: subjectSubmit, inputElem: subjectInput } = subjectSection.inputAndSubmitFlex;
        subjectSubmit.click((ev) => {
            console.log('subject submit,', ev);
            const value = subjectInput.value;
            if (currentSubject === value) {
                MyAlert_1.default.small.info(`${currentSubject} was already the chosen subject`);
            }
            else {
                subconfig.subject = value;
                MyAlert_1.default.small.success(`Subject set: ${value}.`);
                subjectInput.placeholder = `Current: ${value}`;
            }
            subjectSubmit.replaceClass('active', 'inactive');
            subjectInput.value = '';
        });
        const subtitle = bhe_1.elem({ tag: 'h2', text: 'Settings' });
        this.cacheAppend({ subtitle, fileSection, subjectSection });
    }
}
const settingsDiv = new SettingsDiv({ id: 'settings_div' });
exports.default = settingsDiv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXR0aW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBLHNDQUF5QztBQUV6Qyw4Q0FBa0Q7QUFDbEQsd0NBQWlDO0FBQ2pDLHlCQUF5QjtBQUV6Qiw4Q0FBc0M7QUFDdEMsd0NBQWlDO0FBR2pDLE1BQU0sV0FBWSxTQUFRLFNBQUc7SUFHekIsWUFBWSxFQUFFLEVBQUUsRUFBRTtRQUNkLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFZCxNQUFNLGNBQWMsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQztRQUN0RCxNQUFNLGFBQWEsR0FBVyxjQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsY0FBYyxPQUFPLENBQUMsQ0FBQztRQUN2RSxNQUFNLFNBQVMsR0FBYyxjQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzVELE1BQU0sT0FBTyxHQUFhLEVBQUUsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMzRCxNQUFNLFdBQVcsR0FBRyxJQUFJLG9CQUFZLENBQUM7WUFDakMsV0FBVyxFQUFHLFlBQVksYUFBYSxFQUFFO1lBQ3pDLE1BQU0sRUFBRyxhQUFhO1lBQ3RCLFdBQVcsRUFBRyxPQUFPO1lBQ3JCLGFBQWEsRUFBRyxJQUFJO1NBQ3ZCLENBQUMsQ0FBQztRQUVILE1BQU0sRUFBRSxZQUFZLEVBQUcsVUFBVSxFQUFFLFNBQVMsRUFBRyxTQUFTLEVBQUUsR0FBRyxXQUFXLENBQUMsa0JBQWtCLENBQUM7UUFDNUYsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBYyxFQUFFLEVBQUU7WUFDdEMsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztZQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNsQyxNQUFNLENBQUUsUUFBUSxFQUFFLEdB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R0FBRyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFDakMsSUFBSyxjQUFjLEtBQUssS0FBSyxFQUFHO2dCQUU1QixpQkFBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxjQUFjLGlDQUFpQyxDQUFDLENBQUE7YUFDekU7aUJBQU07Z0JBQ0gsU0FBUyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Z0JBQzFCLGlCQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFDaEQsWUFBWSxDQUFDLFdBQVcsR0FBRyxZQUFZLEtBQUssRUFBRSxDQUFDO2FBRWxEO1lBQ0QsYUFBYSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDakQsWUFBWSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFHNUIsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLFFBQVEsR0FBRyxVQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsSUFBSSxFQUFFLElBQUksRUFBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUE7SUFLL0QsQ0FBQztDQUdKO0FBR0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFLEVBQUcsY0FBYyxFQUFFLENBQUMsQ0FBQztBQUM3RCxrQkFBZSxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAqICBwYWdlcy9OZXcvc2VjdGlvbnMvc2V0dGluZ3NcblxuLyoqXG4gKiBpbXBvcnQgc2VjdGlvbnMgZnJvbSBcIi4vc2VjdGlvbnNcIlxuICogc2VjdGlvbnMuc2V0dGluZ3MqL1xuaW1wb3J0IHsgZWxlbSwgRGl2IH0gZnJvbSBcIi4uLy4uLy4uL2JoZVwiO1xuXG5pbXBvcnQgeyBJbnB1dFNlY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vYmhlL2V4dHJhXCI7XG5pbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vLi4vR2xvYlwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5cbmltcG9ydCBNeUFsZXJ0IGZyb20gJy4uLy4uLy4uL015QWxlcnQnXG5pbXBvcnQgbXlmcyBmcm9tIFwiLi4vLi4vLi4vTXlGc1wiO1xuaW1wb3J0IHsgRXhwZXJpbWVudFR5cGUsIFN1YmNvbmZpZyB9IGZyb20gXCIuLi8uLi8uLi9NeVN0b3JlXCI7XG5cbmNsYXNzIFNldHRpbmdzRGl2IGV4dGVuZHMgRGl2IHtcbiAgICBmaWxlU2VjdGlvbjogSW5wdXRTZWN0aW9uO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKHsgaWQgfSkge1xuICAgICAgICBzdXBlcih7IGlkIH0pO1xuICAgICAgICAvLyAqKiogIEZpbGVcbiAgICAgICAgY29uc3QgZXhwZXJpbWVudFR5cGUgPSBHbG9iLkJpZ0NvbmZpZy5leHBlcmltZW50X3R5cGU7XG4gICAgICAgIGNvbnN0IHN1YmNvbmZpZ0ZpbGU6IHN0cmluZyA9IEdsb2IuQmlnQ29uZmlnW2Ake2V4cGVyaW1lbnRUeXBlfV9maWxlYF07XG4gICAgICAgIGNvbnN0IHN1YmNvbmZpZzogU3ViY29uZmlnID0gR2xvYi5CaWdDb25maWdbZXhwZXJpbWVudFR5cGVdO1xuICAgICAgICBjb25zdCBjb25maWdzOiBzdHJpbmdbXSA9IGZzLnJlYWRkaXJTeW5jKENPTkZJR1NfUEFUSF9BQlMpO1xuICAgICAgICBjb25zdCBmaWxlU2VjdGlvbiA9IG5ldyBJbnB1dFNlY3Rpb24oe1xuICAgICAgICAgICAgcGxhY2Vob2xkZXIgOiBgQ3VycmVudDogJHtzdWJjb25maWdGaWxlfWAsXG4gICAgICAgICAgICBoM3RleHQgOiAnQ29uZmlnIEZpbGUnLFxuICAgICAgICAgICAgc3VnZ2VzdGlvbnMgOiBjb25maWdzLFxuICAgICAgICAgICAgb3ZlcndyaXRlV2FybiA6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB7IHN1Ym1pdEJ1dHRvbiA6IGZpbGVTdWJtaXQsIGlucHV0RWxlbSA6IGZpbGVJbnB1dCB9ID0gZmlsZVNlY3Rpb24uaW5wdXRBbmRTdWJtaXRGbGV4O1xuICAgICAgICBmaWxlU3VibWl0LmNsaWNrKGFzeW5jIChldjogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlsZSA9IGZpbGVJbnB1dC52YWx1ZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmaWxlIHN1Ym1pdCwnLCBmaWxlKTtcbiAgICAgICAgICAgIGNvbnN0IFsgZmlsZW5hbWUsIGV4dCBdID0gbXlmcy5zcGxpdF9leHQoZmlsZSk7XG4gICAgICAgICAgICBpZiAoICFbICcuZXhhbScsICcudGVzdCcgXS5pbmNsdWRlcyhleHQpICkge1xuICAgICAgICAgICAgICAgIGZpbGVJbnB1dC5hZGRDbGFzcygnaW52YWxpZCcpO1xuICAgICAgICAgICAgICAgIE15QWxlcnQuc21hbGwud2FybmluZygnRmlsZSBuYW1lIG11c3QgZW5kIHdpdGggZWl0aGVyIC5leGFtIG9yIC50ZXN0Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWxlSW5wdXQucmVtb3ZlQ2xhc3MoJ2ludmFsaWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZpbGVMb3dlciA9IGZpbGUubG93ZXIoKTtcbiAgICAgICAgICAgIGlmICggc3ViY29uZmlnRmlsZS5sb3dlcigpID09PSBmaWxlTG93ZXIgKSB7XG4gICAgICAgICAgICAgICAgTXlBbGVydC5zbWFsbC5pbmZvKGAke3N1YmNvbmZpZ0ZpbGV9IHdhcyBhbHJlYWR5IHRoZSBjaG9zZW4gZmlsZWApXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBvdmVyd3JpdGU7XG4gICAgICAgICAgICAgICAgZm9yICggbGV0IGNmZyBvZiBjb25maWdzICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGNmZy5sb3dlcigpID09PSBmaWxlTG93ZXIgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBvdmVyd3JpdGUgb3IgbG9hZFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gYXdhaXQgTXlBbGVydC5iaWcuYmxvY2tpbmcoeyB0aXRsZSA6IGBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gb3ZlcndyaXRlICR7Y2ZnfT9gIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdGUgPSBjZmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNeUFsZXJ0LnNtYWxsLmluZm8oJ05vdCBvdmVyd3JpdGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCBvdmVyd3JpdGUgPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwZXJpbWVudFR5cGUgPSBleHQuc2xpY2UoMSkgYXMgRXhwZXJpbWVudFR5cGU7XG4gICAgICAgICAgICAgICAgICAgIEdsb2IuQmlnQ29uZmlnLmV4cGVyaW1lbnRfdHlwZSA9IGV4cGVyaW1lbnRUeXBlO1xuICAgICAgICAgICAgICAgICAgICBHbG9iLkJpZ0NvbmZpZy5zZXRTdWJjb25maWcoZmlsZSwgZXhwZXJpbWVudFR5cGUsIHN1YmNvbmZpZylcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBlcmltZW50VHlwZSA9IGV4dC5zbGljZSgxKSBhcyBFeHBlcmltZW50VHlwZTtcbiAgICAgICAgICAgICAgICAgICAgR2xvYi5CaWdDb25maWcuZXhwZXJpbWVudF90eXBlID0gZXhwZXJpbWVudFR5cGU7XG4gICAgICAgICAgICAgICAgICAgIEdsb2IuQmlnQ29uZmlnLnNldFN1YmNvbmZpZyhmaWxlLCBleHBlcmltZW50VHlwZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgTXlBbGVydC5zbWFsbC5zdWNjZXNzKGBDb25maWcgc2V0OiAke2ZpbGV9LmApO1xuICAgICAgICAgICAgICAgIGZpbGVJbnB1dC5wbGFjZWhvbGRlciA9IGBDdXJyZW50OiAke2ZpbGV9YDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbGVTdWJtaXQucmVwbGFjZUNsYXNzKCdhY3RpdmUnLCAnaW5hY3RpdmUnKTtcbiAgICAgICAgICAgIGZpbGVJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgICAgIC8vICoqKiAgU3ViamVjdFxuICAgICAgICBjb25zdCBzdWJqZWN0cyA9IEdsb2IuQmlnQ29uZmlnLnN1YmplY3RzO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgY3VycmVudFN1YmplY3QgPSBzdWJjb25maWcuc3ViamVjdDtcbiAgICAgICAgY29uc3Qgc3ViamVjdFNlY3Rpb24gPSBuZXcgSW5wdXRTZWN0aW9uKHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyIDogYEN1cnJlbnQ6ICR7Y3VycmVudFN1YmplY3R9YCxcbiAgICAgICAgICAgIGgzdGV4dCA6ICdTdWJqZWN0JyxcbiAgICAgICAgICAgIHN1Z2dlc3Rpb25zIDogc3ViamVjdHNcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHsgc3VibWl0QnV0dG9uIDogc3ViamVjdFN1Ym1pdCwgaW5wdXRFbGVtIDogc3ViamVjdElucHV0IH0gPSBzdWJqZWN0U2VjdGlvbi5pbnB1dEFuZFN1Ym1pdEZsZXg7XG4gICAgICAgIHN1YmplY3RTdWJtaXQuY2xpY2soKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc3ViamVjdCBzdWJtaXQsJywgZXYpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzdWJqZWN0SW5wdXQudmFsdWU7XG4gICAgICAgICAgICBpZiAoIGN1cnJlbnRTdWJqZWN0ID09PSB2YWx1ZSApIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBNeUFsZXJ0LnNtYWxsLmluZm8oYCR7Y3VycmVudFN1YmplY3R9IHdhcyBhbHJlYWR5IHRoZSBjaG9zZW4gc3ViamVjdGApXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YmNvbmZpZy5zdWJqZWN0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgTXlBbGVydC5zbWFsbC5zdWNjZXNzKGBTdWJqZWN0IHNldDogJHt2YWx1ZX0uYCk7XG4gICAgICAgICAgICAgICAgc3ViamVjdElucHV0LnBsYWNlaG9sZGVyID0gYEN1cnJlbnQ6ICR7dmFsdWV9YDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YmplY3RTdWJtaXQucmVwbGFjZUNsYXNzKCdhY3RpdmUnLCAnaW5hY3RpdmUnKTtcbiAgICAgICAgICAgIHN1YmplY3RJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN1YnRpdGxlID0gZWxlbSh7IHRhZyA6ICdoMicsIHRleHQgOiAnU2V0dGluZ3MnIH0pO1xuICAgICAgICB0aGlzLmNhY2hlQXBwZW5kKHsgc3VidGl0bGUsIGZpbGVTZWN0aW9uLCBzdWJqZWN0U2VjdGlvbiB9KVxuICAgICAgICAvKnRoaXMuY2FjaGVBcHBlbmQoe1xuICAgICAgICAgYWRkTGV2ZWxCdG4gOiBidXR0b24oeyBjbHMgOiAnYWN0aXZlJywgaHRtbCA6ICdBZGQgTGV2ZWwnLCBjbGljayA6IHRoaXMuYWRkTGV2ZWwgfSksXG4gICAgICAgICBcbiAgICAgICAgIH0pKi9cbiAgICB9XG4gICAgXG4gICAgXG59XG5cblxuY29uc3Qgc2V0dGluZ3NEaXYgPSBuZXcgU2V0dGluZ3NEaXYoeyBpZCA6ICdzZXR0aW5nc19kaXYnIH0pO1xuZXhwb3J0IGRlZmF1bHQgc2V0dGluZ3NEaXY7XG5cbiJdfQ==