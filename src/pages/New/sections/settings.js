"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../../bhe");
const extra_1 = require("../../../bhe/extra");
const Glob_1 = require("../../../Glob");
const fs = require("fs");
const MyAlert_1 = require("../../../MyAlert");
const MyFs_1 = require("../../../MyFs");
class SettingsDiv extends bhe_1.Div {
    constructor({ id }) {
        super({ id });
        const experimentType = Glob_1.default.BigConfig.experiment_type;
        const subconfigFile = Glob_1.default.BigConfig[`${experimentType}_file`];
        const subconfig = Glob_1.default.BigConfig[experimentType];
        const configs = fs.readdirSync(CONFIGS_PATH_ABS);
        const fileSection = new extra_1.InputSection({
            placeholder: `Current: ${subconfigFile}`,
            h3text: 'Config File',
            suggestions: configs,
        });
        const { submitButton: fileSubmit, inputElem: fileInput } = fileSection.inputAndSubmitFlex;
        fileSubmit.click(this.onFileSubmit(fileInput, subconfigFile, configs, subconfig, fileSubmit));
        const subjects = Glob_1.default.BigConfig.subjects;
        const currentSubject = subconfig.subject;
        const subjectSection = new extra_1.InputSection({
            placeholder: `Current: ${currentSubject}`,
            h3text: 'Subject',
            suggestions: subjects
        });
        const { submitButton: subjectSubmit, inputElem: subjectInput } = subjectSection.inputAndSubmitFlex;
        subjectSubmit.click(this.onSubjectSubmit(subjectInput, currentSubject, subconfig, subjectSubmit));
        const subtitle = bhe_1.elem({ tag: 'h2', text: 'Settings' });
        this.cacheAppend({ subtitle, fileSection, subjectSection });
    }
    onSubjectSubmit(subjectInput, currentSubject, subconfig, subjectSubmit) {
        return (ev) => {
            console.log('subject submit,', ev);
            const value = subjectInput.value;
            if (currentSubject === value) {
                MyAlert_1.default.small.info(`${currentSubject} was already the chosen subject`);
            }
            else {
                subconfig.subject = value;
                MyAlert_1.default.small.success(`Subject set: ${value}.`);
                subjectInput.placeholder = `Current: ${value}`;
            }
            subjectSubmit.replaceClass('active', 'inactive');
            subjectInput.value = '';
        };
    }
    onFileSubmit(fileInput, subconfigFile, configs, subconfig, fileSubmit) {
        return async (ev) => {
            const file = fileInput.value;
            console.log('file submit,', file);
            const [filename, ext] = MyFs_1.default.split_ext(file);
            if (!['.exam', '.test'].includes(ext)) {
                fileInput.addClass('invalid');
                MyAlert_1.default.small.warning('File name must end with either .exam or .test');
                return;
            }
            else {
                fileInput.removeClass('invalid');
            }
            const fileLower = file.lower();
            if (Glob_1.default.BigConfig..lower() === fileLower) {
                MyAlert_1.default.small.info(`${subconfigFile} was already the chosen file`);
            }
            else {
                let overwrite;
                for (let cfg of configs) {
                    if (cfg.lower() === fileLower) {
                        const { value } = await MyAlert_1.default.big.blocking({
                            title: `${cfg} already exists, what do you want to do?`,
                            confirmButtonText: 'Use it',
                            onBeforeOpen: (modal) => {
                                let el = bhe_1.elem({ htmlElement: modal, children: { actions: '.swal2-actions' } });
                                el.actions.append(bhe_1.button({ cls: "swal2-confirm swal2-styled warn", html: 'Overwrite it' })
                                    .attr({ type: 'button' })
                                    .css({ backgroundColor: '#FFC66D', color: 'black' })
                                    .click((ev) => {
                                    overwrite = true;
                                    MyAlert_1.default.clickCancel();
                                }));
                            }
                        });
                        if (value) {
                            overwrite = cfg;
                            break;
                        }
                        else if (!overwrite) {
                            return MyAlert_1.default.small.info('Not overwriting');
                        }
                    }
                }
                const experimentType = ext.slice(1);
                Glob_1.default.BigConfig.experiment_type = experimentType;
                if (overwrite !== false) {
                    Glob_1.default.BigConfig.setSubconfig(file, experimentType, subconfig);
                }
                else {
                    Glob_1.default.BigConfig.setSubconfig(file, experimentType);
                }
                MyAlert_1.default.small.success(`Config set: ${file}.`);
                fileInput.placeholder = `Current: ${file}`;
            }
            fileSubmit.replaceClass('active', 'inactive');
            fileInput.value = '';
        };
    }
}
const settingsDiv = new SettingsDiv({ id: 'settings_div' });
exports.default = settingsDiv;
//# sourceMappingURL=data:application/json;base64,