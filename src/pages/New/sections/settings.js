"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../../bhe");
const Suggestions = require("suggestions");
const extra_1 = require("../../../bhe/extra");
const Glob_1 = require("../../../Glob");
class SettingsDiv extends bhe_1.Div {
    constructor({ id }) {
        super({ id });
        const fileSection = new extra_1.InputSection({ placeholder: 'Config file name', h3text: 'Config File' });
        const subjectSection = new extra_1.InputSection({ placeholder: 'Subject id', h3text: 'Subject' });
        new Suggestions(subjectSection.inputAndSubmitFlex.inputElem.e, Glob_1.default.BigConfig.subjects, { minLength: 1 });
        const subtitle = bhe_1.elem({ tag: 'h2', text: 'Settings' });
        this.cacheAppend({ subtitle, fileSection, subjectSection });
    }
}
const settingsDiv = new SettingsDiv({ id: 'settings_div' });
exports.default = settingsDiv;
//# sourceMappingURL=data:application/json;base64,