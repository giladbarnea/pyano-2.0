"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../../bhe");
const extra_1 = require("../../../bhe/extra");
const Glob_1 = require("../../../Glob");
const fs = require("fs");
const MyAlert_1 = require("../../../MyAlert");
class SettingsDiv extends bhe_1.Div {
    constructor({ id }) {
        super({ id });
        const experimentType = Glob_1.default.BigConfig.experiment_type;
        const subconfigFile = Glob_1.default.BigConfig[`${experimentType}_file`];
        const configs = fs.readdirSync(CONFIGS_PATH_ABS);
        const fileSection = new extra_1.InputSection({
            placeholder: `Current: ${subconfigFile}`,
            h3text: 'Config File',
            suggestions: configs,
            overwriteWarn: true
        });
        const subjects = Glob_1.default.BigConfig.subjects;
        const subconfig = Glob_1.default.BigConfig[experimentType];
        const currentSubject = subconfig.subject;
        const subjectSection = new extra_1.InputSection({
            placeholder: `Current: ${currentSubject}`,
            h3text: 'Subject',
            suggestions: subjects
        });
        const { submitButton: subjectSubmit, inputElem: subjectInput } = subjectSection.inputAndSubmitFlex;
        subjectSubmit.click((ev) => {
            console.log('subject submit,', ev);
            const value = subjectInput.value;
            if (currentSubject === value) {
                console.log('NOTHING CHANGED');
                MyAlert_1.default.small.info(`${currentSubject} was already the chosen subject`);
            }
            else {
                subconfig.subject = value;
                MyAlert_1.default.small.success(`Subject set: ${value}.`);
                subjectInput.placeholder = `Current: ${value}`;
            }
            subjectSubmit.replaceClass('active', 'inactive');
            subjectInput.value = '';
        });
        const subtitle = bhe_1.elem({ tag: 'h2', text: 'Settings' });
        this.cacheAppend({ subtitle, fileSection, subjectSection });
    }
}
const settingsDiv = new SettingsDiv({ id: 'settings_div' });
exports.default = settingsDiv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXR0aW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBLHNDQUF5QztBQUV6Qyw4Q0FBa0Q7QUFDbEQsd0NBQWlDO0FBQ2pDLHlCQUF5QjtBQUN6Qiw4Q0FBc0M7QUFLdEMsTUFBTSxXQUFZLFNBQVEsU0FBRztJQUd6QixZQUFZLEVBQUUsRUFBRSxFQUFFO1FBQ2QsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNkLE1BQU0sY0FBYyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDO1FBQ3RELE1BQU0sYUFBYSxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxjQUFjLE9BQU8sQ0FBQyxDQUFDO1FBRS9ELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNqRCxNQUFNLFdBQVcsR0FBRyxJQUFJLG9CQUFZLENBQUM7WUFDakMsV0FBVyxFQUFHLFlBQVksYUFBYSxFQUFFO1lBQ3pDLE1BQU0sRUFBRyxhQUFhO1lBQ3RCLFdBQVcsRUFBRyxPQUFPO1lBQ3JCLGFBQWEsRUFBRyxJQUFJO1NBQ3ZCLENBQUMsQ0FBQztRQUdILE1BQU0sUUFBUSxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO1FBQ3pDLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDakQsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQztRQUN6QyxNQUFNLGNBQWMsR0FBRyxJQUFJLG9CQUFZLENBQUM7WUFDcEMsV0FBVyxFQUFHLFlBQVksY0FBYyxFQUFFO1lBQzFDLE1BQU0sRUFBRyxTQUFTO1lBQ2xCLFdBQVcsRUFBRyxRQUFRO1NBQ3pCLENBQUMsQ0FBQztRQUNILE1BQU0sRUFBRSxZQUFZLEVBQUcsYUFBYSxFQUFFLFNBQVMsRUFBRyxZQUFZLEVBQUUsR0FBRyxjQUFjLENBQUMsa0JBQWtCLENBQUM7UUFDckcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQWMsRUFBRSxFQUFFO1lBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDbkMsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQztZQUNqQyxJQUFLLGNBQWMsS0FBSyxLQUFLLEVBQUc7Z0JBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDL0IsaUJBQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsY0FBYyxpQ0FBaUMsQ0FBQyxDQUFBO2FBQ3pFO2lCQUFNO2dCQUNILFNBQVMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2dCQUMxQixpQkFBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBQ2hELFlBQVksQ0FBQyxXQUFXLEdBQUcsWUFBWSxLQUFLLEVBQUUsQ0FBQzthQUVsRDtZQUNELGFBQWEsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ2pELFlBQVksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBRzVCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxRQUFRLEdBQUcsVUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFHLElBQUksRUFBRSxJQUFJLEVBQUcsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFBO0lBSy9ELENBQUM7Q0FHSjtBQUdELE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFHLGNBQWMsRUFBRSxDQUFDLENBQUM7QUFDN0Qsa0JBQWUsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gKiAgcGFnZXMvTmV3L3NlY3Rpb25zL3NldHRpbmdzXG5cbi8qKlxuICogaW1wb3J0IHNlY3Rpb25zIGZyb20gXCIuL3NlY3Rpb25zXCJcbiAqIHNlY3Rpb25zLnNldHRpbmdzKi9cbmltcG9ydCB7IGVsZW0sIERpdiB9IGZyb20gXCIuLi8uLi8uLi9iaGVcIjtcblxuaW1wb3J0IHsgSW5wdXRTZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2JoZS9leHRyYVwiO1xuaW1wb3J0IEdsb2IgZnJvbSBcIi4uLy4uLy4uL0dsb2JcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IE15QWxlcnQgZnJvbSAnLi4vLi4vLi4vTXlBbGVydCdcblxuLy8gKioqICBGSUxFXG5cblxuY2xhc3MgU2V0dGluZ3NEaXYgZXh0ZW5kcyBEaXYge1xuICAgIGZpbGVTZWN0aW9uOiBJbnB1dFNlY3Rpb247XG4gICAgXG4gICAgY29uc3RydWN0b3IoeyBpZCB9KSB7XG4gICAgICAgIHN1cGVyKHsgaWQgfSk7XG4gICAgICAgIGNvbnN0IGV4cGVyaW1lbnRUeXBlID0gR2xvYi5CaWdDb25maWcuZXhwZXJpbWVudF90eXBlO1xuICAgICAgICBjb25zdCBzdWJjb25maWdGaWxlID0gR2xvYi5CaWdDb25maWdbYCR7ZXhwZXJpbWVudFR5cGV9X2ZpbGVgXTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNvbmZpZ3MgPSBmcy5yZWFkZGlyU3luYyhDT05GSUdTX1BBVEhfQUJTKTtcbiAgICAgICAgY29uc3QgZmlsZVNlY3Rpb24gPSBuZXcgSW5wdXRTZWN0aW9uKHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyIDogYEN1cnJlbnQ6ICR7c3ViY29uZmlnRmlsZX1gLFxuICAgICAgICAgICAgaDN0ZXh0IDogJ0NvbmZpZyBGaWxlJyxcbiAgICAgICAgICAgIHN1Z2dlc3Rpb25zIDogY29uZmlncyxcbiAgICAgICAgICAgIG92ZXJ3cml0ZVdhcm4gOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHN1YmplY3RzID0gR2xvYi5CaWdDb25maWcuc3ViamVjdHM7XG4gICAgICAgIGNvbnN0IHN1YmNvbmZpZyA9IEdsb2IuQmlnQ29uZmlnW2V4cGVyaW1lbnRUeXBlXTtcbiAgICAgICAgY29uc3QgY3VycmVudFN1YmplY3QgPSBzdWJjb25maWcuc3ViamVjdDtcbiAgICAgICAgY29uc3Qgc3ViamVjdFNlY3Rpb24gPSBuZXcgSW5wdXRTZWN0aW9uKHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyIDogYEN1cnJlbnQ6ICR7Y3VycmVudFN1YmplY3R9YCxcbiAgICAgICAgICAgIGgzdGV4dCA6ICdTdWJqZWN0JyxcbiAgICAgICAgICAgIHN1Z2dlc3Rpb25zIDogc3ViamVjdHNcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHsgc3VibWl0QnV0dG9uIDogc3ViamVjdFN1Ym1pdCwgaW5wdXRFbGVtIDogc3ViamVjdElucHV0IH0gPSBzdWJqZWN0U2VjdGlvbi5pbnB1dEFuZFN1Ym1pdEZsZXg7XG4gICAgICAgIHN1YmplY3RTdWJtaXQuY2xpY2soKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc3ViamVjdCBzdWJtaXQsJywgZXYpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzdWJqZWN0SW5wdXQudmFsdWU7XG4gICAgICAgICAgICBpZiAoIGN1cnJlbnRTdWJqZWN0ID09PSB2YWx1ZSApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTk9USElORyBDSEFOR0VEJyk7XG4gICAgICAgICAgICAgICAgTXlBbGVydC5zbWFsbC5pbmZvKGAke2N1cnJlbnRTdWJqZWN0fSB3YXMgYWxyZWFkeSB0aGUgY2hvc2VuIHN1YmplY3RgKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJjb25maWcuc3ViamVjdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIE15QWxlcnQuc21hbGwuc3VjY2VzcyhgU3ViamVjdCBzZXQ6ICR7dmFsdWV9LmApO1xuICAgICAgICAgICAgICAgIHN1YmplY3RJbnB1dC5wbGFjZWhvbGRlciA9IGBDdXJyZW50OiAke3ZhbHVlfWA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJqZWN0U3VibWl0LnJlcGxhY2VDbGFzcygnYWN0aXZlJywgJ2luYWN0aXZlJyk7XG4gICAgICAgICAgICBzdWJqZWN0SW5wdXQudmFsdWUgPSAnJztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdWJ0aXRsZSA9IGVsZW0oeyB0YWcgOiAnaDInLCB0ZXh0IDogJ1NldHRpbmdzJyB9KTtcbiAgICAgICAgdGhpcy5jYWNoZUFwcGVuZCh7IHN1YnRpdGxlLCBmaWxlU2VjdGlvbiwgc3ViamVjdFNlY3Rpb24gfSlcbiAgICAgICAgLyp0aGlzLmNhY2hlQXBwZW5kKHtcbiAgICAgICAgIGFkZExldmVsQnRuIDogYnV0dG9uKHsgY2xzIDogJ2FjdGl2ZScsIGh0bWwgOiAnQWRkIExldmVsJywgY2xpY2sgOiB0aGlzLmFkZExldmVsIH0pLFxuICAgICAgICAgXG4gICAgICAgICB9KSovXG4gICAgfVxuICAgIFxuICAgIFxufVxuXG5cbmNvbnN0IHNldHRpbmdzRGl2ID0gbmV3IFNldHRpbmdzRGl2KHsgaWQgOiAnc2V0dGluZ3NfZGl2JyB9KTtcbmV4cG9ydCBkZWZhdWx0IHNldHRpbmdzRGl2O1xuXG4iXX0=