"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../../bhe");
const electron_1 = require("electron");
const util_1 = require("../../../util");
const Glob_1 = require("../../../Glob");
const extra_1 = require("../../../bhe/extra");
class SettingsDiv extends bhe_1.Div {
    constructor({ id }) {
        super({ id });
        const fileSection = new extra_1.InputSection({ placeholder: 'Config file name', h3text: 'Config File' });
        const subtitle = bhe_1.elem({ tag: 'h2', text: 'Settings' });
        this.cacheAppend({ subtitle, fileSection });
    }
}
class InputDiv extends bhe_1.Div {
    constructor() {
        super({ cls: 'input' });
        const editable = bhe_1.span({ cls: 'editable' });
        this
            .cacheAppend({
            editable,
        });
    }
}
class SubjectInput extends InputDiv {
    constructor() {
        super();
        const autocomplete = bhe_1.span({ cls: 'autocomplete', text: 'Subject Id' });
        this
            .on({
            keydown: (ev) => this.doAutocomplete(ev),
            focus: (ev) => {
                console.log('input focus');
                this.sendEnd();
                electron_1.remote.getCurrentWindow().webContents.sendInputEvent({
                    type: "keyDown",
                    keyCode: 'Home',
                    modifiers: ['shift']
                });
            },
        })
            .cacheAppend({
            autocomplete
        });
    }
    reset() {
        this.editable.text('');
        this.autocomplete
            .text('Subject Id')
            .removeAttr('hidden');
        submitButton
            .removeClass('active')
            .addClass('inactive')
            .html('Submit');
    }
    setText(newText) {
        this.autocomplete.attr({ hidden: true });
        this.editable.text(newText);
        submitButton
            .removeClass('inactive')
            .addClass('active')
            .html(newText);
    }
    sendEnd() {
        electron_1.remote.getCurrentWindow().webContents.sendInputEvent({
            type: "keyDown",
            keyCode: 'End',
            modifiers: []
        });
    }
    doAutocomplete(ev) {
        console.log('\ndoAutocomplete', ev);
        if (ev.ctrlKey || ['Backspace', 'Home', 'End', 'Delete'].includes(ev.key) || ev.key.includes('Arrow')) {
            if (ev.key === 'Backspace') {
                console.log(`Backspace, returning. editable text len: ${this.editable.text().length}, autocomplete text len: ${this.autocomplete.text().length}
                activeElement: ${document.activeElement.className}`, ev);
                const oldText = this.editable.text();
                if (oldText.length === 0) {
                    console.warn('oldText.length === 0, preventDefault, "Subject Id" and return');
                    this.reset();
                    return ev.preventDefault();
                }
                const newText = oldText.slice(0, oldText.length - 1);
                if (ev.ctrlKey || !util_1.bool(newText)) {
                    console.warn('!bool(newText) || ctrlKey, editable(""), preventDefault, "Subject Id" and return');
                    this.reset();
                    return ev.preventDefault();
                }
                this.setText(newText);
                this.sendEnd();
            }
            else {
                console.log('Functional, returning', ev);
            }
            return;
        }
        ev.preventDefault();
        if (ev.key === 'Tab') {
            let oldText = this.editable.text();
            if (this.autocomplete.attr('hidden') || !util_1.bool(oldText)) {
                return;
            }
            this.setText(oldText + this.autocomplete.text());
            this.sendEnd();
            return;
        }
        const illegal = /[^(a-z0-9|_)]/;
        if (ev.key.match(illegal)) {
            console.log('Matched [^(a-z0-9|_)], returning', ev);
            return;
        }
        const oldText = this.editable.text().lower().removeAll(illegal);
        let newText;
        if (util_1.bool(oldText))
            newText = oldText.toLowerCase() + ev.key;
        else
            newText = ev.key;
        this.setText(newText);
        const subjectSuggestion = subjects.find(s => s.startsWith(newText));
        this.removeClass('input-missing');
        if (subjectSuggestion) {
            this.autocomplete
                .text(subjectSuggestion.substr(newText.length))
                .removeAttr('hidden');
            console.warn('changed autocomplete');
        }
        else if (this.autocomplete.text()) {
            this.autocomplete.attr({ hidden: true });
            console.warn('hide autocomplete');
        }
        this.sendEnd();
        console.log({ newText, subjectSuggestion, 'this.autocomplete.text()': this.autocomplete.text() });
        console.log('\n');
    }
}
class SubjectDiv extends bhe_1.Div {
    constructor() {
        super({ id: 'subject_div' });
        const subjectInput = new SubjectInput();
        const subtitle = bhe_1.elem({ tag: 'h3', text: 'Subject' });
        this.cacheAppend({ subtitle, subjectInput });
    }
}
const subjectDiv = new SubjectDiv();
const subjects = Glob_1.default.BigConfig.subjects;
const submitButton = bhe_1.button({ cls: 'inactive', html: 'Submit' });
subjectDiv.cacheAppend({ submitButton });
const settingsDiv = new SettingsDiv({ id: 'settings_div' })
    .cacheAppend({ subjectDiv });
exports.default = settingsDiv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXR0aW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBLHNDQUF3RjtBQUN4Rix1Q0FBa0M7QUFDbEMsd0NBQXFDO0FBQ3JDLHdDQUFpQztBQUNqQyw4Q0FBa0Q7QUFLbEQsTUFBTSxXQUFZLFNBQVEsU0FBRztJQUd6QixZQUFZLEVBQUUsRUFBRSxFQUFFO1FBQ2QsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVkLE1BQU0sV0FBVyxHQUFHLElBQUksb0JBQVksQ0FBQyxFQUFFLFdBQVcsRUFBRyxrQkFBa0IsRUFBRSxNQUFNLEVBQUcsYUFBYSxFQUFFLENBQUMsQ0FBQztRQUNuRyxNQUFNLFFBQVEsR0FBRyxVQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsSUFBSSxFQUFFLElBQUksRUFBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQTtJQUsvQyxDQUFDO0NBR0o7QUFJRCxNQUFNLFFBQVMsU0FBUSxTQUFHO0lBR3RCO1FBQ0ksS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDekIsTUFBTSxRQUFRLEdBQUcsVUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFHLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFFNUMsSUFBSTthQUVDLFdBQVcsQ0FBQztZQUNULFFBQVE7U0FDWCxDQUFDLENBQUM7SUFDWCxDQUFDO0NBR0o7QUFFRCxNQUFNLFlBQWEsU0FBUSxRQUFRO0lBSS9CO1FBQ0ksS0FBSyxFQUFFLENBQUM7UUFDUixNQUFNLFlBQVksR0FBRyxVQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsY0FBYyxFQUFFLElBQUksRUFBRyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBRXpFLElBQUk7YUFFQyxFQUFFLENBQUM7WUFDQSxPQUFPLEVB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Q0FFSjtBQUdELE1BQU0sVUFBVyxTQUFRLFNBQUc7SUFLeEI7UUFDSSxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUcsYUFBYSxFQUFFLENBQUMsQ0FBQztRQUU5QixNQUFNLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hDLE1BQU0sUUFBUSxHQUFHLFVBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRyxJQUFJLEVBQUUsSUFBSSxFQUFHLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFBO0lBQ2hELENBQUM7Q0FHSjtBQUVELE1BQU0sVUFBVSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7QUFDcEMsTUFBTSxRQUFRLEdBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDekMsTUFBTSxZQUFZLEdBQUcsWUFBTSxDQUFDLEVBQUUsR0FBRyxFQUFHLFVBQVUsRUFBRSxJQUFJLEVBQUcsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNuRSxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztBQUt6QyxNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRyxjQUFjLEVBQUUsQ0FBQztLQUN2RCxXQUFXLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQ2pDLGtCQUFlLFdBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vICogIHBhZ2VzL05ldy9zZWN0aW9ucy9zZXR0aW5nc1xuXG4vKipcbiAqIGltcG9ydCBzZWN0aW9ucyBmcm9tIFwiLi9zZWN0aW9uc1wiXG4gKiBzZWN0aW9ucy5zZXR0aW5ncyovXG5pbXBvcnQgeyBkaXYsIGVsZW0sIGJ1dHRvbiwgRGl2LCBCdXR0b24sIFNwYW4sIHNwYW4sIGlucHV0LCBJbnB1dCB9IGZyb20gXCIuLi8uLi8uLi9iaGVcIjtcbmltcG9ydCB7IHJlbW90ZSB9IGZyb20gXCJlbGVjdHJvblwiO1xuaW1wb3J0IHsgYm9vbCB9IGZyb20gXCIuLi8uLi8uLi91dGlsXCI7XG5pbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vLi4vR2xvYlwiO1xuaW1wb3J0IHsgSW5wdXRTZWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2JoZS9leHRyYVwiO1xuXG4vLyAqKiogIEZJTEVcblxuXG5jbGFzcyBTZXR0aW5nc0RpdiBleHRlbmRzIERpdiB7XG4gICAgZmlsZVNlY3Rpb246IElucHV0U2VjdGlvbjtcbiAgICBcbiAgICBjb25zdHJ1Y3Rvcih7IGlkIH0pIHtcbiAgICAgICAgc3VwZXIoeyBpZCB9KTtcbiAgICAgICAgLy8gY29uc3QgaW5wdXQgPSBuZXcgSW5wdXREaXYoKTtcbiAgICAgICAgY29uc3QgZmlsZVNlY3Rpb24gPSBuZXcgSW5wdXRTZWN0aW9uKHsgcGxhY2Vob2xkZXIgOiAnQ29uZmlnIGZpbGUgbmFtZScsIGgzdGV4dCA6ICdDb25maWcgRmlsZScgfSk7XG4gICAgICAgIGNvbnN0IHN1YnRpdGxlID0gZWxlbSh7IHRhZyA6ICdoMicsIHRleHQgOiAnU2V0dGluZ3MnIH0pO1xuICAgICAgICB0aGlzLmNhY2hlQXBwZW5kKHsgc3VidGl0bGUsIGZpbGVTZWN0aW9uIH0pXG4gICAgICAgIC8qdGhpcy5jYWNoZUFwcGVuZCh7XG4gICAgICAgICBhZGRMZXZlbEJ0biA6IGJ1dHRvbih7IGNscyA6ICdhY3RpdmUnLCBodG1sIDogJ0FkZCBMZXZlbCcsIGNsaWNrIDogdGhpcy5hZGRMZXZlbCB9KSxcbiAgICAgICAgIFxuICAgICAgICAgfSkqL1xuICAgIH1cbiAgICBcbiAgICBcbn1cblxuLy8gKioqICBTVUJKRUNUXG5cbmNsYXNzIElucHV0RGl2IGV4dGVuZHMgRGl2IHtcbiAgICBlZGl0YWJsZTogU3BhbjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoeyBjbHMgOiAnaW5wdXQnIH0pO1xuICAgICAgICBjb25zdCBlZGl0YWJsZSA9IHNwYW4oeyBjbHMgOiAnZWRpdGFibGUnIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpc1xuICAgICAgICAgICAgLy8gLmF0dHIoeyBjb250ZW50ZWRpdGFibGUgOiB0cnVlIH0pXG4gICAgICAgICAgICAuY2FjaGVBcHBlbmQoe1xuICAgICAgICAgICAgICAgIGVkaXRhYmxlLFxuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIFxufVxuXG5jbGFzcyBTdWJqZWN0SW5wdXQgZXh0ZW5kcyBJbnB1dERpdiB7XG4gICAgZWRpdGFibGU6IFNwYW47XG4gICAgYXV0b2NvbXBsZXRlOiBTcGFuO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb25zdCBhdXRvY29tcGxldGUgPSBzcGFuKHsgY2xzIDogJ2F1dG9jb21wbGV0ZScsIHRleHQgOiAnU3ViamVjdCBJZCcgfSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzXG4gICAgICAgICAgICAvLyAuYXR0cih7IGNvbnRlbnRlZGl0YWJsZSA6IHRydWUgfSlcbiAgICAgICAgICAgIC5vbih7XG4gICAgICAgICAgICAgICAga2V5ZG93biA6IChldjogS2V5Ym9hcmRFdmVudCkgPT4gdGhpcy5kb0F1dG9jb21wbGV0ZShldiksXG4gICAgICAgICAgICAgICAgZm9jdXMgOiAoZXY6IEZvY3VzRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2lucHV0IGZvY3VzJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZEVuZCgpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpLndlYkNvbnRlbnRzLnNlbmRJbnB1dEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgOiBcImtleURvd25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleUNvZGUgOiAnSG9tZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllcnMgOiBbICdzaGlmdCcgXVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhY2hlQXBwZW5kKHtcbiAgICAgICAgICAgICAgICBhdXRvY29tcGxldGVcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmVkaXRhYmxlLnRleHQoJycpO1xuICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZVxuICAgICAgICAgICAgLnRleHQoJ1N1YmplY3QgSWQnKVxuICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2hpZGRlbicpO1xuICAgICAgICBzdWJtaXRCdXR0b25cbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgICAgIC5hZGRDbGFzcygnaW5hY3RpdmUnKVxuICAgICAgICAgICAgLmh0bWwoJ1N1Ym1pdCcpXG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgc2V0VGV4dChuZXdUZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hdXRvY29tcGxldGUuYXR0cih7IGhpZGRlbiA6IHRydWUgfSk7XG4gICAgICAgIHRoaXMuZWRpdGFibGUudGV4dChuZXdUZXh0KTtcbiAgICAgICAgc3VibWl0QnV0dG9uXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2luYWN0aXZlJylcbiAgICAgICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICAgICAgICAgIC5odG1sKG5ld1RleHQpXG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgc2VuZEVuZCgpIHtcbiAgICAgICAgcmVtb3RlLmdldEN1cnJlbnRXaW5kb3coKS53ZWJDb250ZW50cy5zZW5kSW5wdXRFdmVudCh7XG4gICAgICAgICAgICB0eXBlIDogXCJrZXlEb3duXCIsXG4gICAgICAgICAgICBrZXlDb2RlIDogJ0VuZCcsXG4gICAgICAgICAgICBtb2RpZmllcnMgOiBbXVxuICAgICAgICB9KVxuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIGRvQXV0b2NvbXBsZXRlKGV2OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdcXG5kb0F1dG9jb21wbGV0ZScsIGV2KTtcbiAgICAgICAgaWYgKCBldi5jdHJsS2V5IHx8IFsgJ0JhY2tzcGFjZScsICdIb21lJywgJ0VuZCcsICdEZWxldGUnIF0uaW5jbHVkZXMoZXYua2V5KSB8fCBldi5rZXkuaW5jbHVkZXMoJ0Fycm93JykgKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICggZXYua2V5ID09PSAnQmFja3NwYWNlJyApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQmFja3NwYWNlLCByZXR1cm5pbmcuIGVkaXRhYmxlIHRleHQgbGVuOiAke3RoaXMuZWRpdGFibGUudGV4dCgpLmxlbmd0aH0sIGF1dG9jb21wbGV0ZSB0ZXh0IGxlbjogJHt0aGlzLmF1dG9jb21wbGV0ZS50ZXh0KCkubGVuZ3RofVxuICAgICAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQ6ICR7ZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5jbGFzc05hbWV9YCwgZXYpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IG9sZFRleHQgPSB0aGlzLmVkaXRhYmxlLnRleHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoIG9sZFRleHQubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ29sZFRleHQubGVuZ3RoID09PSAwLCBwcmV2ZW50RGVmYXVsdCwgXCJTdWJqZWN0IElkXCIgYW5kIHJldHVybicpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBuZXdUZXh0ID0gb2xkVGV4dC5zbGljZSgwLCBvbGRUZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgIGlmICggZXYuY3RybEtleSB8fCAhYm9vbChuZXdUZXh0KSApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCchYm9vbChuZXdUZXh0KSB8fCBjdHJsS2V5LCBlZGl0YWJsZShcIlwiKSwgcHJldmVudERlZmF1bHQsIFwiU3ViamVjdCBJZFwiIGFuZCByZXR1cm4nKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZXh0KG5ld1RleHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZEVuZCgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gQXJyb3csIGJhcmUgQ29udHJvbCBldGNcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRnVuY3Rpb25hbCwgcmV0dXJuaW5nJywgZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoIGV2LmtleSA9PT0gJ1RhYicgKSB7XG4gICAgICAgICAgICBsZXQgb2xkVGV4dCA9IHRoaXMuZWRpdGFibGUudGV4dCgpO1xuICAgICAgICAgICAgaWYgKCB0aGlzLmF1dG9jb21wbGV0ZS5hdHRyKCdoaWRkZW4nKSB8fCAhYm9vbChvbGRUZXh0KSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldFRleHQob2xkVGV4dCArIHRoaXMuYXV0b2NvbXBsZXRlLnRleHQoKSk7XG4gICAgICAgICAgICB0aGlzLnNlbmRFbmQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbGxlZ2FsID0gL1teKGEtejAtOXxfKV0vO1xuICAgICAgICBpZiAoIGV2LmtleS5tYXRjaChpbGxlZ2FsKSApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNYXRjaGVkIFteKGEtejAtOXxfKV0sIHJldHVybmluZycsIGV2KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG9sZFRleHQgPSB0aGlzLmVkaXRhYmxlLnRleHQoKS5sb3dlcigpLnJlbW92ZUFsbChpbGxlZ2FsKTtcbiAgICAgICAgbGV0IG5ld1RleHQ7XG4gICAgICAgIGlmICggYm9vbChvbGRUZXh0KSApXG4gICAgICAgICAgICBuZXdUZXh0ID0gb2xkVGV4dC50b0xvd2VyQ2FzZSgpICsgZXYua2V5O1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBuZXdUZXh0ID0gZXYua2V5O1xuICAgICAgICB0aGlzLnNldFRleHQobmV3VGV4dCk7XG4gICAgICAgIC8vIHRoaXMuZWRpdGFibGUudGV4dChuZXdUZXh0KTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zdCBzdWJqZWN0U3VnZ2VzdGlvbiA9IHN1YmplY3RzLmZpbmQocyA9PiBzLnN0YXJ0c1dpdGgobmV3VGV4dCkpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5yZW1vdmVDbGFzcygnaW5wdXQtbWlzc2luZycpO1xuICAgICAgICAvKnN1Ym1pdEJ1dHRvblxuICAgICAgICAgLnJlbW92ZUNsYXNzKCdpbmFjdGl2ZScpXG4gICAgICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAuaHRtbChuZXdUZXh0KTsqL1xuICAgICAgICBcbiAgICAgICAgaWYgKCBzdWJqZWN0U3VnZ2VzdGlvbiApIHtcbiAgICAgICAgICAgIHRoaXMuYXV0b2NvbXBsZXRlXG4gICAgICAgICAgICAgICAgLnRleHQoc3ViamVjdFN1Z2dlc3Rpb24uc3Vic3RyKG5ld1RleHQubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignaGlkZGVuJyk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NoYW5nZWQgYXV0b2NvbXBsZXRlJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgfSBlbHNlIGlmICggdGhpcy5hdXRvY29tcGxldGUudGV4dCgpICkge1xuICAgICAgICAgICAgLy8gdGhpcy5hdXRvY29tcGxldGUuaHRtbCgnJyk7XG4gICAgICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZS5hdHRyKHsgaGlkZGVuIDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignaGlkZSBhdXRvY29tcGxldGUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbmRFbmQoKTtcbiAgICAgICAgY29uc29sZS5sb2coeyBuZXdUZXh0LCBzdWJqZWN0U3VnZ2VzdGlvbiwgJ3RoaXMuYXV0b2NvbXBsZXRlLnRleHQoKScgOiB0aGlzLmF1dG9jb21wbGV0ZS50ZXh0KCkgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZygnXFxuJyk7XG4gICAgfVxuICAgIFxufVxuXG5cbmNsYXNzIFN1YmplY3REaXYgZXh0ZW5kcyBEaXYge1xuICAgIHN1YmplY3RJbnB1dDogU3ViamVjdElucHV0O1xuICAgIHN1Ym1pdEJ1dHRvbjogQnV0dG9uO1xuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcih7IGlkIDogJ3N1YmplY3RfZGl2JyB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHN1YmplY3RJbnB1dCA9IG5ldyBTdWJqZWN0SW5wdXQoKTtcbiAgICAgICAgY29uc3Qgc3VidGl0bGUgPSBlbGVtKHsgdGFnIDogJ2gzJywgdGV4dCA6ICdTdWJqZWN0JyB9KTtcbiAgICAgICAgdGhpcy5jYWNoZUFwcGVuZCh7IHN1YnRpdGxlLCBzdWJqZWN0SW5wdXQgfSlcbiAgICB9XG4gICAgXG4gICAgXG59XG5cbmNvbnN0IHN1YmplY3REaXYgPSBuZXcgU3ViamVjdERpdigpO1xuY29uc3Qgc3ViamVjdHMgPSBHbG9iLkJpZ0NvbmZpZy5zdWJqZWN0cztcbmNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGJ1dHRvbih7IGNscyA6ICdpbmFjdGl2ZScsIGh0bWwgOiAnU3VibWl0JyB9KTsgLy8gb3V0c2lkZSBTdWJqZWN0RGl2IGJlY2F1c2UgdXNlZCBieSBTdWJqZWN0SW5wdXRcbnN1YmplY3REaXYuY2FjaGVBcHBlbmQoeyBzdWJtaXRCdXR0b24gfSk7XG4vLyAuYWRkQ2xhc3MoJ2luYWN0aXZlLWJ0bicpXG4vLyAuaHRtbCgnU3VibWl0Jylcbi8vIC5jbGljayhvblN1Ym1pdFN1YmplY3RDbGljayk7XG5cbmNvbnN0IHNldHRpbmdzRGl2ID0gbmV3IFNldHRpbmdzRGl2KHsgaWQgOiAnc2V0dGluZ3NfZGl2JyB9KVxuICAgIC5jYWNoZUFwcGVuZCh7IHN1YmplY3REaXYgfSk7XG5leHBvcnQgZGVmYXVsdCBzZXR0aW5nc0RpdjtcblxuIl19