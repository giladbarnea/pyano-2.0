"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const sidebar_1 = require("../sidebar");
const sections_1 = require("./sections");
const bhe_1 = require("../../bhe");
const MyAlert_1 = require("../../MyAlert");
const path = require("path");
const electron_1 = require("electron");
async function load(reload) {
    Glob_1.default.BigConfig.last_page = "new";
    if (reload) {
        util.reloadPage();
    }
    sidebar_1.default.select("new", { changeTitle: true });
    const startButton = bhe_1.button({ cls: 'active', html: 'Start Experiment', id: 'start_experiment_button' })
        .click(async () => {
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        let action = await MyAlert_1.default.big.threeButtons({
            title: `Please make sure that the loaded config, "${subconfig.name}", is fine.`,
            confirmButtonText: `It's ok, start experiment`,
            thirdButtonText: 'Open configs directory in file browser',
            thirdButtonClass: null
        });
        if (action === "third") {
            electron_1.remote.shell.showItemInFolder(path.join(CONFIGS_PATH_ABS, subconfig.name));
        }
        console.log({ action });
    });
    Glob_1.default.MainContent.append(sections_1.default.settings, startButton);
}
exports.default = { load };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHFDQUE4QjtBQUM5QixtQ0FBa0M7QUFDbEMsd0NBQWlDO0FBQ2pDLHlDQUFpQztBQUNqQyxtQ0FBbUM7QUFDbkMsMkNBQW1DO0FBRW5DLDZCQUE2QjtBQUM3Qix1Q0FBa0M7QUFFbEMsS0FBSyxVQUFVLElBQUksQ0FBQyxNQUFlO0lBRS9CLGNBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUNqQyxJQUFLLE1BQU0sRUFBRztRQUNWLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUNyQjtJQUNELGlCQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLFdBQVcsRUFBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLE1BQU0sV0FBVyxHQUFHLFlBQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRyxRQUFRLEVBQUUsSUFBSSxFQUFHLGtCQUFrQixFQUFFLEVBQUUsRUFBRyx5QkFBeUIsRUFBRSxDQUFDO1NBQ3BHLEtBQUssQ0FBQyxLQUFLLElBQUksRUFBRTtRQUVkLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDaEQsSUFBSSxNQUFNLEdBQUcsTUFBTSxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUM7WUFDeEMsS0FBSyxFQUFHLDZDQUE2QyxTQUFTLENBQUMsSUFBSSxhQUFhO1lBQ2hGLGlCQUFpQixFQUFHLDJCQUEyQjtZQUMvQyxlQUFlLEVBQUcsd0NBQXdDO1lBQzFELGdCQUFnQixFQUFHLElBQUk7U0FDMUIsQ0FBQyxDQUFDO1FBTUgsSUFBSyxNQUFNLEtBQUssT0FBTyxFQUFHO1lBR3RCLGlCQUFNLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FFOUU7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUMsQ0FBQztJQUNQLGNBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUVuQixrQkFBUSxDQUFDLFFBQVEsRUFDakIsV0FBVyxDQUVkLENBQUM7QUFHTixDQUFDO0FBRUQsa0JBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vICogIHBhZ2VzL05ldy9pbmRleC50c1xuLyoqaW1wb3J0IG5ld1BhZ2UgZnJvbSBcIi4vTmV3XCI7Ki9cbmltcG9ydCBHbG9iIGZyb20gXCIuLi8uLi9HbG9iXCI7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uLy4uL3V0aWwnXG5pbXBvcnQgc2lkZWJhciBmcm9tIFwiLi4vc2lkZWJhclwiO1xuaW1wb3J0IHNlY3Rpb25zIGZyb20gXCIuL3NlY3Rpb25zXCJcbmltcG9ydCB7IGJ1dHRvbiB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbmltcG9ydCBNeUFsZXJ0IGZyb20gJy4uLy4uL015QWxlcnQnXG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IHJlbW90ZSB9IGZyb20gJ2VsZWN0cm9uJztcblxuYXN5bmMgZnVuY3Rpb24gbG9hZChyZWxvYWQ6IGJvb2xlYW4pIHtcbiAgICAvLyBjb25zdCB7IGV4YW0sIHRlc3QgfSA9IEdsb2IuQmlnQ29uZmlnO1xuICAgIEdsb2IuQmlnQ29uZmlnLmxhc3RfcGFnZSA9IFwibmV3XCI7XG4gICAgaWYgKCByZWxvYWQgKSB7XG4gICAgICAgIHV0aWwucmVsb2FkUGFnZSgpO1xuICAgIH1cbiAgICBzaWRlYmFyLnNlbGVjdChcIm5ld1wiLCB7IGNoYW5nZVRpdGxlIDogdHJ1ZSB9KTtcbiAgICBjb25zdCBzdGFydEJ1dHRvbiA9IGJ1dHRvbih7IGNscyA6ICdhY3RpdmUnLCBodG1sIDogJ1N0YXJ0IEV4cGVyaW1lbnQnLCBpZCA6ICdzdGFydF9leHBlcmltZW50X2J1dHRvbicgfSlcbiAgICAgICAgLmNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gYXdhaXQgTXlBbGVydC5iaWcudGhyZWVCdXR0b25zKHtcbiAgICAgICAgICAgICAgICB0aXRsZSA6IGBQbGVhc2UgbWFrZSBzdXJlIHRoYXQgdGhlIGxvYWRlZCBjb25maWcsIFwiJHtzdWJjb25maWcubmFtZX1cIiwgaXMgZmluZS5gLFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0IDogYEl0J3Mgb2ssIHN0YXJ0IGV4cGVyaW1lbnRgLFxuICAgICAgICAgICAgICAgIHRoaXJkQnV0dG9uVGV4dCA6ICdPcGVuIGNvbmZpZ3MgZGlyZWN0b3J5IGluIGZpbGUgYnJvd3NlcicsXG4gICAgICAgICAgICAgICAgdGhpcmRCdXR0b25DbGFzcyA6IG51bGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gbGV0IGFjdGlvbiA9IGF3YWl0IE15QWxlcnQuYmlnLnR3b0J1dHRvbnMoYFBsZWFzZSBtYWtlIHN1cmUgdGhhdCB0aGUgbG9hZGVkIGNvbmZpZywgXCIke3N1YmNvbmZpZy5uYW1lfVwiLCBpcyBmaW5lLmAsIHtcbiAgICAgICAgICAgIC8vICAgICBjb25maXJtQnV0dG9uVGV4dCA6IGBJdCdzIG9rLCBzdGFydCBleHBlcmltZW50YCxcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCBhY3Rpb24gPT09IFwidGhpcmRcIiApIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdGUuc2hlbGwub3BlbkV4dGVybmFsKGBjb2RlICR7cGF0aC5qb2luKENPTkZJR1NfUEFUSF9BQlMsIHN1YmNvbmZpZy5uYW1lKX1gKTtcbiAgICAgICAgICAgICAgICAvLyByZW1vdGUuc2hlbGwub3Blbkl0ZW0ocGF0aC5qb2luKENPTkZJR1NfUEFUSF9BQlMsIHN1YmNvbmZpZy5uYW1lKSlcbiAgICAgICAgICAgICAgICByZW1vdGUuc2hlbGwuc2hvd0l0ZW1JbkZvbGRlcihwYXRoLmpvaW4oQ09ORklHU19QQVRIX0FCUywgc3ViY29uZmlnLm5hbWUpKTtcbiAgICAgICAgICAgICAgICAvLyByZW1vdGUuY2xpcGJvYXJkLndyaXRlVGV4dChDT05GSUdTX1BBVEhfQUJTKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coeyBhY3Rpb24gfSk7XG4gICAgICAgIH0pO1xuICAgIEdsb2IuTWFpbkNvbnRlbnQuYXBwZW5kKFxuICAgICAgICAvLyBzZWN0aW9ucy5sZXZlbHMsXG4gICAgICAgIHNlY3Rpb25zLnNldHRpbmdzLFxuICAgICAgICBzdGFydEJ1dHRvblxuICAgICAgICAvLyBHdWkuJHJlYWR5U2F2ZUxvYWRTYXZlYXMoKSxcbiAgICApO1xuICAgIFxuICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCB7IGxvYWQgfVxuIl19