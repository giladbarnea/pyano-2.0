"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const sidebar_1 = require("../sidebar");
const sections_1 = require("./sections");
const bhe_1 = require("../../bhe");
const MyAlert_1 = require("../../MyAlert");
const path = require("path");
const electron_1 = require("electron");
async function load(reload) {
    Glob_1.default.BigConfig.last_page = "new";
    if (reload) {
        return util.reloadPage();
    }
    sidebar_1.default.select("new", { changeTitle: true });
    const startButton = bhe_1.button({ cls: 'active', html: 'Start Experiment', id: 'start_experiment_button' })
        .click(async () => {
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        let action = await MyAlert_1.default.big.threeButtons({
            title: `Please make sure that the loaded config, "${subconfig.name}", is fine.`,
            confirmButtonText: `It's ok, start experiment`,
            thirdButtonText: 'Open configs directory in file browser'
        });
        console.log({ action });
        switch (action) {
            case "cancel":
                return;
            case "confirm":
                return startIfReady(subconfig);
            case "third":
                return electron_1.remote.shell.showItemInFolder(path.join(CONFIGS_PATH_ABS, subconfig.name));
        }
    });
    Glob_1.default.MainContent.append(sections_1.default.settings, startButton);
}
exports.load = load;
async function startIfReady(subconfig) {
    const missingTxts = subconfig.truth.txt.getMissing();
    if (util.bool(missingTxts)) {
        return MyAlert_1.default.big.oneButton(`The truth: "${subconfig.truth.name}" is missing the following txt files:`, { text: missingTxts.join(', ') });
    }
    if (!subconfig.truth.midi.exists()) {
        if (!Glob_1.default.BigConfig.dev.skip_midi_exists_check()) {
            return MyAlert_1.default.big.oneButton(`The truth: "${subconfig.truth.name}" is missing a midi file`);
        }
    }
    if (subconfig.demo_type === "video") {
        const mp4Exists = subconfig.truth.mp4.exists();
        const onsetsExists = subconfig.truth.onsets.exists();
        if (!util.all(mp4Exists, onsetsExists)) {
            const missingNames = [];
            if (!mp4Exists)
                missingNames.push("mp4");
            if (!onsetsExists)
                missingNames.push("onsets");
            return MyAlert_1.default.big.oneButton(`The truth: "${subconfig.truth.name}" is missing the following files:`, {
                text: missingNames.join(', ')
            });
        }
    }
    return require('../Running').load(true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHFDQUE4QjtBQUM5QixtQ0FBa0M7QUFDbEMsd0NBQWlDO0FBQ2pDLHlDQUFpQztBQUNqQyxtQ0FBbUM7QUFDbkMsMkNBQW1DO0FBQ25DLDZCQUE2QjtBQUM3Qix1Q0FBa0M7QUFLbEMsS0FBSyxVQUFVLElBQUksQ0FBQyxNQUFlO0lBRS9CLGNBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUNqQyxJQUFLLE1BQU0sRUFBRztRQUNWLE9BQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQzVCO0lBQ0QsaUJBQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsV0FBVyxFQUFHLElBQUksRUFBRSxDQUFDLENBQUM7SUFDOUMsTUFBTSxXQUFXLEdBQUcsWUFBTSxDQUFDLEVBQUUsR0FBRyxFQUFHLFFBQVEsRUFBRSxJQUFJLEVBQUcsa0JBQWtCLEVBQUUsRUFBRSxFQUFHLHlCQUF5QixFQUFFLENBQUM7U0FDcEcsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBRWQsTUFBTSxTQUFTLEdBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNoRCxJQUFJLE1BQU0sR0FBRyxNQUFNLGlCQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQztZQUN4QyxLQUFLLEVBQUcsNkNBQTZDLFNBQVMsQ0FBQyxJQUFJLGFBQWE7WUFDaEYsaUJBQWlCLEVBQUcsMkJBQTJCO1lBQy9DLGVBQWUsRUFBRyx3Q0FBd0M7U0FDN0QsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDeEIsUUFBUyxNQUFNLEVBQUc7WUFDZCxLQUFLLFFBQVE7Z0JBQ1QsT0FBTztZQUNYLEtBQUssU0FBUztnQkFDVixPQUFPLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNuQyxLQUFLLE9BQU87Z0JBQ1IsT0FBTyxpQkFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3pGO0lBR0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxjQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FFbkIsa0JBQVEsQ0FBQyxRQUFRLEVBQ2pCLFdBQVcsQ0FDZCxDQUFDO0FBR04sQ0FBQztBQWtDUSxvQkFBSTtBQWhDYixLQUFLLFVBQVUsWUFBWSxDQUFDLFNBQW9CO0lBQzVDLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBRXJELElBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRztRQUMxQixPQUFPLGlCQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxlQUFlLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSx1Q0FBdUMsRUFBRSxFQUFFLElBQUksRUFBRyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtLQUM5STtJQUVELElBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRztRQUNsQyxJQUFLLENBQUMsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsRUFBRztZQUNoRCxPQUFPLGlCQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxlQUFlLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSwwQkFBMEIsQ0FBQyxDQUFBO1NBQzlGO0tBQ0o7SUFFRCxJQUFLLFNBQVMsQ0FBQyxTQUFTLEtBQUssT0FBTyxFQUFHO1FBQ25DLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQy9DLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3JELElBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsRUFBRztZQUN0QyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7WUFDeEIsSUFBSyxDQUFDLFNBQVM7Z0JBQ1gsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QixJQUFLLENBQUMsWUFBWTtnQkFDZCxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRWhDLE9BQU8saUJBQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLGVBQWUsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLG1DQUFtQyxFQUFFO2dCQUNqRyxJQUFJLEVBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDakMsQ0FBQyxDQUFBO1NBQ0w7S0FDSjtJQUVELE9BQU8sT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqaW1wb3J0IG5ld1BhZ2UgZnJvbSBcIi4vTmV3XCI7Ki9cbmltcG9ydCBHbG9iIGZyb20gXCIuLi8uLi9HbG9iXCI7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uLy4uL3V0aWwnXG5pbXBvcnQgc2lkZWJhciBmcm9tIFwiLi4vc2lkZWJhclwiO1xuaW1wb3J0IHNlY3Rpb25zIGZyb20gXCIuL3NlY3Rpb25zXCJcbmltcG9ydCB7IGJ1dHRvbiB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbmltcG9ydCBNeUFsZXJ0IGZyb20gJy4uLy4uL015QWxlcnQnXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyByZW1vdGUgfSBmcm9tICdlbGVjdHJvbic7XG5pbXBvcnQgeyBTdWJjb25maWcgfSBmcm9tIFwiLi4vLi4vTXlTdG9yZVwiO1xuXG4vLyBpbXBvcnQgKiBhcyBydW5uaW5nUGFnZSBmcm9tIFwiLi4vUnVubmluZ1wiXG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWQocmVsb2FkOiBib29sZWFuKSB7XG4gICAgXG4gICAgR2xvYi5CaWdDb25maWcubGFzdF9wYWdlID0gXCJuZXdcIjtcbiAgICBpZiAoIHJlbG9hZCApIHtcbiAgICAgICAgcmV0dXJuIHV0aWwucmVsb2FkUGFnZSgpO1xuICAgIH1cbiAgICBzaWRlYmFyLnNlbGVjdChcIm5ld1wiLCB7IGNoYW5nZVRpdGxlIDogdHJ1ZSB9KTtcbiAgICBjb25zdCBzdGFydEJ1dHRvbiA9IGJ1dHRvbih7IGNscyA6ICdhY3RpdmUnLCBodG1sIDogJ1N0YXJ0IEV4cGVyaW1lbnQnLCBpZCA6ICdzdGFydF9leHBlcmltZW50X2J1dHRvbicgfSlcbiAgICAgICAgLmNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gYXdhaXQgTXlBbGVydC5iaWcudGhyZWVCdXR0b25zKHtcbiAgICAgICAgICAgICAgICB0aXRsZSA6IGBQbGVhc2UgbWFrZSBzdXJlIHRoYXQgdGhlIGxvYWRlZCBjb25maWcsIFwiJHtzdWJjb25maWcubmFtZX1cIiwgaXMgZmluZS5gLFxuICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0IDogYEl0J3Mgb2ssIHN0YXJ0IGV4cGVyaW1lbnRgLFxuICAgICAgICAgICAgICAgIHRoaXJkQnV0dG9uVGV4dCA6ICdPcGVuIGNvbmZpZ3MgZGlyZWN0b3J5IGluIGZpbGUgYnJvd3NlcidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coeyBhY3Rpb24gfSk7XG4gICAgICAgICAgICBzd2l0Y2ggKCBhY3Rpb24gKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNhbmNlbFwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSBcImNvbmZpcm1cIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0SWZSZWFkeShzdWJjb25maWcpO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ0aGlyZFwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3RlLnNoZWxsLnNob3dJdGVtSW5Gb2xkZXIocGF0aC5qb2luKENPTkZJR1NfUEFUSF9BQlMsIHN1YmNvbmZpZy5uYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICBHbG9iLk1haW5Db250ZW50LmFwcGVuZChcbiAgICAgICAgLy8gc2VjdGlvbnMubGV2ZWxzLFxuICAgICAgICBzZWN0aW9ucy5zZXR0aW5ncyxcbiAgICAgICAgc3RhcnRCdXR0b25cbiAgICApO1xuICAgIFxuICAgIFxufVxuXG5hc3luYyBmdW5jdGlvbiBzdGFydElmUmVhZHkoc3ViY29uZmlnOiBTdWJjb25maWcpIHtcbiAgICBjb25zdCBtaXNzaW5nVHh0cyA9IHN1YmNvbmZpZy50cnV0aC50eHQuZ2V0TWlzc2luZygpO1xuICAgIFxuICAgIGlmICggdXRpbC5ib29sKG1pc3NpbmdUeHRzKSApIHtcbiAgICAgICAgcmV0dXJuIE15QWxlcnQuYmlnLm9uZUJ1dHRvbihgVGhlIHRydXRoOiBcIiR7c3ViY29uZmlnLnRydXRoLm5hbWV9XCIgaXMgbWlzc2luZyB0aGUgZm9sbG93aW5nIHR4dCBmaWxlczpgLCB7IHRleHQgOiBtaXNzaW5nVHh0cy5qb2luKCcsICcpIH0pXG4gICAgfVxuICAgIC8vIC8gVHh0cyBleGlzdFxuICAgIGlmICggIXN1YmNvbmZpZy50cnV0aC5taWRpLmV4aXN0cygpICkge1xuICAgICAgICBpZiAoICFHbG9iLkJpZ0NvbmZpZy5kZXYuc2tpcF9taWRpX2V4aXN0c19jaGVjaygpICkge1xuICAgICAgICAgICAgcmV0dXJuIE15QWxlcnQuYmlnLm9uZUJ1dHRvbihgVGhlIHRydXRoOiBcIiR7c3ViY29uZmlnLnRydXRoLm5hbWV9XCIgaXMgbWlzc2luZyBhIG1pZGkgZmlsZWApXG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gLyBtaWRpIGV4aXN0XG4gICAgaWYgKCBzdWJjb25maWcuZGVtb190eXBlID09PSBcInZpZGVvXCIgKSB7XG4gICAgICAgIGNvbnN0IG1wNEV4aXN0cyA9IHN1YmNvbmZpZy50cnV0aC5tcDQuZXhpc3RzKCk7XG4gICAgICAgIGNvbnN0IG9uc2V0c0V4aXN0cyA9IHN1YmNvbmZpZy50cnV0aC5vbnNldHMuZXhpc3RzKCk7XG4gICAgICAgIGlmICggIXV0aWwuYWxsKG1wNEV4aXN0cywgb25zZXRzRXhpc3RzKSApIHtcbiAgICAgICAgICAgIGNvbnN0IG1pc3NpbmdOYW1lcyA9IFtdO1xuICAgICAgICAgICAgaWYgKCAhbXA0RXhpc3RzIClcbiAgICAgICAgICAgICAgICBtaXNzaW5nTmFtZXMucHVzaChcIm1wNFwiKTtcbiAgICAgICAgICAgIGlmICggIW9uc2V0c0V4aXN0cyApXG4gICAgICAgICAgICAgICAgbWlzc2luZ05hbWVzLnB1c2goXCJvbnNldHNcIik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBNeUFsZXJ0LmJpZy5vbmVCdXR0b24oYFRoZSB0cnV0aDogXCIke3N1YmNvbmZpZy50cnV0aC5uYW1lfVwiIGlzIG1pc3NpbmcgdGhlIGZvbGxvd2luZyBmaWxlczpgLCB7XG4gICAgICAgICAgICAgICAgdGV4dCA6IG1pc3NpbmdOYW1lcy5qb2luKCcsICcpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIC8gbXA0IGFuZCBvbnNldHMgZXhpc3RcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vUnVubmluZycpLmxvYWQodHJ1ZSk7XG59XG5cbmV4cG9ydCB7IGxvYWQgfVxuIl19