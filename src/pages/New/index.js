"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const sidebar_1 = require("../sidebar");
const sections_1 = require("./sections");
const bhe_1 = require("../../bhe");
const MyAlert_1 = require("../../MyAlert");
const path = require("path");
const electron_1 = require("electron");
async function load(reload) {
    Glob_1.default.BigConfig.last_page = "new";
    if (reload) {
        util.reloadPage();
    }
    sidebar_1.default.select("new", { changeTitle: true });
    const startButton = bhe_1.button({ cls: 'active', html: 'Start Experiment', id: 'start_experiment_button' })
        .click(async () => {
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        let action = await MyAlert_1.default.big.threeButtons({
            title: `Please make sure that the loaded config, "${subconfig.name}", is fine.`,
            confirmButtonText: `It's ok, start experiment`,
            thirdButtonText: 'Open configs directory in file browser'
        });
        if (action === "third") {
            electron_1.remote.shell.showItemInFolder(path.join(CONFIGS_PATH_ABS, subconfig.name));
        }
        console.log({ action });
    });
    Glob_1.default.MainContent.append(sections_1.default.settings, startButton);
}
exports.default = { load };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHFDQUE4QjtBQUM5QixtQ0FBa0M7QUFDbEMsd0NBQWlDO0FBQ2pDLHlDQUFpQztBQUNqQyxtQ0FBbUM7QUFDbkMsMkNBQW1DO0FBQ25DLDZCQUE2QjtBQUM3Qix1Q0FBa0M7QUFFbEMsS0FBSyxVQUFVLElBQUksQ0FBQyxNQUFlO0lBRS9CLGNBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUNqQyxJQUFLLE1BQU0sRUFBRztRQUNWLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUNyQjtJQUNELGlCQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLFdBQVcsRUFBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLE1BQU0sV0FBVyxHQUFHLFlBQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRyxRQUFRLEVBQUUsSUFBSSxFQUFHLGtCQUFrQixFQUFFLEVBQUUsRUFBRyx5QkFBeUIsRUFBRSxDQUFDO1NBQ3BHLEtBQUssQ0FBQyxLQUFLLElBQUksRUFBRTtRQUVkLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDaEQsSUFBSSxNQUFNLEdBQUcsTUFBTSxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUM7WUFDeEMsS0FBSyxFQUFHLDZDQUE2QyxTQUFTLENBQUMsSUFBSSxhQUFhO1lBQ2hGLGlCQUFpQixFQUFHLDJCQUEyQjtZQUMvQyxlQUFlLEVBQUcsd0NBQXdDO1NBQzdELENBQUMsQ0FBQztRQUdILElBQUssTUFBTSxLQUFLLE9BQU8sRUFBRztZQUd0QixpQkFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBRTlFO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDNUIsQ0FBQyxDQUFDLENBQUM7SUFDUCxjQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FFbkIsa0JBQVEsQ0FBQyxRQUFRLEVBQ2pCLFdBQVcsQ0FFZCxDQUFDO0FBR04sQ0FBQztBQUVELGtCQUFlLEVBQUUsSUFBSSxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAqICBwYWdlcy9OZXcvaW5kZXgudHNcbi8qKmltcG9ydCBuZXdQYWdlIGZyb20gXCIuL05ld1wiOyovXG5pbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi8uLi91dGlsJ1xuaW1wb3J0IHNpZGViYXIgZnJvbSBcIi4uL3NpZGViYXJcIjtcbmltcG9ydCBzZWN0aW9ucyBmcm9tIFwiLi9zZWN0aW9uc1wiXG5pbXBvcnQgeyBidXR0b24gfSBmcm9tIFwiLi4vLi4vYmhlXCI7XG5pbXBvcnQgTXlBbGVydCBmcm9tICcuLi8uLi9NeUFsZXJ0J1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgcmVtb3RlIH0gZnJvbSAnZWxlY3Ryb24nO1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkKHJlbG9hZDogYm9vbGVhbikge1xuICAgIC8vIGNvbnN0IHsgZXhhbSwgdGVzdCB9ID0gR2xvYi5CaWdDb25maWc7XG4gICAgR2xvYi5CaWdDb25maWcubGFzdF9wYWdlID0gXCJuZXdcIjtcbiAgICBpZiAoIHJlbG9hZCApIHtcbiAgICAgICAgdXRpbC5yZWxvYWRQYWdlKCk7XG4gICAgfVxuICAgIHNpZGViYXIuc2VsZWN0KFwibmV3XCIsIHsgY2hhbmdlVGl0bGUgOiB0cnVlIH0pO1xuICAgIGNvbnN0IHN0YXJ0QnV0dG9uID0gYnV0dG9uKHsgY2xzIDogJ2FjdGl2ZScsIGh0bWwgOiAnU3RhcnQgRXhwZXJpbWVudCcsIGlkIDogJ3N0YXJ0X2V4cGVyaW1lbnRfYnV0dG9uJyB9KVxuICAgICAgICAuY2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzdWJjb25maWcgPSBHbG9iLkJpZ0NvbmZpZy5nZXRTdWJjb25maWcoKTtcbiAgICAgICAgICAgIGxldCBhY3Rpb24gPSBhd2FpdCBNeUFsZXJ0LmJpZy50aHJlZUJ1dHRvbnMoe1xuICAgICAgICAgICAgICAgIHRpdGxlIDogYFBsZWFzZSBtYWtlIHN1cmUgdGhhdCB0aGUgbG9hZGVkIGNvbmZpZywgXCIke3N1YmNvbmZpZy5uYW1lfVwiLCBpcyBmaW5lLmAsXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQgOiBgSXQncyBvaywgc3RhcnQgZXhwZXJpbWVudGAsXG4gICAgICAgICAgICAgICAgdGhpcmRCdXR0b25UZXh0IDogJ09wZW4gY29uZmlncyBkaXJlY3RvcnkgaW4gZmlsZSBicm93c2VyJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCBhY3Rpb24gPT09IFwidGhpcmRcIiApIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdGUuc2hlbGwub3BlbkV4dGVybmFsKGBjb2RlICR7cGF0aC5qb2luKENPTkZJR1NfUEFUSF9BQlMsIHN1YmNvbmZpZy5uYW1lKX1gKTtcbiAgICAgICAgICAgICAgICAvLyByZW1vdGUuc2hlbGwub3Blbkl0ZW0ocGF0aC5qb2luKENPTkZJR1NfUEFUSF9BQlMsIHN1YmNvbmZpZy5uYW1lKSlcbiAgICAgICAgICAgICAgICByZW1vdGUuc2hlbGwuc2hvd0l0ZW1JbkZvbGRlcihwYXRoLmpvaW4oQ09ORklHU19QQVRIX0FCUywgc3ViY29uZmlnLm5hbWUpKTtcbiAgICAgICAgICAgICAgICAvLyByZW1vdGUuY2xpcGJvYXJkLndyaXRlVGV4dChDT05GSUdTX1BBVEhfQUJTKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coeyBhY3Rpb24gfSk7XG4gICAgICAgIH0pO1xuICAgIEdsb2IuTWFpbkNvbnRlbnQuYXBwZW5kKFxuICAgICAgICAvLyBzZWN0aW9ucy5sZXZlbHMsXG4gICAgICAgIHNlY3Rpb25zLnNldHRpbmdzLFxuICAgICAgICBzdGFydEJ1dHRvblxuICAgICAgICAvLyBHdWkuJHJlYWR5U2F2ZUxvYWRTYXZlYXMoKSxcbiAgICApO1xuICAgIFxuICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCB7IGxvYWQgfVxuIl19