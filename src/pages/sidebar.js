"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.group('pages.sidebar.ts');
const Glob_1 = require("../Glob");
const util_1 = require("../util");
const bhe_1 = require("../bhe");
const Pages = require(".");
function select(targetId, { changeTitle }) {
    let html;
    for (let sidebarItem of Glob_1.default.Sidebar.children()) {
        if (sidebarItem.id() === `sidebar_${targetId}`) {
            html = sidebarItem.html();
            sidebarItem.addClass("selected");
        }
        else {
            sidebarItem.removeClass("selected");
        }
    }
    if (changeTitle) {
        Glob_1.default.Title.html(html.title());
    }
}
function build() {
    console.log('sidebar build');
    const sidebarItems = [];
    const sidebarDict = {
        new: "New",
        record: 'Record',
        file_tools: 'File Tools',
        settings: "Settings",
    };
    for (let [i, [eid, human]] of util_1.enumerate(util_1.enumerate(sidebarDict))) {
        const gridRow = util_1.str(i + 1);
        const id = `sidebar_${eid}`;
        sidebarItems.push((bhe_1.span({ text: human }))
            .id(id)
            .addClass(`sidebar-item`)
            .click(() => {
            return Pages.toPage(eid, true);
        }));
    }
    Glob_1.default.Sidebar.append(...sidebarItems);
}
exports.default = { build, select };
console.groupEnd();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNpZGViYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxPQUFPLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDbEMsa0NBQTJCO0FBRzNCLGtDQUF5QztBQUN6QyxnQ0FBOEI7QUFDOUIsMkJBQTJCO0FBRzNCLFNBQVMsTUFBTSxDQUFDLFFBQWtCLEVBQUUsRUFBRSxXQUFXLEVBQUU7SUFDL0MsSUFBSSxJQUFJLENBQUM7SUFDVCxLQUFNLElBQUksV0FBVyxJQUFJLGNBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUc7UUFDL0MsSUFBSyxXQUFXLENBQUMsRUFBRSxFQUFFLEtBQUssV0FBVyxRQUFRLEVBQUUsRUFBRztZQUM5QyxJQUFJLEdBQUcsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzFCLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDcEM7YUFBTTtZQUNILFdBQVcsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDdkM7S0FDSjtJQUNELElBQUssV0FBVyxFQUFHO1FBQ2YsY0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDakM7QUFDTCxDQUFDO0FBRUQsU0FBUyxLQUFLO0lBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3QixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDeEIsTUFBTSxXQUFXLEdBQUc7UUFDaEIsR0FBRyxFQUFHLEtBQUs7UUFDWCxNQUFNLEVBQUcsUUFBUTtRQUNqQixVQUFVLEVBQUcsWUFBWTtRQUN6QixRQUFRLEVBQUcsVUFBVTtLQUN4QixDQUFDO0lBQ0YsS0FBTSxJQUFJLENBQUUsQ0FBQyxFQUFFLENBQUUsR0FBRyxFQUFFLEtBQUssQ0FBRSxDQUFFLElBQUksZ0JBQVMsQ0FBQyxnQkFBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUc7UUFFbkUsTUFBTSxPQUFPLEdBQUcsVUFBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzQixNQUFNLEVBQUUsR0FBRyxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQzVCLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFJLENBQUMsRUFBRSxJQUFJLEVBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQzthQUNyQyxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQ04sUUFBUSxDQUFDLGNBQWMsQ0FBQzthQUV4QixLQUFLLENBQUMsR0FBRyxFQUFFO1lBRVIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FDTCxDQUFDO0tBR0w7SUFFRCxjQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxrQkFBZSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQTtBQUNoQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKippbXBvcnQgc2lkZWJhciBmcm9tIFwiLi4vc2lkZWJhclwiO1xuICogaW1wb3J0ICogYXMgUGFnZXMgZnJvbSBcIi4vcGFnZXNcIjsgUGFnZXMuc2lkZWJhci5idWlsZCgpXG4gKiAqL1xuY29uc29sZS5ncm91cCgncGFnZXMuc2lkZWJhci50cycpO1xuaW1wb3J0IEdsb2IgZnJvbSBcIi4uL0dsb2JcIjtcbmltcG9ydCB7IFBhZ2VOYW1lIH0gZnJvbSBcIi4uL015U3RvcmVcIjtcblxuaW1wb3J0IHsgZW51bWVyYXRlLCBzdHIgfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHsgc3BhbiB9IGZyb20gXCIuLi9iaGVcIjtcbmltcG9ydCAqIGFzIFBhZ2VzIGZyb20gXCIuXCI7XG5cblxuZnVuY3Rpb24gc2VsZWN0KHRhcmdldElkOiBQYWdlTmFtZSwgeyBjaGFuZ2VUaXRsZSB9KSB7XG4gICAgbGV0IGh0bWw7XG4gICAgZm9yICggbGV0IHNpZGViYXJJdGVtIG9mIEdsb2IuU2lkZWJhci5jaGlsZHJlbigpICkge1xuICAgICAgICBpZiAoIHNpZGViYXJJdGVtLmlkKCkgPT09IGBzaWRlYmFyXyR7dGFyZ2V0SWR9YCApIHtcbiAgICAgICAgICAgIGh0bWwgPSBzaWRlYmFySXRlbS5odG1sKCk7XG4gICAgICAgICAgICBzaWRlYmFySXRlbS5hZGRDbGFzcyhcInNlbGVjdGVkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2lkZWJhckl0ZW0ucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIGNoYW5nZVRpdGxlICkge1xuICAgICAgICBHbG9iLlRpdGxlLmh0bWwoaHRtbC50aXRsZSgpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkKCkge1xuICAgIGNvbnNvbGUubG9nKCdzaWRlYmFyIGJ1aWxkJyk7XG4gICAgY29uc3Qgc2lkZWJhckl0ZW1zID0gW107XG4gICAgY29uc3Qgc2lkZWJhckRpY3QgPSB7XG4gICAgICAgIG5ldyA6IFwiTmV3XCIsXG4gICAgICAgIHJlY29yZCA6ICdSZWNvcmQnLFxuICAgICAgICBmaWxlX3Rvb2xzIDogJ0ZpbGUgVG9vbHMnLFxuICAgICAgICBzZXR0aW5ncyA6IFwiU2V0dGluZ3NcIixcbiAgICB9O1xuICAgIGZvciAoIGxldCBbIGksIFsgZWlkLCBodW1hbiBdIF0gb2YgZW51bWVyYXRlKGVudW1lcmF0ZShzaWRlYmFyRGljdCkpICkge1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZ3JpZFJvdyA9IHN0cihpICsgMSk7XG4gICAgICAgIGNvbnN0IGlkID0gYHNpZGViYXJfJHtlaWR9YDtcbiAgICAgICAgc2lkZWJhckl0ZW1zLnB1c2goKHNwYW4oeyB0ZXh0IDogaHVtYW4gfSkpXG4gICAgICAgICAgICAuaWQoaWQpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoYHNpZGViYXItaXRlbWApXG4gICAgICAgICAgICAvLyAuY3NzKHsgZ3JpZFJvdyA6IGAke2dyaWRSb3d9LyR7Z3JpZFJvd31gIH0pXG4gICAgICAgICAgICAuY2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIF9zZWxlY3RTaWRlYmFySXRlbShlaWQsIHsgY2hhbmdlVGl0bGUgOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBQYWdlcy50b1BhZ2UoZWlkLCB0cnVlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgR2xvYi5TaWRlYmFyLmFwcGVuZCguLi5zaWRlYmFySXRlbXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7IGJ1aWxkLCBzZWxlY3QgfVxuY29uc29sZS5ncm91cEVuZCgpO1xuIl19