"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const animation_1 = require("./animation");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default(demoType);
        this.animation = new animation_1.default();
        this.dialog
            .insertBefore(this.animation)
            .setOpacTransDur();
        this.animation.setOpacTransDur();
        if (demoType === "video" || Glob_1.default.BigConfig.dev.simulate_video_mode('Experiment.constructor')) {
            this.video = new video_1.default()
                .appendTo(Glob_1.default.MainContent);
            this.video.setOpacTransDur();
        }
        this.demoType = demoType;
    }
    async init(readonlyTruth) {
        const promises = [];
        if (this.video) {
            promises.push(this.video.init(readonlyTruth));
        }
        else {
            promises.push(this.animation.init(readonlyTruth.midi.absPath));
        }
        return await Promise.all(promises);
    }
    async callOnClick(fn) {
        const done = new Promise(resolve => Glob_1.default.Document.on({
            click: async (ev) => {
                ev.preventDefault();
                ev.stopPropagation();
                await Promise.all([
                    this.dialog.hide(),
                    Glob_1.default.hide("Title", "NavigationButtons")
                ]);
                Glob_1.default.Document.off("click");
                await fn();
                resolve();
            }
        }));
        await done;
        await Glob_1.default.display("Title", "NavigationButtons");
        return;
    }
    async intro() {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        await this.dialog.intro();
        let demo;
        if (Glob_1.default.BigConfig.dev.simulate_video_mode('Experiment.intro()')) {
            demo = this.video;
        }
        else {
            demo = this[this.demoType];
        }
        await demo.display();
        return await this.callOnClick(async () => {
            await demo.intro();
            console.log(`done playing ${this.demoType}`);
            await util_1.wait(1000);
            await demo.hide();
            console.groupEnd();
        });
    }
    async levelIntro(levelCollection) {
        console.group(`Experiment.levelIntro()`);
        Glob_1.default.Title.levelh3.text(`Level 1/${levelCollection.length}`);
        Glob_1.default.Title.trialh3.text(`Trial 1/${levelCollection.current.trials}`);
        let playVideo;
        if (this.demoType === "animation"
            && !Glob_1.default.BigConfig.dev.simulate_video_mode('Experiment.levelIntro()')) {
            playVideo = false;
        }
        else {
            playVideo = levelCollection.previous && levelCollection.previous.notes !== levelCollection.current.notes;
        }
        playVideo = true;
        console.log({ playVideo });
        await Promise.all([
            Glob_1.default.display("Title", "NavigationButtons"),
            this.dialog.levelIntro(levelCollection.current, "video")
        ]);
        if (playVideo) {
            await this.video.display();
            await this.callOnClick(async () => {
                await this.video.levelIntro(levelCollection.current.notes);
                await util_1.wait(1000);
                await this.video.hide();
            });
        }
        await this.dialog.levelIntro(levelCollection.current, "animation");
        await this.animation.display();
        await this.callOnClick(async () => {
            await this.animation.levelIntro(levelCollection.current.notes);
            await util_1.wait(1000);
            await this.animation.hide();
        });
        console.groupEnd();
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,