"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const keyboard_1 = require("./keyboard");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default();
        this.keyboard = new keyboard_1.default();
        this.dialog
            .insertBefore(this.keyboard)
            .setOpacTransDur();
        this.keyboard.setOpacTransDur();
        if (demoType === "video") {
            this.video = new video_1.default()
                .appendTo(Glob_1.default.MainContent);
            this.video.setOpacTransDur();
        }
    }
    async intro() {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const promises = [
            this.dialog.intro(this.video ? "video" : "animation"),
        ];
        if (this.video) {
            promises.push(this.video.initVideo(subconfig.truth.mp4.absPath, subconfig.truth.onsets.absPath));
        }
        else {
            promises.push(this.keyboard.initPiano(subconfig.truth.midi.absPath));
        }
        await Promise.all(promises);
        if (this.video) {
            this.video.on({
                playing: (ev) => {
                    console.log('Video playing, allOff()');
                    Glob_1.default.Document.allOff();
                    this.video.allOff();
                }
            });
            await this.video.display();
            Glob_1.default.Document.on({
                click: async (ev) => {
                    await Promise.all([
                        this.dialog.hide(),
                        Glob_1.default.hide("Title", "NavigationButtons")
                    ]);
                    await this.video.intro();
                    console.log('done playing video');
                    this.video.hide();
                }
            });
            return;
        }
        await this.keyboard.display();
        return;
        await this.keyboard.intro();
        console.log('done from Experiment!');
        console.groupEnd();
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIseUNBQWlDO0FBQ2pDLHFDQUFrQztBQUNsQyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBRzlCLE1BQU0sVUFBVTtJQU1aLFlBQVksUUFBa0I7UUFIckIsVUFBSyxHQUFVLFNBQVMsQ0FBQztRQUk5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQU0sRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxrQkFBUSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU07YUFDTixZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUMzQixlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ2hDLElBQUssUUFBUSxLQUFLLE9BQU8sRUFBRztZQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBSyxFQUFFO2lCQUNuQixRQUFRLENBQUMsY0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRWhDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDaEM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDUCxPQUFPLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDcEMsTUFBTSxXQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFZCxNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWhELE1BQU0sUUFBUSxHQUFHO1lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7U0FFeEQsQ0FBQztRQUNGLElBQUssSUFBSSxDQUFDLEtBQUssRUFBRztZQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7U0FDbkc7YUFBTTtZQUNILFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtTQUV2RTtRQUNELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixJQUFLLElBQUksQ0FBQyxLQUFLLEVBQUc7WUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDVixPQUFPLEVBQUcsQ0FBQyxFQUFTLEVBQUUsRUFBRTtvQkFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO29CQUN2QyxjQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUN4QixDQUFDO2FBQ0osQ0FBQyxDQUFDO1lBQ0gsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRTNCLGNBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO2dCQUNiLEtBQUssRUFBRyxLQUFLLEVBQUUsRUFBaUIsRUFBRSxFQUFFO29CQUNoQyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7d0JBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7d0JBQ2xCLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLG1CQUFtQixDQUFDO3FCQUMxQyxDQUFDLENBQUM7b0JBQ0gsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7b0JBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3RCLENBQUM7YUFDSixDQUFDLENBQUM7WUFDSCxPQUFPO1NBR1Y7UUFFRCxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7UUFJOUIsT0FBTztRQUNQLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRXZCLENBQUM7Q0FFSjtBQUVELGtCQUFlLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEaWFsb2cgZnJvbSBcIi4vZGlhbG9nXCI7XG5pbXBvcnQgeyBEZW1vVHlwZSB9IGZyb20gXCIuLi8uLi9NeVN0b3JlXCI7XG5pbXBvcnQgS2V5Ym9hcmQgZnJvbSAnLi9rZXlib2FyZCdcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IFZpZGVvIGZyb20gXCIuL3ZpZGVvXCI7XG5pbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuXG5cbmNsYXNzIEV4cGVyaW1lbnQge1xuICAgIHJlYWRvbmx5IGRpYWxvZzogRGlhbG9nO1xuICAgIHJlYWRvbmx5IGtleWJvYXJkOiBLZXlib2FyZDtcbiAgICByZWFkb25seSB2aWRlbzogVmlkZW8gPSB1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkZW1vVHlwZTogRGVtb1R5cGU7XG4gICAgXG4gICAgY29uc3RydWN0b3IoZGVtb1R5cGU6IERlbW9UeXBlKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nID0gbmV3IERpYWxvZygpO1xuICAgICAgICB0aGlzLmtleWJvYXJkID0gbmV3IEtleWJvYXJkKCk7XG4gICAgICAgIHRoaXMuZGlhbG9nXG4gICAgICAgICAgICAuaW5zZXJ0QmVmb3JlKHRoaXMua2V5Ym9hcmQpXG4gICAgICAgICAgICAuc2V0T3BhY1RyYW5zRHVyKCk7XG4gICAgICAgIHRoaXMua2V5Ym9hcmQuc2V0T3BhY1RyYW5zRHVyKCk7XG4gICAgICAgIGlmICggZGVtb1R5cGUgPT09IFwidmlkZW9cIiApIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW8gPSBuZXcgVmlkZW8oKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhHbG9iLk1haW5Db250ZW50KTtcbiAgICAgICAgICAgIC8vIEdsb2IuTWFpbkNvbnRlbnQuYXBwZW5kKHRoaXMudmlkZW8pO1xuICAgICAgICAgICAgdGhpcy52aWRlby5zZXRPcGFjVHJhbnNEdXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbnRybygpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgRXhwZXJpbWVudC5pbnRybygpYCk7XG4gICAgICAgIGF3YWl0IHdhaXQoMCk7XG4gICAgICAgIC8vIHRoaXMuZGlhbG9nLmludHJvKHRoaXMudmlkZW8gPyBcInZpZGVvXCIgOiBcImFuaW1hdGlvblwiKTtcbiAgICAgICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nLmludHJvKHRoaXMudmlkZW8gPyBcInZpZGVvXCIgOiBcImFuaW1hdGlvblwiKSxcbiAgICAgICAgXG4gICAgICAgIF07XG4gICAgICAgIGlmICggdGhpcy52aWRlbyApIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2godGhpcy52aWRlby5pbml0VmlkZW8oc3ViY29uZmlnLnRydXRoLm1wNC5hYnNQYXRoLCBzdWJjb25maWcudHJ1dGgub25zZXRzLmFic1BhdGgpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmtleWJvYXJkLmluaXRQaWFubyhzdWJjb25maWcudHJ1dGgubWlkaS5hYnNQYXRoKSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgaWYgKCB0aGlzLnZpZGVvICkge1xuICAgICAgICAgICAgdGhpcy52aWRlby5vbih7XG4gICAgICAgICAgICAgICAgcGxheWluZyA6IChldjogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1ZpZGVvIHBsYXlpbmcsIGFsbE9mZigpJyk7XG4gICAgICAgICAgICAgICAgICAgIEdsb2IuRG9jdW1lbnQuYWxsT2ZmKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW8uYWxsT2ZmKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnZpZGVvLmRpc3BsYXkoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgR2xvYi5Eb2N1bWVudC5vbih7XG4gICAgICAgICAgICAgICAgY2xpY2sgOiBhc3luYyAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2cuaGlkZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgR2xvYi5oaWRlKFwiVGl0bGVcIiwgXCJOYXZpZ2F0aW9uQnV0dG9uc1wiKVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy52aWRlby5pbnRybygpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZG9uZSBwbGF5aW5nIHZpZGVvJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW8uaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICAvLy8vIGFuaW1hdGlvblxuICAgICAgICBhd2FpdCB0aGlzLmtleWJvYXJkLmRpc3BsYXkoKTtcbiAgICAgICAgLy8gdGhpcy5rZXlib2FyZC5jbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIC8vIGNvbnN0IGtiZFRyYW5zRHVyID0gdGhpcy5rZXlib2FyZC5nZXRPcGFjaXR5VHJhbnNpdGlvbkR1cmF0aW9uKCk7XG4gICAgICAgIC8vIGF3YWl0IHdhaXQoa2JkVHJhbnNEdXIsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgICBhd2FpdCB0aGlzLmtleWJvYXJkLmludHJvKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdkb25lIGZyb20gRXhwZXJpbWVudCEnKTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cGVyaW1lbnQ7XG4iXX0=