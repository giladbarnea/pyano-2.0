"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const animation_1 = require("./animation");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
const index_1 = require("./index");
const bhe_1 = require("../../bhe");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default(demoType);
        this.animation = new animation_1.default();
        this.dialog
            .insertBefore(this.animation)
            .setOpacTransDur();
        this.animation.setOpacTransDur();
        this.video = new video_1.default()
            .appendTo(Glob_1.default.MainContent);
        this.video.setOpacTransDur();
        this.greenButton = bhe_1.button({ id: 'green_button', html: 'Done Playing' });
        Glob_1.default.MainContent.append(this.greenButton);
        this.demoType = demoType;
    }
    async init(readonlyTruth) {
        return await Promise.all([
            this.video.init(readonlyTruth),
            this.animation.init(readonlyTruth.midi.absPath)
        ]);
    }
    async callOnClick(fn, demo) {
        const done = new Promise(resolve => Glob_1.default.Document.on({
            click: async (ev) => {
                ev.preventDefault();
                ev.stopPropagation();
                await Promise.all([
                    this.dialog.hide(),
                    Glob_1.default.hide("Title", "NavigationButtons")
                ]);
                Glob_1.default.Document.off("click");
                await index_1.tryCatch(() => fn(), `trying to run ${demo instanceof animation_1.default ? 'animation' : 'video'}`);
                await util_1.wait(1000);
                await demo.hide();
                resolve();
            }
        }));
        await demo.display();
        await done;
        await Glob_1.default.display("Title", "NavigationButtons");
        return;
    }
    async intro() {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        await this.dialog.intro();
        let demo;
        if (Glob_1.default.BigConfig.dev.simulate_video_mode('Experiment.intro()')) {
            demo = this.video;
        }
        else {
            demo = this[this.demoType];
        }
        return await this.callOnClick(async () => {
            await demo.intro();
            console.groupEnd();
        }, demo);
    }
    async levelIntro(levelCollection) {
        console.group(`Experiment.levelIntro()`);
        Glob_1.default.Title.levelh3.text(`Level 1/${levelCollection.length}`);
        Glob_1.default.Title.trialh3.text(`Trial 1/${levelCollection.current.trials}`);
        let playVideo;
        if (this.demoType === "animation"
            && !Glob_1.default.BigConfig.dev.simulate_video_mode('Experiment.levelIntro()')) {
            playVideo = false;
        }
        else {
            if (levelCollection.previous) {
                playVideo = levelCollection.previous.notes !== levelCollection.current.notes;
            }
            else {
                playVideo = false;
            }
        }
        console.log({ playVideo });
        let rate = undefined;
        let temp;
        temp = Glob_1.default.BigConfig.dev.force_playback_rate('Experiment.levelIntro()');
        if (temp) {
            rate = temp;
        }
        else {
            if (levelCollection.current.rhythm) {
                rate = levelCollection.current.tempo / 100;
            }
            else {
                for (let i = levelCollection.current.index + 1; i < levelCollection.length; i++) {
                    const level = levelCollection.get(i);
                    if (level.notes === levelCollection.current.notes && level.rhythm) {
                        rate = level.tempo / 100;
                        console.warn(`level #${levelCollection.current.index} no tempo, took rate (${rate}) from level #${i}`);
                        break;
                    }
                }
                if (rate === undefined) {
                    rate = 1;
                }
            }
        }
        console.log({ rate });
        let notes;
        temp = Glob_1.default.BigConfig.dev.force_notes_number('Experiment.levelIntro()');
        if (temp) {
            notes = temp;
        }
        else {
            notes = levelCollection.current.notes;
        }
        console.log({ notes });
        if (playVideo) {
            await this.dialog.levelIntro(levelCollection.current, "video", rate);
            await this.callOnClick(async () => {
                await this.video.levelIntro(notes, rate);
            }, this.video);
        }
        await this.dialog.levelIntro(levelCollection.current, "animation", rate);
        await this.callOnClick(async () => {
            await this.animation.levelIntro(notes, rate);
        }, this.animation);
        console.groupEnd();
    }
    async record(levelCollection) {
        await this.dialog.record(levelCollection.current);
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIsMkNBQW1DO0FBQ25DLHFDQUFrQztBQUNsQyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBRzlCLG1DQUFtQztBQUNuQyxtQ0FBMkM7QUFHM0MsTUFBTSxVQUFVO0lBUVosWUFBWSxRQUFrQjtRQUxyQixVQUFLLEdBQVUsU0FBUyxDQUFDO1FBTTlCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxtQkFBUyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU07YUFDTixZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQzthQUM1QixlQUFlLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRWpDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxlQUFLLEVBQUU7YUFDbkIsUUFBUSxDQUFDLGNBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRTdCLElBQUksQ0FBQyxXQUFXLEdBQUcsWUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFHLGNBQWMsRUFBRSxJQUFJLEVBQUcsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUMxRSxjQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFFN0IsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBNEI7UUFDbkMsT0FBTyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMs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Q0FBQyxDQUFDO1FBR25CLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxlQUFnQztRQUN6QyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RCxDQUFDO0NBRUo7QUFFRCxrQkFBZSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlhbG9nIGZyb20gXCIuL2RpYWxvZ1wiO1xuaW1wb3J0IHsgRGVtb1R5cGUgfSBmcm9tIFwiLi4vLi4vTXlTdG9yZVwiO1xuaW1wb3J0IEFuaW1hdGlvbiBmcm9tICcuL2FuaW1hdGlvbidcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IFZpZGVvIGZyb20gXCIuL3ZpZGVvXCI7XG5pbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0IHsgUmVhZG9ubHlUcnV0aCB9IGZyb20gXCIuLi8uLi9UcnV0aFwiO1xuaW1wb3J0IHsgTGV2ZWxDb2xsZWN0aW9uIH0gZnJvbSBcIi4uLy4uL0xldmVsXCI7XG5pbXBvcnQgeyB0cnlDYXRjaCB9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgeyBidXR0b24sIEJ1dHRvbiB9IGZyb20gXCIuLi8uLi9iaGVcIjtcblxuXG5jbGFzcyBFeHBlcmltZW50IHtcbiAgICByZWFkb25seSBkaWFsb2c6IERpYWxvZztcbiAgICByZWFkb25seSBhbmltYXRpb246IEFuaW1hdGlvbjtcbiAgICByZWFkb25seSB2aWRlbzogVmlkZW8gPSB1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkZW1vVHlwZTogRGVtb1R5cGU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBncmVlbkJ1dHRvbjogQnV0dG9uO1xuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGRlbW9UeXBlOiBEZW1vVHlwZSkge1xuICAgICAgICB0aGlzLmRpYWxvZyA9IG5ldyBEaWFsb2coZGVtb1R5cGUpO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oKTtcbiAgICAgICAgdGhpcy5kaWFsb2dcbiAgICAgICAgICAgIC5pbnNlcnRCZWZvcmUodGhpcy5hbmltYXRpb24pXG4gICAgICAgICAgICAuc2V0T3BhY1RyYW5zRHVyKCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmFuaW1hdGlvbi5zZXRPcGFjVHJhbnNEdXIoKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlkZW8gPSBuZXcgVmlkZW8oKVxuICAgICAgICAgICAgLmFwcGVuZFRvKEdsb2IuTWFpbkNvbnRlbnQpO1xuICAgICAgICB0aGlzLnZpZGVvLnNldE9wYWNUcmFuc0R1cigpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5ncmVlbkJ1dHRvbiA9IGJ1dHRvbih7IGlkIDogJ2dyZWVuX2J1dHRvbicsIGh0bWwgOiAnRG9uZSBQbGF5aW5nJyB9KTtcbiAgICAgICAgR2xvYi5NYWluQ29udGVudC5hcHBlbmQodGhpcy5ncmVlbkJ1dHRvbik7XG4gICAgICAgIHRoaXMuZGVtb1R5cGUgPSBkZW1vVHlwZTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGluaXQocmVhZG9ubHlUcnV0aDogUmVhZG9ubHlUcnV0aCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGhpcy52aWRlby5pbml0KHJlYWRvbmx5VHJ1dGgpLFxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24uaW5pdChyZWFkb25seVRydXRoLm1pZGkuYWJzUGF0aClcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGNhbGxPbkNsaWNrKGZuOiBBc3luY0Z1bmN0aW9uLCBkZW1vOiBBbmltYXRpb24gfCBWaWRlbykge1xuICAgICAgICBjb25zdCBkb25lID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PlxuICAgICAgICAgICAgR2xvYi5Eb2N1bWVudC5vbih7XG4gICAgICAgICAgICAgICAgY2xpY2sgOiBhc3luYyAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nLmhpZGUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEdsb2IuaGlkZShcIlRpdGxlXCIsIFwiTmF2aWdhdGlvbkJ1dHRvbnNcIilcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgR2xvYi5Eb2N1bWVudC5vZmYoXCJjbGlja1wiKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdHJ5Q2F0Y2goKCkgPT4gZm4oKSwgYHRyeWluZyB0byBydW4gJHtkZW1vIGluc3RhbmNlb2YgQW5pbWF0aW9uID8gJ2FuaW1hdGlvbicgOiAndmlkZW8nfWApO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB3YWl0KDEwMDApO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBkZW1vLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIGF3YWl0IGRlbW8uZGlzcGxheSgpO1xuICAgICAgICBhd2FpdCBkb25lO1xuICAgICAgICBhd2FpdCBHbG9iLmRpc3BsYXkoXCJUaXRsZVwiLCBcIk5hdmlnYXRpb25CdXR0b25zXCIpO1xuICAgICAgICByZXR1cm5cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGludHJvKCk6IFByb21pc2U8dW5rbm93bj4ge1xuICAgICAgICBjb25zb2xlLmdyb3VwKGBFeHBlcmltZW50LmludHJvKClgKTtcbiAgICAgICAgYXdhaXQgd2FpdCgwKTtcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IHRoaXMuZGlhbG9nLmludHJvKCk7XG4gICAgICAgIFxuICAgICAgICAvLy8gdmlkZW8gLyBhbmltYXRpb25cbiAgICAgICAgbGV0IGRlbW87XG4gICAgICAgIGlmICggR2xvYi5CaWdDb25maWcuZGV2LnNpbXVsYXRlX3ZpZGVvX21vZGUoJ0V4cGVyaW1lbnQuaW50cm8oKScpICkge1xuICAgICAgICAgICAgZGVtbyA9IHRoaXMudmlkZW87XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZW1vID0gdGhpc1t0aGlzLmRlbW9UeXBlXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY2FsbE9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgZGVtby5pbnRybygpO1xuICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICB9LCBkZW1vKTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGFzeW5jIGxldmVsSW50cm8obGV2ZWxDb2xsZWN0aW9uOiBMZXZlbENvbGxlY3Rpb24pIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgRXhwZXJpbWVudC5sZXZlbEludHJvKClgKTtcbiAgICAgICAgR2xvYi5UaXRsZS5sZXZlbGgzLnRleHQoYExldmVsIDEvJHtsZXZlbENvbGxlY3Rpb24ubGVuZ3RofWApO1xuICAgICAgICBHbG9iLlRpdGxlLnRyaWFsaDMudGV4dChgVHJpYWwgMS8ke2xldmVsQ29sbGVjdGlvbi5jdXJyZW50LnRyaWFsc31gKTtcbiAgICAgICAgbGV0IHBsYXlWaWRlbztcbiAgICAgICAgaWYgKCB0aGlzLmRlbW9UeXBlID09PSBcImFuaW1hdGlvblwiXG4gICAgICAgICAgICAmJiAhR2xvYi5CaWdDb25maWcuZGV2LnNpbXVsYXRlX3ZpZGVvX21vZGUoJ0V4cGVyaW1lbnQubGV2ZWxJbnRybygpJykgKSB7XG4gICAgICAgICAgICBwbGF5VmlkZW8gPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICggbGV2ZWxDb2xsZWN0aW9uLnByZXZpb3VzICkge1xuICAgICAgICAgICAgICAgIHBsYXlWaWRlbyA9IGxldmVsQ29sbGVjdGlvbi5wcmV2aW91cy5ub3RlcyAhPT0gbGV2ZWxDb2xsZWN0aW9uLmN1cnJlbnQubm90ZXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBsYXlWaWRlbyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coeyBwbGF5VmlkZW8gfSk7XG4gICAgICAgIGxldCByYXRlOiBudW1iZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCB0ZW1wO1xuICAgICAgICB0ZW1wID0gR2xvYi5CaWdDb25maWcuZGV2LmZvcmNlX3BsYXliYWNrX3JhdGUoJ0V4cGVyaW1lbnQubGV2ZWxJbnRybygpJyk7XG4gICAgICAgIGlmICggdGVtcCApIHtcbiAgICAgICAgICAgIHJhdGUgPSB0ZW1wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCBsZXZlbENvbGxlY3Rpb24uY3VycmVudC5yaHl0aG0gKSB7XG4gICAgICAgICAgICAgICAgcmF0ZSA9IGxldmVsQ29sbGVjdGlvbi5jdXJyZW50LnRlbXBvIC8gMTAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKCBsZXQgaSA9IGxldmVsQ29sbGVjdGlvbi5jdXJyZW50LmluZGV4ICsgMTsgaSA8IGxldmVsQ29sbGVjdGlvbi5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGV2ZWwgPSBsZXZlbENvbGxlY3Rpb24uZ2V0KGkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGxldmVsLm5vdGVzID09PSBsZXZlbENvbGxlY3Rpb24uY3VycmVudC5ub3RlcyAmJiBsZXZlbC5yaHl0aG0gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXRlID0gbGV2ZWwudGVtcG8gLyAxMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYGxldmVsICMke2xldmVsQ29sbGVjdGlvbi5jdXJyZW50LmluZGV4fSBubyB0ZW1wbywgdG9vayByYXRlICgke3JhdGV9KSBmcm9tIGxldmVsICMke2l9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICggcmF0ZSA9PT0gdW5kZWZpbmVkICkgeyAvLyBIYXZlbid0IGZvdW5kIGluIGZvclxuICAgICAgICAgICAgICAgICAgICByYXRlID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coeyByYXRlIH0pO1xuICAgICAgICBsZXQgbm90ZXM7XG4gICAgICAgIHRlbXAgPSBHbG9iLkJpZ0NvbmZpZy5kZXYuZm9yY2Vfbm90ZXNfbnVtYmVyKCdFeHBlcmltZW50LmxldmVsSW50cm8oKScpO1xuICAgICAgICBpZiAoIHRlbXAgKSB7XG4gICAgICAgICAgICBub3RlcyA9IHRlbXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub3RlcyA9IGxldmVsQ29sbGVjdGlvbi5jdXJyZW50Lm5vdGVzO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coeyBub3RlcyB9KTtcbiAgICAgICAgaWYgKCBwbGF5VmlkZW8gKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZGlhbG9nLmxldmVsSW50cm8obGV2ZWxDb2xsZWN0aW9uLmN1cnJlbnQsIFwidmlkZW9cIiwgcmF0ZSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNhbGxPbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnZpZGVvLmxldmVsSW50cm8obm90ZXMsIHJhdGUpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSwgdGhpcy52aWRlbyk7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLmRpYWxvZy5sZXZlbEludHJvKGxldmVsQ29sbGVjdGlvbi5jdXJyZW50LCBcImFuaW1hdGlvblwiLCByYXRlKTtcbiAgICAgICAgYXdhaXQgdGhpcy5jYWxsT25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFuaW1hdGlvbi5sZXZlbEludHJvKG5vdGVzLCByYXRlKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9LCB0aGlzLmFuaW1hdGlvbik7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyByZWNvcmQobGV2ZWxDb2xsZWN0aW9uOiBMZXZlbENvbGxlY3Rpb24pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5kaWFsb2cucmVjb3JkKGxldmVsQ29sbGVjdGlvbi5jdXJyZW50KTtcbiAgICB9XG4gICAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cGVyaW1lbnQ7XG4iXX0=