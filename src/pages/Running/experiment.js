"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const animation_1 = require("./animation");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
const index_1 = require("./index");
const betterhtmlelement_1 = require("betterhtmlelement");
const MidiKeyboard_1 = require("../../Piano/MidiKeyboard");
const MyAlert_1 = require("../../MyAlert");
const MyPyShell_1 = require("../../MyPyShell");
const MyFs_1 = require("../../MyFs");
const fs = require("fs");
class Experiment {
    constructor(subconfig) {
        this.video = undefined;
        const { demo_type, truth_file, allowed_tempo_deviation, allowed_rhythm_deviation } = subconfig;
        this.dialog = new dialog_1.default(demo_type);
        this.animation = new animation_1.default();
        this.dialog
            .insertBefore(this.animation)
            .setOpacTransDur();
        this.animation.setOpacTransDur();
        this.video = new video_1.default()
            .appendTo(Glob_1.default.MainContent);
        this.video.setOpacTransDur();
        this.keyboard = new MidiKeyboard_1.MidiKeyboard();
        this.greenButton = betterhtmlelement_1.button({ setid: 'green_button', cls: 'inactive green player', html: 'Done' });
        Glob_1.default.MainContent.append(this.greenButton);
        this.demoType = demo_type;
        this.truthFile = truth_file;
        this.allowedTempoDeviation = allowed_tempo_deviation;
        this.allowedRhythmDeviation = allowed_rhythm_deviation;
    }
    async init(subconfig) {
        const readonlyTruth = subconfig.truth.toJSON();
        await Promise.all([
            this.video.init(readonlyTruth),
            this.animation.init(readonlyTruth.midi.absPath)
        ]);
        const outPathAbs = subconfig.experimentOutDirAbs();
        const existed = MyFs_1.default.createIfNotExists(outPathAbs);
        if (existed) {
            const stats = fs.statSync(outPathAbs);
            let datestr = stats.ctime.human();
            fs.renameSync(outPathAbs, `${outPathAbs}__${datestr}`);
            fs.mkdirSync(outPathAbs);
        }
    }
    async callOnClick(fn, demo) {
        const done = new Promise(resolve => Glob_1.default.Document.on({
            click: async (ev) => {
                ev.preventDefault();
                ev.stopPropagation();
                await Promise.all([
                    this.dialog.hide(),
                    Glob_1.default.hide("Title", "NavigationButtons")
                ]);
                Glob_1.default.Document.off("click");
                await index_1.tryCatch(() => fn(), `trying to run ${demo instanceof animation_1.default ? 'animation' : 'video'}`);
                await util_1.wait(1000);
                await demo.hide();
                resolve();
            }
        }));
        await demo.display();
        await done;
        await Glob_1.default.display("Title", "NavigationButtons");
        return;
    }
    async intro() {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        await this.dialog.intro();
        let demo;
        if (Glob_1.default.BigConfig.dev.simulate_video_mode('Experiment.intro()')) {
            demo = this.video;
        }
        else if (Glob_1.default.BigConfig.dev.simulate_animation_mode('Experiment.intro()')) {
            demo = this.animation;
        }
        else {
            demo = this[this.demoType];
        }
        return await this.callOnClick(async () => {
            await demo.intro();
            console.groupEnd();
        }, demo);
    }
    async levelIntro(levelCollection) {
        console.group(`Experiment.levelIntro()`);
        let playVideo;
        if ((this.demoType === "animation"
            && !Glob_1.default.BigConfig.dev.simulate_video_mode('Experiment.levelIntro()'))
            || Glob_1.default.BigConfig.dev.simulate_animation_mode('Experiment.levelIntro()')) {
            playVideo = false;
        }
        else {
            if (levelCollection.previous) {
                playVideo = levelCollection.previous.notes !== levelCollection.current.notes;
            }
            else {
                playVideo = false;
            }
        }
        console.log({ playVideo });
        let rate = undefined;
        let temp;
        temp = Glob_1.default.BigConfig.dev.force_playback_rate('Experiment.levelIntro()');
        if (temp) {
            rate = temp;
        }
        else {
            if (levelCollection.current.rhythm) {
                rate = levelCollection.current.tempo / 100;
            }
            else {
                for (let i = levelCollection.current.index + 1; i < levelCollection.length; i++) {
                    const level = levelCollection.get(i);
                    if (level.notes === levelCollection.current.notes && level.rhythm) {
                        rate = level.tempo / 100;
                        console.warn(`level #${levelCollection.current.index} no tempo, took rate (${rate}) from level #${i}`);
                        break;
                    }
                }
                if (rate === undefined) {
                    rate = 1;
                }
            }
        }
        console.log({ rate });
        let notes;
        temp = Glob_1.default.BigConfig.dev.force_notes_number('Experiment.levelIntro()');
        if (temp) {
            notes = temp;
        }
        else {
            notes = levelCollection.current.notes;
        }
        console.log({ notes });
        if (playVideo) {
            await this.dialog.levelIntro(levelCollection.current, "video", rate);
            await this.callOnClick(async () => {
                await this.video.levelIntro(notes, rate);
            }, this.video);
        }
        await this.dialog.levelIntro(levelCollection.current, "animation", rate);
        await this.callOnClick(async () => {
            await this.animation.levelIntro(notes, rate);
        }, this.animation);
        console.groupEnd();
    }
    async record(levelCollection) {
        Glob_1.default.Title.levelh3.text(`Level 1/${levelCollection.length}`);
        Glob_1.default.Title.trialh3.text(`Trial 1/${levelCollection.current.trials}`);
        this.greenButton
            .replaceClass('inactive', 'active')
            .click(() => this.checkDoneTrial(levelCollection.current.toJSON()));
        await this.dialog.record(levelCollection.current);
    }
    async checkDoneTrial(readonlyLevel) {
        if (!util_1.bool(this.keyboard.msgs)) {
            return MyAlert_1.default.small._info({ title: 'Please play something' });
        }
        console.log('this.keyboard.notes:', this.keyboard.msgs);
        console.time(`PY_checkDoneTrial`);
        const PY_checkDoneTrial = new MyPyShell_1.MyPyShell('-m api.analyze_txt', {
            mode: "json",
            args: [
                JSON.stringify({
                    subconfig: {
                        truth_file: this.truthFile,
                        allowed_rhythm_deviation: this.allowedRhythmDeviation,
                        allowed_tempo_deviation: this.allowedTempoDeviation,
                    },
                    level: readonlyLevel,
                    experiment_type: Glob_1.default.BigConfig.experiment_type,
                    subj_msgs: this.keyboard.msgs
                }),
            ]
        });
        const response = await PY_checkDoneTrial.runAsync();
        console.log({ response });
        console.timeEnd(`PY_checkDoneTrial`);
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIsMkNBQW1DO0FBQ25DLHFDQUF3QztBQUN4QyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBRzlCLG1DQUFtQztBQUNuQyx5REFBbUQ7QUFDbkQsMkRBQXdEO0FBQ3hELDJDQUFvQztBQUNwQywrQ0FBb0Q7QUFDcEQscUNBQTZCO0FBQzdCLHlCQUF3QjtBQUN4QixNQUFNLFVBQVU7SUFZWixZQUFZLFNBQXFCO1FBVHhCLFVBQUssR0FBVSxTQUFTLENBQUM7UUFVOUIsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsdUJBQXVCLEVBQUUsd0JBQXdCLEVBQUUsR0FBRyxTQUFTLENBQUM7UUFDL0YsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLGdCQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLG1CQUFTLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsTUFBTTthQUNOLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO2FBQzVCLGVBQWUsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFakMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGVBQUssRUFBRTthQUNuQixRQUFRLENBQUMsY0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLDJCQUFZLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsV0FBVyxHQUFHLDBCQUFNLENBQUMsRUFBRSxLQUFLLEVBQUcsY0FBYyxFQUFFLEdBQUcsRUFBRyx1QkFBdUIsRUFBRSxJQUFJLEVBQUcsTUFBTSxFQUFFLENBQUMsQ0FBQztR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QUMsU0FBUyxDQUFDLGVBQWU7b0JBQ2hELFNBQVMsRUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUk7aUJBQ2pDLENBQUM7YUFFTDtTQUNKLENBQUMsQ0FBQztRQUNILE1BQU0sUUFBUSxHQUFHLE1BQU0saUJBQWlCLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDMUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Q0FDSjtBQUVELGtCQUFlLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEaWFsb2cgZnJvbSBcIi4vZGlhbG9nXCI7XG5pbXBvcnQgeyBEZW1vVHlwZSwgRXhwZXJpbWVudFR5cGUsIElTdWJjb25maWcsIFN1YmNvbmZpZyB9IGZyb20gXCIuLi8uLi9NeVN0b3JlXCI7XG5pbXBvcnQgQW5pbWF0aW9uIGZyb20gJy4vYW5pbWF0aW9uJ1xuaW1wb3J0IHsgYm9vbCwgd2FpdCB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgVmlkZW8gZnJvbSBcIi4vdmlkZW9cIjtcbmltcG9ydCBHbG9iIGZyb20gXCIuLi8uLi9HbG9iXCI7XG5pbXBvcnQgeyBSZWFkb25seVRydXRoIH0gZnJvbSBcIi4uLy4uL1RydXRoXCI7XG5pbXBvcnQgeyBJTGV2ZWwsIExldmVsLCBMZXZlbENvbGxlY3Rpb24gfSBmcm9tIFwiLi4vLi4vTGV2ZWxcIjtcbmltcG9ydCB7IHRyeUNhdGNoIH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCB7IGJ1dHRvbiwgQnV0dG9uIH0gZnJvbSBcImJldHRlcmh0bWxlbGVtZW50XCI7XG5pbXBvcnQgeyBNaWRpS2V5Ym9hcmQgfSBmcm9tIFwiLi4vLi4vUGlhbm8vTWlkaUtleWJvYXJkXCI7XG5pbXBvcnQgTXlBbGVydCBmcm9tIFwiLi4vLi4vTXlBbGVydFwiO1xuaW1wb3J0IHsgSVBhaXJzLCBNeVB5U2hlbGwgfSBmcm9tIFwiLi4vLi4vTXlQeVNoZWxsXCI7XG5pbXBvcnQgbXlmcyBmcm9tIFwiLi4vLi4vTXlGc1wiXG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIlxuY2xhc3MgRXhwZXJpbWVudCB7XG4gICAgcmVhZG9ubHkgZGlhbG9nOiBEaWFsb2c7XG4gICAgcmVhZG9ubHkgYW5pbWF0aW9uOiBBbmltYXRpb247XG4gICAgcmVhZG9ubHkgdmlkZW86IFZpZGVvID0gdW5kZWZpbmVkO1xuICAgIHJlYWRvbmx5IGtleWJvYXJkOiBNaWRpS2V5Ym9hcmQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBncmVlbkJ1dHRvbjogQnV0dG9uO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVtb1R5cGU6IERlbW9UeXBlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdHJ1dGhGaWxlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBhbGxvd2VkVGVtcG9EZXZpYXRpb246IG51bWJlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFsbG93ZWRSaHl0aG1EZXZpYXRpb246IG51bWJlcjtcbiAgICBcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihzdWJjb25maWc6IElTdWJjb25maWcpIHtcbiAgICAgICAgY29uc3QgeyBkZW1vX3R5cGUsIHRydXRoX2ZpbGUsIGFsbG93ZWRfdGVtcG9fZGV2aWF0aW9uLCBhbGxvd2VkX3JoeXRobV9kZXZpYXRpb24gfSA9IHN1YmNvbmZpZztcbiAgICAgICAgdGhpcy5kaWFsb2cgPSBuZXcgRGlhbG9nKGRlbW9fdHlwZSk7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbigpO1xuICAgICAgICB0aGlzLmRpYWxvZ1xuICAgICAgICAgICAgLmluc2VydEJlZm9yZSh0aGlzLmFuaW1hdGlvbilcbiAgICAgICAgICAgIC5zZXRPcGFjVHJhbnNEdXIoKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLnNldE9wYWNUcmFuc0R1cigpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy52aWRlbyA9IG5ldyBWaWRlbygpXG4gICAgICAgICAgICAuYXBwZW5kVG8oR2xvYi5NYWluQ29udGVudCk7XG4gICAgICAgIHRoaXMudmlkZW8uc2V0T3BhY1RyYW5zRHVyKCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmtleWJvYXJkID0gbmV3IE1pZGlLZXlib2FyZCgpO1xuICAgICAgICB0aGlzLmdyZWVuQnV0dG9uID0gYnV0dG9uKHsgc2V0aWQgOiAnZ3JlZW5fYnV0dG9uJywgY2xzIDogJ2luYWN0aXZlIGdyZWVuIHBsYXllcicsIGh0bWwgOiAnRG9uZScgfSk7XG4gICAgICAgIEdsb2IuTWFpbkNvbnRlbnQuYXBwZW5kKHRoaXMuZ3JlZW5CdXR0b24pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5kZW1vVHlwZSA9IGRlbW9fdHlwZTtcbiAgICAgICAgdGhpcy50cnV0aEZpbGUgPSB0cnV0aF9maWxlO1xuICAgICAgICB0aGlzLmFsbG93ZWRUZW1wb0RldmlhdGlvbiA9IGFsbG93ZWRfdGVtcG9fZGV2aWF0aW9uO1xuICAgICAgICB0aGlzLmFsbG93ZWRSaHl0aG1EZXZpYXRpb24gPSBhbGxvd2VkX3JoeXRobV9kZXZpYXRpb247XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICAvLyBhc3luYyBpbml0KHJlYWRvbmx5VHJ1dGg6IFJlYWRvbmx5VHJ1dGgpIHtcbiAgICBhc3luYyBpbml0KHN1YmNvbmZpZzogU3ViY29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHJlYWRvbmx5VHJ1dGggPSBzdWJjb25maWcudHJ1dGgudG9KU09OKCk7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRoaXMudmlkZW8uaW5pdChyZWFkb25seVRydXRoKSxcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLmluaXQocmVhZG9ubHlUcnV0aC5taWRpLmFic1BhdGgpXG4gICAgICAgIF0pO1xuICAgICAgICBjb25zdCBvdXRQYXRoQWJzID0gc3ViY29uZmlnLmV4cGVyaW1lbnRPdXREaXJBYnMoKTtcbiAgICAgICAgY29uc3QgZXhpc3RlZCA9IG15ZnMuY3JlYXRlSWZOb3RFeGlzdHMob3V0UGF0aEFicyk7XG4gICAgICAgIGlmICggZXhpc3RlZCApIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gZnMuc3RhdFN5bmMob3V0UGF0aEFicyk7XG4gICAgICAgICAgICBsZXQgZGF0ZXN0ciA9IHN0YXRzLmN0aW1lLmh1bWFuKCk7XG4gICAgICAgICAgICBmcy5yZW5hbWVTeW5jKG91dFBhdGhBYnMsIGAke291dFBhdGhBYnN9X18ke2RhdGVzdHJ9YCk7XG4gICAgICAgICAgICBmcy5ta2RpclN5bmMob3V0UGF0aEFicylcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgY2FsbE9uQ2xpY2soZm46ICgpPT5Qcm9taXNlPHZvaWQ+LCBkZW1vOiBBbmltYXRpb24gfCBWaWRlbykge1xuICAgICAgICBjb25zdCBkb25lID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PlxuICAgICAgICAgICAgR2xvYi5Eb2N1bWVudC5vbih7XG4gICAgICAgICAgICAgICAgY2xpY2sgOiBhc3luYyAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nLmhpZGUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEdsb2IuaGlkZShcIlRpdGxlXCIsIFwiTmF2aWdhdGlvbkJ1dHRvbnNcIilcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgR2xvYi5Eb2N1bWVudC5vZmYoXCJjbGlja1wiKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdHJ5Q2F0Y2goKCkgPT4gZm4oKSwgYHRyeWluZyB0byBydW4gJHtkZW1vIGluc3RhbmNlb2YgQW5pbWF0aW9uID8gJ2FuaW1hdGlvbicgOiAndmlkZW8nfWApO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB3YWl0KDEwMDApO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBkZW1vLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIGF3YWl0IGRlbW8uZGlzcGxheSgpO1xuICAgICAgICBhd2FpdCBkb25lO1xuICAgICAgICBhd2FpdCBHbG9iLmRpc3BsYXkoXCJUaXRsZVwiLCBcIk5hdmlnYXRpb25CdXR0b25zXCIpO1xuICAgICAgICByZXR1cm5cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGludHJvKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zb2xlLmdyb3VwKGBFeHBlcmltZW50LmludHJvKClgKTtcbiAgICAgICAgYXdhaXQgd2FpdCgwKTtcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IHRoaXMuZGlhbG9nLmludHJvKCk7XG4gICAgICAgIFxuICAgICAgICAvLy8gdmlkZW8gLyBhbmltYXRpb25cbiAgICAgICAgbGV0IGRlbW87XG4gICAgICAgIGlmICggR2xvYi5CaWdDb25maWcuZGV2LnNpbXVsYXRlX3ZpZGVvX21vZGUoJ0V4cGVyaW1lbnQuaW50cm8oKScpICkge1xuICAgICAgICAgICAgZGVtbyA9IHRoaXMudmlkZW87XG4gICAgICAgIH0gZWxzZSBpZiAoIEdsb2IuQmlnQ29uZmlnLmRldi5zaW11bGF0ZV9hbmltYXRpb25fbW9kZSgnRXhwZXJpbWVudC5pbnRybygpJykgKSB7XG4gICAgICAgICAgICBkZW1vID0gdGhpcy5hbmltYXRpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZW1vID0gdGhpc1t0aGlzLmRlbW9UeXBlXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY2FsbE9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgZGVtby5pbnRybygpO1xuICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICB9LCBkZW1vKTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIGFzeW5jIGxldmVsSW50cm8obGV2ZWxDb2xsZWN0aW9uOiBMZXZlbENvbGxlY3Rpb24pIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgRXhwZXJpbWVudC5sZXZlbEludHJvKClgKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBwbGF5VmlkZW87XG4gICAgICAgIGlmICggKHRoaXMuZGVtb1R5cGUgPT09IFwiYW5pbWF0aW9uXCJcbiAgICAgICAgICAgICYmICFHbG9iLkJpZ0NvbmZpZy5kZXYuc2ltdWxhdGVfdmlkZW9fbW9kZSgnRXhwZXJpbWVudC5sZXZlbEludHJvKCknKSlcbiAgICAgICAgICAgIHx8IEdsb2IuQmlnQ29uZmlnLmRldi5zaW11bGF0ZV9hbmltYXRpb25fbW9kZSgnRXhwZXJpbWVudC5sZXZlbEludHJvKCknKSApIHtcbiAgICAgICAgICAgIHBsYXlWaWRlbyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCBsZXZlbENvbGxlY3Rpb24ucHJldmlvdXMgKSB7XG4gICAgICAgICAgICAgICAgcGxheVZpZGVvID0gbGV2ZWxDb2xsZWN0aW9uLnByZXZpb3VzLm5vdGVzICE9PSBsZXZlbENvbGxlY3Rpb24uY3VycmVudC5ub3RlcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGxheVZpZGVvID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyh7IHBsYXlWaWRlbyB9KTtcbiAgICAgICAgbGV0IHJhdGU6IG51bWJlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHRlbXA7XG4gICAgICAgIHRlbXAgPSBHbG9iLkJpZ0NvbmZpZy5kZXYuZm9yY2VfcGxheWJhY2tfcmF0ZSgnRXhwZXJpbWVudC5sZXZlbEludHJvKCknKTtcbiAgICAgICAgaWYgKCB0ZW1wICkge1xuICAgICAgICAgICAgcmF0ZSA9IHRlbXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIGxldmVsQ29sbGVjdGlvbi5jdXJyZW50LnJoeXRobSApIHtcbiAgICAgICAgICAgICAgICByYXRlID0gbGV2ZWxDb2xsZWN0aW9uLmN1cnJlbnQudGVtcG8gLyAxMDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoIGxldCBpID0gbGV2ZWxDb2xsZWN0aW9uLmN1cnJlbnQuaW5kZXggKyAxOyBpIDwgbGV2ZWxDb2xsZWN0aW9uLmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZXZlbCA9IGxldmVsQ29sbGVjdGlvbi5nZXQoaSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggbGV2ZWwubm90ZXMgPT09IGxldmVsQ29sbGVjdGlvbi5jdXJyZW50Lm5vdGVzICYmIGxldmVsLnJoeXRobSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdGUgPSBsZXZlbC50ZW1wbyAvIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgbGV2ZWwgIyR7bGV2ZWxDb2xsZWN0aW9uLmN1cnJlbnQuaW5kZXh9IG5vIHRlbXBvLCB0b29rIHJhdGUgKCR7cmF0ZX0pIGZyb20gbGV2ZWwgIyR7aX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCByYXRlID09PSB1bmRlZmluZWQgKSB7IC8vIEhhdmVuJ3QgZm91bmQgaW4gZm9yXG4gICAgICAgICAgICAgICAgICAgIHJhdGUgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyh7IHJhdGUgfSk7XG4gICAgICAgIGxldCBub3RlcztcbiAgICAgICAgdGVtcCA9IEdsb2IuQmlnQ29uZmlnLmRldi5mb3JjZV9ub3Rlc19udW1iZXIoJ0V4cGVyaW1lbnQubGV2ZWxJbnRybygpJyk7XG4gICAgICAgIGlmICggdGVtcCApIHtcbiAgICAgICAgICAgIG5vdGVzID0gdGVtcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vdGVzID0gbGV2ZWxDb2xsZWN0aW9uLmN1cnJlbnQubm90ZXM7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyh7IG5vdGVzIH0pO1xuICAgICAgICBpZiAoIHBsYXlWaWRlbyApIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYXdhaXQgdGhpcy5kaWFsb2cubGV2ZWxJbnRybyhsZXZlbENvbGxlY3Rpb24uY3VycmVudCwgXCJ2aWRlb1wiLCByYXRlKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2FsbE9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudmlkZW8ubGV2ZWxJbnRybyhub3RlcywgcmF0ZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LCB0aGlzLnZpZGVvKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuZGlhbG9nLmxldmVsSW50cm8obGV2ZWxDb2xsZWN0aW9uLmN1cnJlbnQsIFwiYW5pbWF0aW9uXCIsIHJhdGUpO1xuICAgICAgICBhd2FpdCB0aGlzLmNhbGxPbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYW5pbWF0aW9uLmxldmVsSW50cm8obm90ZXMsIHJhdGUpO1xuICAgICAgICAgICAgXG4gICAgICAgIH0sIHRoaXMuYW5pbWF0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIHJlY29yZChsZXZlbENvbGxlY3Rpb246IExldmVsQ29sbGVjdGlvbikge1xuICAgICAgICBHbG9iLlRpdGxlLmxldmVsaDMudGV4dChgTGV2ZWwgMS8ke2xldmVsQ29sbGVjdGlvbi5sZW5ndGh9YCk7XG4gICAgICAgIEdsb2IuVGl0bGUudHJpYWxoMy50ZXh0KGBUcmlhbCAxLyR7bGV2ZWxDb2xsZWN0aW9uLmN1cnJlbnQudHJpYWxzfWApO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5ncmVlbkJ1dHRvblxuICAgICAgICAgICAgLnJlcGxhY2VDbGFzcygnaW5hY3RpdmUnLCAnYWN0aXZlJylcbiAgICAgICAgICAgIC5jbGljaygoKSA9PiB0aGlzLmNoZWNrRG9uZVRyaWFsKGxldmVsQ29sbGVjdGlvbi5jdXJyZW50LnRvSlNPTigpKSk7XG4gICAgICAgIGF3YWl0IHRoaXMuZGlhbG9nLnJlY29yZChsZXZlbENvbGxlY3Rpb24uY3VycmVudCk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgYXN5bmMgY2hlY2tEb25lVHJpYWwocmVhZG9ubHlMZXZlbDogSUxldmVsKSB7XG4gICAgICAgIGlmICggIWJvb2wodGhpcy5rZXlib2FyZC5tc2dzKSApIHtcbiAgICAgICAgICAgIHJldHVybiBNeUFsZXJ0LnNtYWxsLl9pbmZvKHsgdGl0bGUgOiAnUGxlYXNlIHBsYXkgc29tZXRoaW5nJyB9KVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZygndGhpcy5rZXlib2FyZC5ub3RlczonLCB0aGlzLmtleWJvYXJkLm1zZ3MpO1xuICAgICAgICBjb25zb2xlLnRpbWUoYFBZX2NoZWNrRG9uZVRyaWFsYCk7XG4gICAgICAgIGNvbnN0IFBZX2NoZWNrRG9uZVRyaWFsID0gbmV3IE15UHlTaGVsbCgnLW0gYXBpLmFuYWx5emVfdHh0Jywge1xuICAgICAgICAgICAgbW9kZSA6IFwianNvblwiLFxuICAgICAgICAgICAgYXJncyA6IFtcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIHN1YmNvbmZpZyA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRydXRoX2ZpbGUgOiB0aGlzLnRydXRoRmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZWRfcmh5dGhtX2RldmlhdGlvbiA6IHRoaXMuYWxsb3dlZFJoeXRobURldmlhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZWRfdGVtcG9fZGV2aWF0aW9uIDogdGhpcy5hbGxvd2VkVGVtcG9EZXZpYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWwgOiByZWFkb25seUxldmVsLFxuICAgICAgICAgICAgICAgICAgICBleHBlcmltZW50X3R5cGUgOiBHbG9iLkJpZ0NvbmZpZy5leHBlcmltZW50X3R5cGUsXG4gICAgICAgICAgICAgICAgICAgIHN1YmpfbXNncyA6IHRoaXMua2V5Ym9hcmQubXNnc1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFBZX2NoZWNrRG9uZVRyaWFsLnJ1bkFzeW5jKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHsgcmVzcG9uc2UgfSk7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZChgUFlfY2hlY2tEb25lVHJpYWxgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cGVyaW1lbnQ7XG4iXX0=