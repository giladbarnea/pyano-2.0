"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const keyboard_1 = require("./keyboard");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default();
        this.keyboard = new keyboard_1.default();
        this.dialog.insertBefore(this.keyboard);
        if (demoType === "video") {
            this.video = new video_1.default();
            Glob_1.default.MainContent.append(this.video);
        }
    }
    async intro() {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        this.dialog.intro(this.video ? "video" : "animation");
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const promises = [util_1.wait(2000), this.keyboard.initPiano(subconfig.truth.midi.absPath)];
        if (this.video) {
            promises.push(this.video.initVideo(subconfig.truth.mp4.absPath, subconfig.truth.onsets.absPath));
        }
        await Promise.all(promises);
        if (this.video) {
            this.video.class('active');
            const vidTransDur = this.video.getOpacityTransitionDuration();
            await util_1.wait(vidTransDur, false);
            this.dialog.hide();
            Glob_1.default.Document.on({
                keypress: async (ev) => {
                    console.log(ev);
                    Glob_1.default.Document.off("keypress");
                    await this.video.intro();
                    console.log('done playing video');
                }
            });
        }
        return;
        this.keyboard.class('active');
        const kbdTransDur = this.keyboard.getOpacityTransitionDuration();
        await util_1.wait(kbdTransDur, false);
        await this.keyboard.intro();
        console.log('done from Experiment!');
        console.groupEnd();
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIseUNBQWlDO0FBQ2pDLHFDQUFrQztBQUNsQyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBRzlCLE1BQU0sVUFBVTtJQUtaLFlBQVksUUFBa0I7UUFGckIsVUFBSyxHQUFVLFNBQVMsQ0FBQztRQUc5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQU0sRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxrQkFBUSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLElBQUssUUFBUSxLQUFLLE9BQU8sRUFBRztZQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBSyxFQUFFLENBQUM7WUFDekIsY0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sV0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0RCxNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWhELE1BQU0sUUFBUSxHQUFHLENBQUUsV0FBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFFLENBQUM7UUFDdkYsSUFBSyxJQUFJLENBQUMsS0FBSyxFQUFHO1lBQ2QsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtTQUNuRztRQUNELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixJQUFLLElBQUksQ0FBQyxLQUFLLEVBQUc7WUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLDRCQUE0QixFQUFFLENBQUM7WUFDOUQsTUFBTSxXQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRS9CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbkIsY0FBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQ2IsUUFBUSxFQUFHLEtBQUssRUFBRSxFQUFpQixFQUFFLEVBQUU7b0JBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ2hCLGNBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUM5QixNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztnQkFDdEMsQ0FBQzthQUNKLENBQUMsQ0FBQztTQUdOO1FBQ0QsT0FBTztRQUNQLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztRQUNqRSxNQUFNLFdBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0IsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFdkIsQ0FBQztDQUVKO0FBRUQsa0JBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpYWxvZyBmcm9tIFwiLi9kaWFsb2dcIjtcbmltcG9ydCB7IERlbW9UeXBlIH0gZnJvbSBcIi4uLy4uL015U3RvcmVcIjtcbmltcG9ydCBLZXlib2FyZCBmcm9tICcuL2tleWJvYXJkJ1xuaW1wb3J0IHsgd2FpdCB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgVmlkZW8gZnJvbSBcIi4vdmlkZW9cIjtcbmltcG9ydCBHbG9iIGZyb20gXCIuLi8uLi9HbG9iXCI7XG5cblxuY2xhc3MgRXhwZXJpbWVudCB7XG4gICAgcmVhZG9ubHkgZGlhbG9nOiBEaWFsb2c7XG4gICAgcmVhZG9ubHkga2V5Ym9hcmQ6IEtleWJvYXJkO1xuICAgIHJlYWRvbmx5IHZpZGVvOiBWaWRlbyA9IHVuZGVmaW5lZDtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihkZW1vVHlwZTogRGVtb1R5cGUpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cgPSBuZXcgRGlhbG9nKCk7XG4gICAgICAgIHRoaXMua2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmQoKTtcbiAgICAgICAgdGhpcy5kaWFsb2cuaW5zZXJ0QmVmb3JlKHRoaXMua2V5Ym9hcmQpO1xuICAgICAgICBpZiAoIGRlbW9UeXBlID09PSBcInZpZGVvXCIgKSB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvID0gbmV3IFZpZGVvKCk7XG4gICAgICAgICAgICBHbG9iLk1haW5Db250ZW50LmFwcGVuZCh0aGlzLnZpZGVvKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbnRybygpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgRXhwZXJpbWVudC5pbnRybygpYCk7XG4gICAgICAgIGF3YWl0IHdhaXQoMCk7XG4gICAgICAgIHRoaXMuZGlhbG9nLmludHJvKHRoaXMudmlkZW8gPyBcInZpZGVvXCIgOiBcImFuaW1hdGlvblwiKTtcbiAgICAgICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFsgd2FpdCgyMDAwKSwgdGhpcy5rZXlib2FyZC5pbml0UGlhbm8oc3ViY29uZmlnLnRydXRoLm1pZGkuYWJzUGF0aCkgXTtcbiAgICAgICAgaWYgKCB0aGlzLnZpZGVvICkge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLnZpZGVvLmluaXRWaWRlbyhzdWJjb25maWcudHJ1dGgubXA0LmFic1BhdGgsIHN1YmNvbmZpZy50cnV0aC5vbnNldHMuYWJzUGF0aCkpXG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICBpZiAoIHRoaXMudmlkZW8gKSB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvLmNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIGNvbnN0IHZpZFRyYW5zRHVyID0gdGhpcy52aWRlby5nZXRPcGFjaXR5VHJhbnNpdGlvbkR1cmF0aW9uKCk7XG4gICAgICAgICAgICBhd2FpdCB3YWl0KHZpZFRyYW5zRHVyLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyBhd2FpdCB3YWl0KDEwMDApO1xuICAgICAgICAgICAgdGhpcy5kaWFsb2cuaGlkZSgpO1xuICAgICAgICAgICAgR2xvYi5Eb2N1bWVudC5vbih7XG4gICAgICAgICAgICAgICAga2V5cHJlc3MgOiBhc3luYyAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXYpO1xuICAgICAgICAgICAgICAgICAgICBHbG9iLkRvY3VtZW50Lm9mZihcImtleXByZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnZpZGVvLmludHJvKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkb25lIHBsYXlpbmcgdmlkZW8nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmtleWJvYXJkLmNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgY29uc3Qga2JkVHJhbnNEdXIgPSB0aGlzLmtleWJvYXJkLmdldE9wYWNpdHlUcmFuc2l0aW9uRHVyYXRpb24oKTtcbiAgICAgICAgYXdhaXQgd2FpdChrYmRUcmFuc0R1ciwgZmFsc2UpO1xuICAgICAgICBhd2FpdCB0aGlzLmtleWJvYXJkLmludHJvKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdkb25lIGZyb20gRXhwZXJpbWVudCEnKTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cGVyaW1lbnQ7XG4iXX0=