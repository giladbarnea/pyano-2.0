"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const animation_1 = require("./animation");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default();
        this.keyboard = new animation_1.default();
        this.dialog
            .insertBefore(this.keyboard)
            .setOpacTransDur();
        this.keyboard.setOpacTransDur();
        if (demoType === "video") {
            this.video = new video_1.default()
                .appendTo(Glob_1.default.MainContent);
            this.video.setOpacTransDur();
        }
    }
    async intro() {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const promises = [
            this.dialog.intro(this.video ? "video" : "animation"),
        ];
        if (this.video) {
            promises.push(this.video.initVideo(subconfig.truth.mp4.absPath, subconfig.truth.onsets.absPath));
        }
        else {
            promises.push(this.keyboard.initPiano(subconfig.truth.midi.absPath));
        }
        await Promise.all(promises);
        if (this.video) {
            this.video.on({
                playing: (ev) => {
                    console.log('Video playing, allOff()');
                    Glob_1.default.Document.allOff();
                    this.video.allOff();
                }
            });
            await this.video.display();
        }
        else {
            await this.keyboard.display();
        }
        Glob_1.default.Document.on({
            click: async (ev) => {
                ev.preventDefault();
                ev.stopPropagation();
                await Promise.all([
                    this.dialog.hide(),
                    Glob_1.default.hide("Title", "NavigationButtons")
                ]);
                if (this.video) {
                    await this.video.intro();
                    console.log('done playing video');
                    this.video.hide();
                }
                else {
                    await this.keyboard.intro();
                    console.log('done playing animation');
                    await util_1.wait(1000);
                    this.keyboard.hide();
                }
            }
        });
        console.groupEnd();
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIsMkNBQW1DO0FBQ25DLHFDQUFrQztBQUNsQyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBRzlCLE1BQU0sVUFBVTtJQU1aLFlBQVksUUFBa0I7UUFIckIsVUFBSyxHQUFVLFNBQVMsQ0FBQztRQUk5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQU0sRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxtQkFBUyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLE1BQU07YUFDTixZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUMzQixlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ2hDLElBQUssUUFBUSxLQUFLLE9BQU8sRUFBRztZQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBSyxFQUFFO2lCQUNuQixRQUFRLENBQUMsY0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRWhDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDaEM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDUCxPQUFPLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDcEMsTUFBTSxXQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFZCxNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWhELE1BQU0sUUFBUSxHQUFHO1lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7U0FFeEQsQ0FBQztRQUNGLElBQUssSUFBSSxDQUFDLEtBQUssRUFBRztZQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7U0FDbkc7YUFBTTtZQUNILFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtTQUV2RTtRQUNELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixJQUFLLElBQUksQ0FBQyxLQUFLLEVBQUc7WUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDVixPQUFPLEVBQUcsQ0FBQyxFQUFTLEVBQUUsRUFBRTtvQkFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO29CQUN2QyxjQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUN4QixDQUFDO2FBQ0osQ0FBQyxDQUFDO1lBQ0gsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBRzlCO2FBQU07WUFFSCxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDakM7UUFHRCxjQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUNiLEtBQUssRUFBRyxLQUFLLEVBQUUsRUFBaUIsRUFBRSxFQUFFO2dCQUNoQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ3BCLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDckIsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO29CQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO29CQUNsQixjQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxtQkFBbUIsQ0FBQztpQkFDMUMsQ0FBQyxDQUFDO2dCQUNILElBQUssSUFBSSxDQUFDLEtBQUssRUFBRztvQkFDZCxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztvQkFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDckI7cUJBQU07b0JBQ0gsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7b0JBQ3RDLE1BQU0sV0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUN4QjtZQUVMLENBQUM7U0FDSixDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFdkIsQ0FBQztDQUVKO0FBRUQsa0JBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpYWxvZyBmcm9tIFwiLi9kaWFsb2dcIjtcbmltcG9ydCB7IERlbW9UeXBlIH0gZnJvbSBcIi4uLy4uL015U3RvcmVcIjtcbmltcG9ydCBBbmltYXRpb24gZnJvbSAnLi9hbmltYXRpb24nXG5pbXBvcnQgeyB3YWl0IH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCBWaWRlbyBmcm9tIFwiLi92aWRlb1wiO1xuaW1wb3J0IEdsb2IgZnJvbSBcIi4uLy4uL0dsb2JcIjtcblxuXG5jbGFzcyBFeHBlcmltZW50IHtcbiAgICByZWFkb25seSBkaWFsb2c6IERpYWxvZztcbiAgICByZWFkb25seSBrZXlib2FyZDogQW5pbWF0aW9uO1xuICAgIHJlYWRvbmx5IHZpZGVvOiBWaWRlbyA9IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlbW9UeXBlOiBEZW1vVHlwZTtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihkZW1vVHlwZTogRGVtb1R5cGUpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cgPSBuZXcgRGlhbG9nKCk7XG4gICAgICAgIHRoaXMua2V5Ym9hcmQgPSBuZXcgQW5pbWF0aW9uKCk7XG4gICAgICAgIHRoaXMuZGlhbG9nXG4gICAgICAgICAgICAuaW5zZXJ0QmVmb3JlKHRoaXMua2V5Ym9hcmQpXG4gICAgICAgICAgICAuc2V0T3BhY1RyYW5zRHVyKCk7XG4gICAgICAgIHRoaXMua2V5Ym9hcmQuc2V0T3BhY1RyYW5zRHVyKCk7XG4gICAgICAgIGlmICggZGVtb1R5cGUgPT09IFwidmlkZW9cIiApIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW8gPSBuZXcgVmlkZW8oKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhHbG9iLk1haW5Db250ZW50KTtcbiAgICAgICAgICAgIC8vIEdsb2IuTWFpbkNvbnRlbnQuYXBwZW5kKHRoaXMudmlkZW8pO1xuICAgICAgICAgICAgdGhpcy52aWRlby5zZXRPcGFjVHJhbnNEdXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbnRybygpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgRXhwZXJpbWVudC5pbnRybygpYCk7XG4gICAgICAgIGF3YWl0IHdhaXQoMCk7XG4gICAgICAgIC8vIHRoaXMuZGlhbG9nLmludHJvKHRoaXMudmlkZW8gPyBcInZpZGVvXCIgOiBcImFuaW1hdGlvblwiKTtcbiAgICAgICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nLmludHJvKHRoaXMudmlkZW8gPyBcInZpZGVvXCIgOiBcImFuaW1hdGlvblwiKSxcbiAgICAgICAgXG4gICAgICAgIF07XG4gICAgICAgIGlmICggdGhpcy52aWRlbyApIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2godGhpcy52aWRlby5pbml0VmlkZW8oc3ViY29uZmlnLnRydXRoLm1wNC5hYnNQYXRoLCBzdWJjb25maWcudHJ1dGgub25zZXRzLmFic1BhdGgpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmtleWJvYXJkLmluaXRQaWFubyhzdWJjb25maWcudHJ1dGgubWlkaS5hYnNQYXRoKSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgaWYgKCB0aGlzLnZpZGVvICkge1xuICAgICAgICAgICAgdGhpcy52aWRlby5vbih7XG4gICAgICAgICAgICAgICAgcGxheWluZyA6IChldjogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1ZpZGVvIHBsYXlpbmcsIGFsbE9mZigpJyk7XG4gICAgICAgICAgICAgICAgICAgIEdsb2IuRG9jdW1lbnQuYWxsT2ZmKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW8uYWxsT2ZmKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnZpZGVvLmRpc3BsYXkoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGF3YWl0IHRoaXMua2V5Ym9hcmQuZGlzcGxheSgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgR2xvYi5Eb2N1bWVudC5vbih7XG4gICAgICAgICAgICBjbGljayA6IGFzeW5jIChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZy5oaWRlKCksXG4gICAgICAgICAgICAgICAgICAgIEdsb2IuaGlkZShcIlRpdGxlXCIsIFwiTmF2aWdhdGlvbkJ1dHRvbnNcIilcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMudmlkZW8gKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudmlkZW8uaW50cm8oKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RvbmUgcGxheWluZyB2aWRlbycpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmtleWJvYXJkLmludHJvKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkb25lIHBsYXlpbmcgYW5pbWF0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHdhaXQoMTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5Ym9hcmQuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBFeHBlcmltZW50O1xuIl19