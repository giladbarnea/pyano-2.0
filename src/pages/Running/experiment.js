"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const keyboard_1 = require("./keyboard");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default();
        this.keyboard = new keyboard_1.default();
        this.dialog.insertBefore(this.keyboard);
        if (demoType === "video") {
            this.video = new video_1.default();
            Glob_1.default.MainContent.append(this.video);
        }
        this.dialog.setOpacTransDur();
        this.keyboard.setOpacTransDur();
        this.video.setOpacTransDur();
    }
    async intro() {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        this.dialog.intro(this.video ? "video" : "animation");
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const promises = [util_1.wait(2000), this.keyboard.initPiano(subconfig.truth.midi.absPath)];
        if (this.video) {
            promises.push(this.video.initVideo(subconfig.truth.mp4.absPath, subconfig.truth.onsets.absPath));
        }
        await Promise.all(promises);
        if (this.video) {
            this.video.on({
                playing: (ev) => {
                    console.log('Video playing, allOff()');
                    this.video.allOff();
                }
            });
            await this.video.display();
            const videoIntro = async (ev) => {
                await Promise.all([
                    this.dialog.hide(),
                    Glob_1.default.Title.removeClass('active'),
                    Glob_1.default.NavigationButtons.removeClass('active')
                ]);
                await this.video.intro();
                console.log('done playing video');
            };
            Glob_1.default.Document.on({
                keypress: videoIntro,
                click: videoIntro
            });
        }
        return;
        this.keyboard.class('active');
        const kbdTransDur = this.keyboard.getOpacityTransitionDuration();
        await util_1.wait(kbdTransDur, false);
        await this.keyboard.intro();
        console.log('done from Experiment!');
        console.groupEnd();
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIseUNBQWlDO0FBQ2pDLHFDQUFrQztBQUNsQyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBRzlCLE1BQU0sVUFBVTtJQUtaLFlBQVksUUFBa0I7UUFGckIsVUFBSyxHQUFVLFNBQVMsQ0FBQztRQUc5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQU0sRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxrQkFBUSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLElBQUssUUFBUSxLQUFLLE9BQU8sRUFBRztZQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBSyxFQUFFLENBQUM7WUFDekIsY0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sV0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0RCxNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWhELE1BQU0sUUFBUSxHQUFHLENBQUUsV0FBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFFLENBQUM7UUFDdkYsSUFBSyxJQUFJLENBQUMsS0FBSyxFQUFHO1lBQ2QsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtTQUNuRztRQUNELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixJQUFLLElBQUksQ0FBQyxLQUFLLEVBQUc7WUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDVixPQUFPLEVBQUcsQ0FBQyxFQUFTLEVBQUUsRUFBRTtvQkFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO29CQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUN4QixDQUFDO2FBQ0osQ0FBQyxDQUFDO1lBQ0gsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzNCLE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxFQUFpQixFQUFFLEVBQUU7Z0JBSTNDLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztvQkFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtvQkFDbEIsY0FBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDO29CQUNoQyxjQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztpQkFDL0MsQ0FBQyxDQUFDO2dCQUNILE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ3RDLENBQUMsQ0FBQztZQUVGLGNBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO2dCQUNiLFFBQVEsRUFBRyxVQUFVO2dCQUNyQixLQUFLLEVBQUcsVUFBVTthQUNyQixDQUFDLENBQUM7U0FHTjtRQUNELE9BQU87UUFDUCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLDRCQUE0QixFQUFFLENBQUM7UUFDakUsTUFBTSxXQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9CLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRXZCLENBQUM7Q0FFSjtBQUVELGtCQUFlLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEaWFsb2cgZnJvbSBcIi4vZGlhbG9nXCI7XG5pbXBvcnQgeyBEZW1vVHlwZSB9IGZyb20gXCIuLi8uLi9NeVN0b3JlXCI7XG5pbXBvcnQgS2V5Ym9hcmQgZnJvbSAnLi9rZXlib2FyZCdcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IFZpZGVvIGZyb20gXCIuL3ZpZGVvXCI7XG5pbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuXG5cbmNsYXNzIEV4cGVyaW1lbnQge1xuICAgIHJlYWRvbmx5IGRpYWxvZzogRGlhbG9nO1xuICAgIHJlYWRvbmx5IGtleWJvYXJkOiBLZXlib2FyZDtcbiAgICByZWFkb25seSB2aWRlbzogVmlkZW8gPSB1bmRlZmluZWQ7XG4gICAgXG4gICAgY29uc3RydWN0b3IoZGVtb1R5cGU6IERlbW9UeXBlKSB7XG4gICAgICAgIHRoaXMuZGlhbG9nID0gbmV3IERpYWxvZygpO1xuICAgICAgICB0aGlzLmtleWJvYXJkID0gbmV3IEtleWJvYXJkKCk7XG4gICAgICAgIHRoaXMuZGlhbG9nLmluc2VydEJlZm9yZSh0aGlzLmtleWJvYXJkKTtcbiAgICAgICAgaWYgKCBkZW1vVHlwZSA9PT0gXCJ2aWRlb1wiICkge1xuICAgICAgICAgICAgdGhpcy52aWRlbyA9IG5ldyBWaWRlbygpO1xuICAgICAgICAgICAgR2xvYi5NYWluQ29udGVudC5hcHBlbmQodGhpcy52aWRlbyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaWFsb2cuc2V0T3BhY1RyYW5zRHVyKCk7XG4gICAgICAgIHRoaXMua2V5Ym9hcmQuc2V0T3BhY1RyYW5zRHVyKCk7XG4gICAgICAgIHRoaXMudmlkZW8uc2V0T3BhY1RyYW5zRHVyKCk7XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGludHJvKCkge1xuICAgICAgICBjb25zb2xlLmdyb3VwKGBFeHBlcmltZW50LmludHJvKClgKTtcbiAgICAgICAgYXdhaXQgd2FpdCgwKTtcbiAgICAgICAgdGhpcy5kaWFsb2cuaW50cm8odGhpcy52aWRlbyA/IFwidmlkZW9cIiA6IFwiYW5pbWF0aW9uXCIpO1xuICAgICAgICBjb25zdCBzdWJjb25maWcgPSBHbG9iLkJpZ0NvbmZpZy5nZXRTdWJjb25maWcoKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gWyB3YWl0KDIwMDApLCB0aGlzLmtleWJvYXJkLmluaXRQaWFubyhzdWJjb25maWcudHJ1dGgubWlkaS5hYnNQYXRoKSBdO1xuICAgICAgICBpZiAoIHRoaXMudmlkZW8gKSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMudmlkZW8uaW5pdFZpZGVvKHN1YmNvbmZpZy50cnV0aC5tcDQuYWJzUGF0aCwgc3ViY29uZmlnLnRydXRoLm9uc2V0cy5hYnNQYXRoKSlcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIGlmICggdGhpcy52aWRlbyApIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW8ub24oe1xuICAgICAgICAgICAgICAgIHBsYXlpbmcgOiAoZXY6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdWaWRlbyBwbGF5aW5nLCBhbGxPZmYoKScpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZGVvLmFsbE9mZigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy52aWRlby5kaXNwbGF5KCk7XG4gICAgICAgICAgICBjb25zdCB2aWRlb0ludHJvID0gYXN5bmMgKGV2OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZXYpO1xuICAgICAgICAgICAgICAgIC8vIEdsb2IuRG9jdW1lbnQub2ZmKFwia2V5cHJlc3NcIik7XG4gICAgICAgICAgICAgICAgLy8gR2xvYi5oaWRlKFwiVGl0bGVcIiwgXCJOYXZpZ2F0aW9uQnV0dG9uc1wiKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nLmhpZGUoKSxcbiAgICAgICAgICAgICAgICAgICAgR2xvYi5UaXRsZS5yZW1vdmVDbGFzcygnYWN0aXZlJyksXG4gICAgICAgICAgICAgICAgICAgIEdsb2IuTmF2aWdhdGlvbkJ1dHRvbnMucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy52aWRlby5pbnRybygpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkb25lIHBsYXlpbmcgdmlkZW8nKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEdsb2IuRG9jdW1lbnQub24oe1xuICAgICAgICAgICAgICAgIGtleXByZXNzIDogdmlkZW9JbnRybyxcbiAgICAgICAgICAgICAgICBjbGljayA6IHZpZGVvSW50cm9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMua2V5Ym9hcmQuY2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICBjb25zdCBrYmRUcmFuc0R1ciA9IHRoaXMua2V5Ym9hcmQuZ2V0T3BhY2l0eVRyYW5zaXRpb25EdXJhdGlvbigpO1xuICAgICAgICBhd2FpdCB3YWl0KGtiZFRyYW5zRHVyLCBmYWxzZSk7XG4gICAgICAgIGF3YWl0IHRoaXMua2V5Ym9hcmQuaW50cm8oKTtcbiAgICAgICAgY29uc29sZS5sb2coJ2RvbmUgZnJvbSBFeHBlcmltZW50IScpO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbn1cblxuZXhwb3J0IGRlZmF1bHQgRXhwZXJpbWVudDtcbiJdfQ==