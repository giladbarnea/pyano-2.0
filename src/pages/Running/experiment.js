"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const keyboard_1 = require("./keyboard");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default();
        this.keyboard = new keyboard_1.default();
        this.dialog.insertBefore(this.keyboard);
        if (demoType === "video") {
            this.video = new video_1.default();
            Glob_1.default.MainContent.append(this.video);
        }
        this.dialog.setOpacTransDur();
        this.keyboard.setOpacTransDur();
        this.video.setOpacTransDur();
    }
    async intro() {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        this.dialog.intro(this.video ? "video" : "animation");
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const promises = [util_1.wait(2000), this.keyboard.initPiano(subconfig.truth.midi.absPath)];
        if (this.video) {
            promises.push(this.video.initVideo(subconfig.truth.mp4.absPath, subconfig.truth.onsets.absPath));
        }
        await Promise.all(promises);
        if (this.video) {
            this.video.on({
                playing: (ev) => {
                    console.log('Video playing, allOff()');
                    this.video.allOff();
                }
            });
            await this.video.display();
            const videoIntro = async (ev) => {
                await Promise.all([
                    this.dialog.hide(),
                    Glob_1.default.hide("Title", "NavigationButtons")
                ]);
                await this.video.intro();
                console.log('done playing video');
            };
            Glob_1.default.Document.on({
                keypress: videoIntro,
                click: videoIntro
            });
        }
        return;
        this.keyboard.class('active');
        const kbdTransDur = this.keyboard.getOpacityTransitionDuration();
        await util_1.wait(kbdTransDur, false);
        await this.keyboard.intro();
        console.log('done from Experiment!');
        console.groupEnd();
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIseUNBQWlDO0FBQ2pDLHFDQUFrQztBQUNsQyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBRzlCLE1BQU0sVUFBVTtJQUtaLFlBQVksUUFBa0I7UUFGckIsVUFBSyxHQUFVLFNBQVMsQ0FBQztRQUc5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQU0sRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxrQkFBUSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLElBQUssUUFBUSxLQUFLLE9BQU8sRUFBRztZQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBSyxFQUFFLENBQUM7WUFDekIsY0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sV0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0RCxNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWhELE1BQU0sUUFBUSxHQUFHLENBQUUsV0FBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFFLENBQUM7UUFDdkYsSUFBSyxJQUFJLENBQUMsS0FBSyxFQUFHO1lBQ2QsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtTQUNuRztRQUNELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixJQUFLLElBQUksQ0FBQyxLQUFLLEVBQUc7WUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDVixPQUFPLEVBQUcsQ0FBQyxFQUFTLEVBQUUsRUFBRTtvQkFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO29CQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUN4QixDQUFDO2FBQ0osQ0FBQyxDQUFDO1lBQ0gsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzNCLE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxFQUFpQixFQUFFLEVBQUU7Z0JBSTNDLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztvQkFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtvQkFDbEIsY0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsbUJBQW1CLENBQUM7aUJBR3pDLENBQUMsQ0FBQztnQkFDSCxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUN0QyxDQUFDLENBQUM7WUFFRixjQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztnQkFDYixRQUFRLEVBQUcsVUFBVTtnQkFDckIsS0FBSyxFQUFHLFVBQVU7YUFDckIsQ0FBQyxDQUFDO1NBR047UUFDRCxPQUFPO1FBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxDQUFDO1FBQ2pFLE1BQU0sV0FBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUV2QixDQUFDO0NBRUo7QUFFRCxrQkFBZSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlhbG9nIGZyb20gXCIuL2RpYWxvZ1wiO1xuaW1wb3J0IHsgRGVtb1R5cGUgfSBmcm9tIFwiLi4vLi4vTXlTdG9yZVwiO1xuaW1wb3J0IEtleWJvYXJkIGZyb20gJy4va2V5Ym9hcmQnXG5pbXBvcnQgeyB3YWl0IH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCBWaWRlbyBmcm9tIFwiLi92aWRlb1wiO1xuaW1wb3J0IEdsb2IgZnJvbSBcIi4uLy4uL0dsb2JcIjtcblxuXG5jbGFzcyBFeHBlcmltZW50IHtcbiAgICByZWFkb25seSBkaWFsb2c6IERpYWxvZztcbiAgICByZWFkb25seSBrZXlib2FyZDogS2V5Ym9hcmQ7XG4gICAgcmVhZG9ubHkgdmlkZW86IFZpZGVvID0gdW5kZWZpbmVkO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKGRlbW9UeXBlOiBEZW1vVHlwZSkge1xuICAgICAgICB0aGlzLmRpYWxvZyA9IG5ldyBEaWFsb2coKTtcbiAgICAgICAgdGhpcy5rZXlib2FyZCA9IG5ldyBLZXlib2FyZCgpO1xuICAgICAgICB0aGlzLmRpYWxvZy5pbnNlcnRCZWZvcmUodGhpcy5rZXlib2FyZCk7XG4gICAgICAgIGlmICggZGVtb1R5cGUgPT09IFwidmlkZW9cIiApIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW8gPSBuZXcgVmlkZW8oKTtcbiAgICAgICAgICAgIEdsb2IuTWFpbkNvbnRlbnQuYXBwZW5kKHRoaXMudmlkZW8pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlhbG9nLnNldE9wYWNUcmFuc0R1cigpO1xuICAgICAgICB0aGlzLmtleWJvYXJkLnNldE9wYWNUcmFuc0R1cigpO1xuICAgICAgICB0aGlzLnZpZGVvLnNldE9wYWNUcmFuc0R1cigpO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbnRybygpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgRXhwZXJpbWVudC5pbnRybygpYCk7XG4gICAgICAgIGF3YWl0IHdhaXQoMCk7XG4gICAgICAgIHRoaXMuZGlhbG9nLmludHJvKHRoaXMudmlkZW8gPyBcInZpZGVvXCIgOiBcImFuaW1hdGlvblwiKTtcbiAgICAgICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFsgd2FpdCgyMDAwKSwgdGhpcy5rZXlib2FyZC5pbml0UGlhbm8oc3ViY29uZmlnLnRydXRoLm1pZGkuYWJzUGF0aCkgXTtcbiAgICAgICAgaWYgKCB0aGlzLnZpZGVvICkge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLnZpZGVvLmluaXRWaWRlbyhzdWJjb25maWcudHJ1dGgubXA0LmFic1BhdGgsIHN1YmNvbmZpZy50cnV0aC5vbnNldHMuYWJzUGF0aCkpXG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICBpZiAoIHRoaXMudmlkZW8gKSB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvLm9uKHtcbiAgICAgICAgICAgICAgICBwbGF5aW5nIDogKGV2OiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVmlkZW8gcGxheWluZywgYWxsT2ZmKCknKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWRlby5hbGxPZmYoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudmlkZW8uZGlzcGxheSgpO1xuICAgICAgICAgICAgY29uc3QgdmlkZW9JbnRybyA9IGFzeW5jIChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGV2KTtcbiAgICAgICAgICAgICAgICAvLyBHbG9iLkRvY3VtZW50Lm9mZihcImtleXByZXNzXCIpO1xuICAgICAgICAgICAgICAgIC8vIEdsb2IuaGlkZShcIlRpdGxlXCIsIFwiTmF2aWdhdGlvbkJ1dHRvbnNcIik7XG4gICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZy5oaWRlKCksXG4gICAgICAgICAgICAgICAgICAgIEdsb2IuaGlkZShcIlRpdGxlXCIsXCJOYXZpZ2F0aW9uQnV0dG9uc1wiKVxuICAgICAgICAgICAgICAgICAgICAvLyBHbG9iLlRpdGxlLnJlbW92ZUNsYXNzKCdhY3RpdmUnKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gR2xvYi5OYXZpZ2F0aW9uQnV0dG9ucy5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnZpZGVvLmludHJvKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RvbmUgcGxheWluZyB2aWRlbycpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgR2xvYi5Eb2N1bWVudC5vbih7XG4gICAgICAgICAgICAgICAga2V5cHJlc3MgOiB2aWRlb0ludHJvLFxuICAgICAgICAgICAgICAgIGNsaWNrIDogdmlkZW9JbnRyb1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5rZXlib2FyZC5jbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIGNvbnN0IGtiZFRyYW5zRHVyID0gdGhpcy5rZXlib2FyZC5nZXRPcGFjaXR5VHJhbnNpdGlvbkR1cmF0aW9uKCk7XG4gICAgICAgIGF3YWl0IHdhaXQoa2JkVHJhbnNEdXIsIGZhbHNlKTtcbiAgICAgICAgYXdhaXQgdGhpcy5rZXlib2FyZC5pbnRybygpO1xuICAgICAgICBjb25zb2xlLmxvZygnZG9uZSBmcm9tIEV4cGVyaW1lbnQhJyk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBFeHBlcmltZW50O1xuIl19