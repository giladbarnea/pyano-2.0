"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const keyboard_1 = require("./keyboard");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default();
        this.keyboard = new keyboard_1.default();
        this.dialog
            .insertBefore(this.keyboard)
            .setOpacTransDur();
        this.keyboard.setOpacTransDur();
        if (demoType === "video") {
            this.video = new video_1.default()
                .appendTo(Glob_1.default.MainContent);
            this.video.setOpacTransDur();
        }
    }
    async intro() {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const promises = [
            this.dialog.intro(this.video ? "video" : "animation"),
        ];
        if (this.video) {
            promises.push(this.video.initVideo(subconfig.truth.mp4.absPath, subconfig.truth.onsets.absPath));
        }
        else {
            promises.push(this.keyboard.initPiano(subconfig.truth.midi.absPath));
        }
        await Promise.all(promises);
        if (this.video) {
            this.video.on({
                playing: (ev) => {
                    console.log('Video playing, allOff()');
                    Glob_1.default.Document.allOff();
                    this.video.allOff();
                }
            });
            await this.video.display();
        }
        else {
            await this.keyboard.display();
        }
        Glob_1.default.Document.on({
            click: async (ev) => {
                ev.preventDefault();
                ev.stopPropagation();
                await Promise.all([
                    this.dialog.hide(),
                    Glob_1.default.hide("Title", "NavigationButtons")
                ]);
                if (this.video) {
                    await this.video.intro();
                    console.log('done playing video');
                    this.video.hide();
                }
                else {
                    await this.keyboard.intro();
                    console.log('done playing animation');
                    await util_1.wait(1000);
                    this.keyboard.hide();
                }
            }
        });
        console.groupEnd();
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIseUNBQWlDO0FBQ2pDLHFDQUFrQztBQUNsQyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBRzlCLE1BQU0sVUFBVTtJQU1aLFlBQVksUUFBa0I7UUFIckIsVUFBSyxHQUFVLFNBQVMsQ0FBQztRQUk5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQU0sRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxrQkFBUSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU07YUFDTixZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUMzQixlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ2hDLElBQUssUUFBUSxLQUFLLE9BQU8sRUFBRztZQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBSyxFQUFFO2lCQUNuQixRQUFRLENBQUMsY0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRWhDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDaEM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDUCxPQUFPLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDcEMsTUFBTSxXQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFZCxNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWhELE1BQU0sUUFBUSxHQUFHO1lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7U0FFeEQsQ0FBQztRQUNGLElBQUssSUFBSSxDQUFDLEtBQUssRUFBRztZQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7U0FDbkc7YUFBTTtZQUNILFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtTQUV2RTtRQUNELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixJQUFLLElBQUksQ0FBQyxLQUFLLEVBQUc7WUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDVixPQUFPLEVBQUcsQ0FBQyxFQUFTLEVBQUUsRUFBRTtvQkFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO29CQUN2QyxjQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUN4QixDQUFDO2FBQ0osQ0FBQyxDQUFDO1lBQ0gsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBRzlCO2FBQU07WUFFSCxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDakM7UUFHRCxjQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUNiLEtBQUssRUFBRyxLQUFLLEVBQUUsRUFBaUIsRUFBRSxFQUFFO2dCQUNoQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ3BCLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDckIsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO29CQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO29CQUNsQixjQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxtQkFBbUIsQ0FBQztpQkFDMUMsQ0FBQyxDQUFDO2dCQUNILElBQUssSUFBSSxDQUFDLEtBQUssRUFBRztvQkFDZCxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztvQkFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDckI7cUJBQU07b0JBQ0gsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7b0JBQ3RDLE1BQU0sV0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUN4QjtZQUVMLENBQUM7U0FDSixDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFdkIsQ0FBQztDQUVKO0FBRUQsa0JBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpYWxvZyBmcm9tIFwiLi9kaWFsb2dcIjtcbmltcG9ydCB7IERlbW9UeXBlIH0gZnJvbSBcIi4uLy4uL015U3RvcmVcIjtcbmltcG9ydCBLZXlib2FyZCBmcm9tICcuL2tleWJvYXJkJ1xuaW1wb3J0IHsgd2FpdCB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgVmlkZW8gZnJvbSBcIi4vdmlkZW9cIjtcbmltcG9ydCBHbG9iIGZyb20gXCIuLi8uLi9HbG9iXCI7XG5cblxuY2xhc3MgRXhwZXJpbWVudCB7XG4gICAgcmVhZG9ubHkgZGlhbG9nOiBEaWFsb2c7XG4gICAgcmVhZG9ubHkga2V5Ym9hcmQ6IEtleWJvYXJkO1xuICAgIHJlYWRvbmx5IHZpZGVvOiBWaWRlbyA9IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlbW9UeXBlOiBEZW1vVHlwZTtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihkZW1vVHlwZTogRGVtb1R5cGUpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cgPSBuZXcgRGlhbG9nKCk7XG4gICAgICAgIHRoaXMua2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmQoKTtcbiAgICAgICAgdGhpcy5kaWFsb2dcbiAgICAgICAgICAgIC5pbnNlcnRCZWZvcmUodGhpcy5rZXlib2FyZClcbiAgICAgICAgICAgIC5zZXRPcGFjVHJhbnNEdXIoKTtcbiAgICAgICAgdGhpcy5rZXlib2FyZC5zZXRPcGFjVHJhbnNEdXIoKTtcbiAgICAgICAgaWYgKCBkZW1vVHlwZSA9PT0gXCJ2aWRlb1wiICkge1xuICAgICAgICAgICAgdGhpcy52aWRlbyA9IG5ldyBWaWRlbygpXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKEdsb2IuTWFpbkNvbnRlbnQpO1xuICAgICAgICAgICAgLy8gR2xvYi5NYWluQ29udGVudC5hcHBlbmQodGhpcy52aWRlbyk7XG4gICAgICAgICAgICB0aGlzLnZpZGVvLnNldE9wYWNUcmFuc0R1cigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGludHJvKCkge1xuICAgICAgICBjb25zb2xlLmdyb3VwKGBFeHBlcmltZW50LmludHJvKClgKTtcbiAgICAgICAgYXdhaXQgd2FpdCgwKTtcbiAgICAgICAgLy8gdGhpcy5kaWFsb2cuaW50cm8odGhpcy52aWRlbyA/IFwidmlkZW9cIiA6IFwiYW5pbWF0aW9uXCIpO1xuICAgICAgICBjb25zdCBzdWJjb25maWcgPSBHbG9iLkJpZ0NvbmZpZy5nZXRTdWJjb25maWcoKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gW1xuICAgICAgICAgICAgdGhpcy5kaWFsb2cuaW50cm8odGhpcy52aWRlbyA/IFwidmlkZW9cIiA6IFwiYW5pbWF0aW9uXCIpLFxuICAgICAgICBcbiAgICAgICAgXTtcbiAgICAgICAgaWYgKCB0aGlzLnZpZGVvICkge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLnZpZGVvLmluaXRWaWRlbyhzdWJjb25maWcudHJ1dGgubXA0LmFic1BhdGgsIHN1YmNvbmZpZy50cnV0aC5vbnNldHMuYWJzUGF0aCkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMua2V5Ym9hcmQuaW5pdFBpYW5vKHN1YmNvbmZpZy50cnV0aC5taWRpLmFic1BhdGgpKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICBpZiAoIHRoaXMudmlkZW8gKSB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvLm9uKHtcbiAgICAgICAgICAgICAgICBwbGF5aW5nIDogKGV2OiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVmlkZW8gcGxheWluZywgYWxsT2ZmKCknKTtcbiAgICAgICAgICAgICAgICAgICAgR2xvYi5Eb2N1bWVudC5hbGxPZmYoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWRlby5hbGxPZmYoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudmlkZW8uZGlzcGxheSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYXdhaXQgdGhpcy5rZXlib2FyZC5kaXNwbGF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBHbG9iLkRvY3VtZW50Lm9uKHtcbiAgICAgICAgICAgIGNsaWNrIDogYXN5bmMgKGV2OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nLmhpZGUoKSxcbiAgICAgICAgICAgICAgICAgICAgR2xvYi5oaWRlKFwiVGl0bGVcIiwgXCJOYXZpZ2F0aW9uQnV0dG9uc1wiKVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIGlmICggdGhpcy52aWRlbyApIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy52aWRlby5pbnRybygpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZG9uZSBwbGF5aW5nIHZpZGVvJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlkZW8uaGlkZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMua2V5Ym9hcmQuaW50cm8oKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RvbmUgcGxheWluZyBhbmltYXRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgd2FpdCgxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5rZXlib2FyZC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cGVyaW1lbnQ7XG4iXX0=