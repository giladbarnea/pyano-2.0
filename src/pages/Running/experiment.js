"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const keyboard_1 = require("./keyboard");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default();
        this.keyboard = new keyboard_1.default();
        this.dialog.insertBefore(this.keyboard);
        if (demoType === "video") {
            this.video = new video_1.default();
            Glob_1.default.MainContent.append(this.video);
        }
    }
    async intro() {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        this.dialog.intro(this.video ? "video" : "animation");
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const promises = [util_1.wait(2000), this.keyboard.initPiano(subconfig.truth.midi.absPath)];
        if (this.video) {
            promises.push(this.video.initVideo(subconfig.truth.mp4.absPath, subconfig.truth.onsets.absPath));
        }
        await Promise.all(promises);
        if (this.video) {
            this.video.class('active');
            const vidTransDur = this.video.getOpacityTransitionDuration();
            await util_1.wait(vidTransDur, false);
            await this.video.intro();
            console.log('done playing video');
        }
        return;
        this.keyboard.class('active');
        const kbdTransDur = this.keyboard.getOpacityTransitionDuration();
        await util_1.wait(kbdTransDur, false);
        await this.keyboard.intro();
        console.log('done from Experiment!');
        console.groupEnd();
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIseUNBQWlDO0FBQ2pDLHFDQUFrQztBQUNsQyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBRzlCLE1BQU0sVUFBVTtJQUtaLFlBQVksUUFBa0I7UUFGckIsVUFBSyxHQUFVLFNBQVMsQ0FBQztRQUc5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQU0sRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxrQkFBUSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLElBQUssUUFBUSxLQUFLLE9BQU8sRUFBRztZQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBSyxFQUFFLENBQUM7WUFDekIsY0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sV0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0RCxNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWhELE1BQU0sUUFBUSxHQUFHLENBQUUsV0FBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFFLENBQUM7UUFDdkYsSUFBSyxJQUFJLENBQUMsS0FBSyxFQUFHO1lBQ2QsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtTQUNuRztRQUNELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixJQUFLLElBQUksQ0FBQyxLQUFLLEVBQUc7WUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLDRCQUE0QixFQUFFLENBQUM7WUFDOUQsTUFBTSxXQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQy9CLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7U0FDckM7UUFDRCxPQUFPO1FBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxDQUFDO1FBQ2pFLE1BQU0sV0FBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUV2QixDQUFDO0NBRUo7QUFFRCxrQkFBZSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlhbG9nIGZyb20gXCIuL2RpYWxvZ1wiO1xuaW1wb3J0IHsgRGVtb1R5cGUgfSBmcm9tIFwiLi4vLi4vTXlTdG9yZVwiO1xuaW1wb3J0IEtleWJvYXJkIGZyb20gJy4va2V5Ym9hcmQnXG5pbXBvcnQgeyB3YWl0IH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCBWaWRlbyBmcm9tIFwiLi92aWRlb1wiO1xuaW1wb3J0IEdsb2IgZnJvbSBcIi4uLy4uL0dsb2JcIjtcblxuXG5jbGFzcyBFeHBlcmltZW50IHtcbiAgICByZWFkb25seSBkaWFsb2c6IERpYWxvZztcbiAgICByZWFkb25seSBrZXlib2FyZDogS2V5Ym9hcmQ7XG4gICAgcmVhZG9ubHkgdmlkZW86IFZpZGVvID0gdW5kZWZpbmVkO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKGRlbW9UeXBlOiBEZW1vVHlwZSkge1xuICAgICAgICB0aGlzLmRpYWxvZyA9IG5ldyBEaWFsb2coKTtcbiAgICAgICAgdGhpcy5rZXlib2FyZCA9IG5ldyBLZXlib2FyZCgpO1xuICAgICAgICB0aGlzLmRpYWxvZy5pbnNlcnRCZWZvcmUodGhpcy5rZXlib2FyZCk7XG4gICAgICAgIGlmICggZGVtb1R5cGUgPT09IFwidmlkZW9cIiApIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW8gPSBuZXcgVmlkZW8oKTtcbiAgICAgICAgICAgIEdsb2IuTWFpbkNvbnRlbnQuYXBwZW5kKHRoaXMudmlkZW8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGludHJvKCkge1xuICAgICAgICBjb25zb2xlLmdyb3VwKGBFeHBlcmltZW50LmludHJvKClgKTtcbiAgICAgICAgYXdhaXQgd2FpdCgwKTtcbiAgICAgICAgdGhpcy5kaWFsb2cuaW50cm8odGhpcy52aWRlbyA/IFwidmlkZW9cIiA6IFwiYW5pbWF0aW9uXCIpO1xuICAgICAgICBjb25zdCBzdWJjb25maWcgPSBHbG9iLkJpZ0NvbmZpZy5nZXRTdWJjb25maWcoKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gWyB3YWl0KDIwMDApLCB0aGlzLmtleWJvYXJkLmluaXRQaWFubyhzdWJjb25maWcudHJ1dGgubWlkaS5hYnNQYXRoKSBdO1xuICAgICAgICBpZiAoIHRoaXMudmlkZW8gKSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMudmlkZW8uaW5pdFZpZGVvKHN1YmNvbmZpZy50cnV0aC5tcDQuYWJzUGF0aCwgc3ViY29uZmlnLnRydXRoLm9uc2V0cy5hYnNQYXRoKSlcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIGlmICggdGhpcy52aWRlbyApIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW8uY2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgY29uc3QgdmlkVHJhbnNEdXIgPSB0aGlzLnZpZGVvLmdldE9wYWNpdHlUcmFuc2l0aW9uRHVyYXRpb24oKTtcbiAgICAgICAgICAgIGF3YWl0IHdhaXQodmlkVHJhbnNEdXIsIGZhbHNlKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudmlkZW8uaW50cm8oKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkb25lIHBsYXlpbmcgdmlkZW8nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMua2V5Ym9hcmQuY2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICBjb25zdCBrYmRUcmFuc0R1ciA9IHRoaXMua2V5Ym9hcmQuZ2V0T3BhY2l0eVRyYW5zaXRpb25EdXJhdGlvbigpO1xuICAgICAgICBhd2FpdCB3YWl0KGtiZFRyYW5zRHVyLCBmYWxzZSk7XG4gICAgICAgIGF3YWl0IHRoaXMua2V5Ym9hcmQuaW50cm8oKTtcbiAgICAgICAgY29uc29sZS5sb2coJ2RvbmUgZnJvbSBFeHBlcmltZW50IScpO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbn1cblxuZXhwb3J0IGRlZmF1bHQgRXhwZXJpbWVudDtcbiJdfQ==