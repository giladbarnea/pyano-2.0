"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const keyboard_1 = require("./keyboard");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default();
        this.keyboard = new keyboard_1.default();
        this.dialog.insertBefore(this.keyboard);
        if (demoType === "video") {
            this.video = new video_1.default();
            Glob_1.default.MainContent.append(this.video);
        }
    }
    async intro() {
        await util_1.wait(0);
        this.dialog.intro(this.video ? "video" : "animation");
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const promises = [util_1.wait(2000), this.keyboard.initPiano(subconfig.truth.midi.absPath)];
        if (this.video) {
            promises.push(this.video.initVideo(subconfig.truth.mp4.absPath, subconfig.truth.onsets.absPath));
        }
        await Promise.all(promises);
        if (this.video) {
            this.video.class('active');
            const vidTransDur = this.video.getOpacityTransitionDuration();
            await util_1.wait(vidTransDur, false);
            await this.video.intro();
            console.log('done playing video');
        }
        this.keyboard.class('active');
        const kbdTransDur = this.keyboard.getOpacityTransitionDuration();
        await util_1.wait(kbdTransDur, false);
        await this.keyboard.intro();
        console.log('done from Experiment!');
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIseUNBQWlDO0FBQ2pDLHFDQUFrQztBQUNsQyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBRTlCLE1BQU0sVUFBVTtJQUtaLFlBQVksUUFBa0I7UUFGckIsVUFBSyxHQUFVLFNBQVMsQ0FBQztRQUc5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQU0sRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxrQkFBUSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLElBQUssUUFBUSxLQUFLLE9BQU8sRUFBRztZQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBSyxFQUFFLENBQUM7WUFDekIsY0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1AsTUFBTSxXQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFaEQsTUFBTSxRQUFRLEdBQUcsQ0FBRSxXQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUUsQ0FBQztRQUN2RixJQUFLLElBQUksQ0FBQyxLQUFLLEVBQUc7WUFDZCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1NBQ25HO1FBQ0QsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVCLElBQUssSUFBSSxDQUFDLEtBQUssRUFBRztZQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztZQUM5RCxNQUFNLFdBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDL0IsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUNyQztRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztRQUNqRSxNQUFNLFdBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0IsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUd6QyxDQUFDO0NBRUo7QUFFRCxrQkFBZSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlhbG9nIGZyb20gXCIuL2RpYWxvZ1wiO1xuaW1wb3J0IHsgRGVtb1R5cGUgfSBmcm9tIFwiLi4vLi4vTXlTdG9yZVwiO1xuaW1wb3J0IEtleWJvYXJkIGZyb20gJy4va2V5Ym9hcmQnXG5pbXBvcnQgeyB3YWl0IH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCBWaWRlbyBmcm9tIFwiLi92aWRlb1wiO1xuaW1wb3J0IEdsb2IgZnJvbSBcIi4uLy4uL0dsb2JcIjtcblxuY2xhc3MgRXhwZXJpbWVudCB7XG4gICAgcmVhZG9ubHkgZGlhbG9nOiBEaWFsb2c7XG4gICAgcmVhZG9ubHkga2V5Ym9hcmQ6IEtleWJvYXJkO1xuICAgIHJlYWRvbmx5IHZpZGVvOiBWaWRlbyA9IHVuZGVmaW5lZDtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihkZW1vVHlwZTogRGVtb1R5cGUpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cgPSBuZXcgRGlhbG9nKCk7XG4gICAgICAgIHRoaXMua2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmQoKTtcbiAgICAgICAgdGhpcy5kaWFsb2cuaW5zZXJ0QmVmb3JlKHRoaXMua2V5Ym9hcmQpO1xuICAgICAgICBpZiAoIGRlbW9UeXBlID09PSBcInZpZGVvXCIgKSB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvID0gbmV3IFZpZGVvKCk7XG4gICAgICAgICAgICBHbG9iLk1haW5Db250ZW50LmFwcGVuZCh0aGlzLnZpZGVvKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbnRybygpIHtcbiAgICAgICAgYXdhaXQgd2FpdCgwKTtcbiAgICAgICAgdGhpcy5kaWFsb2cuaW50cm8odGhpcy52aWRlbyA/IFwidmlkZW9cIiA6IFwiYW5pbWF0aW9uXCIpO1xuICAgICAgICBjb25zdCBzdWJjb25maWcgPSBHbG9iLkJpZ0NvbmZpZy5nZXRTdWJjb25maWcoKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gWyB3YWl0KDIwMDApLCB0aGlzLmtleWJvYXJkLmluaXRQaWFubyhzdWJjb25maWcudHJ1dGgubWlkaS5hYnNQYXRoKSBdO1xuICAgICAgICBpZiAoIHRoaXMudmlkZW8gKSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMudmlkZW8uaW5pdFZpZGVvKHN1YmNvbmZpZy50cnV0aC5tcDQuYWJzUGF0aCwgc3ViY29uZmlnLnRydXRoLm9uc2V0cy5hYnNQYXRoKSlcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIGlmICggdGhpcy52aWRlbyApIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW8uY2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgY29uc3QgdmlkVHJhbnNEdXIgPSB0aGlzLnZpZGVvLmdldE9wYWNpdHlUcmFuc2l0aW9uRHVyYXRpb24oKTtcbiAgICAgICAgICAgIGF3YWl0IHdhaXQodmlkVHJhbnNEdXIsIGZhbHNlKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudmlkZW8uaW50cm8oKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkb25lIHBsYXlpbmcgdmlkZW8nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmtleWJvYXJkLmNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgY29uc3Qga2JkVHJhbnNEdXIgPSB0aGlzLmtleWJvYXJkLmdldE9wYWNpdHlUcmFuc2l0aW9uRHVyYXRpb24oKTtcbiAgICAgICAgYXdhaXQgd2FpdChrYmRUcmFuc0R1ciwgZmFsc2UpO1xuICAgICAgICBhd2FpdCB0aGlzLmtleWJvYXJkLmludHJvKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdkb25lIGZyb20gRXhwZXJpbWVudCEnKTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbn1cblxuZXhwb3J0IGRlZmF1bHQgRXhwZXJpbWVudDtcbiJdfQ==