"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const animation_1 = require("./animation");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default();
        this.animation = new animation_1.default();
        this.dialog
            .insertBefore(this.animation)
            .setOpacTransDur();
        this.animation.setOpacTransDur();
        if (demoType === "video") {
            this.video = new video_1.default()
                .appendTo(Glob_1.default.MainContent);
            this.video.setOpacTransDur();
        }
        this.demoType = demoType;
    }
    async intro(readonlyTruth) {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        const promises = [
            this.dialog.intro(this.demoType),
        ];
        if (this.video) {
            promises.push(this.video.init(readonlyTruth.mp4.absPath, readonlyTruth.onsets.absPath));
        }
        else {
            promises.push(this.animation.init(readonlyTruth.midi.absPath));
        }
        await Promise.all(promises);
        const demo = this[this.demoType];
        await demo.display();
        Glob_1.default.Document.on({
            click: async (ev) => {
                ev.preventDefault();
                ev.stopPropagation();
                await Promise.all([
                    this.dialog.hide(),
                    Glob_1.default.hide("Title", "NavigationButtons")
                ]);
                Glob_1.default.Document.allOff();
                await demo.intro();
                console.log(`done playing ${this.demoType}`);
                await util_1.wait(1000);
                await demo.hide();
            }
        });
        console.groupEnd();
    }
    async levelIntro(levelCollection) {
        Glob_1.default.Title.levelh3.text(`Level 1/${levelCollection.length}`);
        Glob_1.default.Title.trialh3.text(`Trial 1/${levelCollection.current.trials}`);
        const promises = [
            Glob_1.default.display("Title", "NavigationButtons"),
            this.dialog.levelIntro(levelCollection)
        ];
        await Promise.all(promises);
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIsMkNBQW1DO0FBQ25DLHFDQUFrQztBQUNsQyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBSzlCLE1BQU0sVUFBVTtJQU1aLFlBQVksUUFBa0I7UUFIckIsVUFBSyxHQUFVLFNBQVMsQ0FBQztRQUk5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQU0sRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxtQkFBUyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU07YUFDTixZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQzthQUM1QixlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ2pDLElBQUssUUFBUSxLQUFLLE9BQU8sRUFBRztZQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBSyxFQUFFO2lCQUNuQixRQUFRLENBQUMsY0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDaEM7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxhQUE0QjtRQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDcEMsTUFBTSxXQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFZCxNQUFNLFFBQVEsR0FBRztZQUNiLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7U0FFbkMsQ0FBQztRQUNGLElBQUssSUFBSSxDQUFDLEtBQUssRUFBRztZQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1NBQzFGO2FBQU07WUFDSCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtTQUVqRTtRQUNELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU1QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXJCLGNBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQ2IsS0FBSyxFQUFHLEtBQUssRUFBRSxFQUFpQixFQUFFLEVBQUU7Z0JBQ2hDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDcEIsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUNyQixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7b0JBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7b0JBQ2xCLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLG1CQUFtQixDQUFDO2lCQUUxQyxDQUFDLENBQUM7Z0JBRUgsY0FBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDdkIsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUM3QyxNQUFNLFdBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDakIsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFHdEIsQ0FBQztTQUNKLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUV2QixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxlQUFnQztRQUM3QyxjQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUM3RCxjQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDckUsTUFBTSxRQUFRLEdBQUc7WUFDYixjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxtQkFBbUIsQ0FBQztZQUMxQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUM7U0FDMUMsQ0FBQztRQUNGLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDO0NBRUo7QUFFRCxrQkFBZSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlhbG9nIGZyb20gXCIuL2RpYWxvZ1wiO1xuaW1wb3J0IHsgRGVtb1R5cGUgfSBmcm9tIFwiLi4vLi4vTXlTdG9yZVwiO1xuaW1wb3J0IEFuaW1hdGlvbiBmcm9tICcuL2FuaW1hdGlvbidcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IFZpZGVvIGZyb20gXCIuL3ZpZGVvXCI7XG5pbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0IHsgUmVhZG9ubHlUcnV0aCB9IGZyb20gXCIuLi8uLi9UcnV0aFwiO1xuaW1wb3J0IHsgTGV2ZWxDb2xsZWN0aW9uIH0gZnJvbSBcIi4uLy4uL0xldmVsXCI7XG5cblxuY2xhc3MgRXhwZXJpbWVudCB7XG4gICAgcmVhZG9ubHkgZGlhbG9nOiBEaWFsb2c7XG4gICAgcmVhZG9ubHkgYW5pbWF0aW9uOiBBbmltYXRpb247XG4gICAgcmVhZG9ubHkgdmlkZW86IFZpZGVvID0gdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVtb1R5cGU6IERlbW9UeXBlO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKGRlbW9UeXBlOiBEZW1vVHlwZSkge1xuICAgICAgICB0aGlzLmRpYWxvZyA9IG5ldyBEaWFsb2coKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uKCk7XG4gICAgICAgIHRoaXMuZGlhbG9nXG4gICAgICAgICAgICAuaW5zZXJ0QmVmb3JlKHRoaXMuYW5pbWF0aW9uKVxuICAgICAgICAgICAgLnNldE9wYWNUcmFuc0R1cigpO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbi5zZXRPcGFjVHJhbnNEdXIoKTtcbiAgICAgICAgaWYgKCBkZW1vVHlwZSA9PT0gXCJ2aWRlb1wiICkge1xuICAgICAgICAgICAgdGhpcy52aWRlbyA9IG5ldyBWaWRlbygpXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKEdsb2IuTWFpbkNvbnRlbnQpO1xuICAgICAgICAgICAgdGhpcy52aWRlby5zZXRPcGFjVHJhbnNEdXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbW9UeXBlID0gZGVtb1R5cGU7XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGludHJvKHJlYWRvbmx5VHJ1dGg6IFJlYWRvbmx5VHJ1dGgpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgRXhwZXJpbWVudC5pbnRybygpYCk7XG4gICAgICAgIGF3YWl0IHdhaXQoMCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nLmludHJvKHRoaXMuZGVtb1R5cGUpLFxuICAgICAgICBcbiAgICAgICAgXTtcbiAgICAgICAgaWYgKCB0aGlzLnZpZGVvICkge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLnZpZGVvLmluaXQocmVhZG9ubHlUcnV0aC5tcDQuYWJzUGF0aCwgcmVhZG9ubHlUcnV0aC5vbnNldHMuYWJzUGF0aCkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMuYW5pbWF0aW9uLmluaXQocmVhZG9ubHlUcnV0aC5taWRpLmFic1BhdGgpKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICAvLy8gdmlkZW8gLyBhbmltYXRpb25cbiAgICAgICAgY29uc3QgZGVtbyA9IHRoaXNbdGhpcy5kZW1vVHlwZV07XG4gICAgICAgIGF3YWl0IGRlbW8uZGlzcGxheSgpO1xuICAgICAgICBcbiAgICAgICAgR2xvYi5Eb2N1bWVudC5vbih7XG4gICAgICAgICAgICBjbGljayA6IGFzeW5jIChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZy5oaWRlKCksXG4gICAgICAgICAgICAgICAgICAgIEdsb2IuaGlkZShcIlRpdGxlXCIsIFwiTmF2aWdhdGlvbkJ1dHRvbnNcIilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBHbG9iLkRvY3VtZW50LmFsbE9mZigpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGRlbW8uaW50cm8oKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgZG9uZSBwbGF5aW5nICR7dGhpcy5kZW1vVHlwZX1gKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB3YWl0KDEwMDApO1xuICAgICAgICAgICAgICAgIGF3YWl0IGRlbW8uaGlkZSgpO1xuICAgICAgICAgICAgICAgIC8vIGF3YWl0IEdsb2IuZGlzcGxheShcIlRpdGxlXCIsIFwiTmF2aWdhdGlvbkJ1dHRvbnNcIilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGxldmVsSW50cm8obGV2ZWxDb2xsZWN0aW9uOiBMZXZlbENvbGxlY3Rpb24pIHtcbiAgICAgICAgR2xvYi5UaXRsZS5sZXZlbGgzLnRleHQoYExldmVsIDEvJHtsZXZlbENvbGxlY3Rpb24ubGVuZ3RofWApO1xuICAgICAgICBHbG9iLlRpdGxlLnRyaWFsaDMudGV4dChgVHJpYWwgMS8ke2xldmVsQ29sbGVjdGlvbi5jdXJyZW50LnRyaWFsc31gKTtcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXG4gICAgICAgICAgICBHbG9iLmRpc3BsYXkoXCJUaXRsZVwiLCBcIk5hdmlnYXRpb25CdXR0b25zXCIpLFxuICAgICAgICAgICAgdGhpcy5kaWFsb2cubGV2ZWxJbnRybyhsZXZlbENvbGxlY3Rpb24pXG4gICAgICAgIF07XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICB9XG4gICAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cGVyaW1lbnQ7XG4iXX0=