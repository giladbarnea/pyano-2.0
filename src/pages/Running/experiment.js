"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const animation_1 = require("./animation");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
const index_1 = require("./index");
const bhe_1 = require("../../bhe");
const MidiKeyboard_1 = require("../../Piano/MidiKeyboard");
const MyAlert_1 = require("../../MyAlert");
const MyPyShell_1 = require("../../MyPyShell");
const MyFs_1 = require("../../MyFs");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default(demoType);
        this.animation = new animation_1.default();
        this.dialog
            .insertBefore(this.animation)
            .setOpacTransDur();
        this.animation.setOpacTransDur();
        this.video = new video_1.default()
            .appendTo(Glob_1.default.MainContent);
        this.video.setOpacTransDur();
        this.keyboard = new MidiKeyboard_1.MidiKeyboard();
        this.greenButton = bhe_1.button({ id: 'green_button', cls: 'inactive green player', html: 'Done' });
        Glob_1.default.MainContent.append(this.greenButton);
        this.demoType = demoType;
    }
    async init(subconfig) {
        const readonlyTruth = subconfig.truth.toReadOnly();
        await Promise.all([
            this.video.init(readonlyTruth),
            this.animation.init(readonlyTruth.midi.absPath)
        ]);
        const outPathAbs = subconfig.experimentOutDirAbs();
        const existed = MyFs_1.default.createIfNotExists(outPathAbs);
        if (existed) {
            const stats = fs.statSync(outPathAbs);
            let datestr = stats.ctime.human();
            fs.renameSync(outPathAbs, `${outPathAbs}__${datestr}`);
            fs.mkdirSync(outPathAbs);
        }
        readonlyTruth.name;
    }
    async callOnClick(fn, demo) {
        const done = new Promise(resolve => Glob_1.default.Document.on({
            click: async (ev) => {
                ev.preventDefault();
                ev.stopPropagation();
                await Promise.all([
                    this.dialog.hide(),
                    Glob_1.default.hide("Title", "NavigationButtons")
                ]);
                Glob_1.default.Document.off("click");
                await index_1.tryCatch(() => fn(), `trying to run ${demo instanceof animation_1.default ? 'animation' : 'video'}`);
                await util_1.wait(1000);
                await demo.hide();
                resolve();
            }
        }));
        await demo.display();
        await done;
        await Glob_1.default.display("Title", "NavigationButtons");
        return;
    }
    async intro() {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        await this.dialog.intro();
        let demo;
        if (Glob_1.default.BigConfig.dev.simulate_video_mode('Experiment.intro()')) {
            demo = this.video;
        }
        else if (Glob_1.default.BigConfig.dev.simulate_animation_mode('Experiment.intro()')) {
            demo = this.animation;
        }
        else {
            demo = this[this.demoType];
        }
        return await this.callOnClick(async () => {
            await demo.intro();
            console.groupEnd();
        }, demo);
    }
    async levelIntro(levelCollection) {
        console.group(`Experiment.levelIntro()`);
        let playVideo;
        if ((this.demoType === "animation"
            && !Glob_1.default.BigConfig.dev.simulate_video_mode('Experiment.levelIntro()'))
            || Glob_1.default.BigConfig.dev.simulate_animation_mode('Experiment.levelIntro()')) {
            playVideo = false;
        }
        else {
            if (levelCollection.previous) {
                playVideo = levelCollection.previous.notes !== levelCollection.current.notes;
            }
            else {
                playVideo = false;
            }
        }
        console.log({ playVideo });
        let rate = undefined;
        let temp;
        temp = Glob_1.default.BigConfig.dev.force_playback_rate('Experiment.levelIntro()');
        if (temp) {
            rate = temp;
        }
        else {
            if (levelCollection.current.rhythm) {
                rate = levelCollection.current.tempo / 100;
            }
            else {
                for (let i = levelCollection.current.index + 1; i < levelCollection.length; i++) {
                    const level = levelCollection.get(i);
                    if (level.notes === levelCollection.current.notes && level.rhythm) {
                        rate = level.tempo / 100;
                        console.warn(`level #${levelCollection.current.index} no tempo, took rate (${rate}) from level #${i}`);
                        break;
                    }
                }
                if (rate === undefined) {
                    rate = 1;
                }
            }
        }
        console.log({ rate });
        let notes;
        temp = Glob_1.default.BigConfig.dev.force_notes_number('Experiment.levelIntro()');
        if (temp) {
            notes = temp;
        }
        else {
            notes = levelCollection.current.notes;
        }
        console.log({ notes });
        if (playVideo) {
            await this.dialog.levelIntro(levelCollection.current, "video", rate);
            await this.callOnClick(async () => {
                await this.video.levelIntro(notes, rate);
            }, this.video);
        }
        await this.dialog.levelIntro(levelCollection.current, "animation", rate);
        await this.callOnClick(async () => {
            await this.animation.levelIntro(notes, rate);
        }, this.animation);
        console.groupEnd();
    }
    async record(levelCollection) {
        Glob_1.default.Title.levelh3.text(`Level 1/${levelCollection.length}`);
        Glob_1.default.Title.trialh3.text(`Trial 1/${levelCollection.current.trials}`);
        this.greenButton
            .replaceClass('inactive', 'active')
            .click(() => this.checkDoneTrial());
        await this.dialog.record(levelCollection.current);
    }
    async checkDoneTrial() {
        if (!util_1.bool(this.keyboard.notes)) {
            return MyAlert_1.default.small._info({ title: 'Please play something', timer: null });
        }
        console.log('this.keyboard.notes:', this.keyboard.notes);
        console.time(`PY_checkDoneTrial`);
        const PY_checkDoneTrial = new MyPyShell_1.MyPyShell('-m txt.check_done_trial', {
            mode: "json",
            args: this.keyboard.notes.map(JSON.stringify)
        });
        const response = await PY_checkDoneTrial.runAsync();
        console.log({ response });
        console.timeEnd(`PY_checkDoneTrial`);
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIsMkNBQW1DO0FBQ25DLHFDQUF3QztBQUN4QyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBRzlCLG1DQUFtQztBQUNuQyxtQ0FBMkM7QUFDM0MsMkRBQXdEO0FBQ3hELDJDQUFvQztBQUNwQywrQ0FBb0Q7QUFDcEQscUNBQTZCO0FBRTdCLE1BQU0sVUFBVTtJQVNaLFlBQVksUUFBa0I7UUFOckIsVUFBSyxHQUFVLFNBQVMsQ0FBQztRQU85QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksbUJBQVMsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNO2FBQ04sWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7YUFDNUIsZUFBZSxFQUFFLENBQUM7UUFFdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUVqQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBSyxFQUFFO2FBQ25CLFFBQVEsQ0FBQyxjQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUU3QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksMkJBQVksRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxXQUFXLEdBQUcsWUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFHLGNBQWMsRUFBRSxHQUFHLEVBQUcsdUJBQXVCLEVBQUUsSUFBSSxFQUFHLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDakcsY0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBRTdCLENBQUM7SUFHRCxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQW9CO1FBQzNCLE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbkQsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1lBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ2xELENBQUMsQ0FBQztRQUNILE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQ25ELE1BQU0sT0FBTyxHQUFHLGNBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuRCxJQUFLLE9BQU8sRUFBRztZQUNYLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdEMsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNsQyxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxHQUFHLFVBQVUsS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZELEVBQUUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7U0FDM0I7UUFFRCxhQUFhLENBQUMsSUFBSSxDQUFBO0lBQ3RCLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQWlCLEVBQUUsSUFBdUI7UUFDeEQsTUFBTSxJQUFJLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FDL0IsY0FBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDYixLQUFLLEVBQUcsS0FBSyxFQUFFLEVBQWlCLEVBQUUsRUFBRTtnQkFDaEMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUNwQixFQUFFLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3JCLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztvQkFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtvQkFDbEIsY0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsbUJBQW1CLENBQUM7aUJBRTFDLENBQUMsQ0FBQztnQkFFSCxjQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDM0IsTUFBTSxnQkFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLGlCQUFpQixJQUFJLFlBQVksbUJBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUNqRyxNQUFNLFdBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDakIsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xCLE9BQU8sRUFBRSxDQUFDO1lBRWQsQ0FBQztTQUNKLENBQUMsQ0FBQyxDQUFDO1FBQ1IsTUFBTSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDckIsTUFBTSxJQUFJLENBQUM7UUFDWCxNQUFNLGNBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDakQsT0FBTTtJQUVWLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUNwQyxNQUFNLFdBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVkLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUcxQixJQUFJLElBQUksQ0FBQztRQUNULElBQUssY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsb0JBQW9CLENBQUMsRUFBRztZQUNoRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNyQjthQUFNLElBQUssY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsb0JBQW9CLENBQUMsRUFBRztZQUMzRSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUN6QjthQUFNO1lBQ0gsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDOUI7UUFFRCxPQUFPLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNyQyxNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNuQixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRWIsQ0FBQztJQUdELEtBQUssQ0FBQyxVQUFVLENBQUMsZUFBZ0M7UUFDN0MsT0FBTyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBRXpDLElBQUksU0FBUyxDQUFDO1FBQ2QsSUFBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssV0FBVztlQUM1QixDQUFDLGNBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLENBQUM7ZUFDbkUsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMseUJBQXlCLENBQUMsRUFBRztZQUMzRSxTQUFTLEdBQUcsS0FBSyxDQUFDO1NBQ3JCO2FBQU07WUFDSCxJQUFLLGVBQWUsQ0FBQyxRQUFRLEVBQUc7Z0JBQzVCLFNBQVMsR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDLEtBQUssS0FBSyxlQUFlLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQzthQUNoRjtpQkFBTTtnQkFDSCxTQUFTLEdBQUcsS0FBSyxDQUFDO2FBQ3JCO1NBRUo7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUMzQixJQUFJLElBQUksR0FBVyxTQUFTLENBQUM7UUFDN0IsSUFBSSxJQUFJLENBQUM7UUFDVCxJQUFJLEdBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUN6RSxJQUFLLElBQUksRUFBRztZQUNSLElBQUksR0FBRyxJQUFJLENBQUM7U0FDZjthQUFNO1lBQ0gsSUFBSyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRztnQkFDbEMsSUFBSSxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQzthQUM5QztpQkFBTTtnQkFDSCxLQUFNLElBQUksQ0FBQyxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRztvQkFDL0UsTUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDckMsSUFBSyxLQUFLLENBQUMsS0FBSyxLQUFLLGVBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUc7d0JBQ2pFLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQzt3QkFDekIsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLGVBQWUsQ0FBQyxPQUFPLENBQUMsS0FBSyx5QkFBeUIsSUFBSSxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFDdkcsTUFBSztxQkFDUjtpQkFDSjtnQkFDRCxJQUFLLElBQUksS0FBSyxTQUFTLEVBQUc7b0JBQ3RCLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1o7YUFDSjtTQUNKO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdEIsSUFBSSxLQUFLLENBQUM7UUFDVixJQUFJLEdBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUN4RSxJQUFLLElBQUksRUFBRztZQUNSLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDaEI7YUFBTTtZQUNILEtBQUssR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztTQUV6QztRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLElBQUssU0FBUyxFQUFHO1lBRWIsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyRSxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLEVBQUU7Z0JBQzlCLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBRTdDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FFbEI7UUFDRCxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUM5QixNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVqRCxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBR25CLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxlQUFnQztRQUN6QyxjQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUM3RCxjQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFFckUsSUFBSSxDQUFDLFdBQVc7YUFDWCxZQUFZLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQzthQUNsQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDeEMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVPLEtBQUssQ0FBQyxjQUFjO1FBQ3hCLElBQUssQ0FBQyxXQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRztZQUM5QixPQUFPLGlCQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRyx1QkFBdUIsRUFBRSxLQUFLLEVBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQTtTQUNoRjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6RCxPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDbEMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLHFCQUFTLENBQUMseUJBQXlCLEVBQUU7WUFDL0QsSUFBSSxFQUFHLE1BQU07WUFFYixJQUFJLEVBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDakQsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxRQUFRLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUMxQixPQUFPLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNKO0FBRUQsa0JBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpYWxvZyBmcm9tIFwiLi9kaWFsb2dcIjtcbmltcG9ydCB7IERlbW9UeXBlLCBTdWJjb25maWcgfSBmcm9tIFwiLi4vLi4vTXlTdG9yZVwiO1xuaW1wb3J0IEFuaW1hdGlvbiBmcm9tICcuL2FuaW1hdGlvbidcbmltcG9ydCB7IGJvb2wsIHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IFZpZGVvIGZyb20gXCIuL3ZpZGVvXCI7XG5pbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0IHsgUmVhZG9ubHlUcnV0aCB9IGZyb20gXCIuLi8uLi9UcnV0aFwiO1xuaW1wb3J0IHsgTGV2ZWxDb2xsZWN0aW9uIH0gZnJvbSBcIi4uLy4uL0xldmVsXCI7XG5pbXBvcnQgeyB0cnlDYXRjaCB9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgeyBidXR0b24sIEJ1dHRvbiB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbmltcG9ydCB7IE1pZGlLZXlib2FyZCB9IGZyb20gXCIuLi8uLi9QaWFuby9NaWRpS2V5Ym9hcmRcIjtcbmltcG9ydCBNeUFsZXJ0IGZyb20gXCIuLi8uLi9NeUFsZXJ0XCI7XG5pbXBvcnQgeyBJUGFpcnMsIE15UHlTaGVsbCB9IGZyb20gXCIuLi8uLi9NeVB5U2hlbGxcIjtcbmltcG9ydCBteWZzIGZyb20gXCIuLi8uLi9NeUZzXCJcblxuY2xhc3MgRXhwZXJpbWVudCB7XG4gICAgcmVhZG9ubHkgZGlhbG9nOiBEaWFsb2c7XG4gICAgcmVhZG9ubHkgYW5pbWF0aW9uOiBBbmltYXRpb247XG4gICAgcmVhZG9ubHkgdmlkZW86IFZpZGVvID0gdW5kZWZpbmVkO1xuICAgIHJlYWRvbmx5IGtleWJvYXJkOiBNaWRpS2V5Ym9hcmQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkZW1vVHlwZTogRGVtb1R5cGU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBncmVlbkJ1dHRvbjogQnV0dG9uO1xuICAgIFxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGRlbW9UeXBlOiBEZW1vVHlwZSkge1xuICAgICAgICB0aGlzLmRpYWxvZyA9IG5ldyBEaWFsb2coZGVtb1R5cGUpO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oKTtcbiAgICAgICAgdGhpcy5kaWFsb2dcbiAgICAgICAgICAgIC5pbnNlcnRCZWZvcmUodGhpcy5hbmltYXRpb24pXG4gICAgICAgICAgICAuc2V0T3BhY1RyYW5zRHVyKCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmFuaW1hdGlvbi5zZXRPcGFjVHJhbnNEdXIoKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlkZW8gPSBuZXcgVmlkZW8oKVxuICAgICAgICAgICAgLmFwcGVuZFRvKEdsb2IuTWFpbkNvbnRlbnQpO1xuICAgICAgICB0aGlzLnZpZGVvLnNldE9wYWNUcmFuc0R1cigpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5rZXlib2FyZCA9IG5ldyBNaWRpS2V5Ym9hcmQoKTtcbiAgICAgICAgdGhpcy5ncmVlbkJ1dHRvbiA9IGJ1dHRvbih7IGlkIDogJ2dyZWVuX2J1dHRvbicsIGNscyA6ICdpbmFjdGl2ZSBncmVlbiBwbGF5ZXInLCBodG1sIDogJ0RvbmUnIH0pO1xuICAgICAgICBHbG9iLk1haW5Db250ZW50LmFwcGVuZCh0aGlzLmdyZWVuQnV0dG9uKTtcbiAgICAgICAgdGhpcy5kZW1vVHlwZSA9IGRlbW9UeXBlO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgLy8gYXN5bmMgaW5pdChyZWFkb25seVRydXRoOiBSZWFkb25seVRydXRoKSB7XG4gICAgYXN5bmMgaW5pdChzdWJjb25maWc6IFN1YmNvbmZpZykge1xuICAgICAgICBjb25zdCByZWFkb25seVRydXRoID0gc3ViY29uZmlnLnRydXRoLnRvUmVhZE9ubHkoKTtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGhpcy52aWRlby5pbml0KHJlYWRvbmx5VHJ1dGgpLFxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24uaW5pdChyZWFkb25seVRydXRoLm1pZGkuYWJzUGF0aClcbiAgICAgICAgXSk7XG4gICAgICAgIGNvbnN0IG91dFBhdGhBYnMgPSBzdWJjb25maWcuZXhwZXJpbWVudE91dERpckFicygpO1xuICAgICAgICBjb25zdCBleGlzdGVkID0gbXlmcy5jcmVhdGVJZk5vdEV4aXN0cyhvdXRQYXRoQWJzKTtcbiAgICAgICAgaWYgKCBleGlzdGVkICkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBmcy5zdGF0U3luYyhvdXRQYXRoQWJzKTtcbiAgICAgICAgICAgIGxldCBkYXRlc3RyID0gc3RhdHMuY3RpbWUuaHVtYW4oKTtcbiAgICAgICAgICAgIGZzLnJlbmFtZVN5bmMob3V0UGF0aEFicywgYCR7b3V0UGF0aEFic31fXyR7ZGF0ZXN0cn1gKTtcbiAgICAgICAgICAgIGZzLm1rZGlyU3luYyhvdXRQYXRoQWJzKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZWFkb25seVRydXRoLm5hbWVcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgY2FsbE9uQ2xpY2soZm46IEFzeW5jRnVuY3Rpb24sIGRlbW86IEFuaW1hdGlvbiB8IFZpZGVvKSB7XG4gICAgICAgIGNvbnN0IGRvbmUgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+XG4gICAgICAgICAgICBHbG9iLkRvY3VtZW50Lm9uKHtcbiAgICAgICAgICAgICAgICBjbGljayA6IGFzeW5jIChldjogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2cuaGlkZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgR2xvYi5oaWRlKFwiVGl0bGVcIiwgXCJOYXZpZ2F0aW9uQnV0dG9uc1wiKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBHbG9iLkRvY3VtZW50Lm9mZihcImNsaWNrXCIpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0cnlDYXRjaCgoKSA9PiBmbigpLCBgdHJ5aW5nIHRvIHJ1biAke2RlbW8gaW5zdGFuY2VvZiBBbmltYXRpb24gPyAnYW5pbWF0aW9uJyA6ICd2aWRlbyd9YCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHdhaXQoMTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGRlbW8uaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgYXdhaXQgZGVtby5kaXNwbGF5KCk7XG4gICAgICAgIGF3YWl0IGRvbmU7XG4gICAgICAgIGF3YWl0IEdsb2IuZGlzcGxheShcIlRpdGxlXCIsIFwiTmF2aWdhdGlvbkJ1dHRvbnNcIik7XG4gICAgICAgIHJldHVyblxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgaW50cm8oKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYEV4cGVyaW1lbnQuaW50cm8oKWApO1xuICAgICAgICBhd2FpdCB3YWl0KDApO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgdGhpcy5kaWFsb2cuaW50cm8oKTtcbiAgICAgICAgXG4gICAgICAgIC8vLyB2aWRlbyAvIGFuaW1hdGlvblxuICAgICAgICBsZXQgZGVtbztcbiAgICAgICAgaWYgKCBHbG9iLkJpZ0NvbmZpZy5kZXYuc2ltdWxhdGVfdmlkZW9fbW9kZSgnRXhwZXJpbWVudC5pbnRybygpJykgKSB7XG4gICAgICAgICAgICBkZW1vID0gdGhpcy52aWRlbztcbiAgICAgICAgfSBlbHNlIGlmICggR2xvYi5CaWdDb25maWcuZGV2LnNpbXVsYXRlX2FuaW1hdGlvbl9tb2RlKCdFeHBlcmltZW50LmludHJvKCknKSApIHtcbiAgICAgICAgICAgIGRlbW8gPSB0aGlzLmFuaW1hdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlbW8gPSB0aGlzW3RoaXMuZGVtb1R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jYWxsT25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCBkZW1vLmludHJvKCk7XG4gICAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIH0sIGRlbW8pO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgXG4gICAgYXN5bmMgbGV2ZWxJbnRybyhsZXZlbENvbGxlY3Rpb246IExldmVsQ29sbGVjdGlvbikge1xuICAgICAgICBjb25zb2xlLmdyb3VwKGBFeHBlcmltZW50LmxldmVsSW50cm8oKWApO1xuICAgICAgICBcbiAgICAgICAgbGV0IHBsYXlWaWRlbztcbiAgICAgICAgaWYgKCAodGhpcy5kZW1vVHlwZSA9PT0gXCJhbmltYXRpb25cIlxuICAgICAgICAgICAgJiYgIUdsb2IuQmlnQ29uZmlnLmRldi5zaW11bGF0ZV92aWRlb19tb2RlKCdFeHBlcmltZW50LmxldmVsSW50cm8oKScpKVxuICAgICAgICAgICAgfHwgR2xvYi5CaWdDb25maWcuZGV2LnNpbXVsYXRlX2FuaW1hdGlvbl9tb2RlKCdFeHBlcmltZW50LmxldmVsSW50cm8oKScpICkge1xuICAgICAgICAgICAgcGxheVZpZGVvID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIGxldmVsQ29sbGVjdGlvbi5wcmV2aW91cyApIHtcbiAgICAgICAgICAgICAgICBwbGF5VmlkZW8gPSBsZXZlbENvbGxlY3Rpb24ucHJldmlvdXMubm90ZXMgIT09IGxldmVsQ29sbGVjdGlvbi5jdXJyZW50Lm5vdGVzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwbGF5VmlkZW8gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKHsgcGxheVZpZGVvIH0pO1xuICAgICAgICBsZXQgcmF0ZTogbnVtYmVyID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgdGVtcDtcbiAgICAgICAgdGVtcCA9IEdsb2IuQmlnQ29uZmlnLmRldi5mb3JjZV9wbGF5YmFja19yYXRlKCdFeHBlcmltZW50LmxldmVsSW50cm8oKScpO1xuICAgICAgICBpZiAoIHRlbXAgKSB7XG4gICAgICAgICAgICByYXRlID0gdGVtcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICggbGV2ZWxDb2xsZWN0aW9uLmN1cnJlbnQucmh5dGhtICkge1xuICAgICAgICAgICAgICAgIHJhdGUgPSBsZXZlbENvbGxlY3Rpb24uY3VycmVudC50ZW1wbyAvIDEwMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICggbGV0IGkgPSBsZXZlbENvbGxlY3Rpb24uY3VycmVudC5pbmRleCArIDE7IGkgPCBsZXZlbENvbGxlY3Rpb24ubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxldmVsID0gbGV2ZWxDb2xsZWN0aW9uLmdldChpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBsZXZlbC5ub3RlcyA9PT0gbGV2ZWxDb2xsZWN0aW9uLmN1cnJlbnQubm90ZXMgJiYgbGV2ZWwucmh5dGhtICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF0ZSA9IGxldmVsLnRlbXBvIC8gMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBsZXZlbCAjJHtsZXZlbENvbGxlY3Rpb24uY3VycmVudC5pbmRleH0gbm8gdGVtcG8sIHRvb2sgcmF0ZSAoJHtyYXRlfSkgZnJvbSBsZXZlbCAjJHtpfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIHJhdGUgPT09IHVuZGVmaW5lZCApIHsgLy8gSGF2ZW4ndCBmb3VuZCBpbiBmb3JcbiAgICAgICAgICAgICAgICAgICAgcmF0ZSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKHsgcmF0ZSB9KTtcbiAgICAgICAgbGV0IG5vdGVzO1xuICAgICAgICB0ZW1wID0gR2xvYi5CaWdDb25maWcuZGV2LmZvcmNlX25vdGVzX251bWJlcignRXhwZXJpbWVudC5sZXZlbEludHJvKCknKTtcbiAgICAgICAgaWYgKCB0ZW1wICkge1xuICAgICAgICAgICAgbm90ZXMgPSB0ZW1wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm90ZXMgPSBsZXZlbENvbGxlY3Rpb24uY3VycmVudC5ub3RlcztcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKHsgbm90ZXMgfSk7XG4gICAgICAgIGlmICggcGxheVZpZGVvICkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRpYWxvZy5sZXZlbEludHJvKGxldmVsQ29sbGVjdGlvbi5jdXJyZW50LCBcInZpZGVvXCIsIHJhdGUpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jYWxsT25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy52aWRlby5sZXZlbEludHJvKG5vdGVzLCByYXRlKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0sIHRoaXMudmlkZW8pO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5kaWFsb2cubGV2ZWxJbnRybyhsZXZlbENvbGxlY3Rpb24uY3VycmVudCwgXCJhbmltYXRpb25cIiwgcmF0ZSk7XG4gICAgICAgIGF3YWl0IHRoaXMuY2FsbE9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hbmltYXRpb24ubGV2ZWxJbnRybyhub3RlcywgcmF0ZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgfSwgdGhpcy5hbmltYXRpb24pO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgcmVjb3JkKGxldmVsQ29sbGVjdGlvbjogTGV2ZWxDb2xsZWN0aW9uKSB7XG4gICAgICAgIEdsb2IuVGl0bGUubGV2ZWxoMy50ZXh0KGBMZXZlbCAxLyR7bGV2ZWxDb2xsZWN0aW9uLmxlbmd0aH1gKTtcbiAgICAgICAgR2xvYi5UaXRsZS50cmlhbGgzLnRleHQoYFRyaWFsIDEvJHtsZXZlbENvbGxlY3Rpb24uY3VycmVudC50cmlhbHN9YCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmdyZWVuQnV0dG9uXG4gICAgICAgICAgICAucmVwbGFjZUNsYXNzKCdpbmFjdGl2ZScsICdhY3RpdmUnKVxuICAgICAgICAgICAgLmNsaWNrKCgpID0+IHRoaXMuY2hlY2tEb25lVHJpYWwoKSk7XG4gICAgICAgIGF3YWl0IHRoaXMuZGlhbG9nLnJlY29yZChsZXZlbENvbGxlY3Rpb24uY3VycmVudCk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgYXN5bmMgY2hlY2tEb25lVHJpYWwoKSB7XG4gICAgICAgIGlmICggIWJvb2wodGhpcy5rZXlib2FyZC5ub3RlcykgKSB7XG4gICAgICAgICAgICByZXR1cm4gTXlBbGVydC5zbWFsbC5faW5mbyh7IHRpdGxlIDogJ1BsZWFzZSBwbGF5IHNvbWV0aGluZycsIHRpbWVyIDogbnVsbCB9KVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzLmtleWJvYXJkLm5vdGVzOicsIHRoaXMua2V5Ym9hcmQubm90ZXMpO1xuICAgICAgICBjb25zb2xlLnRpbWUoYFBZX2NoZWNrRG9uZVRyaWFsYCk7XG4gICAgICAgIGNvbnN0IFBZX2NoZWNrRG9uZVRyaWFsID0gbmV3IE15UHlTaGVsbCgnLW0gdHh0LmNoZWNrX2RvbmVfdHJpYWwnLCB7XG4gICAgICAgICAgICBtb2RlIDogXCJqc29uXCIsXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBhcmdzIDogdGhpcy5rZXlib2FyZC5ub3Rlcy5tYXAoSlNPTi5zdHJpbmdpZnkpXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFBZX2NoZWNrRG9uZVRyaWFsLnJ1bkFzeW5jKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHsgcmVzcG9uc2UgfSk7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZChgUFlfY2hlY2tEb25lVHJpYWxgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4cGVyaW1lbnQ7XG4iXX0=