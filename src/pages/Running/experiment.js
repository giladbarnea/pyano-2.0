"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const animation_1 = require("./animation");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default();
        this.animation = new animation_1.default();
        this.dialog
            .insertBefore(this.animation)
            .setOpacTransDur();
        this.animation.setOpacTransDur();
        if (demoType === "video") {
            this.video = new video_1.default()
                .appendTo(Glob_1.default.MainContent);
            this.video.setOpacTransDur();
        }
        this.demoType = demoType;
    }
    async intro(readonlyTruth) {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        const promises = [
            this.dialog.intro(this.demoType),
        ];
        if (this.video) {
            promises.push(this.video.init(readonlyTruth.mp4.absPath, readonlyTruth.onsets.absPath));
        }
        else {
            promises.push(this.animation.init(readonlyTruth.midi.absPath));
        }
        await Promise.all(promises);
        const demo = this[this.demoType];
        await demo.display();
        Glob_1.default.Document.on({
            click: async (ev) => {
                ev.preventDefault();
                ev.stopPropagation();
                await Promise.all([
                    this.dialog.hide(),
                    Glob_1.default.hide("Title", "NavigationButtons")
                ]);
                Glob_1.default.Document.allOff();
                await demo.intro();
                console.log(`done playing ${this.demoType}`);
                await util_1.wait(1000);
                demo.hide();
                Glob_1.default.display("Title", "NavigationButtons");
            }
        });
        console.groupEnd();
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cGVyaW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBOEI7QUFFOUIsMkNBQW1DO0FBQ25DLHFDQUFrQztBQUNsQyxtQ0FBNEI7QUFDNUIscUNBQThCO0FBSTlCLE1BQU0sVUFBVTtJQU1aLFlBQVksUUFBa0I7UUFIckIsVUFBSyxHQUFVLFNBQVMsQ0FBQztRQUk5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZ0JBQU0sRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxtQkFBUyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU07YUFDTixZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQzthQUM1QixlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ2pDLElBQUssUUFBUSxLQUFLLE9BQU8sRUFBRztZQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBSyxFQUFFO2lCQUNuQixRQUFRLENBQUMsY0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDaEM7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxhQUE0QjtRQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDcEMsTUFBTSxXQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFZCxNQUFNLFFBQVEsR0FBRztZQUNiLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7U0FFbkMsQ0FBQztRQUNGLElBQUssSUFBSSxDQUFDLEtBQUssRUFBRztZQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1NBQzFGO2FBQU07WUFDSCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtTQUVqRTtRQUNELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU1QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXJCLGNBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQ2IsS0FBSyxFQUFHLEtBQUssRUFBRSxFQUFpQixFQUFFLEVBQUU7Z0JBQ2hDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDcEIsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUNyQixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7b0JBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7b0JBQ2xCLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLG1CQUFtQixDQUFDO2lCQUUxQyxDQUFDLENBQUM7Z0JBRUgsY0FBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDdkIsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUM3QyxNQUFNLFdBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDakIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLGNBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLG1CQUFtQixDQUFDLENBQUE7WUFFOUMsQ0FBQztTQUNKLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUV2QixDQUFDO0NBRUo7QUFFRCxrQkFBZSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlhbG9nIGZyb20gXCIuL2RpYWxvZ1wiO1xuaW1wb3J0IHsgRGVtb1R5cGUgfSBmcm9tIFwiLi4vLi4vTXlTdG9yZVwiO1xuaW1wb3J0IEFuaW1hdGlvbiBmcm9tICcuL2FuaW1hdGlvbidcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IFZpZGVvIGZyb20gXCIuL3ZpZGVvXCI7XG5pbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0IHsgUmVhZG9ubHlUcnV0aCB9IGZyb20gXCIuLi8uLi9UcnV0aFwiO1xuXG5cbmNsYXNzIEV4cGVyaW1lbnQge1xuICAgIHJlYWRvbmx5IGRpYWxvZzogRGlhbG9nO1xuICAgIHJlYWRvbmx5IGFuaW1hdGlvbjogQW5pbWF0aW9uO1xuICAgIHJlYWRvbmx5IHZpZGVvOiBWaWRlbyA9IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlbW9UeXBlOiBEZW1vVHlwZTtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihkZW1vVHlwZTogRGVtb1R5cGUpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cgPSBuZXcgRGlhbG9nKCk7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbigpO1xuICAgICAgICB0aGlzLmRpYWxvZ1xuICAgICAgICAgICAgLmluc2VydEJlZm9yZSh0aGlzLmFuaW1hdGlvbilcbiAgICAgICAgICAgIC5zZXRPcGFjVHJhbnNEdXIoKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb24uc2V0T3BhY1RyYW5zRHVyKCk7XG4gICAgICAgIGlmICggZGVtb1R5cGUgPT09IFwidmlkZW9cIiApIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW8gPSBuZXcgVmlkZW8oKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhHbG9iLk1haW5Db250ZW50KTtcbiAgICAgICAgICAgIHRoaXMudmlkZW8uc2V0T3BhY1RyYW5zRHVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZW1vVHlwZSA9IGRlbW9UeXBlO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbnRybyhyZWFkb25seVRydXRoOiBSZWFkb25seVRydXRoKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYEV4cGVyaW1lbnQuaW50cm8oKWApO1xuICAgICAgICBhd2FpdCB3YWl0KDApO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXG4gICAgICAgICAgICB0aGlzLmRpYWxvZy5pbnRybyh0aGlzLmRlbW9UeXBlKSxcbiAgICAgICAgXG4gICAgICAgIF07XG4gICAgICAgIGlmICggdGhpcy52aWRlbyApIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2godGhpcy52aWRlby5pbml0KHJlYWRvbmx5VHJ1dGgubXA0LmFic1BhdGgsIHJlYWRvbmx5VHJ1dGgub25zZXRzLmFic1BhdGgpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmFuaW1hdGlvbi5pbml0KHJlYWRvbmx5VHJ1dGgubWlkaS5hYnNQYXRoKSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgLy8vIHZpZGVvIC8gYW5pbWF0aW9uXG4gICAgICAgIGNvbnN0IGRlbW8gPSB0aGlzW3RoaXMuZGVtb1R5cGVdO1xuICAgICAgICBhd2FpdCBkZW1vLmRpc3BsYXkoKTtcbiAgICAgICAgXG4gICAgICAgIEdsb2IuRG9jdW1lbnQub24oe1xuICAgICAgICAgICAgY2xpY2sgOiBhc3luYyAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaWFsb2cuaGlkZSgpLFxuICAgICAgICAgICAgICAgICAgICBHbG9iLmhpZGUoXCJUaXRsZVwiLCBcIk5hdmlnYXRpb25CdXR0b25zXCIpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgR2xvYi5Eb2N1bWVudC5hbGxPZmYoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBkZW1vLmludHJvKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYGRvbmUgcGxheWluZyAke3RoaXMuZGVtb1R5cGV9YCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgd2FpdCgxMDAwKTtcbiAgICAgICAgICAgICAgICBkZW1vLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBHbG9iLmRpc3BsYXkoXCJUaXRsZVwiLCBcIk5hdmlnYXRpb25CdXR0b25zXCIpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbn1cblxuZXhwb3J0IGRlZmF1bHQgRXhwZXJpbWVudDtcbiJdfQ==