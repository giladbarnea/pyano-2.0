"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dialog_1 = require("./dialog");
const animation_1 = require("./animation");
const util_1 = require("../../util");
const video_1 = require("./video");
const Glob_1 = require("../../Glob");
class Experiment {
    constructor(demoType) {
        this.video = undefined;
        this.dialog = new dialog_1.default(demoType);
        this.animation = new animation_1.default();
        this.dialog
            .insertBefore(this.animation)
            .setOpacTransDur();
        this.animation.setOpacTransDur();
        if (demoType === "video" || Glob_1.default.BigConfig.dev.force_play_video()) {
            this.video = new video_1.default()
                .appendTo(Glob_1.default.MainContent);
            this.video.setOpacTransDur();
        }
        this.demoType = demoType;
    }
    async init(readonlyTruth) {
        const promises = [];
        if (this.video) {
            promises.push(this.video.init(readonlyTruth.mp4.absPath, readonlyTruth.onsets.absPath));
        }
        else {
            promises.push(this.animation.init(readonlyTruth.midi.absPath));
        }
        return await Promise.all(promises);
    }
    async intro() {
        console.group(`Experiment.intro()`);
        await util_1.wait(0);
        await this.dialog.intro();
        let demo;
        if (Glob_1.default.BigConfig.dev.force_play_video()) {
            demo = this.video;
        }
        else {
            demo = this[this.demoType];
        }
        await demo.display();
        const promiseDone = new Promise(resolve => {
            Glob_1.default.Document.on({
                click: async (ev) => {
                    ev.preventDefault();
                    ev.stopPropagation();
                    await Promise.all([
                        this.dialog.hide(),
                        Glob_1.default.hide("Title", "NavigationButtons")
                    ]);
                    Glob_1.default.Document.off("click");
                    await demo.intro();
                    console.log(`done playing ${this.demoType}`);
                    await util_1.wait(1000);
                    await demo.hide();
                    resolve();
                }
            });
        });
        console.groupEnd();
        return await promiseDone;
    }
    async levelIntro(levelCollection) {
        var _a;
        Glob_1.default.Title.levelh3.text(`Level 1/${levelCollection.length}`);
        Glob_1.default.Title.trialh3.text(`Trial 1/${levelCollection.current.trials}`);
        let playVideo;
        if (Glob_1.default.BigConfig.dev.force_play_video()) {
            playVideo = true;
        }
        else {
            if (this.demoType === "animation") {
                playVideo = false;
            }
            else {
                playVideo = ((_a = levelCollection.previous) === null || _a === void 0 ? void 0 : _a.notes) !== levelCollection.current.notes;
                if (playVideo)
                    console.warn(`playVideo`, playVideo);
            }
        }
        const promises = [
            Glob_1.default.display("Title", "NavigationButtons"),
            this.dialog.levelIntro(levelCollection, playVideo)
        ];
        await Promise.all(promises);
        if (playVideo) {
        }
    }
}
exports.default = Experiment;
//# sourceMappingURL=data:application/json;base64,