"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("../../util");
const Glob_1 = require("../../Glob");
const Piano_1 = require("../../Piano");
const midi_1 = require("@tonejs/midi");
const Tone = require("tone");
const bhe_1 = require("../../bhe");
class Animation extends bhe_1.VisualBHE {
    constructor() {
        const keys = {
            A0: {
                '[data-note="A0"]': {
                    'A#0': '[data-note="A#0"]'
                }
            },
            B0: '[data-note="B0"]',
        };
        const indexToLetter = {
            1: "C",
            2: "D",
            3: "E",
            4: "F",
            5: "G",
            6: "A",
            7: "B"
        };
        const noblacks = [3, 7];
        for (let register of util.range(1, 7)) {
            for (let keyIndex of util.range(1, 7)) {
                let letter = indexToLetter[keyIndex];
                let name = `${letter}${register}`;
                let value;
                if (noblacks.includes(keyIndex)) {
                    value = `[data-note="${name}"]`;
                }
                else {
                    let query = `[data-note="${name}"]`;
                    let subname = `${letter}#${register}`;
                    let subquery = `[data-note="${subname}"]`;
                    let subvalue = {};
                    subvalue[subname] = subquery;
                    value = {};
                    value[query] = subvalue;
                }
                keys[name] = value;
            }
        }
        super({
            id: 'animation', children: keys
        });
    }
    async intro() {
        console.group(`Keyboard.intro()`);
        let noteOffObjs = [];
        let noteOnObjs = [];
        let notes;
        const maxAnimationNotes = Glob_1.default.BigConfig.dev.max_animation_notes();
        if (maxAnimationNotes) {
            notes = this.notes.slice(0, maxAnimationNotes);
        }
        else {
            notes = this.notes;
        }
        for (let note of notes) {
            let { name, velocity, duration, time: timeOn } = note;
            let timeOff = timeOn + duration;
            noteOffObjs.push({ name, time: timeOff });
            noteOnObjs.push({ name, time: timeOn, duration, velocity });
        }
        const promiseDone = new Promise(resolve => {
            let count = 0;
            const noteOffCallback = async (time, event) => {
                Tone.Draw.schedule(() => this.paintKey(event, "green", false), time);
                this.piano.keyUp(event.name, time);
                count++;
                if (noteOffEvents.length === count) {
                    const now = Tone.Transport.now();
                    const util = require("../../util");
                    const diff = now - time;
                    await util.wait((diff * 1000), false);
                    resolve();
                    console.log('intro done', { event, time, now, diff, });
                }
            };
            const noteOnCallback = (time, event) => {
                Tone.Draw.schedule(() => this.paintKey(event, "green", true), time);
                this.piano.keyDown(event.name, time, event.velocity);
            };
            const noteOffEvents = new Tone.Part(noteOffCallback, noteOffObjs).start();
            const noteOnEvents = new Tone.Part(noteOnCallback, noteOnObjs).start();
            console.log({ noteOffEvents });
        });
        remote.globalShortcut.register("CommandOrControl+M", () => Tone.Transport.toggle());
        console.groupEnd();
        return await promiseDone;
    }
    paintKey({ name }, color, on) {
        let child;
        if (name.includes('#')) {
            let nohash = name.replace('#', '');
            child = this[nohash][name];
        }
        else {
            child = this[name];
        }
        child.toggleClass(color, on);
    }
    async init(midiAbsPath) {
        console.group(`Keyboard.initPiano()`);
        const pianoOptions = {
            samples: SALAMANDER_PATH_ABS,
            release: true,
            pedal: false,
            velocities: Glob_1.default.BigConfig.velocities,
        };
        if (Glob_1.default.BigConfig.dev.mute_animation()) {
            pianoOptions.volume = { strings: -Infinity, harmonics: -Infinity, keybed: -Infinity, pedal: -Infinity };
        }
        this.piano = new Piano_1.Piano(pianoOptions).toDestination();
        const promisePianoLoaded = this.piano.load();
        const promiseMidiLoaded = midi_1.Midi.fromUrl(midiAbsPath);
        const [_, midi] = await Promise.all([promisePianoLoaded, promiseMidiLoaded]);
        console.log('piano loaded');
        console.log('midi loaded', midi);
        this.notes = midi.tracks[0].notes;
        Tone.Transport.start();
        console.groupEnd();
        return;
    }
}
exports.default = Animation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYW5pbWF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQWtDO0FBQ2xDLHFDQUE4QjtBQUM5Qix1Q0FBa0Q7QUFDbEQsdUNBQW9DO0FBQ3BDLDZCQUE2QjtBQUU3QixtQ0FBc0M7QUFRdEMsTUFBTSxTQUFVLFNBQVEsZUFBUztJQUk3QjtRQUVJLE1BQU0sSUFBSSxHQUFHO1lBQ1QsRUFBRSxFQUFHO2dCQUNELGtCQUFrQixFQUFHO29CQUNqQixLQUFLLEVBQUcsbUJBQW1CO2lCQUM5QjthQUNKO1lBQ0QsRUFBRSxFQUFHLGtCQUFrQjtTQUMxQixDQUFDO1FBQ0YsTUFBTSxhQUFhLEdBQUc7WUFDbEIsQ0FBQyxFQUFHLEdBQUc7WUFDUCxDQUFDLEVBQUcsR0FBRztZQUNQLENBQUMsRUFBRyxHQUFHO1lBQ1AsQ0FBQyxFQUFHLEdBQUc7WUFDUCxDQUFDLEVBQUcsR0FBRztZQUNQLENBQUMsRUFBRyxHQUFHO1lBQ1AsQ0FBQyxFQUFHLEdBQUc7U0FDVixDQUFDO1FBQ0YsTUFBTSxRQUFRLEdBQUcsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLENBQUM7UUFDMUIsS0FBTSxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRztZQUNyQyxLQUFNLElBQUksUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFHO2dCQUNyQyxJQUFJLE1BQU0sR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3JDLElBQUksSUFBSSxHQUFHLEdBQUcsTUFBTSxHQUFHLFFBQVEsRUFBRSxDQUFDO2dCQUNsQyxJQUFJLEtBQUssQ0FBQztnQkFDVixJQUFLLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUc7b0JBQy9CLEtBQUssR0FBRyxlQUFlLElBQUksSUFBSSxDQUFBO2lCQUNsQztxQkFBTTtvQkFDSCxJQUFJLEtBQUssR0FBRyxlQUFlLElBQUksSUFBSSxDQUFDO29CQUNwQyxJQUFJLE9BQU8sR0FBRyxHQUFHLE1BQU0sSUFBSSxRQUFRLEVBQUUsQ0FBQztvQkFDdEMsSUFBSSxRQUFRLEdBQUcsZUFBZSxPQUFPLElBQUksQ0FBQztvQkFDMUMsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO29CQUNsQixRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsUUFBUSxDQUFDO29CQUM3QixLQUFLLEdBQUcsRUFBRSxDQUFDO29CQUNYLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUM7aUJBQzNCO2dCQUNELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDdEI7U0FDSjtRQUNELEtBQUssQ0FBQztZQUNGLEVBQUUsRUFBRyxXQUFXLEVBQUUsUUFBUSxFQUFHLElBQUk7U0FDcEMsQ0FBQyxDQUFDO0lBSVAsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2xDLElBQUksV0FBVyxHQUFjLEVBQUUsQ0FBQztRQUNoQyxJQUFJLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFDOUIsSUFBSSxLQUFhLENBQUM7UUFDbEIsTUFBTSxpQkFBaUIsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQ25FLElBQUssaUJBQWlCLEVBQUc7WUFDckIsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1NBQ2xEO2FBQU07WUFDSCxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUN0QjtRQUNELEtBQU0sSUFBSSxJQUFJLElBQUksS0FBSyxFQUFHO1lBQ3RCLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUcsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBQ3ZELElBQUksT0FBTyxHQUFHLE1BQU0sR0FBRyxRQUFRLENBQUM7WUFDaEMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUMzQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRyxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDaEU7UUFDRCxNQUFNLFdBQVcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN0QyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7WUFHZCxNQUFNLGVBQWUsR0FBRyxLQUFLLEVBQUUsSUFBb0IsRUFBRSxLQUFnQixFQUFFLEVBQUU7Z0JBQ3JFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDckUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDbkMsS0FBSyxFQUFFLENBQUM7Z0JBRVIsSUFBSyxhQUFhLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRztvQkFDbEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztvQkFDakMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUVuQyxNQUFNLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO29CQUN4QixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQ3RDLE9BQU8sRUFBRSxDQUFDO29CQUVWLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQztpQkFDMUQ7WUFHTCxDQUFDLENBQUM7WUFFRixNQUFNLGNBQWMsR0FBRyxDQUFDLElBQW9CLEVBQUUsS0FBa0IsRUFBRSxFQUFFO2dCQUNoRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3BFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6RCxDQUFDLENBQUM7WUFFRixNQUFNLGFBQWEsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzFFLE1BQU0sWUFBWSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7WUFHdkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDcEYsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25CLE9BQU8sTUFBTSxXQUFXLENBQUM7SUFJN0IsQ0FBQztJQUVPLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBYSxFQUFFLEtBQStCLEVBQUUsRUFBVztRQUM5RSxJQUFJLEtBQUssQ0FBQztRQUNWLElBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRztZQUN0QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNuQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBRTlCO2FBQU07WUFFSCxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUdELEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBbUI7UUFDMUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBRXRDLE1BQU0sWUFBWSxHQUEwQjtZQUN4QyxPQUFPLEVBQUcsbUJBQW1CO1lBQzdCLE9BQU8sRUFBRyxJQUFJO1lBQ2QsS0FBSyxFQUFHLEtBQUs7WUFDYixVQUFVLEVBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVO1NBQ3pDLENBQUM7UUFDRixJQUFLLGNBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxFQUFHO1lBQ3ZDLFlBQVksQ0FBQyxNQUFNLEdBQUcsRUFBRSxPQUFPLEVBQUcsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFHLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtTQUM5RztRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxhQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdDLE1BQU0saUJBQWlCLEdBQUcsV0FBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNwRCxNQUFNLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBRSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFFLGtCQUFrQixFQUFFLGlCQUFpQixDQUFFLENBQUMsQ0FBQztRQUVqRixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkIsT0FBTztJQWNYLENBQUM7Q0FDSjtBQUVELGtCQUFlLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHV0aWwgZnJvbSBcIi4uLy4uL3V0aWxcIlxuaW1wb3J0IEdsb2IgZnJvbSBcIi4uLy4uL0dsb2JcIjtcbmltcG9ydCB7IFBpYW5vLCBQaWFub09wdGlvbnMgfSBmcm9tIFwiLi4vLi4vUGlhbm9cIjtcbmltcG9ydCB7IE1pZGkgfSBmcm9tIFwiQHRvbmVqcy9taWRpXCI7XG5pbXBvcnQgKiBhcyBUb25lIGZyb20gXCJ0b25lXCI7XG5pbXBvcnQgeyBOb3RlIH0gZnJvbSBcIkB0b25lanMvbWlkaS9kaXN0L05vdGVcIjtcbmltcG9ydCB7IFZpc3VhbEJIRSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcblxudHlwZSBOb3RlRXZlbnQgPSB7IG5hbWU6IHN0cmluZyB9O1xuLy8gdHlwZSBOb3RlT2ZmRXZlbnQgPSB7IG5hbWU6IHN0cmluZyB9O1xudHlwZSBOb3RlT25FdmVudCA9IE5vdGVFdmVudCAmIHsgdmVsb2NpdHk6IG51bWJlciB9O1xudHlwZSBOb3RlT2ZmID0gTm90ZUV2ZW50ICYgeyB0aW1lOiBUb25lLlVuaXQuVGltZSB9O1xudHlwZSBOb3RlT24gPSBOb3RlT25FdmVudCAmIHsgdGltZTogVG9uZS5Vbml0LlRpbWUsIGR1cmF0aW9uOiBudW1iZXIgfTtcblxuY2xhc3MgQW5pbWF0aW9uIGV4dGVuZHMgVmlzdWFsQkhFIHtcbiAgICBwcml2YXRlIG5vdGVzOiBOb3RlW107XG4gICAgcHJpdmF0ZSBwaWFubzogUGlhbm87XG4gICAgXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBrZXlzID0ge1xuICAgICAgICAgICAgQTAgOiB7XG4gICAgICAgICAgICAgICAgJ1tkYXRhLW5vdGU9XCJBMFwiXScgOiB7XG4gICAgICAgICAgICAgICAgICAgICdBIzAnIDogJ1tkYXRhLW5vdGU9XCJBIzBcIl0nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEIwIDogJ1tkYXRhLW5vdGU9XCJCMFwiXScsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGluZGV4VG9MZXR0ZXIgPSB7XG4gICAgICAgICAgICAxIDogXCJDXCIsXG4gICAgICAgICAgICAyIDogXCJEXCIsXG4gICAgICAgICAgICAzIDogXCJFXCIsXG4gICAgICAgICAgICA0IDogXCJGXCIsXG4gICAgICAgICAgICA1IDogXCJHXCIsXG4gICAgICAgICAgICA2IDogXCJBXCIsXG4gICAgICAgICAgICA3IDogXCJCXCJcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgbm9ibGFja3MgPSBbIDMsIDcgXTsgLy8gRSwgQlxuICAgICAgICBmb3IgKCBsZXQgcmVnaXN0ZXIgb2YgdXRpbC5yYW5nZSgxLCA3KSApIHtcbiAgICAgICAgICAgIGZvciAoIGxldCBrZXlJbmRleCBvZiB1dGlsLnJhbmdlKDEsIDcpICkge1xuICAgICAgICAgICAgICAgIGxldCBsZXR0ZXIgPSBpbmRleFRvTGV0dGVyW2tleUluZGV4XTtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IGAke2xldHRlcn0ke3JlZ2lzdGVyfWA7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICggbm9ibGFja3MuaW5jbHVkZXMoa2V5SW5kZXgpICkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGBbZGF0YS1ub3RlPVwiJHtuYW1lfVwiXWBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcXVlcnkgPSBgW2RhdGEtbm90ZT1cIiR7bmFtZX1cIl1gO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3VibmFtZSA9IGAke2xldHRlcn0jJHtyZWdpc3Rlcn1gO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3VicXVlcnkgPSBgW2RhdGEtbm90ZT1cIiR7c3VibmFtZX1cIl1gO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3VidmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgc3VidmFsdWVbc3VibmFtZV0gPSBzdWJxdWVyeTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbcXVlcnldID0gc3VidmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGtleXNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBpZCA6ICdhbmltYXRpb24nLCBjaGlsZHJlbiA6IGtleXNcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHRoaXMuaW5pdFBpYW5vKCk7XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgaW50cm8oKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYEtleWJvYXJkLmludHJvKClgKTtcbiAgICAgICAgbGV0IG5vdGVPZmZPYmpzOiBOb3RlT2ZmW10gPSBbXTtcbiAgICAgICAgbGV0IG5vdGVPbk9ianM6IE5vdGVPbltdID0gW107XG4gICAgICAgIGxldCBub3RlczogTm90ZVtdO1xuICAgICAgICBjb25zdCBtYXhBbmltYXRpb25Ob3RlcyA9IEdsb2IuQmlnQ29uZmlnLmRldi5tYXhfYW5pbWF0aW9uX25vdGVzKCk7XG4gICAgICAgIGlmICggbWF4QW5pbWF0aW9uTm90ZXMgKSB7XG4gICAgICAgICAgICBub3RlcyA9IHRoaXMubm90ZXMuc2xpY2UoMCwgbWF4QW5pbWF0aW9uTm90ZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm90ZXMgPSB0aGlzLm5vdGVzO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoIGxldCBub3RlIG9mIG5vdGVzICkge1xuICAgICAgICAgICAgbGV0IHsgbmFtZSwgdmVsb2NpdHksIGR1cmF0aW9uLCB0aW1lIDogdGltZU9uIH0gPSBub3RlO1xuICAgICAgICAgICAgbGV0IHRpbWVPZmYgPSB0aW1lT24gKyBkdXJhdGlvbjtcbiAgICAgICAgICAgIG5vdGVPZmZPYmpzLnB1c2goeyBuYW1lLCB0aW1lIDogdGltZU9mZiB9KTtcbiAgICAgICAgICAgIG5vdGVPbk9ianMucHVzaCh7IG5hbWUsIHRpbWUgOiB0aW1lT24sIGR1cmF0aW9uLCB2ZWxvY2l0eSB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9taXNlRG9uZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICAgIC8vIGxldCBkb25lID0gZmFsc2U7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IG5vdGVPZmZDYWxsYmFjayA9IGFzeW5jICh0aW1lOiBUb25lLlVuaXQuVGltZSwgZXZlbnQ6IE5vdGVFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIFRvbmUuRHJhdy5zY2hlZHVsZSgoKSA9PiB0aGlzLnBhaW50S2V5KGV2ZW50LCBcImdyZWVuXCIsIGZhbHNlKSwgdGltZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5waWFuby5rZXlVcChldmVudC5uYW1lLCB0aW1lKTtcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICggbm90ZU9mZkV2ZW50cy5sZW5ndGggPT09IGNvdW50ICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub3cgPSBUb25lLlRyYW5zcG9ydC5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXRpbCA9IHJlcXVpcmUoXCIuLi8uLi91dGlsXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBub3cgLSB0aW1lO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB1dGlsLndhaXQoKGRpZmYgKiAxMDAwKSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaW50cm8gZG9uZScsIHsgZXZlbnQsIHRpbWUsIG5vdywgZGlmZiwgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgbm90ZU9uQ2FsbGJhY2sgPSAodGltZTogVG9uZS5Vbml0LlRpbWUsIGV2ZW50OiBOb3RlT25FdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIFRvbmUuRHJhdy5zY2hlZHVsZSgoKSA9PiB0aGlzLnBhaW50S2V5KGV2ZW50LCBcImdyZWVuXCIsIHRydWUpLCB0aW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBpYW5vLmtleURvd24oZXZlbnQubmFtZSwgdGltZSwgZXZlbnQudmVsb2NpdHkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIGNvbnN0IG5vdyA9IFRvbmUuVHJhbnNwb3J0Lm5vdygpO1xuICAgICAgICAgICAgY29uc3Qgbm90ZU9mZkV2ZW50cyA9IG5ldyBUb25lLlBhcnQobm90ZU9mZkNhbGxiYWNrLCBub3RlT2ZmT2Jqcykuc3RhcnQoKTtcbiAgICAgICAgICAgIGNvbnN0IG5vdGVPbkV2ZW50cyA9IG5ldyBUb25lLlBhcnQobm90ZU9uQ2FsbGJhY2ssIG5vdGVPbk9ianMpLnN0YXJ0KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coeyBub3RlT2ZmRXZlbnRzIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVtb3RlLmdsb2JhbFNob3J0Y3V0LnJlZ2lzdGVyKFwiQ29tbWFuZE9yQ29udHJvbCtNXCIsICgpID0+IFRvbmUuVHJhbnNwb3J0LnRvZ2dsZSgpKTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICByZXR1cm4gYXdhaXQgcHJvbWlzZURvbmU7XG4gICAgICAgIC8vIHJldHVybiBhd2FpdCB3YWl0VW50aWwoKCkgPT4gZG9uZSwgNTAwKTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIHBhaW50S2V5KHsgbmFtZSB9OiBOb3RlRXZlbnQsIGNvbG9yOiBcInJlZFwiIHwgXCJncmVlblwiIHwgXCJibHVlXCIsIG9uOiBib29sZWFuKSB7XG4gICAgICAgIGxldCBjaGlsZDtcbiAgICAgICAgaWYgKCBuYW1lLmluY2x1ZGVzKCcjJykgKSB7XG4gICAgICAgICAgICBsZXQgbm9oYXNoID0gbmFtZS5yZXBsYWNlKCcjJywgJycpO1xuICAgICAgICAgICAgY2hpbGQgPSB0aGlzW25vaGFzaF1bbmFtZV07XG4gICAgICAgICAgICAvLyB0aGlzW25vaGFzaF1bbmFtZV0udG9nZ2xlQ2xhc3MoJ29uJywgb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhpc1tuYW1lXS50b2dnbGVDbGFzcygnb24nLCBvbik7XG4gICAgICAgICAgICBjaGlsZCA9IHRoaXNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQudG9nZ2xlQ2xhc3MoY29sb3IsIG9uKTtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgYXN5bmMgaW5pdChtaWRpQWJzUGF0aDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYEtleWJvYXJkLmluaXRQaWFubygpYCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwaWFub09wdGlvbnM6IFBhcnRpYWw8UGlhbm9PcHRpb25zPiA9IHtcbiAgICAgICAgICAgIHNhbXBsZXMgOiBTQUxBTUFOREVSX1BBVEhfQUJTLFxuICAgICAgICAgICAgcmVsZWFzZSA6IHRydWUsXG4gICAgICAgICAgICBwZWRhbCA6IGZhbHNlLFxuICAgICAgICAgICAgdmVsb2NpdGllcyA6IEdsb2IuQmlnQ29uZmlnLnZlbG9jaXRpZXMsXG4gICAgICAgIH07XG4gICAgICAgIGlmICggR2xvYi5CaWdDb25maWcuZGV2Lm11dGVfYW5pbWF0aW9uKCkgKSB7XG4gICAgICAgICAgICBwaWFub09wdGlvbnMudm9sdW1lID0geyBzdHJpbmdzIDogLUluZmluaXR5LCBoYXJtb25pY3MgOiAtSW5maW5pdHksIGtleWJlZCA6IC1JbmZpbml0eSwgcGVkYWwgOiAtSW5maW5pdHkgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucGlhbm8gPSBuZXcgUGlhbm8ocGlhbm9PcHRpb25zKS50b0Rlc3RpbmF0aW9uKCk7XG4gICAgICAgIGNvbnN0IHByb21pc2VQaWFub0xvYWRlZCA9IHRoaXMucGlhbm8ubG9hZCgpO1xuICAgICAgICBjb25zdCBwcm9taXNlTWlkaUxvYWRlZCA9IE1pZGkuZnJvbVVybChtaWRpQWJzUGF0aCk7XG4gICAgICAgIGNvbnN0IFsgXywgbWlkaSBdID0gYXdhaXQgUHJvbWlzZS5hbGwoWyBwcm9taXNlUGlhbm9Mb2FkZWQsIHByb21pc2VNaWRpTG9hZGVkIF0pO1xuICAgICAgICAvLyBjb25zdCBtaWRpID0gYXdhaXQgTWlkaS5mcm9tVXJsKHN1YmNvbmZpZy50cnV0aC5taWRpLmFic1BhdGgpO1xuICAgICAgICBjb25zb2xlLmxvZygncGlhbm8gbG9hZGVkJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdtaWRpIGxvYWRlZCcsIG1pZGkpO1xuICAgICAgICB0aGlzLm5vdGVzID0gbWlkaS50cmFja3NbMF0ubm90ZXM7XG4gICAgICAgIFRvbmUuVHJhbnNwb3J0LnN0YXJ0KCk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgLy8gY29uc3Qgbm90ZU9mZkNhbGxiYWNrID0gKHRpbWU6IFRvbmUuVW5pdC5UaW1lLCBldmVudDogTm90ZUV2ZW50KSA9PiB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICBUb25lLkRyYXcuc2NoZWR1bGUoKCkgPT4gdGhpcy5wYWludEtleShldmVudCwgZmFsc2UpLCB0aW1lKTtcbiAgICAgICAgLy8gICAgIHBpYW5vLmtleVVwKGV2ZW50Lm5hbWUsIHRpbWUpO1xuICAgICAgICAvLyB9O1xuICAgICAgICBcbiAgICAgICAgLy8gY29uc3Qgbm90ZU9uQ2FsbGJhY2sgPSAodGltZTogVG9uZS5Vbml0LlRpbWUsIGV2ZW50OiBOb3RlT25FdmVudCkgPT4ge1xuICAgICAgICAvLyAgICAgVG9uZS5EcmF3LnNjaGVkdWxlKCgpID0+IHRoaXMucGFpbnRLZXkoZXZlbnQsIHRydWUpLCB0aW1lKTtcbiAgICAgICAgLy8gICAgIHBpYW5vLmtleURvd24oZXZlbnQubmFtZSwgdGltZSwgZXZlbnQudmVsb2NpdHkpO1xuICAgICAgICAvLyB9O1xuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBbmltYXRpb247XG4iXX0=