"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const experiment_1 = require("./experiment");
const MyAlert_1 = require("../../MyAlert");
async function tryCatch(fn, when) {
    try {
        await fn();
    }
    catch (e) {
        await MyAlert_1.default.big.error({
            title: `An error has occurred when ${when}`,
            html: e,
        });
    }
}
exports.tryCatch = tryCatch;
async function load(reload) {
    console.group(`Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.skipFade = Glob_1.default.BigConfig.dev.skip_fade();
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    Glob_1.default.Title
        .html(`${subconfig.truth.name}`)
        .cacheAppend({
        levelh3: bhe_1.elem({
            tag: 'h3'
        }),
        trialh3: bhe_1.elem({
            tag: 'h3'
        })
    });
    console.time(`new Experiment() and init()`);
    const experiment = new experiment_1.default(subconfig.store);
    await tryCatch(() => experiment.init(subconfig), 'trying to initialize Experiment');
    console.timeEnd(`new Experiment() and init()`);
    if (Glob_1.default.BigConfig.experiment_type === "test" || Glob_1.default.BigConfig.dev.simulate_test_mode('Running.index.ts')) {
        if (!Glob_1.default.BigConfig.dev.skip_experiment_intro('Running.index.ts')) {
            await tryCatch(() => experiment.intro(), 'trying to play experiment intro');
        }
    }
    const levelCollection = subconfig.getLevelCollection();
    if (!Glob_1.default.BigConfig.dev.skip_level_intro('Running.index.ts')) {
        await tryCatch(() => experiment.levelIntro(levelCollection), 'trying to play levelIntro');
    }
    await tryCatch(() => experiment.record(levelCollection), 'trying to record');
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBTWpDLDZDQUFzQztBQUN0QywyQ0FBb0M7QUFFcEMsS0FBSyxVQUFVLFFBQVEsQ0FBQyxFQUF1QixFQUFFLElBQVk7SUFDekQsSUFBSTtRQUNBLE1BQU0sRUFBRSxFQUFFLENBQUM7S0FDZDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBR1IsTUFBTSxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDcEIsS0FBSyxFQUFFLDhCQUE4QixJQUFJLEVBQUU7WUFDM0MsSUFBSSxFQUFFLENBQUM7U0FDVixDQUFDLENBQUM7S0FDTjtBQUNMLENBQUM7QUFzRGMsNEJBQVE7QUFsRHZCLEtBQUssVUFBVSxJQUFJLENBQUMsTUFBZTtJQUUvQixPQUFPLENBQUMsS0FBSyxDQUFDLHNCQUFzQixNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRS9DLGNBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUNyQyxJQUFJLE1BQU0sRUFBRTtRQUNSLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQixPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUM1QjtJQUNELGNBQUksQ0FBQyxRQUFRLEdBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFL0MsY0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN0QixNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBR2hELGNBQUksQ0FBQyxLQUFLO1NBQ0wsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUUvQixXQUFXLENBQUM7UUFDVCxPQUFPLEVBQUUsVUFBSSxDQUFDO1lBQ1YsR0FBRyxFQUFFLElBQUk7U0FDWixDQUFDO1FBQ0YsT0FBTyxFQUFFLFVBQUksQ0FBQztZQUNWLEdBQUcsRUFBRSxJQUFJO1NBQ1osQ0FBQztLQUNMLENBQUMsQ0FBQztJQUdQLE9BQU8sQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUU1QyxNQUFNLFVBQVUsR0FBRyxJQUFJLG9CQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25ELE1BQU0sUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztJQUNwRixPQUFPLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDL0MsSUFBSSxjQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsS0FBSyxNQUFNLElBQUksY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsRUFBRTtRQUN4RyxJQUFJLENBQUMsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUUvRCxNQUFNLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztTQUUvRTtLQUNKO0lBQ0QsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDdkQsSUFBSSxDQUFDLGNBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLEVBQUU7UUFDMUQsTUFBTSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0tBQzdGO0lBQ0QsTUFBTSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBRTdFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUV2QixDQUFDO0FBRVEsb0JBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgZWxlbSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbi8vIGltcG9ydCBrZXlib2FyZCBmcm9tICcuL2tleWJvYXJkJ1xuLy8gaW1wb3J0IERpYWxvZyBmcm9tICcuL2RpYWxvZydcbi8vIGltcG9ydCB7IFBpYW5vIH0gZnJvbSBcIi4uLy4uL1BpYW5vXCJcbi8vIGltcG9ydCB7IFBpYW5vLCBQaWFub09wdGlvbnMgfSBmcm9tIFwiLi4vLi4vUGlhbm9cIlxuLy8gaW1wb3J0IHsgTWlkaSB9IGZyb20gXCJAdG9uZWpzL21pZGlcIjtcbmltcG9ydCBFeHBlcmltZW50IGZyb20gXCIuL2V4cGVyaW1lbnRcIjtcbmltcG9ydCBNeUFsZXJ0IGZyb20gXCIuLi8uLi9NeUFsZXJ0XCI7XG5cbmFzeW5jIGZ1bmN0aW9uIHRyeUNhdGNoKGZuOiAoKSA9PiBQcm9taXNlPHZvaWQ+LCB3aGVuOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBmbigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcblxuXG4gICAgICAgIGF3YWl0IE15QWxlcnQuYmlnLmVycm9yKHtcbiAgICAgICAgICAgIHRpdGxlOiBgQW4gZXJyb3IgaGFzIG9jY3VycmVkIHdoZW4gJHt3aGVufWAsXG4gICAgICAgICAgICBodG1sOiBlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbi8qKnJlcXVpcmUoJy4vUnVubmluZycpLmxvYWQoKVxuICogRE9OVCBpbXBvcnQgKiBhcyBydW5uaW5nUGFnZSwgdGhpcyBjYWxscyBjb25zdHJ1Y3RvcnMgZXRjKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWQocmVsb2FkOiBib29sZWFuKSB7XG4gICAgLy8gKiogIFBlcmZvcm1hbmNlLCB2aXN1YWxzIHN5bmM6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub25lanMvVG9uZS5qcy93aWtpL1BlcmZvcm1hbmNlXG4gICAgY29uc29sZS5ncm91cChgUnVubmluZy5pbmRleC5sb2FkKCR7cmVsb2FkfSlgKTtcblxuICAgIEdsb2IuQmlnQ29uZmlnLmxhc3RfcGFnZSA9IFwicnVubmluZ1wiO1xuICAgIGlmIChyZWxvYWQpIHtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICByZXR1cm4gdXRpbC5yZWxvYWRQYWdlKCk7XG4gICAgfVxuICAgIEdsb2Iuc2tpcEZhZGUgPSBHbG9iLkJpZ0NvbmZpZy5kZXYuc2tpcF9mYWRlKCk7XG5cbiAgICBHbG9iLlNpZGViYXIucmVtb3ZlKCk7XG4gICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG5cblxuICAgIEdsb2IuVGl0bGVcbiAgICAgICAgLmh0bWwoYCR7c3ViY29uZmlnLnRydXRoLm5hbWV9YClcblxuICAgICAgICAuY2FjaGVBcHBlbmQoe1xuICAgICAgICAgICAgbGV2ZWxoMzogZWxlbSh7XG4gICAgICAgICAgICAgICAgdGFnOiAnaDMnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRyaWFsaDM6IGVsZW0oe1xuICAgICAgICAgICAgICAgIHRhZzogJ2gzJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG5cblxuICAgIGNvbnNvbGUudGltZShgbmV3IEV4cGVyaW1lbnQoKSBhbmQgaW5pdCgpYCk7XG4gICAgLy8gY29uc3QgZXhwZXJpbWVudCA9IG5ldyBFeHBlcmltZW50KHN1YmNvbmZpZy50cnV0aC5uYW1lLCBzdWJjb25maWcuZGVtb190eXBlKTtcbiAgICBjb25zdCBleHBlcmltZW50ID0gbmV3IEV4cGVyaW1lbnQoc3ViY29uZmlnLnN0b3JlKTtcbiAgICBhd2FpdCB0cnlDYXRjaCgoKSA9PiBleHBlcmltZW50LmluaXQoc3ViY29uZmlnKSwgJ3RyeWluZyB0byBpbml0aWFsaXplIEV4cGVyaW1lbnQnKTtcbiAgICBjb25zb2xlLnRpbWVFbmQoYG5ldyBFeHBlcmltZW50KCkgYW5kIGluaXQoKWApO1xuICAgIGlmIChHbG9iLkJpZ0NvbmZpZy5leHBlcmltZW50X3R5cGUgPT09IFwidGVzdFwiIHx8IEdsb2IuQmlnQ29uZmlnLmRldi5zaW11bGF0ZV90ZXN0X21vZGUoJ1J1bm5pbmcuaW5kZXgudHMnKSkge1xuICAgICAgICBpZiAoIUdsb2IuQmlnQ29uZmlnLmRldi5za2lwX2V4cGVyaW1lbnRfaW50cm8oJ1J1bm5pbmcuaW5kZXgudHMnKSkge1xuICAgICAgICAgICAgLy8gVE9ETzogbGltaXQgYnkgbWF4Tm90ZXNcbiAgICAgICAgICAgIGF3YWl0IHRyeUNhdGNoKCgpID0+IGV4cGVyaW1lbnQuaW50cm8oKSwgJ3RyeWluZyB0byBwbGF5IGV4cGVyaW1lbnQgaW50cm8nKTtcblxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGxldmVsQ29sbGVjdGlvbiA9IHN1YmNvbmZpZy5nZXRMZXZlbENvbGxlY3Rpb24oKTtcbiAgICBpZiAoIUdsb2IuQmlnQ29uZmlnLmRldi5za2lwX2xldmVsX2ludHJvKCdSdW5uaW5nLmluZGV4LnRzJykpIHtcbiAgICAgICAgYXdhaXQgdHJ5Q2F0Y2goKCkgPT4gZXhwZXJpbWVudC5sZXZlbEludHJvKGxldmVsQ29sbGVjdGlvbiksICd0cnlpbmcgdG8gcGxheSBsZXZlbEludHJvJyk7XG4gICAgfVxuICAgIGF3YWl0IHRyeUNhdGNoKCgpID0+IGV4cGVyaW1lbnQucmVjb3JkKGxldmVsQ29sbGVjdGlvbiksICd0cnlpbmcgdG8gcmVjb3JkJyk7XG5cbiAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG5cbn1cblxuZXhwb3J0IHsgbG9hZCwgdHJ5Q2F0Y2ggfVxuIl19