"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const dialog_1 = require("./dialog");
const Piano_1 = require("../../Piano");
const midi_1 = require("@tonejs/midi");
const Tone = require("tone");
async function load(reload) {
    console.group(`pages.Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    const piano = new Piano_1.Piano({
        samples: SALAMANDER_PATH_ABS,
        release: true,
        pedal: true,
        velocities: 5,
    }).toDestination();
    await piano.load();
    console.log('piano loaded');
    const midi = await midi_1.Midi.fromUrl(subconfig.truth.midi.absPath);
    console.log('midi loaded');
    const noteOffEvents = new Tone.Part((time, event) => {
        piano.keyUp(event.note, time);
    }, midi.tracks[0].notes.map(n => ({
        note: n.name,
        time: n.time + n.duration,
    }))).start(0);
    const noteOnEvents = new Tone.Part((time, event) => {
        piano.keyDown(event.note, time, event.velocity);
    }, midi.tracks[0].notes.map(n => ({
        note: n.name,
        velocity: n.velocity,
        duration: n.duration,
        time: n.time,
    }))).start(0);
    Tone.Transport.start();
    remote.globalShortcut.register("M", () => Tone.Transport.toggle());
    console.log({ subconfig, midi, piano, "Tone.Transport.state": Tone.Transport.state, });
    Glob_1.default.Title.html(`${subconfig.truth.name}`);
    const subtitle = bhe_1.elem({ tag: 'h3', text: '1/1' });
    const dialog = new dialog_1.default(subconfig.demo_type);
    Glob_1.default.MainContent.append(subtitle, dialog);
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBRWpDLHFDQUE2QjtBQUM3Qix1Q0FBbUM7QUFDbkMsdUNBQW9DO0FBQ3BDLDZCQUE2QjtBQU03QixLQUFLLFVBQVUsSUFBSSxDQUFDLE1BQWU7SUFFL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNyRCxjQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDckMsSUFBSyxNQUFNLEVBQUc7UUFDVixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkIsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDNUI7SUFDRCxjQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3RCLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDaEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxhQUFLLENBQUM7UUFDcEIsT0FBTyxFQUFHLG1CQUFtQjtRQUM3QixPQUFPLEVBQUcsSUFBSTtRQUNkLEtBQUssRUFBRyxJQUFJO1FBQ1osVUFBVSxFQUFHLENBQUM7S0FDakIsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ25CLE1BQU0sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxXQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlELE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFM0IsTUFBTSxhQUFhLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ2hELEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QixJQUFJLEVBQUcsQ0FBQyxDQUFDLElBQUk7UUFDYixJQUFJLEVBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsUUFBUTtLQUM3QixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVkLE1BQU0sWUFBWSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUMvQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRCxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QixJQUFJLEVBQUcsQ0FBQyxDQUFDLElBQUk7UUFDYixRQUFRLEVBQUcsQ0FBQyxDQUFDLFFBQVE7UUFDckIsUUFBUSxFQUFHLENBQUMsQ0FBQyxRQUFRO1FBQ3JCLElBQUksRUFBRyxDQUFDLENBQUMsSUFBSTtLQUNoQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdkIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUVuRSxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsc0JBQXNCLEVBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ3hGLGNBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRTNDLE1BQU0sUUFBUSxHQUFHLFVBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRyxJQUFJLEVBQUUsSUFBSSxFQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDcEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQkFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUUvQyxjQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FDbkIsUUFBUSxFQUNSLE1BQU0sQ0FDVCxDQUFDO0lBQ0YsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBRXZCLENBQUM7QUFFUSxvQkFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHbG9iIGZyb20gXCIuLi8uLi9HbG9iXCI7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBlbGVtIH0gZnJvbSBcIi4uLy4uL2JoZVwiO1xuaW1wb3J0IGFuaW1hdGlvbiBmcm9tICcuL2FuaW1hdGlvbidcbmltcG9ydCBEaWFsb2cgZnJvbSAnLi9kaWFsb2cnXG5pbXBvcnQgeyBQaWFubyB9IGZyb20gXCIuLi8uLi9QaWFub1wiXG5pbXBvcnQgeyBNaWRpIH0gZnJvbSBcIkB0b25lanMvbWlkaVwiO1xuaW1wb3J0ICogYXMgVG9uZSBmcm9tIFwidG9uZVwiO1xuXG4vLyBjb25zdCB7IFBpYW5vIH0gPSByZXF1aXJlKFwiQHRvbmVqcy9waWFub1wiKTtcblxuLyoqaW1wb3J0ICogYXMgcnVubmluZ1BhZ2UgZnJvbSBcIi4uL1J1bm5pbmdcIlxuICogcmVxdWlyZSgnLi9SdW5uaW5nJykqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZChyZWxvYWQ6IGJvb2xlYW4pIHtcbiAgICAvLyAqKiAgUGVyZm9ybWFuY2UsIHZpc3VhbHMgc3luYzogaHR0cHM6Ly9naXRodWIuY29tL1RvbmVqcy9Ub25lLmpzL3dpa2kvUGVyZm9ybWFuY2VcbiAgICBjb25zb2xlLmdyb3VwKGBwYWdlcy5SdW5uaW5nLmluZGV4LmxvYWQoJHtyZWxvYWR9KWApO1xuICAgIEdsb2IuQmlnQ29uZmlnLmxhc3RfcGFnZSA9IFwicnVubmluZ1wiO1xuICAgIGlmICggcmVsb2FkICkge1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIHJldHVybiB1dGlsLnJlbG9hZFBhZ2UoKTtcbiAgICB9XG4gICAgR2xvYi5TaWRlYmFyLnJlbW92ZSgpO1xuICAgIGNvbnN0IHN1YmNvbmZpZyA9IEdsb2IuQmlnQ29uZmlnLmdldFN1YmNvbmZpZygpO1xuICAgIGNvbnN0IHBpYW5vID0gbmV3IFBpYW5vKHtcbiAgICAgICAgc2FtcGxlcyA6IFNBTEFNQU5ERVJfUEFUSF9BQlMsXG4gICAgICAgIHJlbGVhc2UgOiB0cnVlLFxuICAgICAgICBwZWRhbCA6IHRydWUsXG4gICAgICAgIHZlbG9jaXRpZXMgOiA1LFxuICAgIH0pLnRvRGVzdGluYXRpb24oKTtcbiAgICBhd2FpdCBwaWFuby5sb2FkKCk7XG4gICAgY29uc29sZS5sb2coJ3BpYW5vIGxvYWRlZCcpO1xuICAgIGNvbnN0IG1pZGkgPSBhd2FpdCBNaWRpLmZyb21Vcmwoc3ViY29uZmlnLnRydXRoLm1pZGkuYWJzUGF0aCk7XG4gICAgY29uc29sZS5sb2coJ21pZGkgbG9hZGVkJyk7XG4gICAgXG4gICAgY29uc3Qgbm90ZU9mZkV2ZW50cyA9IG5ldyBUb25lLlBhcnQoKHRpbWUsIGV2ZW50KSA9PiB7XG4gICAgICAgIHBpYW5vLmtleVVwKGV2ZW50Lm5vdGUsIHRpbWUpO1xuICAgIH0sIG1pZGkudHJhY2tzWzBdLm5vdGVzLm1hcChuID0+ICh7XG4gICAgICAgIG5vdGUgOiBuLm5hbWUsXG4gICAgICAgIHRpbWUgOiBuLnRpbWUgKyBuLmR1cmF0aW9uLFxuICAgIH0pKSkuc3RhcnQoMCk7XG4gICAgXG4gICAgY29uc3Qgbm90ZU9uRXZlbnRzID0gbmV3IFRvbmUuUGFydCgodGltZSwgZXZlbnQpID0+IHtcbiAgICAgICAgcGlhbm8ua2V5RG93bihldmVudC5ub3RlLCB0aW1lLCBldmVudC52ZWxvY2l0eSk7XG4gICAgfSwgbWlkaS50cmFja3NbMF0ubm90ZXMubWFwKG4gPT4gKHtcbiAgICAgICAgbm90ZSA6IG4ubmFtZSxcbiAgICAgICAgdmVsb2NpdHkgOiBuLnZlbG9jaXR5LFxuICAgICAgICBkdXJhdGlvbiA6IG4uZHVyYXRpb24sXG4gICAgICAgIHRpbWUgOiBuLnRpbWUsXG4gICAgfSkpKS5zdGFydCgwKTtcbiAgICBUb25lLlRyYW5zcG9ydC5zdGFydCgpO1xuICAgIHJlbW90ZS5nbG9iYWxTaG9ydGN1dC5yZWdpc3RlcihcIk1cIiwgKCkgPT4gVG9uZS5UcmFuc3BvcnQudG9nZ2xlKCkpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKHsgc3ViY29uZmlnLCBtaWRpLCBwaWFubywgXCJUb25lLlRyYW5zcG9ydC5zdGF0ZVwiIDogVG9uZS5UcmFuc3BvcnQuc3RhdGUsIH0pO1xuICAgIEdsb2IuVGl0bGUuaHRtbChgJHtzdWJjb25maWcudHJ1dGgubmFtZX1gKTtcbiAgICBcbiAgICBjb25zdCBzdWJ0aXRsZSA9IGVsZW0oeyB0YWcgOiAnaDMnLCB0ZXh0IDogJzEvMScgfSk7XG4gICAgY29uc3QgZGlhbG9nID0gbmV3IERpYWxvZyhzdWJjb25maWcuZGVtb190eXBlKTtcbiAgICBcbiAgICBHbG9iLk1haW5Db250ZW50LmFwcGVuZChcbiAgICAgICAgc3VidGl0bGUsXG4gICAgICAgIGRpYWxvZ1xuICAgICk7XG4gICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIFxufVxuXG5leHBvcnQgeyBsb2FkIH1cbiJdfQ==