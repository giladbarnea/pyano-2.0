"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const experiment_1 = require("./experiment");
const MyAlert_1 = require("../../MyAlert");
async function tryCatch(fn, when) {
    try {
        await fn();
    }
    catch (e) {
        const { where, what } = e.toObj();
        let onOpen = () => {
            if (Glob_1.default.BigConfig.get('dev')) {
                throw e;
            }
            else {
                console.error(e);
            }
        };
        await MyAlert_1.default.big.error({
            title: `An error has occurred when ${when}`,
            html: `${what}<p>${where}</p>`,
            onOpen
        });
    }
}
exports.tryCatch = tryCatch;
async function load(reload) {
    console.group(`Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.skipFade = Glob_1.default.BigConfig.dev.skip_fade();
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    Glob_1.default.Title
        .html(`${subconfig.truth.name}`)
        .cacheAppend({
        levelh3: bhe_1.elem({
            tag: 'h3'
        }),
        trialh3: bhe_1.elem({
            tag: 'h3'
        })
    });
    let readonlyTruth = subconfig.truth.toReadOnly();
    console.time(`new Experiment() and init()`);
    const experiment = new experiment_1.default(subconfig.demo_type);
    await experiment.init(readonlyTruth);
    console.timeEnd(`new Experiment() and init()`);
    if (Glob_1.default.BigConfig.experiment_type === "test" || Glob_1.default.BigConfig.dev.simulate_test_mode('Running.index.ts')) {
        if (!Glob_1.default.BigConfig.dev.skip_experiment_intro('Running.index.ts')) {
            await tryCatch(() => experiment.intro(), 'trying to play experiment intro');
        }
    }
    const levelCollection = subconfig.getLevelCollection();
    try {
        await experiment.levelIntro(levelCollection);
    }
    catch (e) {
        const { where, what } = e.toObj();
        await MyAlert_1.default.big.error({
            title: 'An error has occurred while trying to play levelIntro',
            html: `${what}<p>${where}</p>`
        });
        throw e;
    }
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBTWpDLDZDQUFzQztBQUN0QywyQ0FBb0M7QUFFcEMsS0FBSyxVQUFVLFFBQVEsQ0FBQyxFQUFpQixFQUFFLElBQVk7SUFDbkQsSUFBSTtRQUNBLE1BQU0sRUFBRSxFQUFFLENBQUM7S0FDZDtJQUFDLE9BQVEsQ0FBQyxFQUFHO1FBQ1YsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEMsSUFBSSxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ2QsSUFBSyxjQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRztnQkFDN0IsTUFBTSxDQUFDLENBQUE7YUFFVjtpQkFBTTtnQkFDSCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ25CO1FBQ0wsQ0FBQyxDQUFDO1FBRUYsTUFBTSxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDcEIsS0FBSyxFQUFHLDhCQUE4QixJQUFJLEVBQUU7WUFDNUMsSUFBSSxFQUFHLEdBQUcsSUFBSSxNQUFNLEtBQUssTUFBTTtZQUMvQixNQUFNO1NBQ1QsQ0FBQyxDQUFDO0tBQ047QUFDTCxDQUFDO0FBOERjLDRCQUFRO0FBMUR2QixLQUFLLFVBQVUsSUFBSSxDQUFDLE1BQWU7SUFFL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUUvQyxjQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDckMsSUFBSyxNQUFNLEVBQUc7UUFDVixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkIsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDNUI7SUFDRCxjQUFJLENBQUMsUUFBUSxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBRS9DLGNBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdEIsTUFBTSxTQUFTLEdBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUdoRCxjQUFJLENBQUMsS0FBSztTQUNMLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7U0FFL0IsV0FBVyxDQUFDO1FBQ1QsT0FBTyxFQUFHLFVBQUksQ0FBQztZQUNYLEdBQUcsRUFBRyxJQUFJO1NBQ2IsQ0FBQztRQUNGLE9BQU8sRUFBRyxVQUFJLENBQUM7WUFDWCxHQUFHLEVBQUcsSUFBSTtTQUNiLENBQUM7S0FDTCxDQUFDLENBQUM7SUFHUCxJQUFJLGFBQWEsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2pELE9BQU8sQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUM1QyxNQUFNLFVBQVUsR0FBRyxJQUFJLG9CQUFVLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyQyxPQUFPLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDL0MsSUFBSyxjQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsS0FBSyxNQUFNLElBQUksY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsRUFBRztRQUMxRyxJQUFLLENBQUMsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLENBQUMsRUFBRztZQUVqRSxNQUFNLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztTQUUvRTtLQUNKO0lBQ0QsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFHdkQsSUFBSTtRQUNBLE1BQU0sVUFBVSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztLQUVoRDtJQUFDLE9BQVEsQ0FBQyxFQUFHO1FBQ1YsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEMsTUFBTSxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDcEIsS0FBSyxFQUFHLHVEQUF1RDtZQUMvRCxJQUFJLEVBQUcsR0FBRyxJQUFJLE1BQU0sS0FBSyxNQUFNO1NBQ2xDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxDQUFBO0tBQ1Y7SUFDRCxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7QUFFdkIsQ0FBQztBQUVRLG9CQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdsb2IgZnJvbSBcIi4uLy4uL0dsb2JcIjtcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCB7IGVsZW0gfSBmcm9tIFwiLi4vLi4vYmhlXCI7XG4vLyBpbXBvcnQga2V5Ym9hcmQgZnJvbSAnLi9rZXlib2FyZCdcbi8vIGltcG9ydCBEaWFsb2cgZnJvbSAnLi9kaWFsb2cnXG4vLyBpbXBvcnQgeyBQaWFubyB9IGZyb20gXCIuLi8uLi9QaWFub1wiXG4vLyBpbXBvcnQgeyBQaWFubywgUGlhbm9PcHRpb25zIH0gZnJvbSBcIi4uLy4uL1BpYW5vXCJcbi8vIGltcG9ydCB7IE1pZGkgfSBmcm9tIFwiQHRvbmVqcy9taWRpXCI7XG5pbXBvcnQgRXhwZXJpbWVudCBmcm9tIFwiLi9leHBlcmltZW50XCI7XG5pbXBvcnQgTXlBbGVydCBmcm9tIFwiLi4vLi4vTXlBbGVydFwiO1xuXG5hc3luYyBmdW5jdGlvbiB0cnlDYXRjaChmbjogQXN5bmNGdW5jdGlvbiwgd2hlbjogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZm4oKTtcbiAgICB9IGNhdGNoICggZSApIHtcbiAgICAgICAgY29uc3QgeyB3aGVyZSwgd2hhdCB9ID0gZS50b09iaigpO1xuICAgICAgICBsZXQgb25PcGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCBHbG9iLkJpZ0NvbmZpZy5nZXQoJ2RldicpICkge1xuICAgICAgICAgICAgICAgIHRocm93IGVcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgTXlBbGVydC5iaWcuZXJyb3Ioe1xuICAgICAgICAgICAgdGl0bGUgOiBgQW4gZXJyb3IgaGFzIG9jY3VycmVkIHdoZW4gJHt3aGVufWAsXG4gICAgICAgICAgICBodG1sIDogYCR7d2hhdH08cD4ke3doZXJlfTwvcD5gLFxuICAgICAgICAgICAgb25PcGVuXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuLyoqcmVxdWlyZSgnLi9SdW5uaW5nJykubG9hZCgpXG4gKiBET05UIGltcG9ydCAqIGFzIHJ1bm5pbmdQYWdlLCB0aGlzIGNhbGxzIGNvbnN0cnVjdG9ycyBldGMqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZChyZWxvYWQ6IGJvb2xlYW4pIHtcbiAgICAvLyAqKiAgUGVyZm9ybWFuY2UsIHZpc3VhbHMgc3luYzogaHR0cHM6Ly9naXRodWIuY29tL1RvbmVqcy9Ub25lLmpzL3dpa2kvUGVyZm9ybWFuY2VcbiAgICBjb25zb2xlLmdyb3VwKGBSdW5uaW5nLmluZGV4LmxvYWQoJHtyZWxvYWR9KWApO1xuICAgIFxuICAgIEdsb2IuQmlnQ29uZmlnLmxhc3RfcGFnZSA9IFwicnVubmluZ1wiO1xuICAgIGlmICggcmVsb2FkICkge1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIHJldHVybiB1dGlsLnJlbG9hZFBhZ2UoKTtcbiAgICB9XG4gICAgR2xvYi5za2lwRmFkZSA9IEdsb2IuQmlnQ29uZmlnLmRldi5za2lwX2ZhZGUoKTtcbiAgICBcbiAgICBHbG9iLlNpZGViYXIucmVtb3ZlKCk7XG4gICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG4gICAgXG4gICAgXG4gICAgR2xvYi5UaXRsZVxuICAgICAgICAuaHRtbChgJHtzdWJjb25maWcudHJ1dGgubmFtZX1gKVxuICAgIFxuICAgICAgICAuY2FjaGVBcHBlbmQoe1xuICAgICAgICAgICAgbGV2ZWxoMyA6IGVsZW0oe1xuICAgICAgICAgICAgICAgIHRhZyA6ICdoMydcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdHJpYWxoMyA6IGVsZW0oe1xuICAgICAgICAgICAgICAgIHRhZyA6ICdoMydcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIFxuICAgIFxuICAgIGxldCByZWFkb25seVRydXRoID0gc3ViY29uZmlnLnRydXRoLnRvUmVhZE9ubHkoKTtcbiAgICBjb25zb2xlLnRpbWUoYG5ldyBFeHBlcmltZW50KCkgYW5kIGluaXQoKWApO1xuICAgIGNvbnN0IGV4cGVyaW1lbnQgPSBuZXcgRXhwZXJpbWVudChzdWJjb25maWcuZGVtb190eXBlKTtcbiAgICBhd2FpdCBleHBlcmltZW50LmluaXQocmVhZG9ubHlUcnV0aCk7XG4gICAgY29uc29sZS50aW1lRW5kKGBuZXcgRXhwZXJpbWVudCgpIGFuZCBpbml0KClgKTtcbiAgICBpZiAoIEdsb2IuQmlnQ29uZmlnLmV4cGVyaW1lbnRfdHlwZSA9PT0gXCJ0ZXN0XCIgfHwgR2xvYi5CaWdDb25maWcuZGV2LnNpbXVsYXRlX3Rlc3RfbW9kZSgnUnVubmluZy5pbmRleC50cycpICkge1xuICAgICAgICBpZiAoICFHbG9iLkJpZ0NvbmZpZy5kZXYuc2tpcF9leHBlcmltZW50X2ludHJvKCdSdW5uaW5nLmluZGV4LnRzJykgKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBsaW1pdCBieSBtYXhOb3Rlc1xuICAgICAgICAgICAgYXdhaXQgdHJ5Q2F0Y2goKCkgPT4gZXhwZXJpbWVudC5pbnRybygpLCAndHJ5aW5nIHRvIHBsYXkgZXhwZXJpbWVudCBpbnRybycpO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGV2ZWxDb2xsZWN0aW9uID0gc3ViY29uZmlnLmdldExldmVsQ29sbGVjdGlvbigpO1xuICAgIFxuICAgIFxuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGV4cGVyaW1lbnQubGV2ZWxJbnRybyhsZXZlbENvbGxlY3Rpb24pO1xuICAgICAgICBcbiAgICB9IGNhdGNoICggZSApIHtcbiAgICAgICAgY29uc3QgeyB3aGVyZSwgd2hhdCB9ID0gZS50b09iaigpO1xuICAgICAgICBhd2FpdCBNeUFsZXJ0LmJpZy5lcnJvcih7XG4gICAgICAgICAgICB0aXRsZSA6ICdBbiBlcnJvciBoYXMgb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIHBsYXkgbGV2ZWxJbnRybycsXG4gICAgICAgICAgICBodG1sIDogYCR7d2hhdH08cD4ke3doZXJlfTwvcD5gXG4gICAgICAgIH0pO1xuICAgICAgICB0aHJvdyBlXG4gICAgfVxuICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICBcbn1cblxuZXhwb3J0IHsgbG9hZCwgdHJ5Q2F0Y2ggfVxuIl19