"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const experiment_1 = require("./experiment");
const MyPyShell_1 = require("../../MyPyShell");
async function load(reload) {
    console.group(`pages.Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.skipFade = Glob_1.default.BigConfig.dev.skip_fade();
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    Glob_1.default.Title
        .html(`${subconfig.truth.name}`)
        .cacheAppend({
        levelh3: bhe_1.elem({
            tag: 'h3'
        }),
        trialh3: bhe_1.elem({
            tag: 'h3'
        })
    });
    const PY_getOnOffPairs = new MyPyShell_1.MyPyShell('-m txt.get_on_off_pairs', {
        mode: "json",
        args: [subconfig.truth_file]
    });
    const { pairs } = await PY_getOnOffPairs.runAsync();
    console.log({ pairs });
    let readonlyTruth = subconfig.truth.toReadOnly();
    const experiment = new experiment_1.default(subconfig.demo_type);
    await experiment.init(readonlyTruth);
    if (Glob_1.default.BigConfig.experiment_type === "test") {
        await experiment.intro();
    }
    const levelCollection = subconfig.getLevelCollection();
    await experiment.levelIntro(levelCollection, pairs);
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBT2pDLDZDQUFzQztBQUN0QywrQ0FBNEM7QUFRNUMsS0FBSyxVQUFVLElBQUksQ0FBQyxNQUFlO0lBRS9CLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFckQsY0FBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQ3JDLElBQUssTUFBTSxFQUFHO1FBQ1YsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQzVCO0lBQ0QsY0FBSSxDQUFDLFFBQVEsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUUvQyxjQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3RCLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7SUFHaEQsY0FBSSxDQUFDLEtBQUs7U0FDTCxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBRS9CLFdBQVcsQ0FBQztRQUNULE9BQU8sRUFBRyxVQUFJLENBQUM7WUFDWCxHQUFHLEVBQUcsSUFBSTtTQUNiLENBQUM7UUFDRixPQUFPLEVBQUcsVUFBSSxDQUFDO1lBQ1gsR0FBRyxFQUFHLElBQUk7U0FDYixDQUFDO0tBQ0wsQ0FBQyxDQUFDO0lBQ1AsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLHFCQUFTLENBQUMseUJBQXlCLEVBQUU7UUFDOUQsSUFBSSxFQUFHLE1BQU07UUFDYixJQUFJLEVBQUcsQ0FBRSxTQUFTLENBQUMsVUFBVSxDQUFFO0tBQ2xDLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxNQUFNLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBRXZCLElBQUksYUFBYSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDakQsTUFBTSxVQUFVLEdBQUcsSUFBSSxvQkFBVSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2RCxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDckMsSUFBSyxjQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsS0FBSyxNQUFNLEVBQUc7UUFFN0MsTUFBTSxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDNUI7SUFDRCxNQUFNLGVBQWUsR0FBRyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUd2RCxNQUFNLFVBQVUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3BELE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUV2QixDQUFDO0FBRVEsb0JBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgZWxlbSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbi8vIGltcG9ydCBrZXlib2FyZCBmcm9tICcuL2tleWJvYXJkJ1xuLy8gaW1wb3J0IERpYWxvZyBmcm9tICcuL2RpYWxvZydcbi8vIGltcG9ydCB7IFBpYW5vIH0gZnJvbSBcIi4uLy4uL1BpYW5vXCJcbi8vIGltcG9ydCB7IFBpYW5vLCBQaWFub09wdGlvbnMgfSBmcm9tIFwiLi4vLi4vUGlhbm9cIlxuLy8gaW1wb3J0IHsgTWlkaSB9IGZyb20gXCJAdG9uZWpzL21pZGlcIjtcbmltcG9ydCAqIGFzIFRvbmUgZnJvbSBcInRvbmVcIjtcbmltcG9ydCBFeHBlcmltZW50IGZyb20gXCIuL2V4cGVyaW1lbnRcIjtcbmltcG9ydCB7IE15UHlTaGVsbCB9IGZyb20gXCIuLi8uLi9NeVB5U2hlbGxcIjtcbmltcG9ydCB7IGVudW1lcmF0ZSB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5cbi8vIGNvbnN0IHsgUGlhbm8gfSA9IHJlcXVpcmUoXCJAdG9uZWpzL3BpYW5vXCIpO1xuXG5cbi8qKnJlcXVpcmUoJy4vUnVubmluZycpLmxvYWQoKVxuICogRE9OVCBpbXBvcnQgKiBhcyBydW5uaW5nUGFnZSwgdGhpcyBjYWxscyBjb25zdHJ1Y3RvcnMgZXRjKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWQocmVsb2FkOiBib29sZWFuKSB7XG4gICAgLy8gKiogIFBlcmZvcm1hbmNlLCB2aXN1YWxzIHN5bmM6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub25lanMvVG9uZS5qcy93aWtpL1BlcmZvcm1hbmNlXG4gICAgY29uc29sZS5ncm91cChgcGFnZXMuUnVubmluZy5pbmRleC5sb2FkKCR7cmVsb2FkfSlgKTtcbiAgICBcbiAgICBHbG9iLkJpZ0NvbmZpZy5sYXN0X3BhZ2UgPSBcInJ1bm5pbmdcIjtcbiAgICBpZiAoIHJlbG9hZCApIHtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICByZXR1cm4gdXRpbC5yZWxvYWRQYWdlKCk7XG4gICAgfVxuICAgIEdsb2Iuc2tpcEZhZGUgPSBHbG9iLkJpZ0NvbmZpZy5kZXYuc2tpcF9mYWRlKCk7XG4gICAgXG4gICAgR2xvYi5TaWRlYmFyLnJlbW92ZSgpO1xuICAgIGNvbnN0IHN1YmNvbmZpZyA9IEdsb2IuQmlnQ29uZmlnLmdldFN1YmNvbmZpZygpO1xuICAgIFxuICAgIFxuICAgIEdsb2IuVGl0bGVcbiAgICAgICAgLmh0bWwoYCR7c3ViY29uZmlnLnRydXRoLm5hbWV9YClcbiAgICBcbiAgICAgICAgLmNhY2hlQXBwZW5kKHtcbiAgICAgICAgICAgIGxldmVsaDMgOiBlbGVtKHtcbiAgICAgICAgICAgICAgICB0YWcgOiAnaDMnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRyaWFsaDMgOiBlbGVtKHtcbiAgICAgICAgICAgICAgICB0YWcgOiAnaDMnXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICBjb25zdCBQWV9nZXRPbk9mZlBhaXJzID0gbmV3IE15UHlTaGVsbCgnLW0gdHh0LmdldF9vbl9vZmZfcGFpcnMnLCB7XG4gICAgICAgIG1vZGUgOiBcImpzb25cIixcbiAgICAgICAgYXJncyA6IFsgc3ViY29uZmlnLnRydXRoX2ZpbGUgXVxuICAgIH0pO1xuICAgIGNvbnN0IHsgcGFpcnMgfSA9IGF3YWl0IFBZX2dldE9uT2ZmUGFpcnMucnVuQXN5bmMoKTtcbiAgICBjb25zb2xlLmxvZyh7IHBhaXJzIH0pO1xuICAgIFxuICAgIGxldCByZWFkb25seVRydXRoID0gc3ViY29uZmlnLnRydXRoLnRvUmVhZE9ubHkoKTtcbiAgICBjb25zdCBleHBlcmltZW50ID0gbmV3IEV4cGVyaW1lbnQoc3ViY29uZmlnLmRlbW9fdHlwZSk7XG4gICAgYXdhaXQgZXhwZXJpbWVudC5pbml0KHJlYWRvbmx5VHJ1dGgpO1xuICAgIGlmICggR2xvYi5CaWdDb25maWcuZXhwZXJpbWVudF90eXBlID09PSBcInRlc3RcIiApIHtcbiAgICAgICAgLy8gVE9ETzogbGltaXQgYnkgbWF4Tm90ZXNcbiAgICAgICAgYXdhaXQgZXhwZXJpbWVudC5pbnRybygpO1xuICAgIH1cbiAgICBjb25zdCBsZXZlbENvbGxlY3Rpb24gPSBzdWJjb25maWcuZ2V0TGV2ZWxDb2xsZWN0aW9uKCk7XG4gICAgXG4gICAgXG4gICAgYXdhaXQgZXhwZXJpbWVudC5sZXZlbEludHJvKGxldmVsQ29sbGVjdGlvbiwgcGFpcnMpO1xuICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICBcbn1cblxuZXhwb3J0IHsgbG9hZCB9XG4iXX0=