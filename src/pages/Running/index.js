"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const dialog_1 = require("./dialog");
const Piano_1 = require("../../Piano");
const midi_1 = require("@tonejs/midi");
const Tone = require("tone");
async function load(reload) {
    console.group(`pages.Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    const pianoOptions = {
        samples: SALAMANDER_PATH_ABS,
        release: true,
        pedal: false,
        velocities: 1,
    };
    if (Glob_1.default.BigConfig.dev.mute_piano()) {
        console.warn(`Glob.BigConfig.dev.mute_piano()`);
        pianoOptions.volume = { strings: -Infinity, harmonics: -Infinity, keybed: -Infinity, pedal: -Infinity };
    }
    const piano = new Piano_1.Piano(pianoOptions).toDestination();
    await piano.load();
    console.log('piano loaded');
    const midi = await midi_1.Midi.fromUrl(subconfig.truth.midi.absPath);
    console.log('midi loaded');
    const noteOffCallback = (time, event) => {
        piano.keyUp(event.name, time);
    };
    const noteOnCallback = (time, event) => {
        piano.keyDown(event.name, time, event.velocity);
    };
    let noteOffObjs = [];
    let noteOnObjs = [];
    for (let note of midi.tracks[0].notes) {
        let { name, velocity, duration, time: timeOn } = note;
        let timeOff = timeOn + duration;
        noteOffObjs.push({ name, time: timeOff });
        noteOnObjs.push({ name, time: timeOn, duration, velocity });
    }
    const noteOffEvents = new Tone.Part(noteOffCallback, noteOffObjs).start(0);
    const noteOnEvents = new Tone.Part(noteOnCallback, noteOnObjs).start(0);
    Tone.Transport.start();
    remote.globalShortcut.register("M", () => Tone.Transport.toggle());
    console.log({ subconfig, midi, piano });
    Glob_1.default.Title.html(`${subconfig.truth.name}`);
    const subtitle = bhe_1.elem({ tag: 'h3', text: '1/1' });
    const dialog = new dialog_1.default(subconfig.demo_type);
    Glob_1.default.MainContent.append(subtitle, dialog);
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBRWpDLHFDQUE2QjtBQUU3Qix1Q0FBaUQ7QUFDakQsdUNBQW9DO0FBQ3BDLDZCQUE2QjtBQU83QixLQUFLLFVBQVUsSUFBSSxDQUFDLE1BQWU7SUFFL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNyRCxjQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDckMsSUFBSyxNQUFNLEVBQUc7UUFDVixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkIsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDNUI7SUFDRCxjQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3RCLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDaEQsTUFBTSxZQUFZLEdBQTBCO1FBQ3hDLE9BQU8sRUFBRyxtQkFBbUI7UUFDN0IsT0FBTyxFQUFHLElBQUk7UUFDZCxLQUFLLEVBQUcsS0FBSztRQUNiLFVBQVUsRUFBRyxDQUFDO0tBQ2pCLENBQUM7SUFDRixJQUFLLGNBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFHO1FBQ25DLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUNBQWlDLENBQUMsQ0FBQztRQUNoRCxZQUFZLENBQUMsTUFBTSxHQUFHLEVBQUUsT0FBTyxFQUFHLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFHLENBQUMsUUFBUSxFQUFFLENBQUE7S0FDOUc7SUFDRCxNQUFNLEtBQUssR0FBRyxJQUFJLGFBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN0RCxNQUFNLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzVCLE1BQU0sSUFBSSxHQUFHLE1BQU0sV0FBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5RCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBTTNCLE1BQU0sZUFBZSxHQUFHLENBQUMsSUFBb0IsRUFBRSxLQUFtQixFQUFFLEVBQUU7UUFDbEUsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQztJQUNGLE1BQU0sY0FBYyxHQUFHLENBQUMsSUFBb0IsRUFBRSxLQUFrQixFQUFFLEVBQUU7UUFDaEUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDO0lBR0YsSUFBSSxXQUFXLEdBQWMsRUFBRSxDQUFDO0lBQ2hDLElBQUksVUFBVSxHQUFhLEVBQUUsQ0FBQztJQUM5QixLQUFNLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFHO1FBQ3JDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUcsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ3ZELElBQUksT0FBTyxHQUFHLE1BQU0sR0FBRyxRQUFRLENBQUM7UUFDaEMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMzQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRyxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDaEU7SUFFRCxNQUFNLGFBQWEsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRSxNQUFNLFlBQVksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRXZCLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFFbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUN4QyxjQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUUzQyxNQUFNLFFBQVEsR0FBRyxVQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsSUFBSSxFQUFFLElBQUksRUFBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sTUFBTSxHQUFHLElBQUksZ0JBQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFL0MsY0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQ25CLFFBQVEsRUFDUixNQUFNLENBQ1QsQ0FBQztJQUNGLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUV2QixDQUFDO0FBRVEsb0JBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgZWxlbSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbmltcG9ydCBhbmltYXRpb24gZnJvbSAnLi9hbmltYXRpb24nXG5pbXBvcnQgRGlhbG9nIGZyb20gJy4vZGlhbG9nJ1xuLy8gaW1wb3J0IHsgUGlhbm8gfSBmcm9tIFwiLi4vLi4vUGlhbm9cIlxuaW1wb3J0IHsgUGlhbm8sIFBpYW5vT3B0aW9ucyB9IGZyb20gXCIuLi8uLi9QaWFub1wiXG5pbXBvcnQgeyBNaWRpIH0gZnJvbSBcIkB0b25lanMvbWlkaVwiO1xuaW1wb3J0ICogYXMgVG9uZSBmcm9tIFwidG9uZVwiO1xuXG4vLyBjb25zdCB7IFBpYW5vIH0gPSByZXF1aXJlKFwiQHRvbmVqcy9waWFub1wiKTtcblxuXG4vKippbXBvcnQgKiBhcyBydW5uaW5nUGFnZSBmcm9tIFwiLi4vUnVubmluZ1wiXG4gKiByZXF1aXJlKCcuL1J1bm5pbmcnKSovXG5hc3luYyBmdW5jdGlvbiBsb2FkKHJlbG9hZDogYm9vbGVhbikge1xuICAgIC8vICoqICBQZXJmb3JtYW5jZSwgdmlzdWFscyBzeW5jOiBodHRwczovL2dpdGh1Yi5jb20vVG9uZWpzL1RvbmUuanMvd2lraS9QZXJmb3JtYW5jZVxuICAgIGNvbnNvbGUuZ3JvdXAoYHBhZ2VzLlJ1bm5pbmcuaW5kZXgubG9hZCgke3JlbG9hZH0pYCk7XG4gICAgR2xvYi5CaWdDb25maWcubGFzdF9wYWdlID0gXCJydW5uaW5nXCI7XG4gICAgaWYgKCByZWxvYWQgKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuIHV0aWwucmVsb2FkUGFnZSgpO1xuICAgIH1cbiAgICBHbG9iLlNpZGViYXIucmVtb3ZlKCk7XG4gICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG4gICAgY29uc3QgcGlhbm9PcHRpb25zOiBQYXJ0aWFsPFBpYW5vT3B0aW9ucz4gPSB7XG4gICAgICAgIHNhbXBsZXMgOiBTQUxBTUFOREVSX1BBVEhfQUJTLFxuICAgICAgICByZWxlYXNlIDogdHJ1ZSxcbiAgICAgICAgcGVkYWwgOiBmYWxzZSxcbiAgICAgICAgdmVsb2NpdGllcyA6IDEsXG4gICAgfTtcbiAgICBpZiAoIEdsb2IuQmlnQ29uZmlnLmRldi5tdXRlX3BpYW5vKCkgKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgR2xvYi5CaWdDb25maWcuZGV2Lm11dGVfcGlhbm8oKWApO1xuICAgICAgICBwaWFub09wdGlvbnMudm9sdW1lID0geyBzdHJpbmdzIDogLUluZmluaXR5LCBoYXJtb25pY3MgOiAtSW5maW5pdHksIGtleWJlZCA6IC1JbmZpbml0eSwgcGVkYWwgOiAtSW5maW5pdHkgfVxuICAgIH1cbiAgICBjb25zdCBwaWFubyA9IG5ldyBQaWFubyhwaWFub09wdGlvbnMpLnRvRGVzdGluYXRpb24oKTtcbiAgICBhd2FpdCBwaWFuby5sb2FkKCk7XG4gICAgY29uc29sZS5sb2coJ3BpYW5vIGxvYWRlZCcpO1xuICAgIGNvbnN0IG1pZGkgPSBhd2FpdCBNaWRpLmZyb21Vcmwoc3ViY29uZmlnLnRydXRoLm1pZGkuYWJzUGF0aCk7XG4gICAgY29uc29sZS5sb2coJ21pZGkgbG9hZGVkJyk7XG4gICAgdHlwZSBOb3RlT2ZmRXZlbnQgPSB7IG5hbWU6IHN0cmluZyB8IG51bWJlciB9O1xuICAgIHR5cGUgTm90ZU9uRXZlbnQgPSBOb3RlT2ZmRXZlbnQgJiB7IHZlbG9jaXR5OiBudW1iZXIgfTtcbiAgICB0eXBlIE5vdGVPZmYgPSBOb3RlT2ZmRXZlbnQgJiB7IHRpbWU6IFRvbmUuVW5pdC5UaW1lIH07XG4gICAgdHlwZSBOb3RlT24gPSBOb3RlT25FdmVudCAmIHsgdGltZTogVG9uZS5Vbml0LlRpbWUsIGR1cmF0aW9uOiBudW1iZXIgfTtcbiAgICBcbiAgICBjb25zdCBub3RlT2ZmQ2FsbGJhY2sgPSAodGltZTogVG9uZS5Vbml0LlRpbWUsIGV2ZW50OiBOb3RlT2ZmRXZlbnQpID0+IHtcbiAgICAgICAgcGlhbm8ua2V5VXAoZXZlbnQubmFtZSwgdGltZSk7XG4gICAgfTtcbiAgICBjb25zdCBub3RlT25DYWxsYmFjayA9ICh0aW1lOiBUb25lLlVuaXQuVGltZSwgZXZlbnQ6IE5vdGVPbkV2ZW50KSA9PiB7XG4gICAgICAgIHBpYW5vLmtleURvd24oZXZlbnQubmFtZSwgdGltZSwgZXZlbnQudmVsb2NpdHkpO1xuICAgIH07XG4gICAgXG4gICAgXG4gICAgbGV0IG5vdGVPZmZPYmpzOiBOb3RlT2ZmW10gPSBbXTtcbiAgICBsZXQgbm90ZU9uT2JqczogTm90ZU9uW10gPSBbXTtcbiAgICBmb3IgKCBsZXQgbm90ZSBvZiBtaWRpLnRyYWNrc1swXS5ub3RlcyApIHtcbiAgICAgICAgbGV0IHsgbmFtZSwgdmVsb2NpdHksIGR1cmF0aW9uLCB0aW1lIDogdGltZU9uIH0gPSBub3RlO1xuICAgICAgICBsZXQgdGltZU9mZiA9IHRpbWVPbiArIGR1cmF0aW9uO1xuICAgICAgICBub3RlT2ZmT2Jqcy5wdXNoKHsgbmFtZSwgdGltZSA6IHRpbWVPZmYgfSk7XG4gICAgICAgIG5vdGVPbk9ianMucHVzaCh7IG5hbWUsIHRpbWUgOiB0aW1lT24sIGR1cmF0aW9uLCB2ZWxvY2l0eSB9KTtcbiAgICB9XG4gICAgXG4gICAgY29uc3Qgbm90ZU9mZkV2ZW50cyA9IG5ldyBUb25lLlBhcnQobm90ZU9mZkNhbGxiYWNrLCBub3RlT2ZmT2Jqcykuc3RhcnQoMCk7XG4gICAgY29uc3Qgbm90ZU9uRXZlbnRzID0gbmV3IFRvbmUuUGFydChub3RlT25DYWxsYmFjaywgbm90ZU9uT2Jqcykuc3RhcnQoMCk7XG4gICAgVG9uZS5UcmFuc3BvcnQuc3RhcnQoKTtcbiAgICBcbiAgICByZW1vdGUuZ2xvYmFsU2hvcnRjdXQucmVnaXN0ZXIoXCJNXCIsICgpID0+IFRvbmUuVHJhbnNwb3J0LnRvZ2dsZSgpKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyh7IHN1YmNvbmZpZywgbWlkaSwgcGlhbm8gfSk7XG4gICAgR2xvYi5UaXRsZS5odG1sKGAke3N1YmNvbmZpZy50cnV0aC5uYW1lfWApO1xuICAgIFxuICAgIGNvbnN0IHN1YnRpdGxlID0gZWxlbSh7IHRhZyA6ICdoMycsIHRleHQgOiAnMS8xJyB9KTtcbiAgICBjb25zdCBkaWFsb2cgPSBuZXcgRGlhbG9nKHN1YmNvbmZpZy5kZW1vX3R5cGUpO1xuICAgIFxuICAgIEdsb2IuTWFpbkNvbnRlbnQuYXBwZW5kKFxuICAgICAgICBzdWJ0aXRsZSxcbiAgICAgICAgZGlhbG9nXG4gICAgKTtcbiAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgXG59XG5cbmV4cG9ydCB7IGxvYWQgfVxuIl19