"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const experiment_1 = require("./experiment");
const MyPyShell_1 = require("../../MyPyShell");
async function load(reload) {
    console.group(`pages.Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.skipFade = Glob_1.default.BigConfig.dev.skip_fade();
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    Glob_1.default.Title
        .html(`${subconfig.truth.name}`)
        .cacheAppend({
        levelh3: bhe_1.elem({
            tag: 'h3'
        }),
        trialh3: bhe_1.elem({
            tag: 'h3'
        })
    });
    const PY_getOnOffPairs = new MyPyShell_1.MyPyShell('-m txt.get_on_off_pairs', {
        mode: "json",
        args: [subconfig.truth_file]
    });
    const response = (await PY_getOnOffPairs.runAsync());
    console.log({ response });
    let readonlyTruth = subconfig.truth.toReadOnly();
    const experiment = new experiment_1.default(subconfig.demo_type);
    await experiment.init(readonlyTruth);
    if (Glob_1.default.BigConfig.experiment_type === "test") {
        await experiment.intro();
    }
    const levelCollection = subconfig.getLevelCollection();
    await experiment.levelIntro(levelCollection);
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBT2pDLDZDQUFzQztBQUN0QywrQ0FBNEM7QUFRNUMsS0FBSyxVQUFVLElBQUksQ0FBQyxNQUFlO0lBRS9CLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFckQsY0FBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQ3JDLElBQUssTUFBTSxFQUFHO1FBQ1YsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQzVCO0lBQ0QsY0FBSSxDQUFDLFFBQVEsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUUvQyxjQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3RCLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7SUFHaEQsY0FBSSxDQUFDLEtBQUs7U0FDTCxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBRS9CLFdBQVcsQ0FBQztRQUNULE9BQU8sRUFBRyxVQUFJLENBQUM7WUFDWCxHQUFHLEVBQUcsSUFBSTtTQUNiLENBQUM7UUFDRixPQUFPLEVBQUcsVUFBSSxDQUFDO1lBQ1gsR0FBRyxFQUFHLElBQUk7U0FDYixDQUFDO0tBQ0wsQ0FBQyxDQUFDO0lBQ1AsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLHFCQUFTLENBQUMseUJBQXlCLEVBQUU7UUFDOUQsSUFBSSxFQUFHLE1BQU07UUFDYixJQUFJLEVBQUcsQ0FBRSxTQUFTLENBQUMsVUFBVSxDQUFFO0tBQ2xDLENBQUMsQ0FBQztJQUNILE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBTTFCLElBQUksYUFBYSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDakQsTUFBTSxVQUFVLEdBQUcsSUFBSSxvQkFBVSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2RCxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDckMsSUFBSyxjQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsS0FBSyxNQUFNLEVBQUc7UUFFN0MsTUFBTSxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDNUI7SUFDRCxNQUFNLGVBQWUsR0FBRyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUN2RCxNQUFNLFVBQVUsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDN0MsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBRXZCLENBQUM7QUFFUSxvQkFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHbG9iIGZyb20gXCIuLi8uLi9HbG9iXCI7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBlbGVtIH0gZnJvbSBcIi4uLy4uL2JoZVwiO1xuLy8gaW1wb3J0IGtleWJvYXJkIGZyb20gJy4va2V5Ym9hcmQnXG4vLyBpbXBvcnQgRGlhbG9nIGZyb20gJy4vZGlhbG9nJ1xuLy8gaW1wb3J0IHsgUGlhbm8gfSBmcm9tIFwiLi4vLi4vUGlhbm9cIlxuLy8gaW1wb3J0IHsgUGlhbm8sIFBpYW5vT3B0aW9ucyB9IGZyb20gXCIuLi8uLi9QaWFub1wiXG4vLyBpbXBvcnQgeyBNaWRpIH0gZnJvbSBcIkB0b25lanMvbWlkaVwiO1xuaW1wb3J0ICogYXMgVG9uZSBmcm9tIFwidG9uZVwiO1xuaW1wb3J0IEV4cGVyaW1lbnQgZnJvbSBcIi4vZXhwZXJpbWVudFwiO1xuaW1wb3J0IHsgTXlQeVNoZWxsIH0gZnJvbSBcIi4uLy4uL015UHlTaGVsbFwiO1xuaW1wb3J0IHsgZW51bWVyYXRlIH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcblxuLy8gY29uc3QgeyBQaWFubyB9ID0gcmVxdWlyZShcIkB0b25lanMvcGlhbm9cIik7XG5cblxuLyoqcmVxdWlyZSgnLi9SdW5uaW5nJykubG9hZCgpXG4gKiBET05UIGltcG9ydCAqIGFzIHJ1bm5pbmdQYWdlLCB0aGlzIGNhbGxzIGNvbnN0cnVjdG9ycyBldGMqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZChyZWxvYWQ6IGJvb2xlYW4pIHtcbiAgICAvLyAqKiAgUGVyZm9ybWFuY2UsIHZpc3VhbHMgc3luYzogaHR0cHM6Ly9naXRodWIuY29tL1RvbmVqcy9Ub25lLmpzL3dpa2kvUGVyZm9ybWFuY2VcbiAgICBjb25zb2xlLmdyb3VwKGBwYWdlcy5SdW5uaW5nLmluZGV4LmxvYWQoJHtyZWxvYWR9KWApO1xuICAgIFxuICAgIEdsb2IuQmlnQ29uZmlnLmxhc3RfcGFnZSA9IFwicnVubmluZ1wiO1xuICAgIGlmICggcmVsb2FkICkge1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIHJldHVybiB1dGlsLnJlbG9hZFBhZ2UoKTtcbiAgICB9XG4gICAgR2xvYi5za2lwRmFkZSA9IEdsb2IuQmlnQ29uZmlnLmRldi5za2lwX2ZhZGUoKTtcbiAgICBcbiAgICBHbG9iLlNpZGViYXIucmVtb3ZlKCk7XG4gICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG4gICAgXG4gICAgXG4gICAgR2xvYi5UaXRsZVxuICAgICAgICAuaHRtbChgJHtzdWJjb25maWcudHJ1dGgubmFtZX1gKVxuICAgIFxuICAgICAgICAuY2FjaGVBcHBlbmQoe1xuICAgICAgICAgICAgbGV2ZWxoMyA6IGVsZW0oe1xuICAgICAgICAgICAgICAgIHRhZyA6ICdoMydcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdHJpYWxoMyA6IGVsZW0oe1xuICAgICAgICAgICAgICAgIHRhZyA6ICdoMydcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIGNvbnN0IFBZX2dldE9uT2ZmUGFpcnMgPSBuZXcgTXlQeVNoZWxsKCctbSB0eHQuZ2V0X29uX29mZl9wYWlycycsIHtcbiAgICAgICAgbW9kZSA6IFwianNvblwiLFxuICAgICAgICBhcmdzIDogWyBzdWJjb25maWcudHJ1dGhfZmlsZSBdXG4gICAgfSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSAoYXdhaXQgUFlfZ2V0T25PZmZQYWlycy5ydW5Bc3luYygpKTtcbiAgICBjb25zb2xlLmxvZyh7IHJlc3BvbnNlIH0pO1xuICAgIC8vIGZvciAoIGxldCBbIGksIG0gXSBvZiBlbnVtZXJhdGUocmVzcG9uc2UubXNnc19DKSApIHtcbiAgICAvLyAgICAgaWYgKCBtLnRpbWUgIT09IHJlc3BvbnNlLm5vcm1hbGl6ZWRfbWVzc2FnZXNbaV0udGltZSApIHtcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKHsgXCJyZXNwb25zZS5ub3JtYWxpemVkX21lc3NhZ2VzW2ldXCIgOiByZXNwb25zZS5ub3JtYWxpemVkX21lc3NhZ2VzW2ldLCBtIH0pO1xuICAgIC8vICAgICB9XG4gICAgLy8gfVxuICAgIGxldCByZWFkb25seVRydXRoID0gc3ViY29uZmlnLnRydXRoLnRvUmVhZE9ubHkoKTtcbiAgICBjb25zdCBleHBlcmltZW50ID0gbmV3IEV4cGVyaW1lbnQoc3ViY29uZmlnLmRlbW9fdHlwZSk7XG4gICAgYXdhaXQgZXhwZXJpbWVudC5pbml0KHJlYWRvbmx5VHJ1dGgpO1xuICAgIGlmICggR2xvYi5CaWdDb25maWcuZXhwZXJpbWVudF90eXBlID09PSBcInRlc3RcIiApIHtcbiAgICAgICAgLy8gVE9ETzogbGltaXQgYnkgbWF4Tm90ZXNcbiAgICAgICAgYXdhaXQgZXhwZXJpbWVudC5pbnRybygpO1xuICAgIH1cbiAgICBjb25zdCBsZXZlbENvbGxlY3Rpb24gPSBzdWJjb25maWcuZ2V0TGV2ZWxDb2xsZWN0aW9uKCk7XG4gICAgYXdhaXQgZXhwZXJpbWVudC5sZXZlbEludHJvKGxldmVsQ29sbGVjdGlvbik7XG4gICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIFxufVxuXG5leHBvcnQgeyBsb2FkIH1cbiJdfQ==