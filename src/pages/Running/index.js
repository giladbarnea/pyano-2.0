"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const keyboard_1 = require("./keyboard");
const dialog_1 = require("./dialog");
const Piano_1 = require("../../Piano");
const midi_1 = require("@tonejs/midi");
const Tone = require("tone");
async function load(reload) {
    console.group(`pages.Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Tone.context.latencyHint = "playback";
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    const pianoOptions = {
        samples: SALAMANDER_PATH_ABS,
        release: true,
        pedal: false,
        velocities: 1,
    };
    if (Glob_1.default.BigConfig.dev.mute_animation()) {
        pianoOptions.volume = { strings: -Infinity, harmonics: -Infinity, keybed: -Infinity, pedal: -Infinity };
    }
    const piano = new Piano_1.Piano(pianoOptions).toDestination();
    await piano.load();
    console.log('piano loaded');
    const midi = await midi_1.Midi.fromUrl(subconfig.truth.midi.absPath);
    console.log('midi loaded');
    function noteOffCallback(time, event) {
        piano.keyUp(event.name, time);
    }
    function noteOnCallback(time, event) {
        Tone.Draw.schedule(function () {
        }, time);
        piano.keyDown(event.name, time, event.velocity);
    }
    let noteOffObjs = [];
    let noteOnObjs = [];
    let notes;
    const maxAnimationNotes = Glob_1.default.BigConfig.dev.max_animation_notes();
    if (maxAnimationNotes) {
        notes = midi.tracks[0].notes.slice(0, maxAnimationNotes);
    }
    else {
        notes = midi.tracks[0].notes;
    }
    for (let note of notes) {
        let { name, velocity, duration, time: timeOn } = note;
        let timeOff = timeOn + duration;
        noteOffObjs.push({ name, time: timeOff });
        noteOnObjs.push({ name, time: timeOn, duration, velocity });
    }
    const now = Tone.Transport.now();
    const noteOffEvents = new Tone.Part(noteOffCallback, noteOffObjs).start(now);
    await util.wait(500);
    const noteOnEvents = new Tone.Part(noteOnCallback, noteOnObjs).start(now);
    Tone.Transport.start(now);
    remote.globalShortcut.register("CommandOrControl+M", () => Tone.Transport.toggle());
    console.log({ subconfig, midi, piano, "Tone.Context.getDefaults()": Tone.Context.getDefaults(), });
    Glob_1.default.Title.html(`${subconfig.truth.name}`);
    const subtitle = bhe_1.elem({ tag: 'h3', text: '1/1' });
    const dialog = new dialog_1.default(subconfig.demo_type);
    keyboard_1.default.class('active').before(subtitle, dialog);
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,