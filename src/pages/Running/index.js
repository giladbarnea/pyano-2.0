"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const experiment_1 = require("./experiment");
const MyPyShell_1 = require("../../MyPyShell");
const util_1 = require("../../util");
async function load(reload) {
    console.group(`pages.Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.skipFade = Glob_1.default.BigConfig.dev.skip_fade();
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    Glob_1.default.Title
        .html(`${subconfig.truth.name}`)
        .cacheAppend({
        levelh3: bhe_1.elem({
            tag: 'h3'
        }),
        trialh3: bhe_1.elem({
            tag: 'h3'
        })
    });
    const PY_getOnOffPairs = new MyPyShell_1.MyPyShell('-m txt.get_on_off_pairs', {
        mode: "json",
        args: [subconfig.truth_file]
    });
    const response = (await PY_getOnOffPairs.runAsync())[0];
    console.log({ response });
    for (let [i, m] of util_1.enumerate(response.msgs_C)) {
        if (m.time !== response.normalized_messages[i].time) {
            console.log({ "response.normalized_messages[i]": response.normalized_messages[i], m });
        }
    }
    let readonlyTruth = subconfig.truth.toReadOnly();
    const experiment = new experiment_1.default(subconfig.demo_type);
    await experiment.init(readonlyTruth);
    if (Glob_1.default.BigConfig.experiment_type === "test") {
        await experiment.intro();
    }
    const levelCollection = subconfig.getLevelCollection();
    await experiment.levelIntro(levelCollection);
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBT2pDLDZDQUFzQztBQUN0QywrQ0FBNEM7QUFDNUMscUNBQXVDO0FBT3ZDLEtBQUssVUFBVSxJQUFJLENBQUMsTUFBZTtJQUUvQixPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRXJELGNBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUNyQyxJQUFLLE1BQU0sRUFBRztRQUNWLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQixPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUM1QjtJQUNELGNBQUksQ0FBQyxRQUFRLEdBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFL0MsY0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN0QixNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBR2hELGNBQUksQ0FBQyxLQUFLO1NBQ0wsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUUvQixXQUFXLENBQUM7UUFDVCxPQUFPLEVBQUcsVUFBSSxDQUFDO1lBQ1gsR0FBRyxFQUFHLElBQUk7U0FDYixDQUFDO1FBQ0YsT0FBTyxFQUFHLFVBQUksQ0FBQztZQUNYLEdBQUcsRUFBRyxJQUFJO1NBQ2IsQ0FBQztLQUNMLENBQUMsQ0FBQztJQUNQLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxxQkFBUyxDQUFDLHlCQUF5QixFQUFFO1FBQzlELElBQUksRUFBRyxNQUFNO1FBQ2IsSUFBSSxFQUFHLENBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBRTtLQUNsQyxDQUFDLENBQUM7SUFDSCxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMxQixLQUFNLElBQUksQ0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLElBQUksZ0JBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUc7UUFDL0MsSUFBSyxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUc7WUFDbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLGlDQUFpQyxFQUFHLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzNGO0tBQ0o7SUFDRCxJQUFJLGFBQWEsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2pELE1BQU0sVUFBVSxHQUFHLElBQUksb0JBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkQsTUFBTSxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3JDLElBQUssY0FBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEtBQUssTUFBTSxFQUFHO1FBRTdDLE1BQU0sVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQzVCO0lBQ0QsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDdkQsTUFBTSxVQUFVLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzdDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUV2QixDQUFDO0FBRVEsb0JBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgZWxlbSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbi8vIGltcG9ydCBrZXlib2FyZCBmcm9tICcuL2tleWJvYXJkJ1xuLy8gaW1wb3J0IERpYWxvZyBmcm9tICcuL2RpYWxvZydcbi8vIGltcG9ydCB7IFBpYW5vIH0gZnJvbSBcIi4uLy4uL1BpYW5vXCJcbi8vIGltcG9ydCB7IFBpYW5vLCBQaWFub09wdGlvbnMgfSBmcm9tIFwiLi4vLi4vUGlhbm9cIlxuLy8gaW1wb3J0IHsgTWlkaSB9IGZyb20gXCJAdG9uZWpzL21pZGlcIjtcbmltcG9ydCAqIGFzIFRvbmUgZnJvbSBcInRvbmVcIjtcbmltcG9ydCBFeHBlcmltZW50IGZyb20gXCIuL2V4cGVyaW1lbnRcIjtcbmltcG9ydCB7IE15UHlTaGVsbCB9IGZyb20gXCIuLi8uLi9NeVB5U2hlbGxcIjtcbmltcG9ydCB7IGVudW1lcmF0ZSB9IGZyb20gXCIuLi8uLi91dGlsXCI7XG5cbi8vIGNvbnN0IHsgUGlhbm8gfSA9IHJlcXVpcmUoXCJAdG9uZWpzL3BpYW5vXCIpO1xuXG5cbi8qKnJlcXVpcmUoJy4vUnVubmluZycpLmxvYWQoKVxuICogRE9OVCBpbXBvcnQgKiBhcyBydW5uaW5nUGFnZSwgdGhpcyBjYWxscyBjb25zdHJ1Y3RvcnMgZXRjKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWQocmVsb2FkOiBib29sZWFuKSB7XG4gICAgLy8gKiogIFBlcmZvcm1hbmNlLCB2aXN1YWxzIHN5bmM6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub25lanMvVG9uZS5qcy93aWtpL1BlcmZvcm1hbmNlXG4gICAgY29uc29sZS5ncm91cChgcGFnZXMuUnVubmluZy5pbmRleC5sb2FkKCR7cmVsb2FkfSlgKTtcbiAgICBcbiAgICBHbG9iLkJpZ0NvbmZpZy5sYXN0X3BhZ2UgPSBcInJ1bm5pbmdcIjtcbiAgICBpZiAoIHJlbG9hZCApIHtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICByZXR1cm4gdXRpbC5yZWxvYWRQYWdlKCk7XG4gICAgfVxuICAgIEdsb2Iuc2tpcEZhZGUgPSBHbG9iLkJpZ0NvbmZpZy5kZXYuc2tpcF9mYWRlKCk7XG4gICAgXG4gICAgR2xvYi5TaWRlYmFyLnJlbW92ZSgpO1xuICAgIGNvbnN0IHN1YmNvbmZpZyA9IEdsb2IuQmlnQ29uZmlnLmdldFN1YmNvbmZpZygpO1xuICAgIFxuICAgIFxuICAgIEdsb2IuVGl0bGVcbiAgICAgICAgLmh0bWwoYCR7c3ViY29uZmlnLnRydXRoLm5hbWV9YClcbiAgICBcbiAgICAgICAgLmNhY2hlQXBwZW5kKHtcbiAgICAgICAgICAgIGxldmVsaDMgOiBlbGVtKHtcbiAgICAgICAgICAgICAgICB0YWcgOiAnaDMnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRyaWFsaDMgOiBlbGVtKHtcbiAgICAgICAgICAgICAgICB0YWcgOiAnaDMnXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICBjb25zdCBQWV9nZXRPbk9mZlBhaXJzID0gbmV3IE15UHlTaGVsbCgnLW0gdHh0LmdldF9vbl9vZmZfcGFpcnMnLCB7XG4gICAgICAgIG1vZGUgOiBcImpzb25cIixcbiAgICAgICAgYXJncyA6IFsgc3ViY29uZmlnLnRydXRoX2ZpbGUgXVxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKGF3YWl0IFBZX2dldE9uT2ZmUGFpcnMucnVuQXN5bmMoKSlbMF07XG4gICAgY29uc29sZS5sb2coeyByZXNwb25zZSB9KTtcbiAgICBmb3IgKCBsZXQgWyBpLCBtIF0gb2YgZW51bWVyYXRlKHJlc3BvbnNlLm1zZ3NfQykgKSB7XG4gICAgICAgIGlmICggbS50aW1lICE9PSByZXNwb25zZS5ub3JtYWxpemVkX21lc3NhZ2VzW2ldLnRpbWUgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh7IFwicmVzcG9uc2Uubm9ybWFsaXplZF9tZXNzYWdlc1tpXVwiIDogcmVzcG9uc2Uubm9ybWFsaXplZF9tZXNzYWdlc1tpXSwgbSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgcmVhZG9ubHlUcnV0aCA9IHN1YmNvbmZpZy50cnV0aC50b1JlYWRPbmx5KCk7XG4gICAgY29uc3QgZXhwZXJpbWVudCA9IG5ldyBFeHBlcmltZW50KHN1YmNvbmZpZy5kZW1vX3R5cGUpO1xuICAgIGF3YWl0IGV4cGVyaW1lbnQuaW5pdChyZWFkb25seVRydXRoKTtcbiAgICBpZiAoIEdsb2IuQmlnQ29uZmlnLmV4cGVyaW1lbnRfdHlwZSA9PT0gXCJ0ZXN0XCIgKSB7XG4gICAgICAgIC8vIFRPRE86IGxpbWl0IGJ5IG1heE5vdGVzXG4gICAgICAgIGF3YWl0IGV4cGVyaW1lbnQuaW50cm8oKTtcbiAgICB9XG4gICAgY29uc3QgbGV2ZWxDb2xsZWN0aW9uID0gc3ViY29uZmlnLmdldExldmVsQ29sbGVjdGlvbigpO1xuICAgIGF3YWl0IGV4cGVyaW1lbnQubGV2ZWxJbnRybyhsZXZlbENvbGxlY3Rpb24pO1xuICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICBcbn1cblxuZXhwb3J0IHsgbG9hZCB9XG4iXX0=