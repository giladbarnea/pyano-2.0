"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const experiment_1 = require("./experiment");
const MyAlert_1 = require("../../MyAlert");
async function tryCatch(fn, when) {
    try {
        await fn();
    }
    catch (e) {
        await MyAlert_1.default.big.error({
            title: `An error has occurred when ${when}`,
            html: e,
        });
    }
}
exports.tryCatch = tryCatch;
async function load(reload) {
    console.group(`Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.skipFade = Glob_1.default.BigConfig.dev.skip_fade();
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    Glob_1.default.Title
        .html(`${subconfig.truth.name}`)
        .cacheAppend({
        levelh3: bhe_1.elem({
            tag: 'h3'
        }),
        trialh3: bhe_1.elem({
            tag: 'h3'
        })
    });
    console.time(`new Experiment() and init()`);
    const experiment = new experiment_1.default(subconfig.store);
    await tryCatch(() => experiment.init(subconfig), 'trying to initialize Experiment');
    console.timeEnd(`new Experiment() and init()`);
    if (Glob_1.default.BigConfig.experiment_type === "test" || Glob_1.default.BigConfig.dev.simulate_test_mode('Running.index.ts')) {
        if (!Glob_1.default.BigConfig.dev.skip_experiment_intro('Running.index.ts')) {
            await tryCatch(() => experiment.intro(), 'trying to play experiment intro');
        }
    }
    const levelCollection = subconfig.getLevelCollection();
    if (!Glob_1.default.BigConfig.dev.skip_level_intro('Running.index.ts')) {
        await tryCatch(() => experiment.levelIntro(levelCollection), 'trying to play levelIntro');
    }
    await tryCatch(() => experiment.record(levelCollection), 'trying to record');
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBTWpDLDZDQUFzQztBQUN0QywyQ0FBb0M7QUFFcEMsS0FBSyxVQUFVLFFBQVEsQ0FBQyxFQUFpQixFQUFFLElBQVk7SUFDbkQsSUFBSTtRQUNBLE1BQU0sRUFBRSxFQUFFLENBQUM7S0FDZDtJQUFDLE9BQVEsQ0FBQyxFQUFHO1FBR1YsTUFBTSxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDcEIsS0FBSyxFQUFHLDhCQUE4QixJQUFJLEVBQUU7WUFDNUMsSUFBSSxFQUFHLENBQUM7U0FDWCxDQUFDLENBQUM7S0FDTjtBQUNMLENBQUM7QUFzRGMsNEJBQVE7QUFsRHZCLEtBQUssVUFBVSxJQUFJLENBQUMsTUFBZTtJQUUvQixPQUFPLENBQUMsS0FBSyxDQUFDLHNCQUFzQixNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRS9DLGNBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUNyQyxJQUFLLE1BQU0sRUFBRztRQUNWLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQixPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUM1QjtJQUNELGNBQUksQ0FBQyxRQUFRLEdBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFL0MsY0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN0QixNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBR2hELGNBQUksQ0FBQyxLQUFLO1NBQ0wsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUUvQixXQUFXLENBQUM7UUFDVCxPQUFPLEVBQUcsVUFBSSxDQUFDO1lBQ1gsR0FBRyxFQUFHLElBQUk7U0FDYixDQUFDO1FBQ0YsT0FBTyxFQUFHLFVBQUksQ0FBQztZQUNYLEdBQUcsRUFBRyxJQUFJO1NBQ2IsQ0FBQztLQUNMLENBQUMsQ0FBQztJQUdQLE9BQU8sQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUU1QyxNQUFNLFVBQVUsR0FBRyxJQUFJLG9CQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25ELE1BQU0sUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztJQUNwRixPQUFPLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDL0MsSUFBSyxjQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsS0FBSyxNQUFNLElBQUksY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsRUFBRztRQUMxRyxJQUFLLENBQUMsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLENBQUMsRUFBRztZQUVqRSxNQUFNLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztTQUUvRTtLQUNKO0lBQ0QsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDdkQsSUFBSyxDQUFDLGNBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLEVBQUc7UUFDNUQsTUFBTSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0tBQzdGO0lBQ0QsTUFBTSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBRTdFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUV2QixDQUFDO0FBRVEsb0JBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgZWxlbSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbi8vIGltcG9ydCBrZXlib2FyZCBmcm9tICcuL2tleWJvYXJkJ1xuLy8gaW1wb3J0IERpYWxvZyBmcm9tICcuL2RpYWxvZydcbi8vIGltcG9ydCB7IFBpYW5vIH0gZnJvbSBcIi4uLy4uL1BpYW5vXCJcbi8vIGltcG9ydCB7IFBpYW5vLCBQaWFub09wdGlvbnMgfSBmcm9tIFwiLi4vLi4vUGlhbm9cIlxuLy8gaW1wb3J0IHsgTWlkaSB9IGZyb20gXCJAdG9uZWpzL21pZGlcIjtcbmltcG9ydCBFeHBlcmltZW50IGZyb20gXCIuL2V4cGVyaW1lbnRcIjtcbmltcG9ydCBNeUFsZXJ0IGZyb20gXCIuLi8uLi9NeUFsZXJ0XCI7XG5cbmFzeW5jIGZ1bmN0aW9uIHRyeUNhdGNoKGZuOiBBc3luY0Z1bmN0aW9uLCB3aGVuOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBmbigpO1xuICAgIH0gY2F0Y2ggKCBlICkge1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IE15QWxlcnQuYmlnLmVycm9yKHtcbiAgICAgICAgICAgIHRpdGxlIDogYEFuIGVycm9yIGhhcyBvY2N1cnJlZCB3aGVuICR7d2hlbn1gLFxuICAgICAgICAgICAgaHRtbCA6IGUsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuLyoqcmVxdWlyZSgnLi9SdW5uaW5nJykubG9hZCgpXG4gKiBET05UIGltcG9ydCAqIGFzIHJ1bm5pbmdQYWdlLCB0aGlzIGNhbGxzIGNvbnN0cnVjdG9ycyBldGMqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZChyZWxvYWQ6IGJvb2xlYW4pIHtcbiAgICAvLyAqKiAgUGVyZm9ybWFuY2UsIHZpc3VhbHMgc3luYzogaHR0cHM6Ly9naXRodWIuY29tL1RvbmVqcy9Ub25lLmpzL3dpa2kvUGVyZm9ybWFuY2VcbiAgICBjb25zb2xlLmdyb3VwKGBSdW5uaW5nLmluZGV4LmxvYWQoJHtyZWxvYWR9KWApO1xuICAgIFxuICAgIEdsb2IuQmlnQ29uZmlnLmxhc3RfcGFnZSA9IFwicnVubmluZ1wiO1xuICAgIGlmICggcmVsb2FkICkge1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIHJldHVybiB1dGlsLnJlbG9hZFBhZ2UoKTtcbiAgICB9XG4gICAgR2xvYi5za2lwRmFkZSA9IEdsb2IuQmlnQ29uZmlnLmRldi5za2lwX2ZhZGUoKTtcbiAgICBcbiAgICBHbG9iLlNpZGViYXIucmVtb3ZlKCk7XG4gICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG4gICAgXG4gICAgXG4gICAgR2xvYi5UaXRsZVxuICAgICAgICAuaHRtbChgJHtzdWJjb25maWcudHJ1dGgubmFtZX1gKVxuICAgIFxuICAgICAgICAuY2FjaGVBcHBlbmQoe1xuICAgICAgICAgICAgbGV2ZWxoMyA6IGVsZW0oe1xuICAgICAgICAgICAgICAgIHRhZyA6ICdoMydcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdHJpYWxoMyA6IGVsZW0oe1xuICAgICAgICAgICAgICAgIHRhZyA6ICdoMydcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIFxuICAgIFxuICAgIGNvbnNvbGUudGltZShgbmV3IEV4cGVyaW1lbnQoKSBhbmQgaW5pdCgpYCk7XG4gICAgLy8gY29uc3QgZXhwZXJpbWVudCA9IG5ldyBFeHBlcmltZW50KHN1YmNvbmZpZy50cnV0aC5uYW1lLCBzdWJjb25maWcuZGVtb190eXBlKTtcbiAgICBjb25zdCBleHBlcmltZW50ID0gbmV3IEV4cGVyaW1lbnQoc3ViY29uZmlnLnN0b3JlKTtcbiAgICBhd2FpdCB0cnlDYXRjaCgoKSA9PiBleHBlcmltZW50LmluaXQoc3ViY29uZmlnKSwgJ3RyeWluZyB0byBpbml0aWFsaXplIEV4cGVyaW1lbnQnKTtcbiAgICBjb25zb2xlLnRpbWVFbmQoYG5ldyBFeHBlcmltZW50KCkgYW5kIGluaXQoKWApO1xuICAgIGlmICggR2xvYi5CaWdDb25maWcuZXhwZXJpbWVudF90eXBlID09PSBcInRlc3RcIiB8fCBHbG9iLkJpZ0NvbmZpZy5kZXYuc2ltdWxhdGVfdGVzdF9tb2RlKCdSdW5uaW5nLmluZGV4LnRzJykgKSB7XG4gICAgICAgIGlmICggIUdsb2IuQmlnQ29uZmlnLmRldi5za2lwX2V4cGVyaW1lbnRfaW50cm8oJ1J1bm5pbmcuaW5kZXgudHMnKSApIHtcbiAgICAgICAgICAgIC8vIFRPRE86IGxpbWl0IGJ5IG1heE5vdGVzXG4gICAgICAgICAgICBhd2FpdCB0cnlDYXRjaCgoKSA9PiBleHBlcmltZW50LmludHJvKCksICd0cnlpbmcgdG8gcGxheSBleHBlcmltZW50IGludHJvJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsZXZlbENvbGxlY3Rpb24gPSBzdWJjb25maWcuZ2V0TGV2ZWxDb2xsZWN0aW9uKCk7XG4gICAgaWYgKCAhR2xvYi5CaWdDb25maWcuZGV2LnNraXBfbGV2ZWxfaW50cm8oJ1J1bm5pbmcuaW5kZXgudHMnKSApIHtcbiAgICAgICAgYXdhaXQgdHJ5Q2F0Y2goKCkgPT4gZXhwZXJpbWVudC5sZXZlbEludHJvKGxldmVsQ29sbGVjdGlvbiksICd0cnlpbmcgdG8gcGxheSBsZXZlbEludHJvJyk7XG4gICAgfVxuICAgIGF3YWl0IHRyeUNhdGNoKCgpID0+IGV4cGVyaW1lbnQucmVjb3JkKGxldmVsQ29sbGVjdGlvbiksICd0cnlpbmcgdG8gcmVjb3JkJyk7XG4gICAgXG4gICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIFxufVxuXG5leHBvcnQgeyBsb2FkLCB0cnlDYXRjaCB9XG4iXX0=