"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const experiment_1 = require("./experiment");
const MyAlert_1 = require("../../MyAlert");
async function tryCatch(fn, when) {
    try {
        await fn();
    }
    catch (e) {
        const { where, what } = e.toObj();
        let onOpen = () => {
            if (Glob_1.default.BigConfig.get('dev')) {
                throw e;
            }
            else {
                console.error(e);
            }
        };
        await MyAlert_1.default.big.error({
            title: `An error has occurred when ${when}`,
            html: `${what}<p>${where}</p>`,
            onOpen
        });
    }
}
exports.tryCatch = tryCatch;
async function load(reload) {
    console.group(`Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.skipFade = Glob_1.default.BigConfig.dev.skip_fade();
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    Glob_1.default.Title
        .html(`${subconfig.truth.name}`)
        .cacheAppend({
        levelh3: bhe_1.elem({
            tag: 'h3'
        }),
        trialh3: bhe_1.elem({
            tag: 'h3'
        })
    });
    let readonlyTruth = subconfig.truth.toReadOnly();
    console.time(`new Experiment() and init()`);
    const experiment = new experiment_1.default(subconfig.demo_type);
    await experiment.init(readonlyTruth);
    console.timeEnd(`new Experiment() and init()`);
    if (Glob_1.default.BigConfig.experiment_type === "test" || Glob_1.default.BigConfig.dev.simulate_test_mode('Running.index.ts')) {
        if (!Glob_1.default.BigConfig.dev.skip_experiment_intro('Running.index.ts')) {
            await tryCatch(() => experiment.intro(), 'trying to play experiment intro');
        }
    }
    const levelCollection = subconfig.getLevelCollection();
    if (!Glob_1.default.BigConfig.dev.skip_level_intro('Running.index.ts')) {
        await tryCatch(() => experiment.levelIntro(levelCollection), 'trying to play levelIntro');
    }
    await tryCatch(() => experiment.record(levelCollection), 'trying to record');
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBTWpDLDZDQUFzQztBQUN0QywyQ0FBb0M7QUFFcEMsS0FBSyxVQUFVLFFBQVEsQ0FBQyxFQUFpQixFQUFFLElBQVk7SUFDbkQsSUFBSTtRQUNBLE1BQU0sRUFBRSxFQUFFLENBQUM7S0FDZDtJQUFDLE9BQVEsQ0FBQyxFQUFHO1FBQ1YsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEMsSUFBSSxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ2QsSUFBSyxjQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRztnQkFDN0IsTUFBTSxDQUFDLENBQUE7YUFFVjtpQkFBTTtnQkFDSCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ25CO1FBQ0wsQ0FBQyxDQUFDO1FBRUYsTUFBTSxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDcEIsS0FBSyxFQUFHLDhCQUE4QixJQUFJLEVBQUU7WUFDNUMsSUFBSSxFQUFHLEdBQUcsSUFBSSxNQUFNLEtBQUssTUFBTTtZQUMvQixNQUFNO1NBQ1QsQ0FBQyxDQUFDO0tBQ047QUFDTCxDQUFDO0FBc0RjLDRCQUFRO0FBbER2QixLQUFLLFVBQVUsSUFBSSxDQUFDLE1BQWU7SUFFL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUUvQyxjQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDckMsSUFBSyxNQUFNLEVBQUc7UUFDVixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkIsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDNUI7SUFDRCxjQUFJLENBQUMsUUFBUSxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBRS9DLGNBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdEIsTUFBTSxTQUFTLEdBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUdoRCxjQUFJLENBQUMsS0FBSztTQUNMLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7U0FFL0IsV0FBVyxDQUFDO1FBQ1QsT0FBTyxFQUFHLFVBQUksQ0FBQztZQUNYLEdBQUcsRUFBRyxJQUFJO1NBQ2IsQ0FBQztRQUNGLE9BQU8sRUFBRyxVQUFJLENBQUM7WUFDWCxHQUFHLEVBQUcsSUFBSTtTQUNiLENBQUM7S0FDTCxDQUFDLENBQUM7SUFHUCxJQUFJLGFBQWEsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2pELE9BQU8sQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUM1QyxNQUFNLFVBQVUsR0FBRyxJQUFJLG9CQUFVLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyQyxPQUFPLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDL0MsSUFBSyxjQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsS0FBSyxNQUFNLElBQUksY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsRUFBRztRQUMxRyxJQUFLLENBQUMsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLENBQUMsRUFBRztZQUVqRSxNQUFNLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztTQUUvRTtLQUNKO0lBQ0QsTUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDdkQsSUFBSyxDQUFDLGNBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLEVBQUc7UUFDNUQsTUFBTSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0tBQzdGO0lBQ0QsTUFBTSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBRTdFLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUV2QixDQUFDO0FBRVEsb0JBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgZWxlbSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbi8vIGltcG9ydCBrZXlib2FyZCBmcm9tICcuL2tleWJvYXJkJ1xuLy8gaW1wb3J0IERpYWxvZyBmcm9tICcuL2RpYWxvZydcbi8vIGltcG9ydCB7IFBpYW5vIH0gZnJvbSBcIi4uLy4uL1BpYW5vXCJcbi8vIGltcG9ydCB7IFBpYW5vLCBQaWFub09wdGlvbnMgfSBmcm9tIFwiLi4vLi4vUGlhbm9cIlxuLy8gaW1wb3J0IHsgTWlkaSB9IGZyb20gXCJAdG9uZWpzL21pZGlcIjtcbmltcG9ydCBFeHBlcmltZW50IGZyb20gXCIuL2V4cGVyaW1lbnRcIjtcbmltcG9ydCBNeUFsZXJ0IGZyb20gXCIuLi8uLi9NeUFsZXJ0XCI7XG5cbmFzeW5jIGZ1bmN0aW9uIHRyeUNhdGNoKGZuOiBBc3luY0Z1bmN0aW9uLCB3aGVuOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBmbigpO1xuICAgIH0gY2F0Y2ggKCBlICkge1xuICAgICAgICBjb25zdCB7IHdoZXJlLCB3aGF0IH0gPSBlLnRvT2JqKCk7XG4gICAgICAgIGxldCBvbk9wZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIEdsb2IuQmlnQ29uZmlnLmdldCgnZGV2JykgKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBhd2FpdCBNeUFsZXJ0LmJpZy5lcnJvcih7XG4gICAgICAgICAgICB0aXRsZSA6IGBBbiBlcnJvciBoYXMgb2NjdXJyZWQgd2hlbiAke3doZW59YCxcbiAgICAgICAgICAgIGh0bWwgOiBgJHt3aGF0fTxwPiR7d2hlcmV9PC9wPmAsXG4gICAgICAgICAgICBvbk9wZW5cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vKipyZXF1aXJlKCcuL1J1bm5pbmcnKS5sb2FkKClcbiAqIERPTlQgaW1wb3J0ICogYXMgcnVubmluZ1BhZ2UsIHRoaXMgY2FsbHMgY29uc3RydWN0b3JzIGV0YyovXG5hc3luYyBmdW5jdGlvbiBsb2FkKHJlbG9hZDogYm9vbGVhbikge1xuICAgIC8vICoqICBQZXJmb3JtYW5jZSwgdmlzdWFscyBzeW5jOiBodHRwczovL2dpdGh1Yi5jb20vVG9uZWpzL1RvbmUuanMvd2lraS9QZXJmb3JtYW5jZVxuICAgIGNvbnNvbGUuZ3JvdXAoYFJ1bm5pbmcuaW5kZXgubG9hZCgke3JlbG9hZH0pYCk7XG4gICAgXG4gICAgR2xvYi5CaWdDb25maWcubGFzdF9wYWdlID0gXCJydW5uaW5nXCI7XG4gICAgaWYgKCByZWxvYWQgKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuIHV0aWwucmVsb2FkUGFnZSgpO1xuICAgIH1cbiAgICBHbG9iLnNraXBGYWRlID0gR2xvYi5CaWdDb25maWcuZGV2LnNraXBfZmFkZSgpO1xuICAgIFxuICAgIEdsb2IuU2lkZWJhci5yZW1vdmUoKTtcbiAgICBjb25zdCBzdWJjb25maWcgPSBHbG9iLkJpZ0NvbmZpZy5nZXRTdWJjb25maWcoKTtcbiAgICBcbiAgICBcbiAgICBHbG9iLlRpdGxlXG4gICAgICAgIC5odG1sKGAke3N1YmNvbmZpZy50cnV0aC5uYW1lfWApXG4gICAgXG4gICAgICAgIC5jYWNoZUFwcGVuZCh7XG4gICAgICAgICAgICBsZXZlbGgzIDogZWxlbSh7XG4gICAgICAgICAgICAgICAgdGFnIDogJ2gzJ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0cmlhbGgzIDogZWxlbSh7XG4gICAgICAgICAgICAgICAgdGFnIDogJ2gzJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgXG4gICAgXG4gICAgbGV0IHJlYWRvbmx5VHJ1dGggPSBzdWJjb25maWcudHJ1dGgudG9SZWFkT25seSgpO1xuICAgIGNvbnNvbGUudGltZShgbmV3IEV4cGVyaW1lbnQoKSBhbmQgaW5pdCgpYCk7XG4gICAgY29uc3QgZXhwZXJpbWVudCA9IG5ldyBFeHBlcmltZW50KHN1YmNvbmZpZy5kZW1vX3R5cGUpO1xuICAgIGF3YWl0IGV4cGVyaW1lbnQuaW5pdChyZWFkb25seVRydXRoKTtcbiAgICBjb25zb2xlLnRpbWVFbmQoYG5ldyBFeHBlcmltZW50KCkgYW5kIGluaXQoKWApO1xuICAgIGlmICggR2xvYi5CaWdDb25maWcuZXhwZXJpbWVudF90eXBlID09PSBcInRlc3RcIiB8fCBHbG9iLkJpZ0NvbmZpZy5kZXYuc2ltdWxhdGVfdGVzdF9tb2RlKCdSdW5uaW5nLmluZGV4LnRzJykgKSB7XG4gICAgICAgIGlmICggIUdsb2IuQmlnQ29uZmlnLmRldi5za2lwX2V4cGVyaW1lbnRfaW50cm8oJ1J1bm5pbmcuaW5kZXgudHMnKSApIHtcbiAgICAgICAgICAgIC8vIFRPRE86IGxpbWl0IGJ5IG1heE5vdGVzXG4gICAgICAgICAgICBhd2FpdCB0cnlDYXRjaCgoKSA9PiBleHBlcmltZW50LmludHJvKCksICd0cnlpbmcgdG8gcGxheSBleHBlcmltZW50IGludHJvJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsZXZlbENvbGxlY3Rpb24gPSBzdWJjb25maWcuZ2V0TGV2ZWxDb2xsZWN0aW9uKCk7XG4gICAgaWYgKCAhR2xvYi5CaWdDb25maWcuZGV2LnNraXBfbGV2ZWxfaW50cm8oJ1J1bm5pbmcuaW5kZXgudHMnKSApIHtcbiAgICAgICAgYXdhaXQgdHJ5Q2F0Y2goKCkgPT4gZXhwZXJpbWVudC5sZXZlbEludHJvKGxldmVsQ29sbGVjdGlvbiksICd0cnlpbmcgdG8gcGxheSBsZXZlbEludHJvJyk7XG4gICAgfVxuICAgIGF3YWl0IHRyeUNhdGNoKCgpID0+IGV4cGVyaW1lbnQucmVjb3JkKGxldmVsQ29sbGVjdGlvbiksICd0cnlpbmcgdG8gcmVjb3JkJyk7XG4gICAgXG4gICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIFxufVxuXG5leHBvcnQgeyBsb2FkLCB0cnlDYXRjaCB9XG4iXX0=