"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const experiment_1 = require("./experiment");
const MyPyShell_1 = require("../../MyPyShell");
async function load(reload) {
    console.group(`pages.Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.skipFade = Glob_1.default.BigConfig.dev.skip_fade();
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    Glob_1.default.Title
        .html(`${subconfig.truth.name}`)
        .cacheAppend({
        levelh3: bhe_1.elem({
            tag: 'h3'
        }),
        trialh3: bhe_1.elem({
            tag: 'h3'
        })
    });
    const PY_getOnOffPairs = new MyPyShell_1.MyPyShell('-m txt.get_on_off_pairs', {
        mode: "json",
        args: [subconfig.truth_file]
    });
    const { on_msgs, off_msgs } = await PY_getOnOffPairs.runAsync();
    console.log({ on_msgs, off_msgs });
    let readonlyTruth = subconfig.truth.toReadOnly();
    const experiment = new experiment_1.default(subconfig.demo_type);
    await experiment.init(readonlyTruth);
    if (Glob_1.default.BigConfig.experiment_type === "test") {
        await experiment.intro();
    }
    const levelCollection = subconfig.getLevelCollection();
    await experiment.levelIntro(levelCollection);
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBT2pDLDZDQUFzQztBQUN0QywrQ0FBNEM7QUFRNUMsS0FBSyxVQUFVLElBQUksQ0FBQyxNQUFlO0lBRS9CLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFckQsY0FBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQ3JDLElBQUssTUFBTSxFQUFHO1FBQ1YsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQzVCO0lBQ0QsY0FBSSxDQUFDLFFBQVEsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUUvQyxjQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3RCLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7SUFHaEQsY0FBSSxDQUFDLEtBQUs7U0FDTCxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBRS9CLFdBQVcsQ0FBQztRQUNULE9BQU8sRUFBRyxVQUFJLENBQUM7WUFDWCxHQUFHLEVBQUcsSUFBSTtTQUNiLENBQUM7UUFDRixPQUFPLEVBQUcsVUFBSSxDQUFDO1lBQ1gsR0FBRyxFQUFHLElBQUk7U0FDYixDQUFDO0tBQ0wsQ0FBQyxDQUFDO0lBQ1AsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLHFCQUFTLENBQUMseUJBQXlCLEVBQUU7UUFDOUQsSUFBSSxFQUFHLE1BQU07UUFDYixJQUFJLEVBQUcsQ0FBRSxTQUFTLENBQUMsVUFBVSxDQUFFO0tBQ2xDLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoRSxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFNbkMsSUFBSSxhQUFhLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNqRCxNQUFNLFVBQVUsR0FBRyxJQUFJLG9CQUFVLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sVUFBVSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyQyxJQUFLLGNBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxLQUFLLE1BQU0sRUFBRztRQUU3QyxNQUFNLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUM1QjtJQUNELE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQ3ZELE1BQU0sVUFBVSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3QyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7QUFFdkIsQ0FBQztBQUVRLG9CQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdsb2IgZnJvbSBcIi4uLy4uL0dsb2JcIjtcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCB7IGVsZW0gfSBmcm9tIFwiLi4vLi4vYmhlXCI7XG4vLyBpbXBvcnQga2V5Ym9hcmQgZnJvbSAnLi9rZXlib2FyZCdcbi8vIGltcG9ydCBEaWFsb2cgZnJvbSAnLi9kaWFsb2cnXG4vLyBpbXBvcnQgeyBQaWFubyB9IGZyb20gXCIuLi8uLi9QaWFub1wiXG4vLyBpbXBvcnQgeyBQaWFubywgUGlhbm9PcHRpb25zIH0gZnJvbSBcIi4uLy4uL1BpYW5vXCJcbi8vIGltcG9ydCB7IE1pZGkgfSBmcm9tIFwiQHRvbmVqcy9taWRpXCI7XG5pbXBvcnQgKiBhcyBUb25lIGZyb20gXCJ0b25lXCI7XG5pbXBvcnQgRXhwZXJpbWVudCBmcm9tIFwiLi9leHBlcmltZW50XCI7XG5pbXBvcnQgeyBNeVB5U2hlbGwgfSBmcm9tIFwiLi4vLi4vTXlQeVNoZWxsXCI7XG5pbXBvcnQgeyBlbnVtZXJhdGUgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuXG4vLyBjb25zdCB7IFBpYW5vIH0gPSByZXF1aXJlKFwiQHRvbmVqcy9waWFub1wiKTtcblxuXG4vKipyZXF1aXJlKCcuL1J1bm5pbmcnKS5sb2FkKClcbiAqIERPTlQgaW1wb3J0ICogYXMgcnVubmluZ1BhZ2UsIHRoaXMgY2FsbHMgY29uc3RydWN0b3JzIGV0YyovXG5hc3luYyBmdW5jdGlvbiBsb2FkKHJlbG9hZDogYm9vbGVhbikge1xuICAgIC8vICoqICBQZXJmb3JtYW5jZSwgdmlzdWFscyBzeW5jOiBodHRwczovL2dpdGh1Yi5jb20vVG9uZWpzL1RvbmUuanMvd2lraS9QZXJmb3JtYW5jZVxuICAgIGNvbnNvbGUuZ3JvdXAoYHBhZ2VzLlJ1bm5pbmcuaW5kZXgubG9hZCgke3JlbG9hZH0pYCk7XG4gICAgXG4gICAgR2xvYi5CaWdDb25maWcubGFzdF9wYWdlID0gXCJydW5uaW5nXCI7XG4gICAgaWYgKCByZWxvYWQgKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuIHV0aWwucmVsb2FkUGFnZSgpO1xuICAgIH1cbiAgICBHbG9iLnNraXBGYWRlID0gR2xvYi5CaWdDb25maWcuZGV2LnNraXBfZmFkZSgpO1xuICAgIFxuICAgIEdsb2IuU2lkZWJhci5yZW1vdmUoKTtcbiAgICBjb25zdCBzdWJjb25maWcgPSBHbG9iLkJpZ0NvbmZpZy5nZXRTdWJjb25maWcoKTtcbiAgICBcbiAgICBcbiAgICBHbG9iLlRpdGxlXG4gICAgICAgIC5odG1sKGAke3N1YmNvbmZpZy50cnV0aC5uYW1lfWApXG4gICAgXG4gICAgICAgIC5jYWNoZUFwcGVuZCh7XG4gICAgICAgICAgICBsZXZlbGgzIDogZWxlbSh7XG4gICAgICAgICAgICAgICAgdGFnIDogJ2gzJ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0cmlhbGgzIDogZWxlbSh7XG4gICAgICAgICAgICAgICAgdGFnIDogJ2gzJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgY29uc3QgUFlfZ2V0T25PZmZQYWlycyA9IG5ldyBNeVB5U2hlbGwoJy1tIHR4dC5nZXRfb25fb2ZmX3BhaXJzJywge1xuICAgICAgICBtb2RlIDogXCJqc29uXCIsXG4gICAgICAgIGFyZ3MgOiBbIHN1YmNvbmZpZy50cnV0aF9maWxlIF1cbiAgICB9KTtcbiAgICBjb25zdCB7IG9uX21zZ3MsIG9mZl9tc2dzIH0gPSBhd2FpdCBQWV9nZXRPbk9mZlBhaXJzLnJ1bkFzeW5jKCk7XG4gICAgY29uc29sZS5sb2coeyBvbl9tc2dzLCBvZmZfbXNncyB9KTtcbiAgICAvLyBmb3IgKCBsZXQgWyBpLCBtIF0gb2YgZW51bWVyYXRlKHJlc3BvbnNlLm1zZ3NfQykgKSB7XG4gICAgLy8gICAgIGlmICggbS50aW1lICE9PSByZXNwb25zZS5ub3JtYWxpemVkX21lc3NhZ2VzW2ldLnRpbWUgKSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyh7IFwicmVzcG9uc2Uubm9ybWFsaXplZF9tZXNzYWdlc1tpXVwiIDogcmVzcG9uc2Uubm9ybWFsaXplZF9tZXNzYWdlc1tpXSwgbSB9KTtcbiAgICAvLyAgICAgfVxuICAgIC8vIH1cbiAgICBsZXQgcmVhZG9ubHlUcnV0aCA9IHN1YmNvbmZpZy50cnV0aC50b1JlYWRPbmx5KCk7XG4gICAgY29uc3QgZXhwZXJpbWVudCA9IG5ldyBFeHBlcmltZW50KHN1YmNvbmZpZy5kZW1vX3R5cGUpO1xuICAgIGF3YWl0IGV4cGVyaW1lbnQuaW5pdChyZWFkb25seVRydXRoKTtcbiAgICBpZiAoIEdsb2IuQmlnQ29uZmlnLmV4cGVyaW1lbnRfdHlwZSA9PT0gXCJ0ZXN0XCIgKSB7XG4gICAgICAgIC8vIFRPRE86IGxpbWl0IGJ5IG1heE5vdGVzXG4gICAgICAgIGF3YWl0IGV4cGVyaW1lbnQuaW50cm8oKTtcbiAgICB9XG4gICAgY29uc3QgbGV2ZWxDb2xsZWN0aW9uID0gc3ViY29uZmlnLmdldExldmVsQ29sbGVjdGlvbigpO1xuICAgIGF3YWl0IGV4cGVyaW1lbnQubGV2ZWxJbnRybyhsZXZlbENvbGxlY3Rpb24pO1xuICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICBcbn1cblxuZXhwb3J0IHsgbG9hZCB9XG4iXX0=