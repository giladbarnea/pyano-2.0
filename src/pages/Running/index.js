"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const dialog_1 = require("./dialog");
const Piano_1 = require("../../Piano");
const midi_1 = require("@tonejs/midi");
const Tone = require("tone");
async function load(reload) {
    console.group(`pages.Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    const piano = new Piano_1.Piano({
        samples: SALAMANDER_PATH_ABS,
        release: true,
        pedal: true,
        velocities: 5,
    }).toDestination();
    await piano.load();
    console.log('piano loaded');
    const midi = await midi_1.Midi.fromUrl(subconfig.truth.midi.absPath);
    console.log('midi loaded');
    const noteOffEvents = new Tone.Part((time, event) => {
        piano.keyUp(event.note, time);
    }, midi.tracks[0].notes.map(n => ({
        note: n.name,
        time: n.time + n.duration,
    }))).start(0);
    const noteOnEvents = new Tone.Part((time, event) => {
        piano.keyDown(event.note, time, event.velocity);
    }, midi.tracks[0].notes.map(n => ({
        note: n.name,
        velocity: n.velocity,
        duration: n.duration,
        time: n.time,
    }))).start(0);
    Tone.Transport.start();
    console.log({ subconfig, midi, piano, "Tone.Transport.state": Tone.Transport.state, });
    Glob_1.default.Title.html(`${subconfig.truth.name}`);
    const subtitle = bhe_1.elem({ tag: 'h3', text: '1/1' });
    const dialog = new dialog_1.default(subconfig.demo_type);
    Glob_1.default.MainContent.append(subtitle, dialog);
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBRWpDLHFDQUE2QjtBQUM3Qix1Q0FBbUM7QUFDbkMsdUNBQW9DO0FBQ3BDLDZCQUE2QjtBQU03QixLQUFLLFVBQVUsSUFBSSxDQUFDLE1BQWU7SUFFL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNyRCxjQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDckMsSUFBSyxNQUFNLEVBQUc7UUFDVixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkIsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDNUI7SUFDRCxjQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3RCLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDaEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxhQUFLLENBQUM7UUFDcEIsT0FBTyxFQUFHLG1CQUFtQjtRQUM3QixPQUFPLEVBQUcsSUFBSTtRQUNkLEtBQUssRUFBRyxJQUFJO1FBQ1osVUFBVSxFQUFHLENBQUM7S0FDakIsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ25CLE1BQU0sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxXQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlELE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDM0IsTUFBTSxhQUFhLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ2hELEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QixJQUFJLEVBQUcsQ0FBQyxDQUFDLElBQUk7UUFDYixJQUFJLEVBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsUUFBUTtLQUM3QixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVkLE1BQU0sWUFBWSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUMvQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVwRCxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QixJQUFJLEVBQUcsQ0FBQyxDQUFDLElBQUk7UUFDYixRQUFRLEVBQUcsQ0FBQyxDQUFDLFFBQVE7UUFDckIsUUFBUSxFQUFHLENBQUMsQ0FBQyxRQUFRO1FBQ3JCLElBQUksRUFBRyxDQUFDLENBQUMsSUFBSTtLQUNoQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLHNCQUFzQixFQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUN4RixjQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUUzQyxNQUFNLFFBQVEsR0FBRyxVQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsSUFBSSxFQUFFLElBQUksRUFBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sTUFBTSxHQUFHLElBQUksZ0JBQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFL0MsY0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQ25CLFFBQVEsRUFDUixNQUFNLENBQ1QsQ0FBQztJQUNGLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUV2QixDQUFDO0FBRVEsb0JBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgZWxlbSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbmltcG9ydCBhbmltYXRpb24gZnJvbSAnLi9hbmltYXRpb24nXG5pbXBvcnQgRGlhbG9nIGZyb20gJy4vZGlhbG9nJ1xuaW1wb3J0IHsgUGlhbm8gfSBmcm9tIFwiLi4vLi4vUGlhbm9cIlxuaW1wb3J0IHsgTWlkaSB9IGZyb20gXCJAdG9uZWpzL21pZGlcIjtcbmltcG9ydCAqIGFzIFRvbmUgZnJvbSBcInRvbmVcIjtcblxuLy8gY29uc3QgeyBQaWFubyB9ID0gcmVxdWlyZShcIkB0b25lanMvcGlhbm9cIik7XG5cbi8qKmltcG9ydCAqIGFzIHJ1bm5pbmdQYWdlIGZyb20gXCIuLi9SdW5uaW5nXCJcbiAqIHJlcXVpcmUoJy4vUnVubmluZycpKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWQocmVsb2FkOiBib29sZWFuKSB7XG4gICAgLy8gKiogIFBlcmZvcm1hbmNlLCB2aXN1YWxzIHN5bmM6IGh0dHBzOi8vZ2l0aHViLmNvbS9Ub25lanMvVG9uZS5qcy93aWtpL1BlcmZvcm1hbmNlXG4gICAgY29uc29sZS5ncm91cChgcGFnZXMuUnVubmluZy5pbmRleC5sb2FkKCR7cmVsb2FkfSlgKTtcbiAgICBHbG9iLkJpZ0NvbmZpZy5sYXN0X3BhZ2UgPSBcInJ1bm5pbmdcIjtcbiAgICBpZiAoIHJlbG9hZCApIHtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICByZXR1cm4gdXRpbC5yZWxvYWRQYWdlKCk7XG4gICAgfVxuICAgIEdsb2IuU2lkZWJhci5yZW1vdmUoKTtcbiAgICBjb25zdCBzdWJjb25maWcgPSBHbG9iLkJpZ0NvbmZpZy5nZXRTdWJjb25maWcoKTtcbiAgICBjb25zdCBwaWFubyA9IG5ldyBQaWFubyh7XG4gICAgICAgIHNhbXBsZXMgOiBTQUxBTUFOREVSX1BBVEhfQUJTLFxuICAgICAgICByZWxlYXNlIDogdHJ1ZSxcbiAgICAgICAgcGVkYWwgOiB0cnVlLFxuICAgICAgICB2ZWxvY2l0aWVzIDogNSxcbiAgICB9KS50b0Rlc3RpbmF0aW9uKCk7XG4gICAgYXdhaXQgcGlhbm8ubG9hZCgpO1xuICAgIGNvbnNvbGUubG9nKCdwaWFubyBsb2FkZWQnKTtcbiAgICBjb25zdCBtaWRpID0gYXdhaXQgTWlkaS5mcm9tVXJsKHN1YmNvbmZpZy50cnV0aC5taWRpLmFic1BhdGgpO1xuICAgIGNvbnNvbGUubG9nKCdtaWRpIGxvYWRlZCcpO1xuICAgIGNvbnN0IG5vdGVPZmZFdmVudHMgPSBuZXcgVG9uZS5QYXJ0KCh0aW1lLCBldmVudCkgPT4ge1xuICAgICAgICBwaWFuby5rZXlVcChldmVudC5ub3RlLCB0aW1lKTtcbiAgICB9LCBtaWRpLnRyYWNrc1swXS5ub3Rlcy5tYXAobiA9PiAoe1xuICAgICAgICBub3RlIDogbi5uYW1lLFxuICAgICAgICB0aW1lIDogbi50aW1lICsgbi5kdXJhdGlvbixcbiAgICB9KSkpLnN0YXJ0KDApO1xuICAgIFxuICAgIGNvbnN0IG5vdGVPbkV2ZW50cyA9IG5ldyBUb25lLlBhcnQoKHRpbWUsIGV2ZW50KSA9PiB7XG4gICAgICAgIHBpYW5vLmtleURvd24oZXZlbnQubm90ZSwgdGltZSwgZXZlbnQudmVsb2NpdHkpO1xuICAgICAgICAvLyBwaWFuby5rZXlVcChldmVudC5ub3RlLCB0aW1lICsgZXZlbnQuZHVyYXRpb24pXG4gICAgfSwgbWlkaS50cmFja3NbMF0ubm90ZXMubWFwKG4gPT4gKHtcbiAgICAgICAgbm90ZSA6IG4ubmFtZSxcbiAgICAgICAgdmVsb2NpdHkgOiBuLnZlbG9jaXR5LFxuICAgICAgICBkdXJhdGlvbiA6IG4uZHVyYXRpb24sXG4gICAgICAgIHRpbWUgOiBuLnRpbWUsXG4gICAgfSkpKS5zdGFydCgwKTtcbiAgICBUb25lLlRyYW5zcG9ydC5zdGFydCgpO1xuICAgIGNvbnNvbGUubG9nKHsgc3ViY29uZmlnLCBtaWRpLCBwaWFubywgXCJUb25lLlRyYW5zcG9ydC5zdGF0ZVwiIDogVG9uZS5UcmFuc3BvcnQuc3RhdGUsIH0pO1xuICAgIEdsb2IuVGl0bGUuaHRtbChgJHtzdWJjb25maWcudHJ1dGgubmFtZX1gKTtcbiAgICBcbiAgICBjb25zdCBzdWJ0aXRsZSA9IGVsZW0oeyB0YWcgOiAnaDMnLCB0ZXh0IDogJzEvMScgfSk7XG4gICAgY29uc3QgZGlhbG9nID0gbmV3IERpYWxvZyhzdWJjb25maWcuZGVtb190eXBlKTtcbiAgICBcbiAgICBHbG9iLk1haW5Db250ZW50LmFwcGVuZChcbiAgICAgICAgc3VidGl0bGUsXG4gICAgICAgIGRpYWxvZ1xuICAgICk7XG4gICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIFxufVxuXG5leHBvcnQgeyBsb2FkIH1cbiJdfQ==