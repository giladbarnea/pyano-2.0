"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const betterhtmlelement_1 = require("betterhtmlelement");
const experiment_1 = require("./experiment");
const MyAlert_1 = require("../../MyAlert");
async function tryCatch(fn, when) {
    try {
        await fn();
    }
    catch (e) {
        await MyAlert_1.default.big.error({
            title: `An error has occurred when ${when}`,
            html: e,
        });
    }
}
exports.tryCatch = tryCatch;
async function load(reload) {
    console.group(`Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.skipFade = Glob_1.default.BigConfig.dev.skip_fade();
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    Glob_1.default.Title
        .html(`${subconfig.truth.name}`)
        .cacheAppend({
        levelh3: betterhtmlelement_1.elem({
            tag: 'h3'
        }),
        trialh3: betterhtmlelement_1.elem({
            tag: 'h3'
        })
    });
    console.time(`new Experiment() and init()`);
    const experiment = new experiment_1.default(subconfig.store);
    await tryCatch(() => experiment.init(subconfig), 'trying to initialize Experiment');
    console.timeEnd(`new Experiment() and init()`);
    if (Glob_1.default.BigConfig.experiment_type === "test" || Glob_1.default.BigConfig.dev.simulate_test_mode('Running.index.ts')) {
        if (!Glob_1.default.BigConfig.dev.skip_experiment_intro('Running.index.ts')) {
            await tryCatch(() => experiment.intro(), 'trying to play experiment intro');
        }
    }
    const levelCollection = subconfig.getLevelCollection();
    if (!Glob_1.default.BigConfig.dev.skip_level_intro('Running.index.ts')) {
        await tryCatch(() => experiment.levelIntro(levelCollection), 'trying to play levelIntro');
    }
    await tryCatch(() => experiment.record(levelCollection), 'trying to record');
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMseURBQXlDO0FBTXpDLDZDQUFzQztBQUN0QywyQ0FBb0M7QUFFcEMsS0FBSyxVQUFVLFFBQVEsQ0FBQyxFQUF1QixFQUFFLElBQVk7SUFDekQsSUFBSTtRQUNBLE1BQU0sRUFBRSxFQUFFLENBQUM7S0FDZDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBR1IsTUFBTSxpQkFBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDcEIsS0FBSyxFQUFFLDhCQUE4QixJQUFJLEVBQUU7WUFDM0MsSUFBSSxFQUFFLENBQUM7U0FDVixDQUFDLENBQUM7S0FDTjtBQUNMLENBQUM7QUFzRGMsNEJBQVE7QUFsRHZCLEtBQUssVUFBVSxJQUFJLENBQUMsTUFBZTtJQUUvQixPQUFPLENBQUMsS0FBSyxDQUFDLHNCQUFzQixNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRS9DLGNBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUNyQyxJQUFJLE1BQU0sRUFBRTtRQUNSLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQixPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztLQUM1QjtJQUNELGNBQUksQ0FBQyxRQUFRLEdBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFL0MsY0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN0QixNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBR2hELGNBQUksQ0FBQyxLQUFLO1NBQ0wsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUUvQixXQUFXLENBQUM7UUFDVCxPQUFPLEVBQUUsd0JBQUksQ0FBQztZQUNWLEdBQUcsRUFBRSxJQUFJO1NBQ1osQ0FBQztRQUNGLE9BQU8sRUFBRSx3QkFBSSxDQUFDO1lBQ1YsR0FBRyxFQUFFLElBQUk7U0FDWixDQUFDO0tBQ0wsQ0FBQyxDQUFDO0lBR1AsT0FBTyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0lBRTVDLE1BQU0sVUFBVSxHQUFHLElBQUksb0JBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkQsTUFBTSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDO0lBQ3BGLE9BQU8sQ0FBQyxPQUFPLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUMvQyxJQUFJLGNBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxLQUFLLE1BQU0sSUFBSSxjQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO1FBQ3hHLElBQUksQ0FBQyxjQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO1lBRS9ELE1BQU0sUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDO1NBRS9FO0tBQ0o7SUFDRCxNQUFNLGVBQWUsR0FBRyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUN2RCxJQUFJLENBQUMsY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsRUFBRTtRQUMxRCxNQUFNLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUFFLDJCQUEyQixDQUFDLENBQUM7S0FDN0Y7SUFDRCxNQUFNLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFFN0UsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBRXZCLENBQUM7QUFFUSxvQkFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHbG9iIGZyb20gXCIuLi8uLi9HbG9iXCI7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBlbGVtIH0gZnJvbSBcImJldHRlcmh0bWxlbGVtZW50XCI7XG4vLyBpbXBvcnQga2V5Ym9hcmQgZnJvbSAnLi9rZXlib2FyZCdcbi8vIGltcG9ydCBEaWFsb2cgZnJvbSAnLi9kaWFsb2cnXG4vLyBpbXBvcnQgeyBQaWFubyB9IGZyb20gXCIuLi8uLi9QaWFub1wiXG4vLyBpbXBvcnQgeyBQaWFubywgUGlhbm9PcHRpb25zIH0gZnJvbSBcIi4uLy4uL1BpYW5vXCJcbi8vIGltcG9ydCB7IE1pZGkgfSBmcm9tIFwiQHRvbmVqcy9taWRpXCI7XG5pbXBvcnQgRXhwZXJpbWVudCBmcm9tIFwiLi9leHBlcmltZW50XCI7XG5pbXBvcnQgTXlBbGVydCBmcm9tIFwiLi4vLi4vTXlBbGVydFwiO1xuXG5hc3luYyBmdW5jdGlvbiB0cnlDYXRjaChmbjogKCkgPT4gUHJvbWlzZTx2b2lkPiwgd2hlbjogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZm4oKTtcbiAgICB9IGNhdGNoIChlKSB7XG5cblxuICAgICAgICBhd2FpdCBNeUFsZXJ0LmJpZy5lcnJvcih7XG4gICAgICAgICAgICB0aXRsZTogYEFuIGVycm9yIGhhcyBvY2N1cnJlZCB3aGVuICR7d2hlbn1gLFxuICAgICAgICAgICAgaHRtbDogZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4vKipyZXF1aXJlKCcuL1J1bm5pbmcnKS5sb2FkKClcbiAqIERPTlQgaW1wb3J0ICogYXMgcnVubmluZ1BhZ2UsIHRoaXMgY2FsbHMgY29uc3RydWN0b3JzIGV0YyovXG5hc3luYyBmdW5jdGlvbiBsb2FkKHJlbG9hZDogYm9vbGVhbikge1xuICAgIC8vICoqICBQZXJmb3JtYW5jZSwgdmlzdWFscyBzeW5jOiBodHRwczovL2dpdGh1Yi5jb20vVG9uZWpzL1RvbmUuanMvd2lraS9QZXJmb3JtYW5jZVxuICAgIGNvbnNvbGUuZ3JvdXAoYFJ1bm5pbmcuaW5kZXgubG9hZCgke3JlbG9hZH0pYCk7XG5cbiAgICBHbG9iLkJpZ0NvbmZpZy5sYXN0X3BhZ2UgPSBcInJ1bm5pbmdcIjtcbiAgICBpZiAocmVsb2FkKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuIHV0aWwucmVsb2FkUGFnZSgpO1xuICAgIH1cbiAgICBHbG9iLnNraXBGYWRlID0gR2xvYi5CaWdDb25maWcuZGV2LnNraXBfZmFkZSgpO1xuXG4gICAgR2xvYi5TaWRlYmFyLnJlbW92ZSgpO1xuICAgIGNvbnN0IHN1YmNvbmZpZyA9IEdsb2IuQmlnQ29uZmlnLmdldFN1YmNvbmZpZygpO1xuXG5cbiAgICBHbG9iLlRpdGxlXG4gICAgICAgIC5odG1sKGAke3N1YmNvbmZpZy50cnV0aC5uYW1lfWApXG5cbiAgICAgICAgLmNhY2hlQXBwZW5kKHtcbiAgICAgICAgICAgIGxldmVsaDM6IGVsZW0oe1xuICAgICAgICAgICAgICAgIHRhZzogJ2gzJ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0cmlhbGgzOiBlbGVtKHtcbiAgICAgICAgICAgICAgICB0YWc6ICdoMydcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuXG5cbiAgICBjb25zb2xlLnRpbWUoYG5ldyBFeHBlcmltZW50KCkgYW5kIGluaXQoKWApO1xuICAgIC8vIGNvbnN0IGV4cGVyaW1lbnQgPSBuZXcgRXhwZXJpbWVudChzdWJjb25maWcudHJ1dGgubmFtZSwgc3ViY29uZmlnLmRlbW9fdHlwZSk7XG4gICAgY29uc3QgZXhwZXJpbWVudCA9IG5ldyBFeHBlcmltZW50KHN1YmNvbmZpZy5zdG9yZSk7XG4gICAgYXdhaXQgdHJ5Q2F0Y2goKCkgPT4gZXhwZXJpbWVudC5pbml0KHN1YmNvbmZpZyksICd0cnlpbmcgdG8gaW5pdGlhbGl6ZSBFeHBlcmltZW50Jyk7XG4gICAgY29uc29sZS50aW1lRW5kKGBuZXcgRXhwZXJpbWVudCgpIGFuZCBpbml0KClgKTtcbiAgICBpZiAoR2xvYi5CaWdDb25maWcuZXhwZXJpbWVudF90eXBlID09PSBcInRlc3RcIiB8fCBHbG9iLkJpZ0NvbmZpZy5kZXYuc2ltdWxhdGVfdGVzdF9tb2RlKCdSdW5uaW5nLmluZGV4LnRzJykpIHtcbiAgICAgICAgaWYgKCFHbG9iLkJpZ0NvbmZpZy5kZXYuc2tpcF9leHBlcmltZW50X2ludHJvKCdSdW5uaW5nLmluZGV4LnRzJykpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IGxpbWl0IGJ5IG1heE5vdGVzXG4gICAgICAgICAgICBhd2FpdCB0cnlDYXRjaCgoKSA9PiBleHBlcmltZW50LmludHJvKCksICd0cnlpbmcgdG8gcGxheSBleHBlcmltZW50IGludHJvJyk7XG5cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsZXZlbENvbGxlY3Rpb24gPSBzdWJjb25maWcuZ2V0TGV2ZWxDb2xsZWN0aW9uKCk7XG4gICAgaWYgKCFHbG9iLkJpZ0NvbmZpZy5kZXYuc2tpcF9sZXZlbF9pbnRybygnUnVubmluZy5pbmRleC50cycpKSB7XG4gICAgICAgIGF3YWl0IHRyeUNhdGNoKCgpID0+IGV4cGVyaW1lbnQubGV2ZWxJbnRybyhsZXZlbENvbGxlY3Rpb24pLCAndHJ5aW5nIHRvIHBsYXkgbGV2ZWxJbnRybycpO1xuICAgIH1cbiAgICBhd2FpdCB0cnlDYXRjaCgoKSA9PiBleHBlcmltZW50LnJlY29yZChsZXZlbENvbGxlY3Rpb24pLCAndHJ5aW5nIHRvIHJlY29yZCcpO1xuXG4gICAgY29uc29sZS5ncm91cEVuZCgpO1xuXG59XG5cbmV4cG9ydCB7IGxvYWQsIHRyeUNhdGNoIH1cbiJdfQ==