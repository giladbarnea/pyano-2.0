"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const experiment_1 = require("./experiment");
const MyPyShell_1 = require("../../MyPyShell");
async function load(reload) {
    console.group(`pages.Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.skipFade = Glob_1.default.BigConfig.dev.skip_fade();
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    Glob_1.default.Title
        .html(`${subconfig.truth.name}`)
        .cacheAppend({
        levelh3: bhe_1.elem({
            tag: 'h3'
        }),
        trialh3: bhe_1.elem({
            tag: 'h3'
        })
    });
    const PY_getOnOffPairs = new MyPyShell_1.MyPyShell('-m txt.get_on_off_pairs', {
        mode: "json",
        args: [subconfig.truth_file]
    });
    const { pairs } = await PY_getOnOffPairs.runAsync();
    console.log({ pairs });
    let readonlyTruth = subconfig.truth.toReadOnly();
    const experiment = new experiment_1.default(subconfig.demo_type);
    await experiment.init(readonlyTruth);
    if (Glob_1.default.BigConfig.experiment_type === "test" || Glob_1.default.BigConfig.dev.ignore_exam_skips('experiment.intro()')) {
        await experiment.intro();
    }
    const levelCollection = subconfig.getLevelCollection();
    await experiment.levelIntro(levelCollection, pairs);
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBT2pDLDZDQUFzQztBQUN0QywrQ0FBb0Q7QUFRcEQsS0FBSyxVQUFVLElBQUksQ0FBQyxNQUFlO0lBRS9CLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFckQsY0FBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQ3JDLElBQUssTUFBTSxFQUFHO1FBQ1YsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQzVCO0lBQ0QsY0FBSSxDQUFDLFFBQVEsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUUvQyxjQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3RCLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7SUFHaEQsY0FBSSxDQUFDLEtBQUs7U0FDTCxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBRS9CLFdBQVcsQ0FBQztRQUNULE9BQU8sRUFBRyxVQUFJLENBQUM7WUFDWCxHQUFHLEVBQUcsSUFBSTtTQUNiLENBQUM7UUFDRixPQUFPLEVBQUcsVUFBSSxDQUFDO1lBQ1gsR0FBRyxFQUFHLElBQUk7U0FDYixDQUFDO0tBQ0wsQ0FBQyxDQUFDO0lBQ1AsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLHFCQUFTLENBQUMseUJBQXlCLEVBQUU7UUFDOUQsSUFBSSxFQUFHLE1BQU07UUFDYixJQUFJLEVBQUcsQ0FBRSxTQUFTLENBQUMsVUFBVSxDQUFFO0tBQ2xDLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxNQUFNLGdCQUFnQixDQUFDLFFBQVEsRUFBVSxDQUFDO0lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBRXZCLElBQUksYUFBYSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDakQsTUFBTSxVQUFVLEdBQUcsSUFBSSxvQkFBVSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2RCxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDckMsSUFBSyxjQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsS0FBSyxNQUFNLElBQUksY0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsb0JBQW9CLENBQUMsRUFBRztRQUUzRyxNQUFNLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUM1QjtJQUNELE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBR3ZELE1BQU0sVUFBVSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEQsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBRXZCLENBQUM7QUFFUSxvQkFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHbG9iIGZyb20gXCIuLi8uLi9HbG9iXCI7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBlbGVtIH0gZnJvbSBcIi4uLy4uL2JoZVwiO1xuLy8gaW1wb3J0IGtleWJvYXJkIGZyb20gJy4va2V5Ym9hcmQnXG4vLyBpbXBvcnQgRGlhbG9nIGZyb20gJy4vZGlhbG9nJ1xuLy8gaW1wb3J0IHsgUGlhbm8gfSBmcm9tIFwiLi4vLi4vUGlhbm9cIlxuLy8gaW1wb3J0IHsgUGlhbm8sIFBpYW5vT3B0aW9ucyB9IGZyb20gXCIuLi8uLi9QaWFub1wiXG4vLyBpbXBvcnQgeyBNaWRpIH0gZnJvbSBcIkB0b25lanMvbWlkaVwiO1xuaW1wb3J0ICogYXMgVG9uZSBmcm9tIFwidG9uZVwiO1xuaW1wb3J0IEV4cGVyaW1lbnQgZnJvbSBcIi4vZXhwZXJpbWVudFwiO1xuaW1wb3J0IHsgSVBhaXJzLCBNeVB5U2hlbGwgfSBmcm9tIFwiLi4vLi4vTXlQeVNoZWxsXCI7XG5pbXBvcnQgeyBlbnVtZXJhdGUgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuXG4vLyBjb25zdCB7IFBpYW5vIH0gPSByZXF1aXJlKFwiQHRvbmVqcy9waWFub1wiKTtcblxuXG4vKipyZXF1aXJlKCcuL1J1bm5pbmcnKS5sb2FkKClcbiAqIERPTlQgaW1wb3J0ICogYXMgcnVubmluZ1BhZ2UsIHRoaXMgY2FsbHMgY29uc3RydWN0b3JzIGV0YyovXG5hc3luYyBmdW5jdGlvbiBsb2FkKHJlbG9hZDogYm9vbGVhbikge1xuICAgIC8vICoqICBQZXJmb3JtYW5jZSwgdmlzdWFscyBzeW5jOiBodHRwczovL2dpdGh1Yi5jb20vVG9uZWpzL1RvbmUuanMvd2lraS9QZXJmb3JtYW5jZVxuICAgIGNvbnNvbGUuZ3JvdXAoYHBhZ2VzLlJ1bm5pbmcuaW5kZXgubG9hZCgke3JlbG9hZH0pYCk7XG4gICAgXG4gICAgR2xvYi5CaWdDb25maWcubGFzdF9wYWdlID0gXCJydW5uaW5nXCI7XG4gICAgaWYgKCByZWxvYWQgKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuIHV0aWwucmVsb2FkUGFnZSgpO1xuICAgIH1cbiAgICBHbG9iLnNraXBGYWRlID0gR2xvYi5CaWdDb25maWcuZGV2LnNraXBfZmFkZSgpO1xuICAgIFxuICAgIEdsb2IuU2lkZWJhci5yZW1vdmUoKTtcbiAgICBjb25zdCBzdWJjb25maWcgPSBHbG9iLkJpZ0NvbmZpZy5nZXRTdWJjb25maWcoKTtcbiAgICBcbiAgICBcbiAgICBHbG9iLlRpdGxlXG4gICAgICAgIC5odG1sKGAke3N1YmNvbmZpZy50cnV0aC5uYW1lfWApXG4gICAgXG4gICAgICAgIC5jYWNoZUFwcGVuZCh7XG4gICAgICAgICAgICBsZXZlbGgzIDogZWxlbSh7XG4gICAgICAgICAgICAgICAgdGFnIDogJ2gzJ1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0cmlhbGgzIDogZWxlbSh7XG4gICAgICAgICAgICAgICAgdGFnIDogJ2gzJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgY29uc3QgUFlfZ2V0T25PZmZQYWlycyA9IG5ldyBNeVB5U2hlbGwoJy1tIHR4dC5nZXRfb25fb2ZmX3BhaXJzJywge1xuICAgICAgICBtb2RlIDogXCJqc29uXCIsXG4gICAgICAgIGFyZ3MgOiBbIHN1YmNvbmZpZy50cnV0aF9maWxlIF1cbiAgICB9KTtcbiAgICBjb25zdCB7IHBhaXJzIH0gPSBhd2FpdCBQWV9nZXRPbk9mZlBhaXJzLnJ1bkFzeW5jPElQYWlycz4oKTtcbiAgICBjb25zb2xlLmxvZyh7IHBhaXJzIH0pO1xuICAgIFxuICAgIGxldCByZWFkb25seVRydXRoID0gc3ViY29uZmlnLnRydXRoLnRvUmVhZE9ubHkoKTtcbiAgICBjb25zdCBleHBlcmltZW50ID0gbmV3IEV4cGVyaW1lbnQoc3ViY29uZmlnLmRlbW9fdHlwZSk7XG4gICAgYXdhaXQgZXhwZXJpbWVudC5pbml0KHJlYWRvbmx5VHJ1dGgpO1xuICAgIGlmICggR2xvYi5CaWdDb25maWcuZXhwZXJpbWVudF90eXBlID09PSBcInRlc3RcIiB8fCBHbG9iLkJpZ0NvbmZpZy5kZXYuaWdub3JlX2V4YW1fc2tpcHMoJ2V4cGVyaW1lbnQuaW50cm8oKScpICkge1xuICAgICAgICAvLyBUT0RPOiBsaW1pdCBieSBtYXhOb3Rlc1xuICAgICAgICBhd2FpdCBleHBlcmltZW50LmludHJvKCk7XG4gICAgfVxuICAgIGNvbnN0IGxldmVsQ29sbGVjdGlvbiA9IHN1YmNvbmZpZy5nZXRMZXZlbENvbGxlY3Rpb24oKTtcbiAgICBcbiAgICBcbiAgICBhd2FpdCBleHBlcmltZW50LmxldmVsSW50cm8obGV2ZWxDb2xsZWN0aW9uLCBwYWlycyk7XG4gICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIFxufVxuXG5leHBvcnQgeyBsb2FkIH1cbiJdfQ==