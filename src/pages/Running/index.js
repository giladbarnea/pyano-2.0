"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Glob_1 = require("../../Glob");
const util = require("../../util");
const bhe_1 = require("../../bhe");
const dialog_1 = require("./dialog");
const Piano_1 = require("../../Piano");
const midi_1 = require("@tonejs/midi");
const Tone = require("tone");
async function load(reload) {
    console.group(`pages.Running.index.load(${reload})`);
    Glob_1.default.BigConfig.last_page = "running";
    if (reload) {
        console.groupEnd();
        return util.reloadPage();
    }
    Glob_1.default.Sidebar.remove();
    const subconfig = Glob_1.default.BigConfig.getSubconfig();
    const piano = new Piano_1.Piano({
        samples: SALAMANDER_PATH_ABS,
        release: true,
        pedal: true,
        velocities: 5,
    }).toDestination();
    await piano.load();
    console.log('piano loaded');
    const midi = await midi_1.Midi.fromUrl(subconfig.truth.midi.absPath);
    console.log('midi loaded');
    const noteOffCallback = (time, event) => {
        piano.keyUp(event.name, time);
    };
    const noteOnCallback = (time, event) => {
        piano.keyDown(event.name, time, event.velocity);
    };
    let noteOffObjs = [];
    let noteOnObjs = [];
    for (let note of midi.tracks[0].notes) {
        let { name, velocity, duration, time: timeOn } = note;
        let timeOff = timeOn + duration;
        noteOffObjs.push({ name, time: timeOff });
        noteOnObjs.push({ name, time: timeOn, duration, velocity });
    }
    const noteOffEvents = new Tone.Part(noteOffCallback, noteOffObjs).start(0);
    const noteOnEvents = new Tone.Part(noteOnCallback, noteOnObjs).start(0);
    Tone.Transport.start();
    remote.globalShortcut.register("M", () => Tone.Transport.toggle());
    console.log({ subconfig, midi, piano, "Tone.Transport.state": Tone.Transport.state, });
    Glob_1.default.Title.html(`${subconfig.truth.name}`);
    const subtitle = bhe_1.elem({ tag: 'h3', text: '1/1' });
    const dialog = new dialog_1.default(subconfig.demo_type);
    Glob_1.default.MainContent.append(subtitle, dialog);
    console.groupEnd();
}
exports.load = load;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QjtBQUM5QixtQ0FBbUM7QUFDbkMsbUNBQWlDO0FBRWpDLHFDQUE2QjtBQUM3Qix1Q0FBbUM7QUFDbkMsdUNBQW9DO0FBQ3BDLDZCQUE2QjtBQU83QixLQUFLLFVBQVUsSUFBSSxDQUFDLE1BQWU7SUFFL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNyRCxjQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDckMsSUFBSyxNQUFNLEVBQUc7UUFDVixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkIsT0FBTyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7S0FDNUI7SUFDRCxjQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3RCLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDaEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxhQUFLLENBQUM7UUFDcEIsT0FBTyxFQUFHLG1CQUFtQjtRQUM3QixPQUFPLEVBQUcsSUFBSTtRQUNkLEtBQUssRUFBRyxJQUFJO1FBQ1osVUFBVSxFQUFHLENBQUM7S0FDakIsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ25CLE1BQU0sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxXQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlELE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFM0IsTUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUFvQixFQUFFLEtBQWdDLEVBQUUsRUFBRTtRQUMvRSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDO0lBQ0YsTUFBTSxjQUFjLEdBQUcsQ0FBQyxJQUFvQixFQUFFLEtBQWtELEVBQUUsRUFBRTtRQUNoRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRCxDQUFDLENBQUM7SUFHRixJQUFJLFdBQVcsR0FBYyxFQUFFLENBQUM7SUFDaEMsSUFBSSxVQUFVLEdBQWEsRUFBRSxDQUFDO0lBQzlCLEtBQU0sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUc7UUFDckMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDdkQsSUFBSSxPQUFPLEdBQUcsTUFBTSxHQUFHLFFBQVEsQ0FBQztRQUNoQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFHLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUNoRTtJQWFELE1BQU0sYUFBYSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNFLE1BQU0sWUFBWSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdkIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUVuRSxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsc0JBQXNCLEVBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ3hGLGNBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRTNDLE1BQU0sUUFBUSxHQUFHLFVBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRyxJQUFJLEVBQUUsSUFBSSxFQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDcEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQkFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUUvQyxjQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FDbkIsUUFBUSxFQUNSLE1BQU0sQ0FDVCxDQUFDO0lBQ0YsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBRXZCLENBQUM7QUFFUSxvQkFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHbG9iIGZyb20gXCIuLi8uLi9HbG9iXCI7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gXCIuLi8uLi91dGlsXCI7XG5pbXBvcnQgeyBlbGVtIH0gZnJvbSBcIi4uLy4uL2JoZVwiO1xuaW1wb3J0IGFuaW1hdGlvbiBmcm9tICcuL2FuaW1hdGlvbidcbmltcG9ydCBEaWFsb2cgZnJvbSAnLi9kaWFsb2cnXG5pbXBvcnQgeyBQaWFubyB9IGZyb20gXCIuLi8uLi9QaWFub1wiXG5pbXBvcnQgeyBNaWRpIH0gZnJvbSBcIkB0b25lanMvbWlkaVwiO1xuaW1wb3J0ICogYXMgVG9uZSBmcm9tIFwidG9uZVwiO1xuXG4vLyBjb25zdCB7IFBpYW5vIH0gPSByZXF1aXJlKFwiQHRvbmVqcy9waWFub1wiKTtcblxuXG4vKippbXBvcnQgKiBhcyBydW5uaW5nUGFnZSBmcm9tIFwiLi4vUnVubmluZ1wiXG4gKiByZXF1aXJlKCcuL1J1bm5pbmcnKSovXG5hc3luYyBmdW5jdGlvbiBsb2FkKHJlbG9hZDogYm9vbGVhbikge1xuICAgIC8vICoqICBQZXJmb3JtYW5jZSwgdmlzdWFscyBzeW5jOiBodHRwczovL2dpdGh1Yi5jb20vVG9uZWpzL1RvbmUuanMvd2lraS9QZXJmb3JtYW5jZVxuICAgIGNvbnNvbGUuZ3JvdXAoYHBhZ2VzLlJ1bm5pbmcuaW5kZXgubG9hZCgke3JlbG9hZH0pYCk7XG4gICAgR2xvYi5CaWdDb25maWcubGFzdF9wYWdlID0gXCJydW5uaW5nXCI7XG4gICAgaWYgKCByZWxvYWQgKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuIHV0aWwucmVsb2FkUGFnZSgpO1xuICAgIH1cbiAgICBHbG9iLlNpZGViYXIucmVtb3ZlKCk7XG4gICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG4gICAgY29uc3QgcGlhbm8gPSBuZXcgUGlhbm8oe1xuICAgICAgICBzYW1wbGVzIDogU0FMQU1BTkRFUl9QQVRIX0FCUyxcbiAgICAgICAgcmVsZWFzZSA6IHRydWUsXG4gICAgICAgIHBlZGFsIDogdHJ1ZSxcbiAgICAgICAgdmVsb2NpdGllcyA6IDUsXG4gICAgfSkudG9EZXN0aW5hdGlvbigpO1xuICAgIGF3YWl0IHBpYW5vLmxvYWQoKTtcbiAgICBjb25zb2xlLmxvZygncGlhbm8gbG9hZGVkJyk7XG4gICAgY29uc3QgbWlkaSA9IGF3YWl0IE1pZGkuZnJvbVVybChzdWJjb25maWcudHJ1dGgubWlkaS5hYnNQYXRoKTtcbiAgICBjb25zb2xlLmxvZygnbWlkaSBsb2FkZWQnKTtcbiAgICBcbiAgICBjb25zdCBub3RlT2ZmQ2FsbGJhY2sgPSAodGltZTogVG9uZS5Vbml0LlRpbWUsIGV2ZW50OiB7IG5hbWU6IHN0cmluZyB8IG51bWJlciB9KSA9PiB7XG4gICAgICAgIHBpYW5vLmtleVVwKGV2ZW50Lm5hbWUsIHRpbWUpO1xuICAgIH07XG4gICAgY29uc3Qgbm90ZU9uQ2FsbGJhY2sgPSAodGltZTogVG9uZS5Vbml0LlRpbWUsIGV2ZW50OiB7IG5hbWU6IHN0cmluZyB8IG51bWJlciwgdmVsb2NpdHk6IG51bWJlciB9KSA9PiB7XG4gICAgICAgIHBpYW5vLmtleURvd24oZXZlbnQubmFtZSwgdGltZSwgZXZlbnQudmVsb2NpdHkpO1xuICAgIH07XG4gICAgdHlwZSBOb3RlT2ZmID0geyBuYW1lOiBzdHJpbmcgfCBudW1iZXIsIHRpbWU6IFRvbmUuVW5pdC5UaW1lIH07XG4gICAgdHlwZSBOb3RlT24gPSBOb3RlT2ZmICYgeyB2ZWxvY2l0eTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyIH07XG4gICAgbGV0IG5vdGVPZmZPYmpzOiBOb3RlT2ZmW10gPSBbXTtcbiAgICBsZXQgbm90ZU9uT2JqczogTm90ZU9uW10gPSBbXTtcbiAgICBmb3IgKCBsZXQgbm90ZSBvZiBtaWRpLnRyYWNrc1swXS5ub3RlcyApIHtcbiAgICAgICAgbGV0IHsgbmFtZSwgdmVsb2NpdHksIGR1cmF0aW9uLCB0aW1lIDogdGltZU9uIH0gPSBub3RlO1xuICAgICAgICBsZXQgdGltZU9mZiA9IHRpbWVPbiArIGR1cmF0aW9uO1xuICAgICAgICBub3RlT2ZmT2Jqcy5wdXNoKHsgbmFtZSwgdGltZSA6IHRpbWVPZmYgfSk7XG4gICAgICAgIG5vdGVPbk9ianMucHVzaCh7IG5hbWUsIHRpbWUgOiB0aW1lT24sIGR1cmF0aW9uLCB2ZWxvY2l0eSB9KTtcbiAgICB9XG4gICAgLypjb25zdCBub3RlT2ZmT2JqcyA9IG1pZGkudHJhY2tzWzBdLm5vdGVzLm1hcChuID0+ICh7XG4gICAgIG5hbWUgOiBuLm5hbWUsXG4gICAgIHRpbWUgOiBuLnRpbWUgKyBuLmR1cmF0aW9uLFxuICAgICB9XG4gICAgIClcbiAgICAgKTtcbiAgICAgY29uc3Qgbm90ZU9uT2JqcyA9IG1pZGkudHJhY2tzWzBdLm5vdGVzLm1hcChuID0+ICh7XG4gICAgIG5hbWUgOiBuLm5hbWUsXG4gICAgIHZlbG9jaXR5IDogbi52ZWxvY2l0eSxcbiAgICAgZHVyYXRpb24gOiBuLmR1cmF0aW9uLFxuICAgICB0aW1lIDogbi50aW1lLFxuICAgICB9KSk7Ki9cbiAgICBjb25zdCBub3RlT2ZmRXZlbnRzID0gbmV3IFRvbmUuUGFydChub3RlT2ZmQ2FsbGJhY2ssIG5vdGVPZmZPYmpzKS5zdGFydCgwKTtcbiAgICBjb25zdCBub3RlT25FdmVudHMgPSBuZXcgVG9uZS5QYXJ0KG5vdGVPbkNhbGxiYWNrLCBub3RlT25PYmpzKS5zdGFydCgwKTtcbiAgICBUb25lLlRyYW5zcG9ydC5zdGFydCgpO1xuICAgIHJlbW90ZS5nbG9iYWxTaG9ydGN1dC5yZWdpc3RlcihcIk1cIiwgKCkgPT4gVG9uZS5UcmFuc3BvcnQudG9nZ2xlKCkpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKHsgc3ViY29uZmlnLCBtaWRpLCBwaWFubywgXCJUb25lLlRyYW5zcG9ydC5zdGF0ZVwiIDogVG9uZS5UcmFuc3BvcnQuc3RhdGUsIH0pO1xuICAgIEdsb2IuVGl0bGUuaHRtbChgJHtzdWJjb25maWcudHJ1dGgubmFtZX1gKTtcbiAgICBcbiAgICBjb25zdCBzdWJ0aXRsZSA9IGVsZW0oeyB0YWcgOiAnaDMnLCB0ZXh0IDogJzEvMScgfSk7XG4gICAgY29uc3QgZGlhbG9nID0gbmV3IERpYWxvZyhzdWJjb25maWcuZGVtb190eXBlKTtcbiAgICBcbiAgICBHbG9iLk1haW5Db250ZW50LmFwcGVuZChcbiAgICAgICAgc3VidGl0bGUsXG4gICAgICAgIGRpYWxvZ1xuICAgICk7XG4gICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIFxufVxuXG5leHBvcnQgeyBsb2FkIH1cbiJdfQ==