"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
class Video extends bhe_1.BetterHTMLElement {
    constructor() {
        super({ tag: 'video' });
    }
    async initVideo(mp4path, onsetsPath) {
        const src = bhe_1.elem({ tag: 'source' }).attr({ src: mp4path, type: 'video/mp4' });
        this.append(src);
    }
    async intro() {
        console.group(`Video.intro()`);
        const video = this.e;
        video.load();
        const loadedData = new Promise(resolve => video.onloadeddata = resolve);
        const canplay = new Promise(resolve => video.oncanplay = resolve);
        const canplaythrough = new Promise(resolve => video.oncanplaythrough = resolve);
        await loadedData;
        console.log('VIDEO LOADEDDATA!');
        await canplay;
        console.log('VIDEO CANPLAY!');
        await canplaythrough;
        console.log('VIDEO CANPLAYTHRU!');
        video.play();
        const ended = new Promise(resolve => video.onended = resolve);
        await ended;
        console.log('video ended!');
        console.groupEnd();
        return;
    }
}
exports.default = Video;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2aWRlby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFvRDtBQUdwRCxNQUFNLEtBQU0sU0FBUSx1QkFBaUI7SUFFakM7UUFDSSxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUM1QixDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFlLEVBQUUsVUFBa0I7UUFDL0MsTUFBTSxHQUFHLEdBQUcsVUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFHLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFHLE9BQU8sRUFBRSxJQUFJLEVBQUcsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBSXJCLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDL0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQXFCLENBQUM7UUFDekMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2IsTUFBTSxVQUFVLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsQ0FBQztRQUNsRSxNQUFNLGNBQWMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsQ0FBQztRQUVoRixNQUFNLFVBQVUsQ0FBQztRQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDakMsTUFBTSxPQUFPLENBQUM7UUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDOUIsTUFBTSxjQUFjLENBQUM7UUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2xDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNiLE1BQU0sS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQztRQUM5RCxNQUFNLEtBQUssQ0FBQztRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDNUIsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25CLE9BQU07SUFDVixDQUFDO0NBQ0o7QUFFRCxrQkFBZSxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZXR0ZXJIVE1MRWxlbWVudCwgZWxlbSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuXG5jbGFzcyBWaWRlbyBleHRlbmRzIEJldHRlckhUTUxFbGVtZW50IHtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoeyB0YWcgOiAndmlkZW8nIH0pXG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGluaXRWaWRlbyhtcDRwYXRoOiBzdHJpbmcsIG9uc2V0c1BhdGg6IHN0cmluZykge1xuICAgICAgICBjb25zdCBzcmMgPSBlbGVtKHsgdGFnIDogJ3NvdXJjZScgfSkuYXR0cih7IHNyYyA6IG1wNHBhdGgsIHR5cGUgOiAndmlkZW8vbXA0JyB9KTtcbiAgICAgICAgdGhpcy5hcHBlbmQoc3JjKTtcbiAgICAgICAgLypsZXQgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhvbnNldHNQYXRoKTtcbiAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgY29uc29sZS5sb2coJ/CfkZMgVmlkZW8uZGF0YSBmcm9tIG9uc2V0cy5qc29uJywgeyBkYXRhIH0pOyovXG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGludHJvKCkge1xuICAgICAgICBjb25zb2xlLmdyb3VwKGBWaWRlby5pbnRybygpYCk7XG4gICAgICAgIGNvbnN0IHZpZGVvID0gdGhpcy5lIGFzIEhUTUxWaWRlb0VsZW1lbnQ7XG4gICAgICAgIHZpZGVvLmxvYWQoKTtcbiAgICAgICAgY29uc3QgbG9hZGVkRGF0YSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gdmlkZW8ub25sb2FkZWRkYXRhID0gcmVzb2x2ZSk7XG4gICAgICAgIGNvbnN0IGNhbnBsYXkgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHZpZGVvLm9uY2FucGxheSA9IHJlc29sdmUpO1xuICAgICAgICBjb25zdCBjYW5wbGF5dGhyb3VnaCA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gdmlkZW8ub25jYW5wbGF5dGhyb3VnaCA9IHJlc29sdmUpO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgbG9hZGVkRGF0YTtcbiAgICAgICAgY29uc29sZS5sb2coJ1ZJREVPIExPQURFRERBVEEhJyk7XG4gICAgICAgIGF3YWl0IGNhbnBsYXk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdWSURFTyBDQU5QTEFZIScpO1xuICAgICAgICBhd2FpdCBjYW5wbGF5dGhyb3VnaDtcbiAgICAgICAgY29uc29sZS5sb2coJ1ZJREVPIENBTlBMQVlUSFJVIScpO1xuICAgICAgICB2aWRlby5wbGF5KCk7XG4gICAgICAgIGNvbnN0IGVuZGVkID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB2aWRlby5vbmVuZGVkID0gcmVzb2x2ZSk7XG4gICAgICAgIGF3YWl0IGVuZGVkO1xuICAgICAgICBjb25zb2xlLmxvZygndmlkZW8gZW5kZWQhJyk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWaWRlbztcbiJdfQ==