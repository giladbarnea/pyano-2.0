"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const fs = require("fs");
const util_1 = require("../../util");
class Video extends bhe_1.BetterHTMLElement {
    constructor() {
        super({ tag: 'video' });
    }
    async initVideo(mp4path, onsetsPath) {
        console.group(`Video.initVideo()`);
        const src = bhe_1.elem({ tag: 'source' }).attr({ src: mp4path, type: 'video/mp4' });
        this.append(src);
        let data = JSON.parse(fs.readFileSync(onsetsPath));
        console.log('onsets.json', data);
        this.firstOnset = parseFloat(data.onsets[data.first_onset_index]);
        this.lastOnset = parseFloat(data.onsets.last());
        const video = this.e;
        video.load();
        const loadeddata = new Promise(resolve => video.onloadeddata = resolve);
        const canplay = new Promise(resolve => video.oncanplay = resolve);
        const canplaythrough = new Promise(resolve => video.oncanplaythrough = resolve);
        await Promise.all([
            loadeddata,
            canplay,
            canplaythrough
        ]);
        console.log('Done awaiting loadeddata, canplay, canplaythrough');
        video.currentTime = this.firstOnset - 0.1;
        console.groupEnd();
    }
    async intro() {
        console.group(`Video.intro()`);
        const video = this.e;
        this.on({ playing: () => console.log('onplaying') });
        video.play();
        console.log(`Playing, currentTime: ${video.currentTime}`);
        await util_1.wait((this.lastOnset - video.currentTime) * 1000 + 500, false);
        while (video.volume > 0.05) {
            video.volume -= 0.05;
            console.log({ 'video.volume': video.volume });
            await util_1.wait(10, false);
        }
        video.volume = 0;
        console.log('video ended!');
        console.groupEnd();
        return;
    }
}
exports.default = Video;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2aWRlby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFvRDtBQUNwRCx5QkFBeUI7QUFDekIscUNBQWtDO0FBRWxDLE1BQU0sS0FBTSxTQUFRLHVCQUFpQjtJQU1qQztRQUNJLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRyxPQUFPLEVBQUUsQ0FBQyxDQUFBO0lBQzVCLENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQWUsRUFBRSxVQUFrQjtRQUMvQyxPQUFPLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDbkMsTUFBTSxHQUFHLEdBQUcsVUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFHLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFHLE9BQU8sRUFBRSxJQUFJLEVBQUcsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDaEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyQixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDYixNQUFNLFVBQVUsR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLENBQUM7UUFDeEUsTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sY0FBYyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBQ2hGLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUNkLFVBQVU7WUFDVixPQUFPO1lBQ1AsY0FBYztTQUNqQixDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7UUFDakUsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztRQUUxQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDMUQsTUFBTSxXQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JFLE9BQVEsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLEVBQUc7WUFFMUIsS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7WUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLGNBQWMsRUFBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUUvQyxNQUFNLFdBQUksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDekI7UUFDRCxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUVqQixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNuQixPQUFNO0lBQ1YsQ0FBQztDQUNKO0FBRUQsa0JBQWUsS0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmV0dGVySFRNTEVsZW1lbnQsIGVsZW0gfSBmcm9tIFwiLi4vLi4vYmhlXCI7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuXG5jbGFzcyBWaWRlbyBleHRlbmRzIEJldHRlckhUTUxFbGVtZW50IHtcbiAgICBwcml2YXRlIGZpcnN0T25zZXQ6IG51bWJlcjtcbiAgICBwcml2YXRlIGxhc3RPbnNldDogbnVtYmVyO1xuICAgIFxuICAgIGU6IEhUTUxWaWRlb0VsZW1lbnQ7XG4gICAgXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKHsgdGFnIDogJ3ZpZGVvJyB9KVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbml0VmlkZW8obXA0cGF0aDogc3RyaW5nLCBvbnNldHNQYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgVmlkZW8uaW5pdFZpZGVvKClgKTtcbiAgICAgICAgY29uc3Qgc3JjID0gZWxlbSh7IHRhZyA6ICdzb3VyY2UnIH0pLmF0dHIoeyBzcmMgOiBtcDRwYXRoLCB0eXBlIDogJ3ZpZGVvL21wNCcgfSk7XG4gICAgICAgIHRoaXMuYXBwZW5kKHNyYyk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhvbnNldHNQYXRoKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdvbnNldHMuanNvbicsIGRhdGEpO1xuICAgICAgICB0aGlzLmZpcnN0T25zZXQgPSBwYXJzZUZsb2F0KGRhdGEub25zZXRzW2RhdGEuZmlyc3Rfb25zZXRfaW5kZXhdKTtcbiAgICAgICAgdGhpcy5sYXN0T25zZXQgPSBwYXJzZUZsb2F0KGRhdGEub25zZXRzLmxhc3QoKSk7XG4gICAgICAgIGNvbnN0IHZpZGVvID0gdGhpcy5lO1xuICAgICAgICB2aWRlby5sb2FkKCk7XG4gICAgICAgIGNvbnN0IGxvYWRlZGRhdGEgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHZpZGVvLm9ubG9hZGVkZGF0YSA9IHJlc29sdmUpO1xuICAgICAgICBjb25zdCBjYW5wbGF5ID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB2aWRlby5vbmNhbnBsYXkgPSByZXNvbHZlKTtcbiAgICAgICAgY29uc3QgY2FucGxheXRocm91Z2ggPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHZpZGVvLm9uY2FucGxheXRocm91Z2ggPSByZXNvbHZlKTtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgbG9hZGVkZGF0YSxcbiAgICAgICAgICAgIGNhbnBsYXksXG4gICAgICAgICAgICBjYW5wbGF5dGhyb3VnaFxuICAgICAgICBdKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCdEb25lIGF3YWl0aW5nIGxvYWRlZGRhdGEsIGNhbnBsYXksIGNhbnBsYXl0aHJvdWdoJyk7XG4gICAgICAgIHZpZGVvLmN1cnJlbnRUaW1lID0gdGhpcy5maXJzdE9uc2V0IC0gMC4xO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbnRybygpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgVmlkZW8uaW50cm8oKWApO1xuICAgICAgICBjb25zdCB2aWRlbyA9IHRoaXMuZTtcbiAgICAgICAgdGhpcy5vbih7IHBsYXlpbmcgOiAoKSA9PiBjb25zb2xlLmxvZygnb25wbGF5aW5nJykgfSk7XG4gICAgICAgIHZpZGVvLnBsYXkoKTtcbiAgICAgICAgY29uc29sZS5sb2coYFBsYXlpbmcsIGN1cnJlbnRUaW1lOiAke3ZpZGVvLmN1cnJlbnRUaW1lfWApO1xuICAgICAgICBhd2FpdCB3YWl0KCh0aGlzLmxhc3RPbnNldCAtIHZpZGVvLmN1cnJlbnRUaW1lKSAqIDEwMDAgKyA1MDAsIGZhbHNlKTtcbiAgICAgICAgd2hpbGUgKCB2aWRlby52b2x1bWUgPiAwLjA1ICkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2aWRlby52b2x1bWUgLT0gMC4wNTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHsgJ3ZpZGVvLnZvbHVtZScgOiB2aWRlby52b2x1bWUgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGF3YWl0IHdhaXQoMTAsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB2aWRlby52b2x1bWUgPSAwO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ3ZpZGVvIGVuZGVkIScpO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIHJldHVyblxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmlkZW87XG4iXX0=