"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const fs = require("fs");
const util_1 = require("../../util");
const ExperimentBHE_1 = require("./ExperimentBHE");
class Video extends ExperimentBHE_1.default {
    constructor() {
        super({ tag: 'video' });
    }
    async initVideo(mp4path, onsetsPath) {
        console.group(`Video.initVideo()`);
        const src = bhe_1.elem({ tag: 'source' }).attr({ src: mp4path, type: 'video/mp4' });
        this.append(src);
        let data = JSON.parse(fs.readFileSync(onsetsPath));
        this.firstOnset = parseFloat(data.onsets[data.first_onset_index]);
        this.lastOnset = parseFloat(data.onsets.last());
        const video = this.e;
        video.load();
        const loadeddata = new Promise(resolve => video.onloadeddata = resolve);
        const canplay = new Promise(resolve => video.oncanplay = resolve);
        const canplaythrough = new Promise(resolve => video.oncanplaythrough = resolve);
        await Promise.all([
            loadeddata,
            canplay,
            canplaythrough
        ]);
        console.log('Done awaiting loadeddata, canplay, canplaythrough');
        video.currentTime = this.firstOnset - 0.1;
        console.groupEnd();
    }
    async intro() {
        console.group(`Video.intro()`);
        const video = this.e;
        video.play();
        console.log(`Playing, currentTime: ${video.currentTime}`);
        await util_1.wait((this.lastOnset - video.currentTime) * 1000 + 500, false);
        while (video.volume > 0.05) {
            video.volume -= 0.05;
            await util_1.wait(10, false);
        }
        video.volume = 0;
        console.log('video ended!');
        console.groupEnd();
    }
}
exports.default = Video;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2aWRlby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFpQztBQUNqQyx5QkFBeUI7QUFDekIscUNBQWtDO0FBQ2xDLG1EQUE0QztBQUU1QyxNQUFNLEtBQU0sU0FBUSx1QkFBYTtJQU03QjtRQUNJLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQWUsRUFBRSxVQUFrQjtRQUMvQyxPQUFPLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDbkMsTUFBTSxHQUFHLEdBQUcsVUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFHLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFHLE9BQU8sRUFBRSxJQUFJLEVBQUcsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDaEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyQixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDYixNQUFNLFVBQVUsR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLENBQUM7UUFDeEUsTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sY0FBYyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBQ2hGLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUNkLFVBQVU7WUFDVixPQUFPO1lBQ1AsY0FBYztTQUNqQixDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsR0FBRyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7UUFDakUsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztRQUUxQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUdELEtBQUssQ0FBQyxLQUFLO1FBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXJCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzFELE1BQU0sV0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyRSxPQUFRLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxFQUFHO1lBQzFCLEtBQUssQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO1lBQ3JCLE1BQU0sV0FBSSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN6QjtRQUNELEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBRWpCLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDNUIsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRXZCLENBQUM7Q0FDSjtBQUVELGtCQUFlLEtBQUssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVsZW0gfSBmcm9tIFwiLi4vLi4vYmhlXCI7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IEV4cGVyaW1lbnRCSEUgZnJvbSBcIi4vRXhwZXJpbWVudEJIRVwiO1xuXG5jbGFzcyBWaWRlbyBleHRlbmRzIEV4cGVyaW1lbnRCSEUge1xuICAgIHByaXZhdGUgZmlyc3RPbnNldDogbnVtYmVyO1xuICAgIHByaXZhdGUgbGFzdE9uc2V0OiBudW1iZXI7XG4gICAgXG4gICAgZTogSFRNTFZpZGVvRWxlbWVudDtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoeyB0YWcgOiAndmlkZW8nIH0pO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbml0VmlkZW8obXA0cGF0aDogc3RyaW5nLCBvbnNldHNQYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgVmlkZW8uaW5pdFZpZGVvKClgKTtcbiAgICAgICAgY29uc3Qgc3JjID0gZWxlbSh7IHRhZyA6ICdzb3VyY2UnIH0pLmF0dHIoeyBzcmMgOiBtcDRwYXRoLCB0eXBlIDogJ3ZpZGVvL21wNCcgfSk7XG4gICAgICAgIHRoaXMuYXBwZW5kKHNyYyk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhvbnNldHNQYXRoKSk7XG4gICAgICAgIHRoaXMuZmlyc3RPbnNldCA9IHBhcnNlRmxvYXQoZGF0YS5vbnNldHNbZGF0YS5maXJzdF9vbnNldF9pbmRleF0pO1xuICAgICAgICB0aGlzLmxhc3RPbnNldCA9IHBhcnNlRmxvYXQoZGF0YS5vbnNldHMubGFzdCgpKTtcbiAgICAgICAgY29uc3QgdmlkZW8gPSB0aGlzLmU7XG4gICAgICAgIHZpZGVvLmxvYWQoKTtcbiAgICAgICAgY29uc3QgbG9hZGVkZGF0YSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gdmlkZW8ub25sb2FkZWRkYXRhID0gcmVzb2x2ZSk7XG4gICAgICAgIGNvbnN0IGNhbnBsYXkgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHZpZGVvLm9uY2FucGxheSA9IHJlc29sdmUpO1xuICAgICAgICBjb25zdCBjYW5wbGF5dGhyb3VnaCA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gdmlkZW8ub25jYW5wbGF5dGhyb3VnaCA9IHJlc29sdmUpO1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBsb2FkZWRkYXRhLFxuICAgICAgICAgICAgY2FucGxheSxcbiAgICAgICAgICAgIGNhbnBsYXl0aHJvdWdoXG4gICAgICAgIF0pO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ0RvbmUgYXdhaXRpbmcgbG9hZGVkZGF0YSwgY2FucGxheSwgY2FucGxheXRocm91Z2gnKTtcbiAgICAgICAgdmlkZW8uY3VycmVudFRpbWUgPSB0aGlzLmZpcnN0T25zZXQgLSAwLjE7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIGFzeW5jIGludHJvKCkge1xuICAgICAgICBjb25zb2xlLmdyb3VwKGBWaWRlby5pbnRybygpYCk7XG4gICAgICAgIGNvbnN0IHZpZGVvID0gdGhpcy5lO1xuICAgICAgICBcbiAgICAgICAgdmlkZW8ucGxheSgpO1xuICAgICAgICBjb25zb2xlLmxvZyhgUGxheWluZywgY3VycmVudFRpbWU6ICR7dmlkZW8uY3VycmVudFRpbWV9YCk7XG4gICAgICAgIGF3YWl0IHdhaXQoKHRoaXMubGFzdE9uc2V0IC0gdmlkZW8uY3VycmVudFRpbWUpICogMTAwMCArIDUwMCwgZmFsc2UpO1xuICAgICAgICB3aGlsZSAoIHZpZGVvLnZvbHVtZSA+IDAuMDUgKSB7XG4gICAgICAgICAgICB2aWRlby52b2x1bWUgLT0gMC4wNTtcbiAgICAgICAgICAgIGF3YWl0IHdhaXQoMTAsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB2aWRlby52b2x1bWUgPSAwO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ3ZpZGVvIGVuZGVkIScpO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIFxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmlkZW87XG4iXX0=