"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const fs = require("fs");
const util_1 = require("../../util");
const MyPyShell_1 = require("../../MyPyShell");
class Video extends bhe_1.VisualBHE {
    constructor() {
        super({ tag: 'video', cls: 'player' });
    }
    async init(readonlyTruth) {
        console.group(`Video.init()`);
        const src = bhe_1.elem({ tag: 'source' }).attr({ src: readonlyTruth.mp4.absPath, type: 'video/mp4' });
        this.append(src);
        let data = JSON.parse(fs.readFileSync(readonlyTruth.onsets.absPath));
        this.firstOnset = parseFloat(data.onsets[data.first_onset_index]);
        this.lastOnset = parseFloat(data.onsets.last());
        const video = this.e;
        video.load();
        const loadeddata = new Promise(resolve => video.onloadeddata = resolve);
        const canplay = new Promise(resolve => video.oncanplay = resolve);
        const canplaythrough = new Promise(resolve => video.oncanplaythrough = resolve);
        await Promise.all([
            loadeddata,
            canplay,
            canplaythrough
        ]);
        console.log('Done awaiting loadeddata, canplay, canplaythrough');
        video.currentTime = this.firstOnset - 0.1;
        const PY_getOnOffPairs = new MyPyShell_1.MyPyShell('-m txt.get_on_off_pairs', {
            mode: "json",
            args: [readonlyTruth.name]
        });
        const { pairs } = await PY_getOnOffPairs.runAsync();
        console.log({ pairs });
        this.onOffPairs = pairs;
        console.groupEnd();
    }
    async intro() {
        console.group(`Video.intro()`);
        const video = this.e;
        video.play();
        console.log(`Playing, currentTime: ${video.currentTime}`);
        await util_1.wait((this.lastOnset - video.currentTime) * 1000 + 2000, false);
        while (video.volume > 0.05) {
            video.volume -= 0.05;
            await util_1.wait(10, false);
        }
        video.volume = 0;
        video.pause();
        this.allOff();
        console.log('video ended!');
        console.groupEnd();
    }
    getDuration(notes) {
        const [__, last_off] = this.onOffPairs[notes - 1];
        const [first_on, _] = this.onOffPairs[0];
        const duration = last_off.time - first_on.time;
        return duration;
    }
    async levelIntro(notes) {
        console.group(`Video.levelIntro(notes : ${notes})`);
        const video = this.e;
        const duration = this.getDuration(notes);
        video.play();
        console.log(`Playing, currentTime: ${video.currentTime}`);
        await util_1.wait(duration * 1000 - 200, false);
        while (video.volume > 0.05) {
            video.volume -= 0.05;
            await util_1.wait(10, false);
        }
        video.volume = 0;
        video.pause();
        this.allOff();
        console.log('video ended!');
        console.groupEnd();
    }
}
exports.default = Video;
//# sourceMappingURL=data:application/json;base64,