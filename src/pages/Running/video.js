"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
class Video extends bhe_1.BetterHTMLElement {
    constructor() {
        super({ tag: 'video' });
    }
    async initVideo(mp4path, onsetsPath) {
        const src = bhe_1.elem({ tag: 'source' }).attr({ src: mp4path, type: 'video/mp4' });
        this.append(src);
    }
    async intro() {
        console.group(`Video.intro()`);
        const video = this.e;
        video.load();
        const loadeddata = new Promise(resolve => video.onloadeddata = resolve);
        const canplay = new Promise(resolve => video.oncanplay = resolve);
        const canplaythrough = new Promise(resolve => video.oncanplaythrough = resolve);
        await loadeddata;
        await canplay;
        await canplaythrough;
        console.log('Done awaiting loadeddata, canplay, canplaythrough');
        video.play();
        console.log('Playing');
        const ended = new Promise(resolve => video.onended = resolve);
        await ended;
        console.log('video ended!');
        console.groupEnd();
        return;
    }
}
exports.default = Video;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2aWRlby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFvRDtBQUVwRCxNQUFNLEtBQU0sU0FBUSx1QkFBaUI7SUFFakM7UUFDSSxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUM1QixDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFlLEVBQUUsVUFBa0I7UUFDL0MsTUFBTSxHQUFHLEdBQUcsVUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFHLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFHLE9BQU8sRUFBRSxJQUFJLEVBQUcsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBSXJCLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDL0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQXFCLENBQUM7UUFDekMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2IsTUFBTSxVQUFVLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsQ0FBQztRQUNsRSxNQUFNLGNBQWMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsQ0FBQztRQUVoRixNQUFNLFVBQVUsQ0FBQztRQUNqQixNQUFNLE9BQU8sQ0FBQztRQUNkLE1BQU0sY0FBYyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsbURBQW1ELENBQUMsQ0FBQztRQUNqRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQztRQUM5RCxNQUFNLEtBQUssQ0FBQztRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDNUIsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25CLE9BQU07SUFDVixDQUFDO0NBQ0o7QUFFRCxrQkFBZSxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZXR0ZXJIVE1MRWxlbWVudCwgZWxlbSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcblxuY2xhc3MgVmlkZW8gZXh0ZW5kcyBCZXR0ZXJIVE1MRWxlbWVudCB7XG4gICAgXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKHsgdGFnIDogJ3ZpZGVvJyB9KVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbml0VmlkZW8obXA0cGF0aDogc3RyaW5nLCBvbnNldHNQYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3Qgc3JjID0gZWxlbSh7IHRhZyA6ICdzb3VyY2UnIH0pLmF0dHIoeyBzcmMgOiBtcDRwYXRoLCB0eXBlIDogJ3ZpZGVvL21wNCcgfSk7XG4gICAgICAgIHRoaXMuYXBwZW5kKHNyYyk7XG4gICAgICAgIC8qbGV0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMob25zZXRzUGF0aCk7XG4gICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgIGNvbnNvbGUubG9nKCfwn5GTIFZpZGVvLmRhdGEgZnJvbSBvbnNldHMuanNvbicsIHsgZGF0YSB9KTsqL1xuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbnRybygpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgVmlkZW8uaW50cm8oKWApO1xuICAgICAgICBjb25zdCB2aWRlbyA9IHRoaXMuZSBhcyBIVE1MVmlkZW9FbGVtZW50O1xuICAgICAgICB2aWRlby5sb2FkKCk7XG4gICAgICAgIGNvbnN0IGxvYWRlZGRhdGEgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHZpZGVvLm9ubG9hZGVkZGF0YSA9IHJlc29sdmUpO1xuICAgICAgICBjb25zdCBjYW5wbGF5ID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB2aWRlby5vbmNhbnBsYXkgPSByZXNvbHZlKTtcbiAgICAgICAgY29uc3QgY2FucGxheXRocm91Z2ggPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHZpZGVvLm9uY2FucGxheXRocm91Z2ggPSByZXNvbHZlKTtcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IGxvYWRlZGRhdGE7XG4gICAgICAgIGF3YWl0IGNhbnBsYXk7XG4gICAgICAgIGF3YWl0IGNhbnBsYXl0aHJvdWdoO1xuICAgICAgICBjb25zb2xlLmxvZygnRG9uZSBhd2FpdGluZyBsb2FkZWRkYXRhLCBjYW5wbGF5LCBjYW5wbGF5dGhyb3VnaCcpO1xuICAgICAgICB2aWRlby5wbGF5KCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdQbGF5aW5nJyk7XG4gICAgICAgIGNvbnN0IGVuZGVkID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB2aWRlby5vbmVuZGVkID0gcmVzb2x2ZSk7XG4gICAgICAgIGF3YWl0IGVuZGVkO1xuICAgICAgICBjb25zb2xlLmxvZygndmlkZW8gZW5kZWQhJyk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWaWRlbztcbiJdfQ==