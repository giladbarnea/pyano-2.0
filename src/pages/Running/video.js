"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const fs = require("fs");
class Video extends bhe_1.BetterHTMLElement {
    constructor() {
        super({ tag: 'video' });
    }
    async initVideo(mp4path, onsetsPath) {
        console.group(`Video.initVideo()`);
        const src = bhe_1.elem({ tag: 'source' }).attr({ src: mp4path, type: 'video/mp4' });
        this.append(src);
        let data = JSON.parse(fs.readFileSync(onsetsPath));
        console.log('ðŸ‘“onsets.json', data);
        this.firstOnset = parseFloat(data.onsets[data.first_onset_index]);
        this.lastOnset = parseFloat(data.onsets.last());
        const video = this.e;
        video.load();
        const loadeddata = new Promise(resolve => video.onloadeddata = resolve);
        const canplay = new Promise(resolve => video.oncanplay = resolve);
        const canplaythrough = new Promise(resolve => video.oncanplaythrough = resolve);
        await loadeddata;
        await canplay;
        await canplaythrough;
        console.log('Done awaiting loadeddata, canplay, canplaythrough');
        video.currentTime = this.firstOnset - 0.1;
        console.groupEnd();
    }
    async intro() {
        console.group(`Video.intro()`);
        const video = this.e;
        video.play();
        console.log(`Playing, currentTime: ${video.currentTime}`);
        const ended = new Promise(resolve => video.onended = resolve);
        await ended;
        console.log('video ended!');
        console.groupEnd();
        return;
    }
}
exports.default = Video;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2aWRlby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFvRDtBQUNwRCx5QkFBeUI7QUFFekIsTUFBTSxLQUFNLFNBQVEsdUJBQWlCO0lBTWpDO1FBQ0ksS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDNUIsQ0FBQztJQUVELEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBZSxFQUFFLFVBQWtCO1FBQy9DLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNuQyxNQUFNLEdBQUcsR0FBRyxVQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUcsT0FBTyxFQUFFLElBQUksRUFBRyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ2pGLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNoRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNiLE1BQU0sVUFBVSxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsQ0FBQztRQUN4RSxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLENBQUM7UUFDbEUsTUFBTSxjQUFjLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLENBQUM7UUFFaEYsTUFBTSxVQUFVLENBQUM7UUFDakIsTUFBTSxPQUFPLENBQUM7UUFDZCxNQUFNLGNBQWMsQ0FBQztRQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7UUFDakUsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztRQUMxQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBU3JCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzFELE1BQU0sS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQztRQUM5RCxNQUFNLEtBQUssQ0FBQztRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDNUIsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25CLE9BQU07SUFDVixDQUFDO0NBQ0o7QUFFRCxrQkFBZSxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZXR0ZXJIVE1MRWxlbWVudCwgZWxlbSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuXG5jbGFzcyBWaWRlbyBleHRlbmRzIEJldHRlckhUTUxFbGVtZW50IHtcbiAgICBwcml2YXRlIGZpcnN0T25zZXQ6IG51bWJlcjtcbiAgICBwcml2YXRlIGxhc3RPbnNldDogbnVtYmVyO1xuICAgIFxuICAgIGU6IEhUTUxWaWRlb0VsZW1lbnQ7XG4gICAgXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKHsgdGFnIDogJ3ZpZGVvJyB9KVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbml0VmlkZW8obXA0cGF0aDogc3RyaW5nLCBvbnNldHNQYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgVmlkZW8uaW5pdFZpZGVvKClgKTtcbiAgICAgICAgY29uc3Qgc3JjID0gZWxlbSh7IHRhZyA6ICdzb3VyY2UnIH0pLmF0dHIoeyBzcmMgOiBtcDRwYXRoLCB0eXBlIDogJ3ZpZGVvL21wNCcgfSk7XG4gICAgICAgIHRoaXMuYXBwZW5kKHNyYyk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhvbnNldHNQYXRoKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5GTb25zZXRzLmpzb24nLCBkYXRhKTtcbiAgICAgICAgdGhpcy5maXJzdE9uc2V0ID0gcGFyc2VGbG9hdChkYXRhLm9uc2V0c1tkYXRhLmZpcnN0X29uc2V0X2luZGV4XSk7XG4gICAgICAgIHRoaXMubGFzdE9uc2V0ID0gcGFyc2VGbG9hdChkYXRhLm9uc2V0cy5sYXN0KCkpO1xuICAgICAgICBjb25zdCB2aWRlbyA9IHRoaXMuZTtcbiAgICAgICAgdmlkZW8ubG9hZCgpO1xuICAgICAgICBjb25zdCBsb2FkZWRkYXRhID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB2aWRlby5vbmxvYWRlZGRhdGEgPSByZXNvbHZlKTtcbiAgICAgICAgY29uc3QgY2FucGxheSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gdmlkZW8ub25jYW5wbGF5ID0gcmVzb2x2ZSk7XG4gICAgICAgIGNvbnN0IGNhbnBsYXl0aHJvdWdoID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB2aWRlby5vbmNhbnBsYXl0aHJvdWdoID0gcmVzb2x2ZSk7XG4gICAgICAgIFxuICAgICAgICBhd2FpdCBsb2FkZWRkYXRhO1xuICAgICAgICBhd2FpdCBjYW5wbGF5O1xuICAgICAgICBhd2FpdCBjYW5wbGF5dGhyb3VnaDtcbiAgICAgICAgY29uc29sZS5sb2coJ0RvbmUgYXdhaXRpbmcgbG9hZGVkZGF0YSwgY2FucGxheSwgY2FucGxheXRocm91Z2gnKTtcbiAgICAgICAgdmlkZW8uY3VycmVudFRpbWUgPSB0aGlzLmZpcnN0T25zZXQgLSAwLjE7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgaW50cm8oKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYFZpZGVvLmludHJvKClgKTtcbiAgICAgICAgY29uc3QgdmlkZW8gPSB0aGlzLmU7XG4gICAgICAgIC8qY29uc3QgbG9hZGVkZGF0YSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gdmlkZW8ub25sb2FkZWRkYXRhID0gcmVzb2x2ZSk7XG4gICAgICAgICBjb25zdCBjYW5wbGF5ID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB2aWRlby5vbmNhbnBsYXkgPSByZXNvbHZlKTtcbiAgICAgICAgIGNvbnN0IGNhbnBsYXl0aHJvdWdoID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB2aWRlby5vbmNhbnBsYXl0aHJvdWdoID0gcmVzb2x2ZSk7XG4gICAgIFxuICAgICAgICAgYXdhaXQgbG9hZGVkZGF0YTtcbiAgICAgICAgIGF3YWl0IGNhbnBsYXk7XG4gICAgICAgICBhd2FpdCBjYW5wbGF5dGhyb3VnaDtcbiAgICAgICAgIGNvbnNvbGUubG9nKCdEb25lIGF3YWl0aW5nIGxvYWRlZGRhdGEsIGNhbnBsYXksIGNhbnBsYXl0aHJvdWdoJyk7Ki9cbiAgICAgICAgdmlkZW8ucGxheSgpO1xuICAgICAgICBjb25zb2xlLmxvZyhgUGxheWluZywgY3VycmVudFRpbWU6ICR7dmlkZW8uY3VycmVudFRpbWV9YCk7XG4gICAgICAgIGNvbnN0IGVuZGVkID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB2aWRlby5vbmVuZGVkID0gcmVzb2x2ZSk7XG4gICAgICAgIGF3YWl0IGVuZGVkO1xuICAgICAgICBjb25zb2xlLmxvZygndmlkZW8gZW5kZWQhJyk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWaWRlbztcbiJdfQ==