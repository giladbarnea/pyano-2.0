"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const util_1 = require("../../util");
class Dialog extends bhe_1.VisualBHE {
    constructor(demoType) {
        super({ tag: 'div' });
        this.id('dialog');
        this.cacheAppend({
            big: bhe_1.div({ cls: 'big' }),
            medium: bhe_1.div({ cls: 'medium' }),
            small: bhe_1.div({ cls: 'small' })
        });
        this.demoType = demoType;
    }
    static humanize(num) {
        return (num + 1).human(true);
    }
    async intro() {
        const noun = this.demoType === "video" ? 'a video' : 'an animation';
        this.big.text('A Tutorial');
        this.medium.text(`Here’s ${noun} that shows everything you’ll be learning today`);
        this.small.text(`(Click anywhere to start playing)`);
        return await this.display();
    }
    async levelIntro(levelCollection) {
        var _a;
        const current = levelCollection.current;
        const bigText = `${Dialog.humanize(current.index)} level, ${Dialog.humanize(current.internalTrialIndex)} trial`.title();
        this.big.text(bigText);
        this.medium.html(`You’ll now play <b>${current.notes}</b> notes.`);
        let noun;
        if (this.demoType === "animation") {
            noun = "an animation";
        }
        else {
            if (((_a = levelCollection.previous) === null || _a === void 0 ? void 0 : _a.notes) === current.notes) {
                noun = "an animation";
            }
            else {
                noun = 'a video';
            }
        }
        this.small.html(`Here’s ${noun} showing only these <b>${current.notes}</b> notes at R rate.`);
        return await this.display();
    }
    async display() {
        this.big.addClass('active');
        this.medium.addClass('active');
        this.small.addClass('active');
        return await util_1.wait(this._opacTransDur, false);
    }
    async hide() {
        this.big.removeClass('active');
        this.medium.removeClass('active');
        this.small.removeClass('active');
        return await util_1.wait(this._opacTransDur, false);
    }
}
exports.default = Dialog;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlhbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQWdEO0FBRWhELHFDQUFrQztBQUdsQyxNQUFNLE1BQU8sU0FBUSxlQUFTO0lBTTFCLFlBQVksUUFBa0I7UUFDMUIsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVsQixJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ2IsR0FBRyxFQUFHLFNBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRyxLQUFLLEVBQUUsQ0FBQztZQUMxQixNQUFNLEVBQUcsU0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFHLFFBQVEsRUFBRSxDQUFDO1lBQ2hDLEtBQUssRUFBRyxTQUFHLENBQUMsRUFBRSxHQUFHLEVBQUcsT0FBTyxFQUFFLENBQUM7U0FDakMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVPLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBVztRQUMvQixPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNoQyxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDUCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7UUFDcEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLGlEQUFpRCxDQUFDLENBQUM7UUFDbEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUNyRCxPQUFPLE1BQU0sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLGVBQWdDOztRQUM3QyxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDO1FBQ3hDLE1BQU0sT0FBTyxHQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hILElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixPQUFPLENBQUMsS0FBSyxhQUFhLENBQUMsQ0FBQztRQUNuRSxJQUFJLElBQUksQ0FBQztRQUNULElBQUssSUFBSSxDQUFDLFFBQVEsS0FBSyxXQUFXLEVBQUc7WUFDakMsSUFBSSxHQUFHLGNBQWMsQ0FBQztTQUN6QjthQUFNO1lBQ0gsSUFBSyxPQUFBLGVBQWUsQ0FBQyxRQUFRLDBDQUFFLEtBQUssTUFBSyxPQUFPLENBQUMsS0FBSyxFQUFHO2dCQUNyRCxJQUFJLEdBQUcsY0FBYyxDQUFDO2FBQ3pCO2lCQUFNO2dCQUNILElBQUksR0FBRyxTQUFTLENBQUM7YUFDcEI7U0FDSjtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSwwQkFBMEIsT0FBTyxDQUFDLEtBQUssdUJBQXVCLENBQUMsQ0FBQztRQUM5RixPQUFPLE1BQU0sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTztRQUNULElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sTUFBTSxXQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUk7UUFDTixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqQyxPQUFPLE1BQU0sV0FBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztDQUNKO0FBRUQsa0JBQWUsTUFBTSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGl2LCBkaXYsIFZpc3VhbEJIRSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbmltcG9ydCB7IERlbW9UeXBlIH0gZnJvbSBcIi4uLy4uL015U3RvcmVcIjtcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgTGV2ZWwsIExldmVsQ29sbGVjdGlvbiB9IGZyb20gXCIuLi8uLi9MZXZlbFwiO1xuXG5jbGFzcyBEaWFsb2cgZXh0ZW5kcyBWaXN1YWxCSEUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYmlnOiBEaXY7XG4gICAgcHJpdmF0ZSByZWFkb25seSBtZWRpdW06IERpdjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNtYWxsOiBEaXY7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkZW1vVHlwZTogRGVtb1R5cGU7XG4gICAgXG4gICAgY29uc3RydWN0b3IoZGVtb1R5cGU6IERlbW9UeXBlKSB7XG4gICAgICAgIHN1cGVyKHsgdGFnIDogJ2RpdicgfSk7XG4gICAgICAgIHRoaXMuaWQoJ2RpYWxvZycpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jYWNoZUFwcGVuZCh7XG4gICAgICAgICAgICBiaWcgOiBkaXYoeyBjbHMgOiAnYmlnJyB9KSxcbiAgICAgICAgICAgIG1lZGl1bSA6IGRpdih7IGNscyA6ICdtZWRpdW0nIH0pLFxuICAgICAgICAgICAgc21hbGwgOiBkaXYoeyBjbHMgOiAnc21hbGwnIH0pXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbW9UeXBlID0gZGVtb1R5cGU7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgc3RhdGljIGh1bWFuaXplKG51bTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIChudW0gKyAxKS5odW1hbih0cnVlKVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbnRybygpIHtcbiAgICAgICAgY29uc3Qgbm91biA9IHRoaXMuZGVtb1R5cGUgPT09IFwidmlkZW9cIiA/ICdhIHZpZGVvJyA6ICdhbiBhbmltYXRpb24nO1xuICAgICAgICB0aGlzLmJpZy50ZXh0KCdBIFR1dG9yaWFsJyk7XG4gICAgICAgIHRoaXMubWVkaXVtLnRleHQoYEhlcmXigJlzICR7bm91bn0gdGhhdCBzaG93cyBldmVyeXRoaW5nIHlvdeKAmWxsIGJlIGxlYXJuaW5nIHRvZGF5YCk7XG4gICAgICAgIHRoaXMuc21hbGwudGV4dChgKENsaWNrIGFueXdoZXJlIHRvIHN0YXJ0IHBsYXlpbmcpYCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRpc3BsYXkoKTtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgbGV2ZWxJbnRybyhsZXZlbENvbGxlY3Rpb246IExldmVsQ29sbGVjdGlvbikge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gbGV2ZWxDb2xsZWN0aW9uLmN1cnJlbnQ7XG4gICAgICAgIGNvbnN0IGJpZ1RleHQgPSBgJHtEaWFsb2cuaHVtYW5pemUoY3VycmVudC5pbmRleCl9IGxldmVsLCAke0RpYWxvZy5odW1hbml6ZShjdXJyZW50LmludGVybmFsVHJpYWxJbmRleCl9IHRyaWFsYC50aXRsZSgpO1xuICAgICAgICB0aGlzLmJpZy50ZXh0KGJpZ1RleHQpO1xuICAgICAgICB0aGlzLm1lZGl1bS5odG1sKGBZb3XigJlsbCBub3cgcGxheSA8Yj4ke2N1cnJlbnQubm90ZXN9PC9iPiBub3Rlcy5gKTtcbiAgICAgICAgbGV0IG5vdW47XG4gICAgICAgIGlmICggdGhpcy5kZW1vVHlwZSA9PT0gXCJhbmltYXRpb25cIiApIHtcbiAgICAgICAgICAgIG5vdW4gPSBcImFuIGFuaW1hdGlvblwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCBsZXZlbENvbGxlY3Rpb24ucHJldmlvdXM/Lm5vdGVzID09PSBjdXJyZW50Lm5vdGVzICkge1xuICAgICAgICAgICAgICAgIG5vdW4gPSBcImFuIGFuaW1hdGlvblwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBub3VuID0gJ2EgdmlkZW8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc21hbGwuaHRtbChgSGVyZeKAmXMgJHtub3VufSBzaG93aW5nIG9ubHkgdGhlc2UgPGI+JHtjdXJyZW50Lm5vdGVzfTwvYj4gbm90ZXMgYXQgUiByYXRlLmApO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5kaXNwbGF5KCk7XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGRpc3BsYXkoKSB7XG4gICAgICAgIHRoaXMuYmlnLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgdGhpcy5tZWRpdW0uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLnNtYWxsLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHdhaXQodGhpcy5fb3BhY1RyYW5zRHVyLCBmYWxzZSk7XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuYmlnLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgdGhpcy5tZWRpdW0ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLnNtYWxsLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHdhaXQodGhpcy5fb3BhY1RyYW5zRHVyLCBmYWxzZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEaWFsb2dcbiJdfQ==