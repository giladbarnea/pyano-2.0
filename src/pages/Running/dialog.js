"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const util_1 = require("../../util");
class Dialog extends bhe_1.VisualBHE {
    constructor(demoType) {
        super({ tag: 'div' });
        this.id('dialog');
        this.cacheAppend({
            big: bhe_1.div({ cls: 'big' }),
            medium: bhe_1.div({ cls: 'medium' }),
            small: bhe_1.div({ cls: 'small' })
        });
        this.demoType = demoType;
    }
    static humanize(num) {
        return (num + 1).human(true);
    }
    async intro() {
        const noun = this.demoType === "video" ? 'a video' : 'an animation';
        this.big.text('A Tutorial');
        this.medium.text(`Here’s ${noun} that shows everything you’ll be learning today`);
        this.small.text(`(Click anywhere to start playing)`);
        return await this.display();
    }
    async levelIntro(levelCollection, playVideo) {
        const current = levelCollection.current;
        const bigText = `${Dialog.humanize(current.index)} level, ${Dialog.humanize(current.internalTrialIndex)} trial`.title();
        this.big.text(bigText);
        this.medium.html(`You’ll now play <b>${current.notes}</b> notes.`);
        let noun = playVideo ? 'a video' : 'an animation';
        this.small.html(`Here’s ${noun} showing only these <b>${current.notes}</b> notes at R rate.`);
        return await this.display();
    }
    async display() {
        this.big.addClass('active');
        this.medium.addClass('active');
        this.small.addClass('active');
        return await util_1.wait(this._opacTransDur, false);
    }
    async hide() {
        this.big.removeClass('active');
        this.medium.removeClass('active');
        this.small.removeClass('active');
        return await util_1.wait(this._opacTransDur, false);
    }
}
exports.default = Dialog;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlhbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQWdEO0FBRWhELHFDQUFrQztBQUdsQyxNQUFNLE1BQU8sU0FBUSxlQUFTO0lBTTFCLFlBQVksUUFBa0I7UUFDMUIsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVsQixJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ2IsR0FBRyxFQUFHLFNBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRyxLQUFLLEVBQUUsQ0FBQztZQUMxQixNQUFNLEVBQUcsU0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFHLFFBQVEsRUFBRSxDQUFDO1lBQ2hDLEtBQUssRUFBRyxTQUFHLENBQUMsRUFBRSxHQUFHLEVBQUcsT0FBTyxFQUFFLENBQUM7U0FDakMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVPLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBVztRQUMvQixPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNoQyxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDUCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7UUFDcEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLGlEQUFpRCxDQUFDLENBQUM7UUFDbEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUNyRCxPQUFPLE1BQU0sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLGVBQWdDLEVBQUUsU0FBa0I7UUFFakUsTUFBTSxPQUFPLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQztRQUN4QyxNQUFNLE9BQU8sR0FBRyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN4SCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsT0FBTyxDQUFDLEtBQUssYUFBYSxDQUFDLENBQUM7UUFDbkUsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQztRQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksMEJBQTBCLE9BQU8sQ0FBQyxLQUFLLHVCQUF1QixDQUFDLENBQUM7UUFDOUYsT0FBTyxNQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU87UUFDVCxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QixPQUFPLE1BQU0sV0FBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJO1FBQ04sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakMsT0FBTyxNQUFNLFdBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDSjtBQUVELGtCQUFlLE1BQU0sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpdiwgZGl2LCBWaXN1YWxCSEUgfSBmcm9tIFwiLi4vLi4vYmhlXCI7XG5pbXBvcnQgeyBEZW1vVHlwZSB9IGZyb20gXCIuLi8uLi9NeVN0b3JlXCI7XG5pbXBvcnQgeyB3YWl0IH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCB7IExldmVsLCBMZXZlbENvbGxlY3Rpb24gfSBmcm9tIFwiLi4vLi4vTGV2ZWxcIjtcblxuY2xhc3MgRGlhbG9nIGV4dGVuZHMgVmlzdWFsQkhFIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJpZzogRGl2O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbWVkaXVtOiBEaXY7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzbWFsbDogRGl2O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVtb1R5cGU6IERlbW9UeXBlO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKGRlbW9UeXBlOiBEZW1vVHlwZSkge1xuICAgICAgICBzdXBlcih7IHRhZyA6ICdkaXYnIH0pO1xuICAgICAgICB0aGlzLmlkKCdkaWFsb2cnKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2FjaGVBcHBlbmQoe1xuICAgICAgICAgICAgYmlnIDogZGl2KHsgY2xzIDogJ2JpZycgfSksXG4gICAgICAgICAgICBtZWRpdW0gOiBkaXYoeyBjbHMgOiAnbWVkaXVtJyB9KSxcbiAgICAgICAgICAgIHNtYWxsIDogZGl2KHsgY2xzIDogJ3NtYWxsJyB9KVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZW1vVHlwZSA9IGRlbW9UeXBlO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIHN0YXRpYyBodW1hbml6ZShudW06IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAobnVtICsgMSkuaHVtYW4odHJ1ZSlcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgaW50cm8oKSB7XG4gICAgICAgIGNvbnN0IG5vdW4gPSB0aGlzLmRlbW9UeXBlID09PSBcInZpZGVvXCIgPyAnYSB2aWRlbycgOiAnYW4gYW5pbWF0aW9uJztcbiAgICAgICAgdGhpcy5iaWcudGV4dCgnQSBUdXRvcmlhbCcpO1xuICAgICAgICB0aGlzLm1lZGl1bS50ZXh0KGBIZXJl4oCZcyAke25vdW59IHRoYXQgc2hvd3MgZXZlcnl0aGluZyB5b3XigJlsbCBiZSBsZWFybmluZyB0b2RheWApO1xuICAgICAgICB0aGlzLnNtYWxsLnRleHQoYChDbGljayBhbnl3aGVyZSB0byBzdGFydCBwbGF5aW5nKWApO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5kaXNwbGF5KCk7XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGxldmVsSW50cm8obGV2ZWxDb2xsZWN0aW9uOiBMZXZlbENvbGxlY3Rpb24sIHBsYXlWaWRlbzogYm9vbGVhbikge1xuICAgICAgICAvLyBUT0RPOiBwYXNzIG9ubHkgY3VycmVudFxuICAgICAgICBjb25zdCBjdXJyZW50ID0gbGV2ZWxDb2xsZWN0aW9uLmN1cnJlbnQ7XG4gICAgICAgIGNvbnN0IGJpZ1RleHQgPSBgJHtEaWFsb2cuaHVtYW5pemUoY3VycmVudC5pbmRleCl9IGxldmVsLCAke0RpYWxvZy5odW1hbml6ZShjdXJyZW50LmludGVybmFsVHJpYWxJbmRleCl9IHRyaWFsYC50aXRsZSgpO1xuICAgICAgICB0aGlzLmJpZy50ZXh0KGJpZ1RleHQpO1xuICAgICAgICB0aGlzLm1lZGl1bS5odG1sKGBZb3XigJlsbCBub3cgcGxheSA8Yj4ke2N1cnJlbnQubm90ZXN9PC9iPiBub3Rlcy5gKTtcbiAgICAgICAgbGV0IG5vdW4gPSBwbGF5VmlkZW8gPyAnYSB2aWRlbycgOiAnYW4gYW5pbWF0aW9uJztcbiAgICAgICAgdGhpcy5zbWFsbC5odG1sKGBIZXJl4oCZcyAke25vdW59IHNob3dpbmcgb25seSB0aGVzZSA8Yj4ke2N1cnJlbnQubm90ZXN9PC9iPiBub3RlcyBhdCBSIHJhdGUuYCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRpc3BsYXkoKTtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgZGlzcGxheSgpIHtcbiAgICAgICAgdGhpcy5iaWcuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLm1lZGl1bS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMuc21hbGwuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICByZXR1cm4gYXdhaXQgd2FpdCh0aGlzLl9vcGFjVHJhbnNEdXIsIGZhbHNlKTtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5iaWcucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLm1lZGl1bS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMuc21hbGwucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICByZXR1cm4gYXdhaXQgd2FpdCh0aGlzLl9vcGFjVHJhbnNEdXIsIGZhbHNlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERpYWxvZ1xuIl19