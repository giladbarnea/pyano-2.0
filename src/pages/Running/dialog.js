"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const util_1 = require("../../util");
class Dialog extends bhe_1.VisualBHE {
    constructor(demoType) {
        super({ tag: 'div' });
        this.id('dialog');
        this.cacheAppend({
            big: bhe_1.div({ cls: 'big' }),
            medium: bhe_1.div({ cls: 'medium' }),
            small: bhe_1.div({ cls: 'small' })
        });
        this.demoType = demoType;
    }
    static humanize(num) {
        return (num + 1).human(true);
    }
    async intro() {
        console.group(`Dialog.intro()`);
        const noun = this.demoType === "video" ? 'a video' : 'an animation';
        this.big.text('A Tutorial');
        this.medium.text(`Here’s ${noun} that shows everything you’ll be learning today`);
        this.small.text(`(Click anywhere to start playing)`);
        await this.display();
        console.groupEnd();
        return;
    }
    async levelIntro(level, demo) {
        console.group(`Dialog.levelIntro()`);
        const bigText = `${Dialog.humanize(level.index)} level, ${Dialog.humanize(level.internalTrialIndex)} trial`.title();
        this.big.text(bigText);
        this.medium.html(`After the demo, you’ll play <b>${level.notes}</b> notes.`);
        let noun = demo === "video" ? 'a video' : 'an animation';
        this.small.html(`Here’s ${noun} showing only these <b>${level.notes}</b> notes at R rate.`);
        await this.display();
        console.groupEnd();
        return;
    }
    async display() {
        this.big.addClass('active');
        this.medium.addClass('active');
        this.small.addClass('active');
        return await util_1.wait(this._opacTransDur, false);
    }
    async hide() {
        this.big.removeClass('active');
        this.medium.removeClass('active');
        this.small.removeClass('active');
        return await util_1.wait(this._opacTransDur, false);
    }
}
exports.default = Dialog;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlhbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQWdEO0FBRWhELHFDQUFrQztBQUdsQyxNQUFNLE1BQU8sU0FBUSxlQUFTO0lBTTFCLFlBQVksUUFBa0I7UUFDMUIsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVsQixJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ2IsR0FBRyxFQUFHLFNBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRyxLQUFLLEVBQUUsQ0FBQztZQUMxQixNQUFNLEVBQUcsU0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFHLFFBQVEsRUFBRSxDQUFDO1lBQ2hDLEtBQUssRUFBRyxTQUFHLENBQUMsRUFBRSxHQUFHLEVBQUcsT0FBTyxFQUFFLENBQUM7U0FDakMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVPLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBVztRQUMvQixPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNoQyxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDUCxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDaEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxpREFBaUQsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLENBQUM7UUFDckQsTUFBTSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDckIsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25CLE9BQU87SUFDWCxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFZLEVBQUUsSUFBYztRQUN6QyxPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFFckMsTUFBTSxPQUFPLEdBQUcsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDcEgsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0NBQWtDLEtBQUssQ0FBQyxLQUFLLGFBQWEsQ0FBQyxDQUFDO1FBQzdFLElBQUksSUFBSSxHQUFHLElBQUksS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDO1FBQ3pELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSwwQkFBMEIsS0FBSyxDQUFDLEtBQUssdUJBQXVCLENBQUMsQ0FBQztRQUM1RixNQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNyQixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkIsT0FBTztJQUNYLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTztRQUNULElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sTUFBTSxXQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUk7UUFDTixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqQyxPQUFPLE1BQU0sV0FBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztDQUNKO0FBRUQsa0JBQWUsTUFBTSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGl2LCBkaXYsIFZpc3VhbEJIRSB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbmltcG9ydCB7IERlbW9UeXBlIH0gZnJvbSBcIi4uLy4uL015U3RvcmVcIjtcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgTGV2ZWwsIExldmVsQ29sbGVjdGlvbiB9IGZyb20gXCIuLi8uLi9MZXZlbFwiO1xuXG5jbGFzcyBEaWFsb2cgZXh0ZW5kcyBWaXN1YWxCSEUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYmlnOiBEaXY7XG4gICAgcHJpdmF0ZSByZWFkb25seSBtZWRpdW06IERpdjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNtYWxsOiBEaXY7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkZW1vVHlwZTogRGVtb1R5cGU7XG4gICAgXG4gICAgY29uc3RydWN0b3IoZGVtb1R5cGU6IERlbW9UeXBlKSB7XG4gICAgICAgIHN1cGVyKHsgdGFnIDogJ2RpdicgfSk7XG4gICAgICAgIHRoaXMuaWQoJ2RpYWxvZycpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jYWNoZUFwcGVuZCh7XG4gICAgICAgICAgICBiaWcgOiBkaXYoeyBjbHMgOiAnYmlnJyB9KSxcbiAgICAgICAgICAgIG1lZGl1bSA6IGRpdih7IGNscyA6ICdtZWRpdW0nIH0pLFxuICAgICAgICAgICAgc21hbGwgOiBkaXYoeyBjbHMgOiAnc21hbGwnIH0pXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbW9UeXBlID0gZGVtb1R5cGU7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgc3RhdGljIGh1bWFuaXplKG51bTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIChudW0gKyAxKS5odW1hbih0cnVlKVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbnRybygpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgRGlhbG9nLmludHJvKClgKTtcbiAgICAgICAgY29uc3Qgbm91biA9IHRoaXMuZGVtb1R5cGUgPT09IFwidmlkZW9cIiA/ICdhIHZpZGVvJyA6ICdhbiBhbmltYXRpb24nO1xuICAgICAgICB0aGlzLmJpZy50ZXh0KCdBIFR1dG9yaWFsJyk7XG4gICAgICAgIHRoaXMubWVkaXVtLnRleHQoYEhlcmXigJlzICR7bm91bn0gdGhhdCBzaG93cyBldmVyeXRoaW5nIHlvdeKAmWxsIGJlIGxlYXJuaW5nIHRvZGF5YCk7XG4gICAgICAgIHRoaXMuc21hbGwudGV4dChgKENsaWNrIGFueXdoZXJlIHRvIHN0YXJ0IHBsYXlpbmcpYCk7XG4gICAgICAgIGF3YWl0IHRoaXMuZGlzcGxheSgpO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgbGV2ZWxJbnRybyhsZXZlbDogTGV2ZWwsIGRlbW86IERlbW9UeXBlKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYERpYWxvZy5sZXZlbEludHJvKClgKTtcbiAgICAgICAgLy8gY29uc3QgY3VycmVudCA9IGxldmVsQ29sbGVjdGlvbi5jdXJyZW50O1xuICAgICAgICBjb25zdCBiaWdUZXh0ID0gYCR7RGlhbG9nLmh1bWFuaXplKGxldmVsLmluZGV4KX0gbGV2ZWwsICR7RGlhbG9nLmh1bWFuaXplKGxldmVsLmludGVybmFsVHJpYWxJbmRleCl9IHRyaWFsYC50aXRsZSgpO1xuICAgICAgICB0aGlzLmJpZy50ZXh0KGJpZ1RleHQpO1xuICAgICAgICB0aGlzLm1lZGl1bS5odG1sKGBBZnRlciB0aGUgZGVtbywgeW914oCZbGwgcGxheSA8Yj4ke2xldmVsLm5vdGVzfTwvYj4gbm90ZXMuYCk7XG4gICAgICAgIGxldCBub3VuID0gZGVtbyA9PT0gXCJ2aWRlb1wiID8gJ2EgdmlkZW8nIDogJ2FuIGFuaW1hdGlvbic7XG4gICAgICAgIHRoaXMuc21hbGwuaHRtbChgSGVyZeKAmXMgJHtub3VufSBzaG93aW5nIG9ubHkgdGhlc2UgPGI+JHtsZXZlbC5ub3Rlc308L2I+IG5vdGVzIGF0IFIgcmF0ZS5gKTtcbiAgICAgICAgYXdhaXQgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyBkaXNwbGF5KCkge1xuICAgICAgICB0aGlzLmJpZy5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMubWVkaXVtLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgdGhpcy5zbWFsbC5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHJldHVybiBhd2FpdCB3YWl0KHRoaXMuX29wYWNUcmFuc0R1ciwgZmFsc2UpO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyBoaWRlKCkge1xuICAgICAgICB0aGlzLmJpZy5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMubWVkaXVtLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgdGhpcy5zbWFsbC5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHJldHVybiBhd2FpdCB3YWl0KHRoaXMuX29wYWNUcmFuc0R1ciwgZmFsc2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGlhbG9nXG4iXX0=