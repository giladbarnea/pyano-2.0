"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const util_1 = require("../../util");
const extra_js_1 = require("../../bhe/extra.js");
class Dialog extends extra_js_1.VisualBHE {
    constructor(demoType) {
        super({ tag: 'div' });
        this.id('dialog');
        this.cacheAppend({
            big: bhe_1.div({ cls: 'big' }),
            medium: bhe_1.div({ cls: 'medium' }),
            small: bhe_1.div({ cls: 'small' })
        });
        this.demoType = demoType;
    }
    static humanize(num) {
        return (num + 1).human(true);
    }
    async intro() {
        console.group(`Dialog.intro()`);
        const noun = this.demoType === "video" ? 'a video' : 'an animation';
        this.big.text('A Tutorial');
        this.medium.text(`Here’s ${noun} that shows everything you’ll be learning today`);
        this.small.text(`(Click anywhere to start playing)`);
        await this.display();
        console.groupEnd();
        return;
    }
    async levelIntro(level, demo, rate) {
        console.group(`Dialog.levelIntro(level, demo: "${demo}")`);
        const bigText = `${Dialog.humanize(level.index)} level, ${Dialog.humanize(level.internalTrialIndex)} trial`.title();
        this.big.text(bigText);
        this.medium.html(`After the demo, you’ll play <b>${level.notes}</b> notes.`);
        let noun = demo === "video" ? 'a video' : 'an animation';
        this.small.html(`Here’s ${noun} showing only these <b>${level.notes}</b> notes at ${rate * 100}% rate.`);
        await this.display();
        console.groupEnd();
        return;
    }
    async record(level) {
        console.group(`Dialog.record()`);
        this.big.html(`When you’re ready, please play <b>${level.notes}</b> notes`);
        if (level.rhythm) {
            if (level.tempo === 100) {
                this.medium.html(`Remember to keep rhythm and regular speed.`);
            }
            else {
                this.medium.html(`Remember to keep rhythm, but don’t play any slower than ${level.tempo}% rate.`);
            }
        }
        else {
            this.medium.html(`Remember: you can play as slow as you like. Just get the notes right.`);
        }
        this.small.html('');
        await this.display();
        console.groupEnd();
        return;
    }
    async hide() {
        this.big.removeClass('active');
        this.medium.removeClass('active');
        this.small.removeClass('active');
        return await util_1.wait(this._opacTransDur, false);
    }
    async display() {
        this.big.addClass('active');
        this.medium.addClass('active');
        this.small.addClass('active');
        return await util_1.wait(this._opacTransDur, false);
    }
}
exports.default = Dialog;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlhbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXFDO0FBRXJDLHFDQUFrQztBQUVsQyxpREFBK0M7QUFHL0MsTUFBTSxNQUFPLFNBQVEsb0JBQVM7SUFNMUIsWUFBWSxRQUFrQjtRQUMxQixLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWxCLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDYixHQUFHLEVBQUUsU0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQ3hCLE1BQU0sRUFBRSxTQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUM7WUFDOUIsS0FBSyxFQUFFLFNBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQztTQUMvQixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBRU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFXO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNoQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7UUFDcEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLGlEQUFpRCxDQUFDLENBQUM7UUFDbEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUNyRCxNQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNyQixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkIsT0FBTztJQUNYLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQVksRUFBRSxJQUFjLEVBQUUsSUFBWTtRQUN2RCxPQUFPLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxJQUFJLElBQUksQ0FBQyxDQUFDO1FBQzNELE1BQU0sT0FBTyxHQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3BILElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGtDQUFrQyxLQUFLLENBQUMsS0FBSyxhQUFhLENBQUMsQ0FBQztRQUM3RSxJQUFJLElBQUksR0FBRyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQztRQUN6RCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksMEJBQTBCLEtBQUssQ0FBQyxLQUFLLGlCQUFpQixJQUFJLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUN6RyxNQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNyQixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkIsT0FBTztJQUNYLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQVk7UUFDckIsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxLQUFLLENBQUMsS0FBSyxZQUFZLENBQUMsQ0FBQztRQUM1RSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDZCxJQUFJLEtBQUssQ0FBQyxLQUFLLEtBQUssR0FBRyxFQUFFO2dCQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO2FBQ2xFO2lCQUFNO2dCQUNILElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLDJEQUEyRCxLQUFLLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQzthQUNyRztTQUNKO2FBQU07WUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx1RUFBdUUsQ0FBQyxDQUFDO1NBQzdGO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEIsTUFBTSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDckIsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25CLE9BQU87SUFDWCxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUk7UUFDTixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqQyxPQUFPLE1BQU0sV0FBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUdPLEtBQUssQ0FBQyxPQUFPO1FBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sTUFBTSxXQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0o7QUFFRCxrQkFBZSxNQUFNLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXYsIGRpdiB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbmltcG9ydCB7IERlbW9UeXBlIH0gZnJvbSBcIi4uLy4uL015U3RvcmVcIjtcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgTGV2ZWwgfSBmcm9tIFwiLi4vLi4vTGV2ZWxcIjtcbmltcG9ydCB7IFZpc3VhbEJIRSB9IGZyb20gXCIuLi8uLi9iaGUvZXh0cmEuanNcIjtcblxuLy8gQHRzLWlnbm9yZVxuY2xhc3MgRGlhbG9nIGV4dGVuZHMgVmlzdWFsQkhFIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJpZzogRGl2O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbWVkaXVtOiBEaXY7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzbWFsbDogRGl2O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVtb1R5cGU6IERlbW9UeXBlO1xuXG4gICAgY29uc3RydWN0b3IoZGVtb1R5cGU6IERlbW9UeXBlKSB7XG4gICAgICAgIHN1cGVyKHsgdGFnOiAnZGl2JyB9KTtcbiAgICAgICAgdGhpcy5pZCgnZGlhbG9nJyk7XG5cbiAgICAgICAgdGhpcy5jYWNoZUFwcGVuZCh7XG4gICAgICAgICAgICBiaWc6IGRpdih7IGNsczogJ2JpZycgfSksXG4gICAgICAgICAgICBtZWRpdW06IGRpdih7IGNsczogJ21lZGl1bScgfSksXG4gICAgICAgICAgICBzbWFsbDogZGl2KHsgY2xzOiAnc21hbGwnIH0pXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbW9UeXBlID0gZGVtb1R5cGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgaHVtYW5pemUobnVtOiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gKG51bSArIDEpLmh1bWFuKHRydWUpXG4gICAgfVxuXG4gICAgYXN5bmMgaW50cm8oKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYERpYWxvZy5pbnRybygpYCk7XG4gICAgICAgIGNvbnN0IG5vdW4gPSB0aGlzLmRlbW9UeXBlID09PSBcInZpZGVvXCIgPyAnYSB2aWRlbycgOiAnYW4gYW5pbWF0aW9uJztcbiAgICAgICAgdGhpcy5iaWcudGV4dCgnQSBUdXRvcmlhbCcpO1xuICAgICAgICB0aGlzLm1lZGl1bS50ZXh0KGBIZXJl4oCZcyAke25vdW59IHRoYXQgc2hvd3MgZXZlcnl0aGluZyB5b3XigJlsbCBiZSBsZWFybmluZyB0b2RheWApO1xuICAgICAgICB0aGlzLnNtYWxsLnRleHQoYChDbGljayBhbnl3aGVyZSB0byBzdGFydCBwbGF5aW5nKWApO1xuICAgICAgICBhd2FpdCB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXN5bmMgbGV2ZWxJbnRybyhsZXZlbDogTGV2ZWwsIGRlbW86IERlbW9UeXBlLCByYXRlOiBudW1iZXIpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgRGlhbG9nLmxldmVsSW50cm8obGV2ZWwsIGRlbW86IFwiJHtkZW1vfVwiKWApO1xuICAgICAgICBjb25zdCBiaWdUZXh0ID0gYCR7RGlhbG9nLmh1bWFuaXplKGxldmVsLmluZGV4KX0gbGV2ZWwsICR7RGlhbG9nLmh1bWFuaXplKGxldmVsLmludGVybmFsVHJpYWxJbmRleCl9IHRyaWFsYC50aXRsZSgpO1xuICAgICAgICB0aGlzLmJpZy50ZXh0KGJpZ1RleHQpO1xuICAgICAgICB0aGlzLm1lZGl1bS5odG1sKGBBZnRlciB0aGUgZGVtbywgeW914oCZbGwgcGxheSA8Yj4ke2xldmVsLm5vdGVzfTwvYj4gbm90ZXMuYCk7XG4gICAgICAgIGxldCBub3VuID0gZGVtbyA9PT0gXCJ2aWRlb1wiID8gJ2EgdmlkZW8nIDogJ2FuIGFuaW1hdGlvbic7XG4gICAgICAgIHRoaXMuc21hbGwuaHRtbChgSGVyZeKAmXMgJHtub3VufSBzaG93aW5nIG9ubHkgdGhlc2UgPGI+JHtsZXZlbC5ub3Rlc308L2I+IG5vdGVzIGF0ICR7cmF0ZSAqIDEwMH0lIHJhdGUuYCk7XG4gICAgICAgIGF3YWl0IHRoaXMuZGlzcGxheSgpO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhc3luYyByZWNvcmQobGV2ZWw6IExldmVsKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYERpYWxvZy5yZWNvcmQoKWApO1xuICAgICAgICB0aGlzLmJpZy5odG1sKGBXaGVuIHlvdeKAmXJlIHJlYWR5LCBwbGVhc2UgcGxheSA8Yj4ke2xldmVsLm5vdGVzfTwvYj4gbm90ZXNgKTtcbiAgICAgICAgaWYgKGxldmVsLnJoeXRobSkge1xuICAgICAgICAgICAgaWYgKGxldmVsLnRlbXBvID09PSAxMDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lZGl1bS5odG1sKGBSZW1lbWJlciB0byBrZWVwIHJoeXRobSBhbmQgcmVndWxhciBzcGVlZC5gKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZWRpdW0uaHRtbChgUmVtZW1iZXIgdG8ga2VlcCByaHl0aG0sIGJ1dCBkb27igJl0IHBsYXkgYW55IHNsb3dlciB0aGFuICR7bGV2ZWwudGVtcG99JSByYXRlLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tZWRpdW0uaHRtbChgUmVtZW1iZXI6IHlvdSBjYW4gcGxheSBhcyBzbG93IGFzIHlvdSBsaWtlLiBKdXN0IGdldCB0aGUgbm90ZXMgcmlnaHQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zbWFsbC5odG1sKCcnKTtcbiAgICAgICAgYXdhaXQgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGFzeW5jIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuYmlnLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgdGhpcy5tZWRpdW0ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLnNtYWxsLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHdhaXQodGhpcy5fb3BhY1RyYW5zRHVyLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLyoqVXNlIHB1YmxpYyBmdW5jdGlvbnMqL1xuICAgIHByaXZhdGUgYXN5bmMgZGlzcGxheSgpIHtcbiAgICAgICAgdGhpcy5iaWcuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLm1lZGl1bS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMuc21hbGwuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICByZXR1cm4gYXdhaXQgd2FpdCh0aGlzLl9vcGFjVHJhbnNEdXIsIGZhbHNlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERpYWxvZ1xuIl19