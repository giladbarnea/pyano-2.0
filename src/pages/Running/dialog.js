"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const util_1 = require("../../util");
class Dialog extends bhe_1.VisualBHE {
    constructor(demoType) {
        super({ tag: 'div' });
        this.id('dialog');
        this.cacheAppend({
            big: bhe_1.div({ cls: 'big' }),
            medium: bhe_1.div({ cls: 'medium' }),
            small: bhe_1.div({ cls: 'small' })
        });
        this.demoType = demoType;
    }
    static humanize(num) {
        return (num + 1).human(true);
    }
    async intro() {
        console.group(`Dialog.intro()`);
        const noun = this.demoType === "video" ? 'a video' : 'an animation';
        this.big.text('A Tutorial');
        this.medium.text(`Here’s ${noun} that shows everything you’ll be learning today`);
        this.small.text(`(Click anywhere to start playing)`);
        await this.display();
        console.groupEnd();
        return;
    }
    async levelIntro(level, demo, rate) {
        console.group(`Dialog.levelIntro(level, demo: "${demo}")`);
        const bigText = `${Dialog.humanize(level.index)} level, ${Dialog.humanize(level.internalTrialIndex)} trial`.title();
        this.big.text(bigText);
        this.medium.html(`After the demo, you’ll play <b>${level.notes}</b> notes.`);
        let noun = demo === "video" ? 'a video' : 'an animation';
        this.small.html(`Here’s ${noun} showing only these <b>${level.notes}</b> notes at ${rate * 100}% rate.`);
        await this.display();
        console.groupEnd();
        return;
    }
    async record(level) {
        console.group(`Dialog.record()`);
        this.big.html(`When you’re ready, please play <b>${level.notes}</b> notes`);
        if (level.rhythm) {
            if (level.tempo === 100) {
                this.medium.html(`Remember to keep rhythm and regular speed.`);
            }
            else {
                this.medium.html(`Remember to keep rhythm, but don’t play any slower than ${level.tempo}% rate.`);
            }
        }
        else {
            this.medium.html(`Remember: just get the notes right. Don’t think about speed or rhythm`);
        }
        await this.display();
        console.groupEnd();
        return;
    }
    async display() {
        this.big.addClass('active');
        this.medium.addClass('active');
        this.small.addClass('active');
        return await util_1.wait(this._opacTransDur, false);
    }
    async hide() {
        this.big.removeClass('active');
        this.medium.removeClass('active');
        this.small.removeClass('active');
        return await util_1.wait(this._opacTransDur, false);
    }
}
exports.default = Dialog;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlhbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQWdEO0FBRWhELHFDQUFrQztBQUlsQyxNQUFNLE1BQU8sU0FBUSxlQUFTO0lBTTFCLFlBQVksUUFBa0I7UUFDMUIsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVsQixJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ2IsR0FBRyxFQUFHLFNBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRyxLQUFLLEVBQUUsQ0FBQztZQUMxQixNQUFNLEVBQUcsU0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFHLFFBQVEsRUFBRSxDQUFDO1lBQ2hDLEtBQUssRUFBRyxTQUFHLENBQUMsRUFBRSxHQUFHLEVBQUcsT0FBTyxFQUFFLENBQUM7U0FDakMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVPLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBVztRQUMvQixPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNoQyxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDUCxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDaEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxpREFBaUQsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FB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InNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpdiwgZGl2LCBWaXN1YWxCSEUgfSBmcm9tIFwiLi4vLi4vYmhlXCI7XG5pbXBvcnQgeyBEZW1vVHlwZSB9IGZyb20gXCIuLi8uLi9NeVN0b3JlXCI7XG5pbXBvcnQgeyB3YWl0IH0gZnJvbSBcIi4uLy4uL3V0aWxcIjtcbmltcG9ydCB7IExldmVsLCBMZXZlbENvbGxlY3Rpb24gfSBmcm9tIFwiLi4vLi4vTGV2ZWxcIjtcblxuLy8gQHRzLWlnbm9yZVxuY2xhc3MgRGlhbG9nIGV4dGVuZHMgVmlzdWFsQkhFIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJpZzogRGl2O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbWVkaXVtOiBEaXY7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzbWFsbDogRGl2O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGVtb1R5cGU6IERlbW9UeXBlO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKGRlbW9UeXBlOiBEZW1vVHlwZSkge1xuICAgICAgICBzdXBlcih7IHRhZyA6ICdkaXYnIH0pO1xuICAgICAgICB0aGlzLmlkKCdkaWFsb2cnKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2FjaGVBcHBlbmQoe1xuICAgICAgICAgICAgYmlnIDogZGl2KHsgY2xzIDogJ2JpZycgfSksXG4gICAgICAgICAgICBtZWRpdW0gOiBkaXYoeyBjbHMgOiAnbWVkaXVtJyB9KSxcbiAgICAgICAgICAgIHNtYWxsIDogZGl2KHsgY2xzIDogJ3NtYWxsJyB9KVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZW1vVHlwZSA9IGRlbW9UeXBlO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIHN0YXRpYyBodW1hbml6ZShudW06IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAobnVtICsgMSkuaHVtYW4odHJ1ZSlcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgaW50cm8oKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYERpYWxvZy5pbnRybygpYCk7XG4gICAgICAgIGNvbnN0IG5vdW4gPSB0aGlzLmRlbW9UeXBlID09PSBcInZpZGVvXCIgPyAnYSB2aWRlbycgOiAnYW4gYW5pbWF0aW9uJztcbiAgICAgICAgdGhpcy5iaWcudGV4dCgnQSBUdXRvcmlhbCcpO1xuICAgICAgICB0aGlzLm1lZGl1bS50ZXh0KGBIZXJl4oCZcyAke25vdW59IHRoYXQgc2hvd3MgZXZlcnl0aGluZyB5b3XigJlsbCBiZSBsZWFybmluZyB0b2RheWApO1xuICAgICAgICB0aGlzLnNtYWxsLnRleHQoYChDbGljayBhbnl3aGVyZSB0byBzdGFydCBwbGF5aW5nKWApO1xuICAgICAgICBhd2FpdCB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGxldmVsSW50cm8obGV2ZWw6IExldmVsLCBkZW1vOiBEZW1vVHlwZSwgcmF0ZTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYERpYWxvZy5sZXZlbEludHJvKGxldmVsLCBkZW1vOiBcIiR7ZGVtb31cIilgKTtcbiAgICAgICAgY29uc3QgYmlnVGV4dCA9IGAke0RpYWxvZy5odW1hbml6ZShsZXZlbC5pbmRleCl9IGxldmVsLCAke0RpYWxvZy5odW1hbml6ZShsZXZlbC5pbnRlcm5hbFRyaWFsSW5kZXgpfSB0cmlhbGAudGl0bGUoKTtcbiAgICAgICAgdGhpcy5iaWcudGV4dChiaWdUZXh0KTtcbiAgICAgICAgdGhpcy5tZWRpdW0uaHRtbChgQWZ0ZXIgdGhlIGRlbW8sIHlvdeKAmWxsIHBsYXkgPGI+JHtsZXZlbC5ub3Rlc308L2I+IG5vdGVzLmApO1xuICAgICAgICBsZXQgbm91biA9IGRlbW8gPT09IFwidmlkZW9cIiA/ICdhIHZpZGVvJyA6ICdhbiBhbmltYXRpb24nO1xuICAgICAgICB0aGlzLnNtYWxsLmh0bWwoYEhlcmXigJlzICR7bm91bn0gc2hvd2luZyBvbmx5IHRoZXNlIDxiPiR7bGV2ZWwubm90ZXN9PC9iPiBub3RlcyBhdCAke3JhdGUgKiAxMDB9JSByYXRlLmApO1xuICAgICAgICBhd2FpdCB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIHJlY29yZChsZXZlbDogTGV2ZWwpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgRGlhbG9nLnJlY29yZCgpYCk7XG4gICAgICAgIHRoaXMuYmlnLmh0bWwoYFdoZW4geW914oCZcmUgcmVhZHksIHBsZWFzZSBwbGF5IDxiPiR7bGV2ZWwubm90ZXN9PC9iPiBub3Rlc2ApO1xuICAgICAgICBpZiAoIGxldmVsLnJoeXRobSApIHtcbiAgICAgICAgICAgIGlmICggbGV2ZWwudGVtcG8gPT09IDEwMCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lZGl1bS5odG1sKGBSZW1lbWJlciB0byBrZWVwIHJoeXRobSBhbmQgcmVndWxhciBzcGVlZC5gKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZWRpdW0uaHRtbChgUmVtZW1iZXIgdG8ga2VlcCByaHl0aG0sIGJ1dCBkb27igJl0IHBsYXkgYW55IHNsb3dlciB0aGFuICR7bGV2ZWwudGVtcG99JSByYXRlLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tZWRpdW0uaHRtbChgUmVtZW1iZXI6IGp1c3QgZ2V0IHRoZSBub3RlcyByaWdodC4gRG9u4oCZdCB0aGluayBhYm91dCBzcGVlZCBvciByaHl0aG1gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLnNtYWxsLmh0bWwoYEdvb2QgbHVjayFgKTtcbiAgICAgICAgYXdhaXQgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvKipVc2UgcHVibGljIGZ1bmN0aW9ucyovXG4gICAgcHJpdmF0ZSBhc3luYyBkaXNwbGF5KCkge1xuICAgICAgICB0aGlzLmJpZy5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMubWVkaXVtLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgdGhpcy5zbWFsbC5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHJldHVybiBhd2FpdCB3YWl0KHRoaXMuX29wYWNUcmFuc0R1ciwgZmFsc2UpO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyBoaWRlKCkge1xuICAgICAgICB0aGlzLmJpZy5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMubWVkaXVtLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgdGhpcy5zbWFsbC5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHJldHVybiBhd2FpdCB3YWl0KHRoaXMuX29wYWNUcmFuc0R1ciwgZmFsc2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGlhbG9nXG4iXX0=