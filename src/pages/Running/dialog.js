"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const betterhtmlelement_1 = require("betterhtmlelement");
const util_1 = require("../../util");
const extra_js_1 = require("../../bhe/extra.js");
class Dialog extends extra_js_1.VisualBHE {
    constructor(demoType) {
        super({ tag: 'div' });
        this.id('dialog');
        this.cacheAppend({
            big: betterhtmlelement_1.div({ cls: 'big' }),
            medium: betterhtmlelement_1.div({ cls: 'medium' }),
            small: betterhtmlelement_1.div({ cls: 'small' })
        });
        this.demoType = demoType;
    }
    static humanize(num) {
        return (num + 1).human(true);
    }
    async intro() {
        console.group(`Dialog.intro()`);
        const noun = this.demoType === "video" ? 'a video' : 'an animation';
        this.big.text('A Tutorial');
        this.medium.text(`Here’s ${noun} that shows everything you’ll be learning today`);
        this.small.text(`(Click anywhere to start playing)`);
        await this.display();
        console.groupEnd();
        return;
    }
    async levelIntro(level, demo, rate) {
        console.group(`Dialog.levelIntro(level, demo: "${demo}")`);
        const bigText = `${Dialog.humanize(level.index)} level, ${Dialog.humanize(level.internalTrialIndex)} trial`.title();
        this.big.text(bigText);
        this.medium.html(`After the demo, you’ll play <b>${level.notes}</b> notes.`);
        let noun = demo === "video" ? 'a video' : 'an animation';
        this.small.html(`Here’s ${noun} showing only these <b>${level.notes}</b> notes at ${rate * 100}% rate.`);
        await this.display();
        console.groupEnd();
        return;
    }
    async record(level) {
        console.group(`Dialog.record()`);
        this.big.html(`When you’re ready, please play <b>${level.notes}</b> notes`);
        if (level.rhythm) {
            if (level.tempo === 100) {
                this.medium.html(`Remember to keep rhythm and regular speed.`);
            }
            else {
                this.medium.html(`Remember to keep rhythm, but don’t play any slower than ${level.tempo}% rate.`);
            }
        }
        else {
            this.medium.html(`Remember: you can play as slow as you like. Just get the notes right.`);
        }
        this.small.html('');
        await this.display();
        console.groupEnd();
        return;
    }
    async display() {
        this.big.addClass('active');
        this.medium.addClass('active');
        this.small.addClass('active');
        return await util_1.wait(this._opacTransDur, false);
    }
    async hide() {
        this.big.removeClass('active');
        this.medium.removeClass('active');
        this.small.removeClass('active');
        return await util_1.wait(this._opacTransDur, false);
    }
}
exports.default = Dialog;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlhbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseURBQTZDO0FBRTdDLHFDQUFrQztBQUVsQyxpREFBK0M7QUFHL0MsTUFBTSxNQUFPLFNBQVEsb0JBQVM7SUFNMUIsWUFBWSxRQUFrQjtRQUMxQixLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWxCLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDYixHQUFHLEVBQUcsdUJBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRyxLQUFLLEVBQUUsQ0FBQztZQUMxQixNQUFNLEVBQUcsdUJBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRyxRQUFRLEVBQUUsQ0FBQztZQUNoQyxLQUFLLEVBQUcsdUJBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRyxPQUFPLEVBQUUsQ0FBQztTQUNqQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBRU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFXO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNoQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7UUFDcEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLGlEQUFpRCxDQUFDLENB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Q0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztDQUNKO0FBRUQsa0JBQWUsTUFBTSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGl2LCBkaXYgfSBmcm9tIFwiYmV0dGVyaHRtbGVsZW1lbnRcIjtcbmltcG9ydCB7IERlbW9UeXBlIH0gZnJvbSBcIi4uLy4uL015U3RvcmVcIjtcbmltcG9ydCB7IHdhaXQgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgTGV2ZWwsIExldmVsQ29sbGVjdGlvbiB9IGZyb20gXCIuLi8uLi9MZXZlbFwiO1xuaW1wb3J0IHsgVmlzdWFsQkhFIH0gZnJvbSBcIi4uLy4uL2JoZS9leHRyYS5qc1wiO1xuXG4vLyBAdHMtaWdub3JlXG5jbGFzcyBEaWFsb2cgZXh0ZW5kcyBWaXN1YWxCSEUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYmlnOiBEaXY7XG4gICAgcHJpdmF0ZSByZWFkb25seSBtZWRpdW06IERpdjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNtYWxsOiBEaXY7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkZW1vVHlwZTogRGVtb1R5cGU7XG4gICAgXG4gICAgY29uc3RydWN0b3IoZGVtb1R5cGU6IERlbW9UeXBlKSB7XG4gICAgICAgIHN1cGVyKHsgdGFnIDogJ2RpdicgfSk7XG4gICAgICAgIHRoaXMuaWQoJ2RpYWxvZycpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jYWNoZUFwcGVuZCh7XG4gICAgICAgICAgICBiaWcgOiBkaXYoeyBjbHMgOiAnYmlnJyB9KSxcbiAgICAgICAgICAgIG1lZGl1bSA6IGRpdih7IGNscyA6ICdtZWRpdW0nIH0pLFxuICAgICAgICAgICAgc21hbGwgOiBkaXYoeyBjbHMgOiAnc21hbGwnIH0pXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlbW9UeXBlID0gZGVtb1R5cGU7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgc3RhdGljIGh1bWFuaXplKG51bTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIChudW0gKyAxKS5odW1hbih0cnVlKVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBpbnRybygpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgRGlhbG9nLmludHJvKClgKTtcbiAgICAgICAgY29uc3Qgbm91biA9IHRoaXMuZGVtb1R5cGUgPT09IFwidmlkZW9cIiA/ICdhIHZpZGVvJyA6ICdhbiBhbmltYXRpb24nO1xuICAgICAgICB0aGlzLmJpZy50ZXh0KCdBIFR1dG9yaWFsJyk7XG4gICAgICAgIHRoaXMubWVkaXVtLnRleHQoYEhlcmXigJlzICR7bm91bn0gdGhhdCBzaG93cyBldmVyeXRoaW5nIHlvdeKAmWxsIGJlIGxlYXJuaW5nIHRvZGF5YCk7XG4gICAgICAgIHRoaXMuc21hbGwudGV4dChgKENsaWNrIGFueXdoZXJlIHRvIHN0YXJ0IHBsYXlpbmcpYCk7XG4gICAgICAgIGF3YWl0IHRoaXMuZGlzcGxheSgpO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgbGV2ZWxJbnRybyhsZXZlbDogTGV2ZWwsIGRlbW86IERlbW9UeXBlLCByYXRlOiBudW1iZXIpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgRGlhbG9nLmxldmVsSW50cm8obGV2ZWwsIGRlbW86IFwiJHtkZW1vfVwiKWApO1xuICAgICAgICBjb25zdCBiaWdUZXh0ID0gYCR7RGlhbG9nLmh1bWFuaXplKGxldmVsLmluZGV4KX0gbGV2ZWwsICR7RGlhbG9nLmh1bWFuaXplKGxldmVsLmludGVybmFsVHJpYWxJbmRleCl9IHRyaWFsYC50aXRsZSgpO1xuICAgICAgICB0aGlzLmJpZy50ZXh0KGJpZ1RleHQpO1xuICAgICAgICB0aGlzLm1lZGl1bS5odG1sKGBBZnRlciB0aGUgZGVtbywgeW914oCZbGwgcGxheSA8Yj4ke2xldmVsLm5vdGVzfTwvYj4gbm90ZXMuYCk7XG4gICAgICAgIGxldCBub3VuID0gZGVtbyA9PT0gXCJ2aWRlb1wiID8gJ2EgdmlkZW8nIDogJ2FuIGFuaW1hdGlvbic7XG4gICAgICAgIHRoaXMuc21hbGwuaHRtbChgSGVyZeKAmXMgJHtub3VufSBzaG93aW5nIG9ubHkgdGhlc2UgPGI+JHtsZXZlbC5ub3Rlc308L2I+IG5vdGVzIGF0ICR7cmF0ZSAqIDEwMH0lIHJhdGUuYCk7XG4gICAgICAgIGF3YWl0IHRoaXMuZGlzcGxheSgpO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgcmVjb3JkKGxldmVsOiBMZXZlbCkge1xuICAgICAgICBjb25zb2xlLmdyb3VwKGBEaWFsb2cucmVjb3JkKClgKTtcbiAgICAgICAgdGhpcy5iaWcuaHRtbChgV2hlbiB5b3XigJlyZSByZWFkeSwgcGxlYXNlIHBsYXkgPGI+JHtsZXZlbC5ub3Rlc308L2I+IG5vdGVzYCk7XG4gICAgICAgIGlmICggbGV2ZWwucmh5dGhtICkge1xuICAgICAgICAgICAgaWYgKCBsZXZlbC50ZW1wbyA9PT0gMTAwICkge1xuICAgICAgICAgICAgICAgIHRoaXMubWVkaXVtLmh0bWwoYFJlbWVtYmVyIHRvIGtlZXAgcmh5dGhtIGFuZCByZWd1bGFyIHNwZWVkLmApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lZGl1bS5odG1sKGBSZW1lbWJlciB0byBrZWVwIHJoeXRobSwgYnV0IGRvbuKAmXQgcGxheSBhbnkgc2xvd2VyIHRoYW4gJHtsZXZlbC50ZW1wb30lIHJhdGUuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1lZGl1bS5odG1sKGBSZW1lbWJlcjogeW91IGNhbiBwbGF5IGFzIHNsb3cgYXMgeW91IGxpa2UuIEp1c3QgZ2V0IHRoZSBub3RlcyByaWdodC5gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNtYWxsLmh0bWwoJycpO1xuICAgICAgICBhd2FpdCB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8qKlVzZSBwdWJsaWMgZnVuY3Rpb25zKi9cbiAgICBwcml2YXRlIGFzeW5jIGRpc3BsYXkoKSB7XG4gICAgICAgIHRoaXMuYmlnLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgdGhpcy5tZWRpdW0uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLnNtYWxsLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHdhaXQodGhpcy5fb3BhY1RyYW5zRHVyLCBmYWxzZSk7XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGhpZGUoKSB7XG4gICAgICAgIHRoaXMuYmlnLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgdGhpcy5tZWRpdW0ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICB0aGlzLnNtYWxsLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHdhaXQodGhpcy5fb3BhY1RyYW5zRHVyLCBmYWxzZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEaWFsb2dcbiJdfQ==