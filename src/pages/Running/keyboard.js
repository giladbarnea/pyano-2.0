"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const util = require("../../util");
const Glob_1 = require("../../Glob");
const Piano_1 = require("../../Piano");
const midi_1 = require("@tonejs/midi");
const Tone = require("tone");
class Keyboard extends bhe_1.BetterHTMLElement {
    constructor() {
        console.group('Keyboard ctor');
        const keys = {
            A0: {
                '[data-note="A0"]': {
                    'A#0': '[data-note="A#0"]'
                }
            },
            B0: '[data-note="B0"]',
        };
        const indexToLetter = {
            1: "C",
            2: "D",
            3: "E",
            4: "F",
            5: "G",
            6: "A",
            7: "B"
        };
        const noblacks = [3, 7];
        for (let register of util.range(1, 7)) {
            for (let keyIndex of util.range(1, 7)) {
                let letter = indexToLetter[keyIndex];
                let name = `${letter}${register}`;
                let value;
                if (noblacks.includes(keyIndex)) {
                    value = `[data-note="${name}"]`;
                }
                else {
                    let query = `[data-note="${name}"]`;
                    let subname = `${letter}#${register}`;
                    let subquery = `[data-note="${subname}"]`;
                    let subvalue = {};
                    subvalue[subname] = subquery;
                    value = {};
                    value[query] = subvalue;
                }
                keys[name] = value;
            }
        }
        console.log({ keys });
        super({
            id: 'keyboard', children: keys
        });
        console.groupEnd();
    }
    async initPiano() {
        console.group(`initPiano()`);
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const pianoOptions = {
            samples: SALAMANDER_PATH_ABS,
            release: true,
            pedal: false,
            velocities: Glob_1.default.BigConfig.velocities,
        };
        if (Glob_1.default.BigConfig.dev.mute_animation()) {
            pianoOptions.volume = { strings: -Infinity, harmonics: -Infinity, keybed: -Infinity, pedal: -Infinity };
        }
        const piano = new Piano_1.Piano(pianoOptions).toDestination();
        await piano.load();
        console.log('piano loaded');
        const midi = await midi_1.Midi.fromUrl(subconfig.truth.midi.absPath);
        console.log('midi loaded');
        function noteOffCallback(time, event) {
            Tone.Draw.schedule(function () {
                console.log(event.name);
                if (event.name.includes('#')) {
                    let nohash = event.name.replace('#', '');
                    keyboard[nohash][event.name].removeClass('on');
                }
                else {
                    keyboard[event.name].removeClass('on');
                }
            }, time);
            piano.keyUp(event.name, time);
        }
        function noteOnCallback(time, event) {
            Tone.Draw.schedule(function () {
                console.log(event.name);
                if (event.name.includes('#')) {
                    let nohash = event.name.replace('#', '');
                    keyboard[nohash][event.name].addClass('on');
                }
                else {
                    keyboard[event.name].addClass('on');
                }
            }, time);
            piano.keyDown(event.name, time, event.velocity);
        }
        let noteOffObjs = [];
        let noteOnObjs = [];
        let notes;
        const maxAnimationNotes = Glob_1.default.BigConfig.dev.max_animation_notes();
        if (maxAnimationNotes) {
            notes = midi.tracks[0].notes.slice(0, maxAnimationNotes);
        }
        else {
            notes = midi.tracks[0].notes;
        }
        for (let note of notes) {
            let { name, velocity, duration, time: timeOn } = note;
            let timeOff = timeOn + duration;
            noteOffObjs.push({ name, time: timeOff });
            noteOnObjs.push({ name, time: timeOn, duration, velocity });
        }
        const now = Tone.Transport.now();
        const noteOffEvents = new Tone.Part(noteOffCallback, noteOffObjs).start(now);
        const noteOnEvents = new Tone.Part(noteOnCallback, noteOnObjs).start(now);
        Tone.Transport.start(now);
        remote.globalShortcut.register("CommandOrControl+M", () => Tone.Transport.toggle());
        console.log({ subconfig, midi, piano, "Tone.Context.getDefaults()": Tone.Context.getDefaults(), });
        console.groupEnd();
    }
}
const keyboard = new Keyboard();
exports.default = keyboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJrZXlib2FyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUE4QztBQUM5QyxtQ0FBa0M7QUFDbEMscUNBQThCO0FBQzlCLHVDQUFrRDtBQUNsRCx1Q0FBb0M7QUFDcEMsNkJBQTZCO0FBRTdCLE1BQU0sUUFBUyxTQUFRLHVCQUFpQjtJQUNwQztRQUNJLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFL0IsTUFBTSxJQUFJLEdBQUc7WUFDVCxFQUFFLEVBQUc7Z0JBQ0Qsa0JBQWtCLEVBQUc7b0JBQ2pCLEtBQUssRUFBRyxtQkFBbUI7aUJBQzlCO2FBQ0o7WUFDRCxFQUFFLEVBQUcsa0JBQWtCO1NBQzFCLENBQUM7UUFDRixNQUFNLGFBQWEsR0FBRztZQUNsQixDQUFDLEVBQUcsR0FBRztZQUNQLENBQUMsRUFBRyxHQUFHO1lBQ1AsQ0FBQyxFQUFHLEdBQUc7WUFDUCxDQUFDLEVBQUcsR0FBRztZQUNQLENBQUMsRUFBRyxHQUFHO1lBQ1AsQ0FBQyxFQUFHLEdBQUc7WUFDUCxDQUFDLEVBQUcsR0FBRztTQUNWLENBQUM7UUFDRixNQUFNLFFBQVEsR0FBRyxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQztRQUMxQixLQUFNLElBQUksUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFHO1lBQ3JDLEtBQU0sSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUc7Z0JBQ3JDLElBQUksTUFBTSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDckMsSUFBSSxJQUFJLEdBQUcsR0FBRyxNQUFNLEdBQUcsUUFBUSxFQUFFLENBQUM7Z0JBQ2xDLElBQUksS0FBSyxDQUFDO2dCQUNWLElBQUssUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMs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QUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0FBQ2hDLGtCQUFlLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJldHRlckhUTUxFbGVtZW50IH0gZnJvbSBcIi4uLy4uL2JoZVwiO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwiLi4vLi4vdXRpbFwiXG5pbXBvcnQgR2xvYiBmcm9tIFwiLi4vLi4vR2xvYlwiO1xuaW1wb3J0IHsgUGlhbm8sIFBpYW5vT3B0aW9ucyB9IGZyb20gXCIuLi8uLi9QaWFub1wiO1xuaW1wb3J0IHsgTWlkaSB9IGZyb20gXCJAdG9uZWpzL21pZGlcIjtcbmltcG9ydCAqIGFzIFRvbmUgZnJvbSBcInRvbmVcIjtcblxuY2xhc3MgS2V5Ym9hcmQgZXh0ZW5kcyBCZXR0ZXJIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoJ0tleWJvYXJkIGN0b3InKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGtleXMgPSB7XG4gICAgICAgICAgICBBMCA6IHtcbiAgICAgICAgICAgICAgICAnW2RhdGEtbm90ZT1cIkEwXCJdJyA6IHtcbiAgICAgICAgICAgICAgICAgICAgJ0EjMCcgOiAnW2RhdGEtbm90ZT1cIkEjMFwiXSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQjAgOiAnW2RhdGEtbm90ZT1cIkIwXCJdJyxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaW5kZXhUb0xldHRlciA9IHtcbiAgICAgICAgICAgIDEgOiBcIkNcIixcbiAgICAgICAgICAgIDIgOiBcIkRcIixcbiAgICAgICAgICAgIDMgOiBcIkVcIixcbiAgICAgICAgICAgIDQgOiBcIkZcIixcbiAgICAgICAgICAgIDUgOiBcIkdcIixcbiAgICAgICAgICAgIDYgOiBcIkFcIixcbiAgICAgICAgICAgIDcgOiBcIkJcIlxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBub2JsYWNrcyA9IFsgMywgNyBdOyAvLyBFLCBCXG4gICAgICAgIGZvciAoIGxldCByZWdpc3RlciBvZiB1dGlsLnJhbmdlKDEsIDcpICkge1xuICAgICAgICAgICAgZm9yICggbGV0IGtleUluZGV4IG9mIHV0aWwucmFuZ2UoMSwgNykgKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxldHRlciA9IGluZGV4VG9MZXR0ZXJba2V5SW5kZXhdO1xuICAgICAgICAgICAgICAgIGxldCBuYW1lID0gYCR7bGV0dGVyfSR7cmVnaXN0ZXJ9YDtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKCBub2JsYWNrcy5pbmNsdWRlcyhrZXlJbmRleCkgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYFtkYXRhLW5vdGU9XCIke25hbWV9XCJdYFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBxdWVyeSA9IGBbZGF0YS1ub3RlPVwiJHtuYW1lfVwiXWA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWJuYW1lID0gYCR7bGV0dGVyfSMke3JlZ2lzdGVyfWA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWJxdWVyeSA9IGBbZGF0YS1ub3RlPVwiJHtzdWJuYW1lfVwiXWA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWJ2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBzdWJ2YWx1ZVtzdWJuYW1lXSA9IHN1YnF1ZXJ5O1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZVtxdWVyeV0gPSBzdWJ2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAga2V5c1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKHsga2V5cyB9KTtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgaWQgOiAna2V5Ym9hcmQnLCBjaGlsZHJlbiA6IGtleXNcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIGFzeW5jIGluaXRQaWFubygpIHtcbiAgICAgICAgY29uc29sZS5ncm91cChgaW5pdFBpYW5vKClgKTtcbiAgICAgICAgY29uc3Qgc3ViY29uZmlnID0gR2xvYi5CaWdDb25maWcuZ2V0U3ViY29uZmlnKCk7XG4gICAgICAgIGNvbnN0IHBpYW5vT3B0aW9uczogUGFydGlhbDxQaWFub09wdGlvbnM+ID0ge1xuICAgICAgICAgICAgc2FtcGxlcyA6IFNBTEFNQU5ERVJfUEFUSF9BQlMsXG4gICAgICAgICAgICByZWxlYXNlIDogdHJ1ZSxcbiAgICAgICAgICAgIHBlZGFsIDogZmFsc2UsXG4gICAgICAgICAgICB2ZWxvY2l0aWVzIDogR2xvYi5CaWdDb25maWcudmVsb2NpdGllcyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCBHbG9iLkJpZ0NvbmZpZy5kZXYubXV0ZV9hbmltYXRpb24oKSApIHtcbiAgICAgICAgICAgIHBpYW5vT3B0aW9ucy52b2x1bWUgPSB7IHN0cmluZ3MgOiAtSW5maW5pdHksIGhhcm1vbmljcyA6IC1JbmZpbml0eSwga2V5YmVkIDogLUluZmluaXR5LCBwZWRhbCA6IC1JbmZpbml0eSB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGlhbm8gPSBuZXcgUGlhbm8ocGlhbm9PcHRpb25zKS50b0Rlc3RpbmF0aW9uKCk7XG4gICAgICAgIGF3YWl0IHBpYW5vLmxvYWQoKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3BpYW5vIGxvYWRlZCcpO1xuICAgICAgICBjb25zdCBtaWRpID0gYXdhaXQgTWlkaS5mcm9tVXJsKHN1YmNvbmZpZy50cnV0aC5taWRpLmFic1BhdGgpO1xuICAgICAgICBjb25zb2xlLmxvZygnbWlkaSBsb2FkZWQnKTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0eXBlIE5vdGVPZmZFdmVudCA9IHsgbmFtZTogc3RyaW5nIH07XG4gICAgICAgIHR5cGUgTm90ZU9uRXZlbnQgPSBOb3RlT2ZmRXZlbnQgJiB7IHZlbG9jaXR5OiBudW1iZXIgfTtcbiAgICAgICAgdHlwZSBOb3RlT2ZmID0gTm90ZU9mZkV2ZW50ICYgeyB0aW1lOiBUb25lLlVuaXQuVGltZSB9O1xuICAgICAgICB0eXBlIE5vdGVPbiA9IE5vdGVPbkV2ZW50ICYgeyB0aW1lOiBUb25lLlVuaXQuVGltZSwgZHVyYXRpb246IG51bWJlciB9O1xuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gbm90ZU9mZkNhbGxiYWNrKHRpbWU6IFRvbmUuVW5pdC5UaW1lLCBldmVudDogTm90ZU9mZkV2ZW50KSB7XG4gICAgICAgICAgICBUb25lLkRyYXcuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2ZW50Lm5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICggZXZlbnQubmFtZS5pbmNsdWRlcygnIycpICkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbm9oYXNoID0gZXZlbnQubmFtZS5yZXBsYWNlKCcjJywgJycpO1xuICAgICAgICAgICAgICAgICAgICBrZXlib2FyZFtub2hhc2hdW2V2ZW50Lm5hbWVdLnJlbW92ZUNsYXNzKCdvbicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGtleWJvYXJkW2V2ZW50Lm5hbWVdLnJlbW92ZUNsYXNzKCdvbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRpbWUpO1xuICAgICAgICAgICAgcGlhbm8ua2V5VXAoZXZlbnQubmFtZSwgdGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIG5vdGVPbkNhbGxiYWNrKHRpbWU6IFRvbmUuVW5pdC5UaW1lLCBldmVudDogTm90ZU9uRXZlbnQpIHtcbiAgICAgICAgICAgIFRvbmUuRHJhdy5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXZlbnQubmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKCBldmVudC5uYW1lLmluY2x1ZGVzKCcjJykgKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBub2hhc2ggPSBldmVudC5uYW1lLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGtleWJvYXJkW25vaGFzaF1bZXZlbnQubmFtZV0uYWRkQ2xhc3MoJ29uJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmRbZXZlbnQubmFtZV0uYWRkQ2xhc3MoJ29uJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGltZSk7XG4gICAgICAgICAgICBwaWFuby5rZXlEb3duKGV2ZW50Lm5hbWUsIHRpbWUsIGV2ZW50LnZlbG9jaXR5KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGxldCBub3RlT2ZmT2JqczogTm90ZU9mZltdID0gW107XG4gICAgICAgIGxldCBub3RlT25PYmpzOiBOb3RlT25bXSA9IFtdO1xuICAgICAgICBsZXQgbm90ZXM7XG4gICAgICAgIGNvbnN0IG1heEFuaW1hdGlvbk5vdGVzID0gR2xvYi5CaWdDb25maWcuZGV2Lm1heF9hbmltYXRpb25fbm90ZXMoKTtcbiAgICAgICAgaWYgKCBtYXhBbmltYXRpb25Ob3RlcyApIHtcbiAgICAgICAgICAgIG5vdGVzID0gbWlkaS50cmFja3NbMF0ubm90ZXMuc2xpY2UoMCwgbWF4QW5pbWF0aW9uTm90ZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm90ZXMgPSBtaWRpLnRyYWNrc1swXS5ub3RlcztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKCBsZXQgbm90ZSBvZiBub3RlcyApIHtcbiAgICAgICAgICAgIGxldCB7IG5hbWUsIHZlbG9jaXR5LCBkdXJhdGlvbiwgdGltZSA6IHRpbWVPbiB9ID0gbm90ZTtcbiAgICAgICAgICAgIGxldCB0aW1lT2ZmID0gdGltZU9uICsgZHVyYXRpb247XG4gICAgICAgICAgICBub3RlT2ZmT2Jqcy5wdXNoKHsgbmFtZSwgdGltZSA6IHRpbWVPZmYgfSk7XG4gICAgICAgICAgICBub3RlT25PYmpzLnB1c2goeyBuYW1lLCB0aW1lIDogdGltZU9uLCBkdXJhdGlvbiwgdmVsb2NpdHkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm93ID0gVG9uZS5UcmFuc3BvcnQubm93KCk7XG4gICAgICAgIGNvbnN0IG5vdGVPZmZFdmVudHMgPSBuZXcgVG9uZS5QYXJ0KG5vdGVPZmZDYWxsYmFjaywgbm90ZU9mZk9ianMpLnN0YXJ0KG5vdyk7XG4gICAgICAgIGNvbnN0IG5vdGVPbkV2ZW50cyA9IG5ldyBUb25lLlBhcnQobm90ZU9uQ2FsbGJhY2ssIG5vdGVPbk9ianMpLnN0YXJ0KG5vdyk7XG4gICAgICAgIFRvbmUuVHJhbnNwb3J0LnN0YXJ0KG5vdyk7XG4gICAgICAgIFxuICAgICAgICByZW1vdGUuZ2xvYmFsU2hvcnRjdXQucmVnaXN0ZXIoXCJDb21tYW5kT3JDb250cm9sK01cIiwgKCkgPT4gVG9uZS5UcmFuc3BvcnQudG9nZ2xlKCkpO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coeyBzdWJjb25maWcsIG1pZGksIHBpYW5vLCBcIlRvbmUuQ29udGV4dC5nZXREZWZhdWx0cygpXCIgOiBUb25lLkNvbnRleHQuZ2V0RGVmYXVsdHMoKSwgfSk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICB9XG59XG5cbmNvbnN0IGtleWJvYXJkID0gbmV3IEtleWJvYXJkKCk7XG5leHBvcnQgZGVmYXVsdCBrZXlib2FyZDtcbiJdfQ==