"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const util = require("../../util");
const Glob_1 = require("../../Glob");
const Piano_1 = require("../../Piano");
const midi_1 = require("@tonejs/midi");
const Tone = require("tone");
class Keyboard extends bhe_1.BetterHTMLElement {
    constructor() {
        console.group('Keyboard ctor');
        const keys = {
            A0: {
                '[data-note="A0"]': {
                    'A#0': '[data-note="A#0"]'
                }
            },
            B0: '[data-note="B0"]',
        };
        const indexToLetter = {
            1: "C",
            2: "D",
            3: "E",
            4: "F",
            5: "G",
            6: "A",
            7: "B"
        };
        const noblacks = [3, 7];
        for (let register of util.range(1, 7)) {
            for (let keyIndex of util.range(1, 7)) {
                let letter = indexToLetter[keyIndex];
                let name = `${letter}${register}`;
                let value;
                if (noblacks.includes(keyIndex)) {
                    value = `[data-note="${name}"]`;
                }
                else {
                    let query = `[data-note="${name}"]`;
                    let subname = `${letter}#${register}`;
                    let subquery = `[data-note="${subname}"]`;
                    let subvalue = {};
                    subvalue[subname] = subquery;
                    value = {};
                    value[query] = subvalue;
                }
                keys[name] = value;
            }
        }
        console.log({ keys });
        super({
            id: 'keyboard', children: keys
        });
        this.initPiano();
        console.groupEnd();
    }
    async intro() {
    }
    paintKey(event, on) {
        if (event.name.includes('#')) {
            let nohash = event.name.replace('#', '');
            this[nohash][event.name].toggleClass('on', on);
        }
        else {
            this[event.name].toggleClass('on', on);
        }
    }
    async initPiano() {
        console.group(`initPiano()`);
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const pianoOptions = {
            samples: SALAMANDER_PATH_ABS,
            release: true,
            pedal: false,
            velocities: Glob_1.default.BigConfig.velocities,
        };
        if (Glob_1.default.BigConfig.dev.mute_animation()) {
            pianoOptions.volume = { strings: -Infinity, harmonics: -Infinity, keybed: -Infinity, pedal: -Infinity };
        }
        const piano = new Piano_1.Piano(pianoOptions).toDestination();
        const promisePianoLoaded = piano.load();
        const promiseMidiLoaded = midi_1.Midi.fromUrl(subconfig.truth.midi.absPath);
        const [_, midi] = await Promise.all([promisePianoLoaded, promiseMidiLoaded]);
        console.log('piano loaded');
        console.log('midi loaded', midi);
        const noteOffCallback = (time, event) => {
            Tone.Draw.schedule(() => this.paintKey(event, false), time);
            piano.keyUp(event.name, time);
        };
        const noteOnCallback = (time, event) => {
            Tone.Draw.schedule(() => this.paintKey(event, true), time);
            piano.keyDown(event.name, time, event.velocity);
        };
        let noteOffObjs = [];
        let noteOnObjs = [];
        let notes;
        const maxAnimationNotes = Glob_1.default.BigConfig.dev.max_animation_notes();
        if (maxAnimationNotes) {
            notes = midi.tracks[0].notes.slice(0, maxAnimationNotes);
        }
        else {
            notes = midi.tracks[0].notes;
        }
        for (let note of notes) {
            let { name, velocity, duration, time: timeOn } = note;
            let timeOff = timeOn + duration;
            noteOffObjs.push({ name, time: timeOff });
            noteOnObjs.push({ name, time: timeOn, duration, velocity });
        }
        const noteOffEvents = new Tone.Part(noteOffCallback, noteOffObjs).start();
        const noteOnEvents = new Tone.Part(noteOnCallback, noteOnObjs).start();
        Tone.Transport.start();
        remote.globalShortcut.register("CommandOrControl+M", () => Tone.Transport.toggle());
        console.log({ subconfig, midi, piano, "Tone.Context.getDefaults()": Tone.Context.getDefaults(), });
        console.groupEnd();
    }
}
exports.default = Keyboard;
//# sourceMappingURL=data:application/json;base64,