"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const util = require("../../util");
class Keyboard extends bhe_1.BetterHTMLElement {
    constructor() {
        console.group('Keyboard ctor');
        const zerothKeys = {
            A0: {
                '[data-note="A0"]': {
                    'A#0': '[data-note="A#0"]'
                }
            },
            B0: '[data-note="B0"]',
        };
        const keys = {};
        const indexToLetter = {
            1: "C",
            2: "D",
            3: "E",
            4: "F",
            5: "G",
            6: "A",
            7: "B"
        };
        const noblacks = [3, 7];
        for (let register of util.range(1, 7)) {
            for (let keyIndex of util.range(1, 7)) {
                let letter = indexToLetter[keyIndex];
                let name = `${letter}${register}`;
                let value;
                if (noblacks.includes(keyIndex)) {
                    value = `[data-note="${name}"]`;
                }
                else {
                    let query = `[data-note="${name}"]`;
                    let subname = `${letter}#${register}`;
                    let subquery = `[data-note="${subname}"]`;
                    let subvalue = {};
                    subvalue[subname] = subquery;
                    value = {};
                    value[query] = subvalue;
                }
                keys[name] = value;
            }
        }
        console.log({ keys });
        super({
            id: 'keyboard', children: keys
        });
        console.groupEnd();
    }
}
const keyboard = new Keyboard();
exports.default = keyboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJrZXlib2FyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUE4QztBQUM5QyxtQ0FBa0M7QUFFbEMsTUFBTSxRQUFTLFNBQVEsdUJBQWlCO0lBQ3BDO1FBQ0ksT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUMvQixNQUFNLFVBQVUsR0FBRztZQUNmLEVBQUUsRUFBRztnQkFDRCxrQkFBa0IsRUFBRztvQkFDakIsS0FBSyxFQUFHLG1CQUFtQjtpQkFDOUI7YUFDSjtZQUNELEVBQUUsRUFBRyxrQkFBa0I7U0FDMUIsQ0FBQztRQUNGLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNoQixNQUFNLGFBQWEsR0FBRztZQUNsQixDQUFDLEVBQUcsR0FBRztZQUNQLENBQUMsRUFBRyxHQUFHO1lBQ1AsQ0FBQyxFQUFHLEdBQUc7WUFDUCxDQUFDLEVBQUcsR0FBRztZQUNQLENBQUMsRUFBRyxHQUFHO1lBQ1AsQ0FBQyxFQUFHLEdBQUc7WUFDUCxDQUFDLEVBQUcsR0FBRztTQUNWLENBQUM7UUFDRixNQUFNLFFBQVEsR0FBRyxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQztRQUMxQixLQUFNLElBQUksUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFHO1lBQ3JDLEtBQU0sSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUc7Z0JBQ3JDLElBQUksTUFBTSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDckMsSUFBSSxJQUFJLEdBQUcsR0FBRyxNQUFNLEdBQUcsUUFBUSxFQUFFLENBQUM7Z0JBQ2xDLElBQUksS0FBSyxDQUFDO2dCQUNWLElBQUssUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRztvQkFDL0IsS0FBSyxHQUFHLGVBQWUsSUFBSSxJQUFJLENBQUE7aUJBRWxDO3FCQUFNO29CQUNILElBQUksS0FBSyxHQUFHLGVBQWUsSUFBSSxJQUFJLENBQUM7b0JBQ3BDLElBQUksT0FBTyxHQUFHLEdBQUcsTUFBTSxJQUFJLFFBQVEsRUFBRSxDQUFDO29CQUN0QyxJQUFJLFFBQVEsR0FBRyxlQUFlLE9BQU8sSUFBSSxDQUFDO29CQUMxQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7b0JBQ2xCLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxRQUFRLENBQUM7b0JBQzdCLEtBQUssR0FBRyxFQUFFLENBQUM7b0JBQ1gsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQztpQkFDM0I7Z0JBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUN0QjtTQUNKO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdEIsS0FBSyxDQUFDO1lBQ0YsRUFBRSxFQUFHLFVBQVUsRUFBRSxRQUFRLEVBQUcsSUFBSTtTQUNuQyxDQUFDLENBQUM7UUFrQ0gsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRXZCLENBQUM7Q0FDSjtBQUVELE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7QUFDaEMsa0JBQWUsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmV0dGVySFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vLi4vYmhlXCI7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gXCIuLi8uLi91dGlsXCJcblxuY2xhc3MgS2V5Ym9hcmQgZXh0ZW5kcyBCZXR0ZXJIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoJ0tleWJvYXJkIGN0b3InKTtcbiAgICAgICAgY29uc3QgemVyb3RoS2V5cyA9IHtcbiAgICAgICAgICAgIEEwIDoge1xuICAgICAgICAgICAgICAgICdbZGF0YS1ub3RlPVwiQTBcIl0nIDoge1xuICAgICAgICAgICAgICAgICAgICAnQSMwJyA6ICdbZGF0YS1ub3RlPVwiQSMwXCJdJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBCMCA6ICdbZGF0YS1ub3RlPVwiQjBcIl0nLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBrZXlzID0ge307XG4gICAgICAgIGNvbnN0IGluZGV4VG9MZXR0ZXIgPSB7XG4gICAgICAgICAgICAxIDogXCJDXCIsXG4gICAgICAgICAgICAyIDogXCJEXCIsXG4gICAgICAgICAgICAzIDogXCJFXCIsXG4gICAgICAgICAgICA0IDogXCJGXCIsXG4gICAgICAgICAgICA1IDogXCJHXCIsXG4gICAgICAgICAgICA2IDogXCJBXCIsXG4gICAgICAgICAgICA3IDogXCJCXCJcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgbm9ibGFja3MgPSBbIDMsIDcgXTsgLy8gRSwgQlxuICAgICAgICBmb3IgKCBsZXQgcmVnaXN0ZXIgb2YgdXRpbC5yYW5nZSgxLCA3KSApIHtcbiAgICAgICAgICAgIGZvciAoIGxldCBrZXlJbmRleCBvZiB1dGlsLnJhbmdlKDEsIDcpICkge1xuICAgICAgICAgICAgICAgIGxldCBsZXR0ZXIgPSBpbmRleFRvTGV0dGVyW2tleUluZGV4XTtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IGAke2xldHRlcn0ke3JlZ2lzdGVyfWA7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICggbm9ibGFja3MuaW5jbHVkZXMoa2V5SW5kZXgpICkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGBbZGF0YS1ub3RlPVwiJHtuYW1lfVwiXWBcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgRTQgOiAnW2RhdGEtbm90ZT1cIkU0XCJdJ1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBxdWVyeSA9IGBbZGF0YS1ub3RlPVwiJHtuYW1lfVwiXWA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWJuYW1lID0gYCR7bGV0dGVyfSMke3JlZ2lzdGVyfWA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWJxdWVyeSA9IGBbZGF0YS1ub3RlPVwiJHtzdWJuYW1lfVwiXWA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWJ2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBzdWJ2YWx1ZVtzdWJuYW1lXSA9IHN1YnF1ZXJ5O1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZVtxdWVyeV0gPSBzdWJ2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAga2V5c1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKHsga2V5cyB9KTtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgaWQgOiAna2V5Ym9hcmQnLCBjaGlsZHJlbiA6IGtleXNcbiAgICAgICAgfSk7XG4gICAgICAgIC8qXG4gICAgICAgICBzdXBlcih7XG4gICAgICAgICBpZCA6ICdrZXlib2FyZCcsIGNoaWxkcmVuIDoge1xuICAgICAgICAgQzQgOiB7XG4gICAgICAgICAnW2RhdGEtbm90ZT1cIkM0XCJdJyA6IHtcbiAgICAgICAgICdDIzQnIDogJ1tkYXRhLW5vdGU9XCJDIzRcIl0nXG4gICAgICAgICB9XG4gICAgICAgICB9LFxuICAgICAgICAgRDQgOiB7XG4gICAgICAgICAnW2RhdGEtbm90ZT1cIkQ0XCJdJyA6IHtcbiAgICAgICAgICdEIzQnIDogJ1tkYXRhLW5vdGU9XCJEIzRcIl0nXG4gICAgICAgICB9XG4gICAgICAgICB9LFxuICAgICAgICAgRTQgOiAnW2RhdGEtbm90ZT1cIkU0XCJdJyxcbiAgICAgICAgIEY0IDoge1xuICAgICAgICAgJ1tkYXRhLW5vdGU9XCJGNFwiXScgOiB7XG4gICAgICAgICAnRiM0JyA6ICdbZGF0YS1ub3RlPVwiRiM0XCJdJ1xuICAgICAgICAgfVxuICAgICAgICAgfSxcbiAgICAgICAgIEc0IDoge1xuICAgICAgICAgJ1tkYXRhLW5vdGU9XCJHNFwiXScgOiB7XG4gICAgICAgICAnRyM0JyA6ICdbZGF0YS1ub3RlPVwiRyM0XCJdJ1xuICAgICAgICAgfVxuICAgICAgICAgfSxcbiAgICAgICAgIEE0IDoge1xuICAgICAgICAgJ1tkYXRhLW5vdGU9XCJBNFwiXScgOiB7XG4gICAgICAgICAnQSM0JyA6ICdbZGF0YS1ub3RlPVwiQSM0XCJdJ1xuICAgICAgICAgfVxuICAgICAgICAgfSxcbiAgICAgICAgIEI0IDogJ1tkYXRhLW5vdGU9XCJCNFwiXScsXG4gICAgICAgICB9XG4gICAgICAgICB9KTtcbiAgICAgICAgICovXG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgXG4gICAgfVxufVxuXG5jb25zdCBrZXlib2FyZCA9IG5ldyBLZXlib2FyZCgpO1xuZXhwb3J0IGRlZmF1bHQga2V5Ym9hcmQ7XG4iXX0=