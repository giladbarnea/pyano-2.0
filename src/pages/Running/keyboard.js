"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const util = require("../../util");
const Glob_1 = require("../../Glob");
const Piano_1 = require("../../Piano");
const midi_1 = require("@tonejs/midi");
const Tone = require("tone");
const util_1 = require("../../util");
class Keyboard extends bhe_1.BetterHTMLElement {
    constructor() {
        console.group('Keyboard ctor');
        const keys = {
            A0: {
                '[data-note="A0"]': {
                    'A#0': '[data-note="A#0"]'
                }
            },
            B0: '[data-note="B0"]',
        };
        const indexToLetter = {
            1: "C",
            2: "D",
            3: "E",
            4: "F",
            5: "G",
            6: "A",
            7: "B"
        };
        const noblacks = [3, 7];
        for (let register of util.range(1, 7)) {
            for (let keyIndex of util.range(1, 7)) {
                let letter = indexToLetter[keyIndex];
                let name = `${letter}${register}`;
                let value;
                if (noblacks.includes(keyIndex)) {
                    value = `[data-note="${name}"]`;
                }
                else {
                    let query = `[data-note="${name}"]`;
                    let subname = `${letter}#${register}`;
                    let subquery = `[data-note="${subname}"]`;
                    let subvalue = {};
                    subvalue[subname] = subquery;
                    value = {};
                    value[query] = subvalue;
                }
                keys[name] = value;
            }
        }
        console.log({ keys });
        super({
            id: 'keyboard', children: keys
        });
        console.groupEnd();
    }
    async intro() {
        let noteOffObjs = [];
        let noteOnObjs = [];
        let notes;
        const maxAnimationNotes = Glob_1.default.BigConfig.dev.max_animation_notes();
        if (maxAnimationNotes) {
            notes = this.notes.slice(0, maxAnimationNotes);
        }
        else {
            notes = this.notes;
        }
        for (let note of notes) {
            let { name, velocity, duration, time: timeOn } = note;
            let timeOff = timeOn + duration;
            noteOffObjs.push({ name, time: timeOff });
            noteOnObjs.push({ name, time: timeOn, duration, velocity });
        }
        let count = 0;
        let done = false;
        const noteOffCallback = async (time, event) => {
            Tone.Draw.schedule(() => this.paintKey(event, false), time);
            this.piano.keyUp(event.name, time);
            console.log(event.name);
            count++;
            if (noteOffEvents.length === count) {
                const now = Tone.Transport.now();
                const util = require("../../util");
                const diff = now - time;
                await util.wait((diff * 1000), false);
                done = true;
                console.log('intro done', { event, time, now, diff, });
            }
        };
        const noteOnCallback = (time, event) => {
            Tone.Draw.schedule(() => this.paintKey(event, true), time);
            this.piano.keyDown(event.name, time, event.velocity);
        };
        const noteOffEvents = new Tone.Part(noteOffCallback, noteOffObjs).start();
        const noteOnEvents = new Tone.Part(noteOnCallback, noteOnObjs).start();
        console.log({ noteOffEvents });
        remote.globalShortcut.register("CommandOrControl+M", () => Tone.Transport.toggle());
        return await util_1.waitUntil(() => done, 5000, 300);
    }
    paintKey(event, on) {
        if (event.name.includes('#')) {
            let nohash = event.name.replace('#', '');
            this[nohash][event.name].toggleClass('on', on);
        }
        else {
            this[event.name].toggleClass('on', on);
        }
    }
    async initPiano() {
        console.group(`initPiano()`);
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const pianoOptions = {
            samples: SALAMANDER_PATH_ABS,
            release: true,
            pedal: false,
            velocities: Glob_1.default.BigConfig.velocities,
        };
        if (Glob_1.default.BigConfig.dev.mute_animation()) {
            pianoOptions.volume = { strings: -Infinity, harmonics: -Infinity, keybed: -Infinity, pedal: -Infinity };
        }
        this.piano = new Piano_1.Piano(pianoOptions).toDestination();
        const promisePianoLoaded = this.piano.load();
        const promiseMidiLoaded = midi_1.Midi.fromUrl(subconfig.truth.midi.absPath);
        const [_, midi] = await Promise.all([promisePianoLoaded, promiseMidiLoaded]);
        console.log('piano loaded');
        console.log('midi loaded', midi);
        this.notes = midi.tracks[0].notes;
        Tone.Transport.start();
        console.groupEnd();
        return;
    }
}
exports.default = Keyboard;
//# sourceMappingURL=data:application/json;base64,