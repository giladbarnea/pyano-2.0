"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const util = require("../../util");
class Keyboard extends bhe_1.BetterHTMLElement {
    constructor() {
        console.group('Keyboard ctor');
        const zerothKeys = {
            A0: {
                '[data-note="A0"]': {
                    'A#0': '[data-note="A#0"]'
                }
            },
            B0: '[data-note="B0"]',
        };
        const keys = {};
        const indexToLetter = {
            1: "C",
            2: "D",
            3: "E",
            4: "F",
            5: "G",
            6: "A",
            7: "B"
        };
        const noblacks = [3, 7];
        for (let register of util.range(1, 7)) {
            for (let keyIndex of util.range(1, 7)) {
                let letter = indexToLetter[keyIndex];
                let name = `${letter}${register}`;
                let value;
                if (noblacks.includes(keyIndex)) {
                    value = `[data-note="${name}"]`;
                }
                else {
                    let query = `[data-note="${name}"]`;
                    let subname = `${letter}#${register}`;
                    let subquery = `[data-note="${subname}"]`;
                    let subvalue = {};
                    subvalue[subname] = subquery;
                    value = {};
                    value[query] = subvalue;
                }
                keys[name] = value;
            }
        }
        console.log({ keys });
        super({
            id: 'keyboard', children: keys
        });
        console.groupEnd();
    }
}
const keyboard = new Keyboard();
exports.default = keyboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJrZXlib2FyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUE4QztBQUM5QyxtQ0FBa0M7QUFFbEMsTUFBTSxRQUFTLFNBQVEsdUJBQWlCO0lBQ3BDO1FBQ0ksT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUMvQixNQUFNLFVBQVUsR0FBRztZQUNmLEVBQUUsRUFBRztnQkFDRCxrQkFBa0IsRUFBRztvQkFDakIsS0FBSyxFQUFHLG1CQUFtQjtpQkFDOUI7YUFDSjtZQUNELEVBQUUsRUFBRyxrQkFBa0I7U0FDMUIsQ0FBQztRQUNGLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNoQixNQUFNLGFBQWEsR0FBRztZQUNsQixDQUFDLEVBQUcsR0FBRztZQUNQLENBQUMsRUFBRyxHQUFHO1lBQ1AsQ0FBQyxFQUFHLEdBQUc7WUFDUCxDQUFDLEVBQUcsR0FBRztZQUNQLENBQUMsRUFBRyxHQUFHO1lBQ1AsQ0FBQyxFQUFHLEdBQUc7WUFDUCxDQUFDLEVBQUcsR0FBRztTQUNWLENBQUM7UUFDRixNQUFNLFFBQVEsR0FBRyxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQztRQUMxQixLQUFNLElBQUksUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFHO1lBQ3JDLEtBQU0sSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUc7Z0JBQ3JDLElBQUksTUFBTSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDckMsSUFBSSxJQUFJLEdBQUcsR0FBRyxNQUFNLEdBQUcsUUFBUSxFQUFFLENBQUM7Z0JBQ2xDLElBQUksS0FBSyxDQUFDO2dCQUNWLElBQUssUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRztvQkFDL0IsS0FBSyxHQUFHLGVBQWUsSUFBSSxJQUFJLENBQUE7aUJBQ2xDO3FCQUFNO29CQUNILElBQUksS0FBSyxHQUFHLGVBQWUsSUFBSSxJQUFJLENBQUM7b0JBQ3BDLElBQUksT0FBTyxHQUFHLEdBQUcsTUFBTSxJQUFJLFFBQVEsRUFBRSxDQUFDO29CQUN0QyxJQUFJLFFBQVEsR0FBRyxlQUFlLE9BQU8sSUFBSSxDQUFDO29CQUMxQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7b0JBQ2xCLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxRQUFRLENBQUM7b0JBQzdCLEtBQUssR0FBRyxFQUFFLENBQUM7b0JBQ1gsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQztpQkFDM0I7Z0JBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUN0QjtTQUNKO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdEIsS0FBSyxDQUFDO1lBQ0YsRUFBRSxFQUFHLFVBQVUsRUFBRSxRQUFRLEVBQUcsSUFBSTtTQUNuQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFdkIsQ0FBQztDQUNKO0FBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQUNoQyxrQkFBZSxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZXR0ZXJIVE1MRWxlbWVudCB9IGZyb20gXCIuLi8uLi9iaGVcIjtcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSBcIi4uLy4uL3V0aWxcIlxuXG5jbGFzcyBLZXlib2FyZCBleHRlbmRzIEJldHRlckhUTUxFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc29sZS5ncm91cCgnS2V5Ym9hcmQgY3RvcicpO1xuICAgICAgICBjb25zdCB6ZXJvdGhLZXlzID0ge1xuICAgICAgICAgICAgQTAgOiB7XG4gICAgICAgICAgICAgICAgJ1tkYXRhLW5vdGU9XCJBMFwiXScgOiB7XG4gICAgICAgICAgICAgICAgICAgICdBIzAnIDogJ1tkYXRhLW5vdGU9XCJBIzBcIl0nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEIwIDogJ1tkYXRhLW5vdGU9XCJCMFwiXScsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGtleXMgPSB7fTtcbiAgICAgICAgY29uc3QgaW5kZXhUb0xldHRlciA9IHtcbiAgICAgICAgICAgIDEgOiBcIkNcIixcbiAgICAgICAgICAgIDIgOiBcIkRcIixcbiAgICAgICAgICAgIDMgOiBcIkVcIixcbiAgICAgICAgICAgIDQgOiBcIkZcIixcbiAgICAgICAgICAgIDUgOiBcIkdcIixcbiAgICAgICAgICAgIDYgOiBcIkFcIixcbiAgICAgICAgICAgIDcgOiBcIkJcIlxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBub2JsYWNrcyA9IFsgMywgNyBdOyAvLyBFLCBCXG4gICAgICAgIGZvciAoIGxldCByZWdpc3RlciBvZiB1dGlsLnJhbmdlKDEsIDcpICkge1xuICAgICAgICAgICAgZm9yICggbGV0IGtleUluZGV4IG9mIHV0aWwucmFuZ2UoMSwgNykgKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxldHRlciA9IGluZGV4VG9MZXR0ZXJba2V5SW5kZXhdO1xuICAgICAgICAgICAgICAgIGxldCBuYW1lID0gYCR7bGV0dGVyfSR7cmVnaXN0ZXJ9YDtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKCBub2JsYWNrcy5pbmNsdWRlcyhrZXlJbmRleCkgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYFtkYXRhLW5vdGU9XCIke25hbWV9XCJdYFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBxdWVyeSA9IGBbZGF0YS1ub3RlPVwiJHtuYW1lfVwiXWA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWJuYW1lID0gYCR7bGV0dGVyfSMke3JlZ2lzdGVyfWA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWJxdWVyeSA9IGBbZGF0YS1ub3RlPVwiJHtzdWJuYW1lfVwiXWA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWJ2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBzdWJ2YWx1ZVtzdWJuYW1lXSA9IHN1YnF1ZXJ5O1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZVtxdWVyeV0gPSBzdWJ2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAga2V5c1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKHsga2V5cyB9KTtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgaWQgOiAna2V5Ym9hcmQnLCBjaGlsZHJlbiA6IGtleXNcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIFxuICAgIH1cbn1cblxuY29uc3Qga2V5Ym9hcmQgPSBuZXcgS2V5Ym9hcmQoKTtcbmV4cG9ydCBkZWZhdWx0IGtleWJvYXJkO1xuIl19