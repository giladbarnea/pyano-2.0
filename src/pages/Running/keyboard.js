"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const util = require("../../util");
class Keyboard extends bhe_1.BetterHTMLElement {
    constructor() {
        console.group('Keyboard ctor');
        const keys = {
            A0: {
                '[data-note="A0"]': {
                    'A#0': '[data-note="A#0"]'
                }
            },
            B0: '[data-note="B0"]',
        };
        const indexToLetter = {
            1: "C",
            2: "D",
            3: "E",
            4: "F",
            5: "G",
            6: "A",
            7: "B"
        };
        const noblacks = [3, 7];
        for (let register of util.range(1, 7)) {
            for (let keyIndex of util.range(1, 7)) {
                let letter = indexToLetter[keyIndex];
                let name = `${letter}${register}`;
                let value;
                if (noblacks.includes(keyIndex)) {
                    value = `[data-note="${name}"]`;
                }
                else {
                    let query = `[data-note="${name}"]`;
                    let subname = `${letter}#${register}`;
                    let subquery = `[data-note="${subname}"]`;
                    let subvalue = {};
                    subvalue[subname] = subquery;
                    value = {};
                    value[query] = subvalue;
                }
                keys[name] = value;
            }
        }
        console.log({ keys });
        super({
            id: 'keyboard', children: keys
        });
        console.groupEnd();
    }
}
const keyboard = new Keyboard();
exports.default = keyboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJrZXlib2FyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUE4QztBQUM5QyxtQ0FBa0M7QUFFbEMsTUFBTSxRQUFTLFNBQVEsdUJBQWlCO0lBQ3BDO1FBQ0ksT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUUvQixNQUFNLElBQUksR0FBRztZQUNULEVBQUUsRUFBRztnQkFDRCxrQkFBa0IsRUFBRztvQkFDakIsS0FBSyxFQUFHLG1CQUFtQjtpQkFDOUI7YUFDSjtZQUNELEVBQUUsRUFBRyxrQkFBa0I7U0FDMUIsQ0FBQztRQUNGLE1BQU0sYUFBYSxHQUFHO1lBQ2xCLENBQUMsRUFBRyxHQUFHO1lBQ1AsQ0FBQyxFQUFHLEdBQUc7WUFDUCxDQUFDLEVBQUcsR0FBRztZQUNQLENBQUMsRUFBRyxHQUFHO1lBQ1AsQ0FBQyxFQUFHLEdBQUc7WUFDUCxDQUFDLEVBQUcsR0FBRztZQUNQLENBQUMsRUFBRyxHQUFHO1NBQ1YsQ0FBQztRQUNGLE1BQU0sUUFBUSxHQUFHLENBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDO1FBQzFCLEtBQU0sSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUc7WUFDckMsS0FBTSxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRztnQkFDckMsSUFBSSxNQUFNLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUNyQyxJQUFJLElBQUksR0FBRyxHQUFHLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQztnQkFDbEMsSUFBSSxLQUFLLENBQUM7Z0JBQ1YsSUFBSyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFHO29CQUMvQixLQUFLLEdBQUcsZUFBZSxJQUFJLElBQUksQ0FBQTtpQkFDbEM7cUJBQU07b0JBQ0gsSUFBSSxLQUFLLEdBQUcsZUFBZSxJQUFJLElBQUksQ0FBQztvQkFDcEMsSUFBSSxPQUFPLEdBQUcsR0FBRyxNQUFNLElBQUksUUFBUSxFQUFFLENBQUM7b0JBQ3RDLElBQUksUUFBUSxHQUFHLGVBQWUsT0FBTyxJQUFJLENBQUM7b0JBQzFDLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztvQkFDbEIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQztvQkFDN0IsS0FBSyxHQUFHLEVBQUUsQ0FBQztvQkFDWCxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDO2lCQUMzQjtnQkFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQ3RCO1NBQ0o7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN0QixLQUFLLENBQUM7WUFDRixFQUFFLEVBQUcsVUFBVSxFQUFFLFFBQVEsRUFBRyxJQUFJO1NBQ25DLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUV2QixDQUFDO0NBQ0o7QUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0FBQ2hDLGtCQUFlLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJldHRlckhUTUxFbGVtZW50IH0gZnJvbSBcIi4uLy4uL2JoZVwiO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwiLi4vLi4vdXRpbFwiXG5cbmNsYXNzIEtleWJvYXJkIGV4dGVuZHMgQmV0dGVySFRNTEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zb2xlLmdyb3VwKCdLZXlib2FyZCBjdG9yJyk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBrZXlzID0ge1xuICAgICAgICAgICAgQTAgOiB7XG4gICAgICAgICAgICAgICAgJ1tkYXRhLW5vdGU9XCJBMFwiXScgOiB7XG4gICAgICAgICAgICAgICAgICAgICdBIzAnIDogJ1tkYXRhLW5vdGU9XCJBIzBcIl0nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEIwIDogJ1tkYXRhLW5vdGU9XCJCMFwiXScsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGluZGV4VG9MZXR0ZXIgPSB7XG4gICAgICAgICAgICAxIDogXCJDXCIsXG4gICAgICAgICAgICAyIDogXCJEXCIsXG4gICAgICAgICAgICAzIDogXCJFXCIsXG4gICAgICAgICAgICA0IDogXCJGXCIsXG4gICAgICAgICAgICA1IDogXCJHXCIsXG4gICAgICAgICAgICA2IDogXCJBXCIsXG4gICAgICAgICAgICA3IDogXCJCXCJcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgbm9ibGFja3MgPSBbIDMsIDcgXTsgLy8gRSwgQlxuICAgICAgICBmb3IgKCBsZXQgcmVnaXN0ZXIgb2YgdXRpbC5yYW5nZSgxLCA3KSApIHtcbiAgICAgICAgICAgIGZvciAoIGxldCBrZXlJbmRleCBvZiB1dGlsLnJhbmdlKDEsIDcpICkge1xuICAgICAgICAgICAgICAgIGxldCBsZXR0ZXIgPSBpbmRleFRvTGV0dGVyW2tleUluZGV4XTtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IGAke2xldHRlcn0ke3JlZ2lzdGVyfWA7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICggbm9ibGFja3MuaW5jbHVkZXMoa2V5SW5kZXgpICkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGBbZGF0YS1ub3RlPVwiJHtuYW1lfVwiXWBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcXVlcnkgPSBgW2RhdGEtbm90ZT1cIiR7bmFtZX1cIl1gO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3VibmFtZSA9IGAke2xldHRlcn0jJHtyZWdpc3Rlcn1gO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3VicXVlcnkgPSBgW2RhdGEtbm90ZT1cIiR7c3VibmFtZX1cIl1gO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3VidmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgc3VidmFsdWVbc3VibmFtZV0gPSBzdWJxdWVyeTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbcXVlcnldID0gc3VidmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGtleXNbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyh7IGtleXMgfSk7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIGlkIDogJ2tleWJvYXJkJywgY2hpbGRyZW4gOiBrZXlzXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICBcbiAgICB9XG59XG5cbmNvbnN0IGtleWJvYXJkID0gbmV3IEtleWJvYXJkKCk7XG5leHBvcnQgZGVmYXVsdCBrZXlib2FyZDtcbiJdfQ==