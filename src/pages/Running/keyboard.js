"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("../../bhe");
const util = require("../../util");
const Glob_1 = require("../../Glob");
const Piano_1 = require("../../Piano");
const midi_1 = require("@tonejs/midi");
const Tone = require("tone");
class Keyboard extends bhe_1.BetterHTMLElement {
    constructor() {
        console.group('Keyboard ctor');
        const keys = {
            A0: {
                '[data-note="A0"]': {
                    'A#0': '[data-note="A#0"]'
                }
            },
            B0: '[data-note="B0"]',
        };
        const indexToLetter = {
            1: "C",
            2: "D",
            3: "E",
            4: "F",
            5: "G",
            6: "A",
            7: "B"
        };
        const noblacks = [3, 7];
        for (let register of util.range(1, 7)) {
            for (let keyIndex of util.range(1, 7)) {
                let letter = indexToLetter[keyIndex];
                let name = `${letter}${register}`;
                let value;
                if (noblacks.includes(keyIndex)) {
                    value = `[data-note="${name}"]`;
                }
                else {
                    let query = `[data-note="${name}"]`;
                    let subname = `${letter}#${register}`;
                    let subquery = `[data-note="${subname}"]`;
                    let subvalue = {};
                    subvalue[subname] = subquery;
                    value = {};
                    value[query] = subvalue;
                }
                keys[name] = value;
            }
        }
        console.log({ keys });
        super({
            id: 'keyboard', children: keys
        });
        this.initPiano();
        console.groupEnd();
    }
    async initPiano() {
        console.group(`initPiano()`);
        const subconfig = Glob_1.default.BigConfig.getSubconfig();
        const pianoOptions = {
            samples: SALAMANDER_PATH_ABS,
            release: true,
            pedal: false,
            velocities: Glob_1.default.BigConfig.velocities,
        };
        if (Glob_1.default.BigConfig.dev.mute_animation()) {
            pianoOptions.volume = { strings: -Infinity, harmonics: -Infinity, keybed: -Infinity, pedal: -Infinity };
        }
        const piano = new Piano_1.Piano(pianoOptions).toDestination();
        await piano.load();
        console.log('piano loaded');
        const midi = await midi_1.Midi.fromUrl(subconfig.truth.midi.absPath);
        console.log('midi loaded');
        const paintKey = (event, on) => {
            console.log('paintKey()', { event });
            if (event.name.includes('#')) {
                let nohash = event.name.replace('#', '');
                this[nohash][event.name].toggleClass('on', on);
            }
            else {
                this[event.name].toggleClass('on', on);
            }
        };
        function noteOffCallback(time, event) {
            Tone.Draw.schedule(() => paintKey(event, false), time);
            piano.keyUp(event.name, time);
        }
        function noteOnCallback(time, event) {
            Tone.Draw.schedule(() => paintKey(event, true), time);
            piano.keyDown(event.name, time, event.velocity);
        }
        let noteOffObjs = [];
        let noteOnObjs = [];
        let notes;
        const maxAnimationNotes = Glob_1.default.BigConfig.dev.max_animation_notes();
        if (maxAnimationNotes) {
            notes = midi.tracks[0].notes.slice(0, maxAnimationNotes);
        }
        else {
            notes = midi.tracks[0].notes;
        }
        for (let note of notes) {
            let { name, velocity, duration, time: timeOn } = note;
            let timeOff = timeOn + duration;
            noteOffObjs.push({ name, time: timeOff });
            noteOnObjs.push({ name, time: timeOn, duration, velocity });
        }
        const noteOffEvents = new Tone.Part(noteOffCallback, noteOffObjs).start();
        const noteOnEvents = new Tone.Part(noteOnCallback, noteOnObjs).start();
        Tone.Transport.start();
        remote.globalShortcut.register("CommandOrControl+M", () => Tone.Transport.toggle());
        console.log({ subconfig, midi, piano, "Tone.Context.getDefaults()": Tone.Context.getDefaults(), });
        console.groupEnd();
    }
}
const keyboard = new Keyboard();
exports.default = keyboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJrZXlib2FyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUE4QztBQUM5QyxtQ0FBa0M7QUFDbEMscUNBQThCO0FBQzlCLHVDQUFrRDtBQUNsRCx1Q0FBb0M7QUFDcEMsNkJBQTZCO0FBRTdCLE1BQU0sUUFBUyxTQUFRLHVCQUFpQjtJQUNwQztRQUNJLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFL0IsTUFBTSxJQUFJLEdBQUc7WUFDVCxFQUFFLEVBQUc7Z0JBQ0Qsa0JBQWtCLEVBQUc7b0JBQ2pCLEtBQUssRUFBRyxtQkFBbUI7aUJBQzlCO2FBQ0o7WUFDRCxFQUFFLEVBQUcsa0JBQWtCO1NBQzFCLENBQUM7UUFDRixNQUFNLGFBQWEsR0FBRztZQUNsQixDQUFDLEVBQUcsR0FBRztZQUNQLENBQUMsRUFBRyxHQUFHO1lBQ1AsQ0FBQyxFQUFHLEdBQUc7WUFDUCxDQUFDLEVBQUcsR0FBRztZQUNQLENBQUMsRUFBRyxHQUFHO1lBQ1AsQ0FBQyxFQUFHLEdBQUc7WUFDUCxDQUFDLEVBQUcsR0FBRztTQUNWLENBQUM7UUFDRixNQUFNLFFBQVEsR0FBRyxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQztRQUMxQixLQUFNLElBQUksUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFHO1lBQ3JDLEtBQU0sSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUc7Z0JBQ3JDLElBQUksTUFBTSxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDckMsSUFBSSxJQUFJLEdBQUcsR0FBRyxNQUFNLEdBQUcsUUFBUSxFQUFFLENBQUM7Z0JBQ2xDLElBQUksS0FBSyxDQUFDO2dCQUNWLElBQUssUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMs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QztZQUNoQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQzNDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFHLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUNoRTtRQUVELE1BQU0sYUFBYSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUUsTUFBTSxZQUFZLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2RSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXZCLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUVwRixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsNEJBQTRCLEVBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDcEcsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDSjtBQUVELE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7QUFDaEMsa0JBQWUsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmV0dGVySFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vLi4vYmhlXCI7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gXCIuLi8uLi91dGlsXCJcbmltcG9ydCBHbG9iIGZyb20gXCIuLi8uLi9HbG9iXCI7XG5pbXBvcnQgeyBQaWFubywgUGlhbm9PcHRpb25zIH0gZnJvbSBcIi4uLy4uL1BpYW5vXCI7XG5pbXBvcnQgeyBNaWRpIH0gZnJvbSBcIkB0b25lanMvbWlkaVwiO1xuaW1wb3J0ICogYXMgVG9uZSBmcm9tIFwidG9uZVwiO1xuXG5jbGFzcyBLZXlib2FyZCBleHRlbmRzIEJldHRlckhUTUxFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc29sZS5ncm91cCgnS2V5Ym9hcmQgY3RvcicpO1xuICAgICAgICBcbiAgICAgICAgY29uc3Qga2V5cyA9IHtcbiAgICAgICAgICAgIEEwIDoge1xuICAgICAgICAgICAgICAgICdbZGF0YS1ub3RlPVwiQTBcIl0nIDoge1xuICAgICAgICAgICAgICAgICAgICAnQSMwJyA6ICdbZGF0YS1ub3RlPVwiQSMwXCJdJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBCMCA6ICdbZGF0YS1ub3RlPVwiQjBcIl0nLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBpbmRleFRvTGV0dGVyID0ge1xuICAgICAgICAgICAgMSA6IFwiQ1wiLFxuICAgICAgICAgICAgMiA6IFwiRFwiLFxuICAgICAgICAgICAgMyA6IFwiRVwiLFxuICAgICAgICAgICAgNCA6IFwiRlwiLFxuICAgICAgICAgICAgNSA6IFwiR1wiLFxuICAgICAgICAgICAgNiA6IFwiQVwiLFxuICAgICAgICAgICAgNyA6IFwiQlwiXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG5vYmxhY2tzID0gWyAzLCA3IF07IC8vIEUsIEJcbiAgICAgICAgZm9yICggbGV0IHJlZ2lzdGVyIG9mIHV0aWwucmFuZ2UoMSwgNykgKSB7XG4gICAgICAgICAgICBmb3IgKCBsZXQga2V5SW5kZXggb2YgdXRpbC5yYW5nZSgxLCA3KSApIHtcbiAgICAgICAgICAgICAgICBsZXQgbGV0dGVyID0gaW5kZXhUb0xldHRlcltrZXlJbmRleF07XG4gICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBgJHtsZXR0ZXJ9JHtyZWdpc3Rlcn1gO1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIG5vYmxhY2tzLmluY2x1ZGVzKGtleUluZGV4KSApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBgW2RhdGEtbm90ZT1cIiR7bmFtZX1cIl1gXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gYFtkYXRhLW5vdGU9XCIke25hbWV9XCJdYDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1Ym5hbWUgPSBgJHtsZXR0ZXJ9IyR7cmVnaXN0ZXJ9YDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1YnF1ZXJ5ID0gYFtkYXRhLW5vdGU9XCIke3N1Ym5hbWV9XCJdYDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1YnZhbHVlID0ge307XG4gICAgICAgICAgICAgICAgICAgIHN1YnZhbHVlW3N1Ym5hbWVdID0gc3VicXVlcnk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0ge307XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlW3F1ZXJ5XSA9IHN1YnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrZXlzW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coeyBrZXlzIH0pO1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBpZCA6ICdrZXlib2FyZCcsIGNoaWxkcmVuIDoga2V5c1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbml0UGlhbm8oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgYXN5bmMgaW5pdFBpYW5vKCkge1xuICAgICAgICBjb25zb2xlLmdyb3VwKGBpbml0UGlhbm8oKWApO1xuICAgICAgICBjb25zdCBzdWJjb25maWcgPSBHbG9iLkJpZ0NvbmZpZy5nZXRTdWJjb25maWcoKTtcbiAgICAgICAgY29uc3QgcGlhbm9PcHRpb25zOiBQYXJ0aWFsPFBpYW5vT3B0aW9ucz4gPSB7XG4gICAgICAgICAgICBzYW1wbGVzIDogU0FMQU1BTkRFUl9QQVRIX0FCUyxcbiAgICAgICAgICAgIHJlbGVhc2UgOiB0cnVlLFxuICAgICAgICAgICAgcGVkYWwgOiBmYWxzZSxcbiAgICAgICAgICAgIHZlbG9jaXRpZXMgOiBHbG9iLkJpZ0NvbmZpZy52ZWxvY2l0aWVzLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIEdsb2IuQmlnQ29uZmlnLmRldi5tdXRlX2FuaW1hdGlvbigpICkge1xuICAgICAgICAgICAgcGlhbm9PcHRpb25zLnZvbHVtZSA9IHsgc3RyaW5ncyA6IC1JbmZpbml0eSwgaGFybW9uaWNzIDogLUluZmluaXR5LCBrZXliZWQgOiAtSW5maW5pdHksIHBlZGFsIDogLUluZmluaXR5IH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwaWFubyA9IG5ldyBQaWFubyhwaWFub09wdGlvbnMpLnRvRGVzdGluYXRpb24oKTtcbiAgICAgICAgYXdhaXQgcGlhbm8ubG9hZCgpO1xuICAgICAgICBjb25zb2xlLmxvZygncGlhbm8gbG9hZGVkJyk7XG4gICAgICAgIGNvbnN0IG1pZGkgPSBhd2FpdCBNaWRpLmZyb21Vcmwoc3ViY29uZmlnLnRydXRoLm1pZGkuYWJzUGF0aCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdtaWRpIGxvYWRlZCcpO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHR5cGUgTm90ZU9mZkV2ZW50ID0geyBuYW1lOiBzdHJpbmcgfTtcbiAgICAgICAgdHlwZSBOb3RlT25FdmVudCA9IE5vdGVPZmZFdmVudCAmIHsgdmVsb2NpdHk6IG51bWJlciB9O1xuICAgICAgICB0eXBlIE5vdGVPZmYgPSBOb3RlT2ZmRXZlbnQgJiB7IHRpbWU6IFRvbmUuVW5pdC5UaW1lIH07XG4gICAgICAgIHR5cGUgTm90ZU9uID0gTm90ZU9uRXZlbnQgJiB7IHRpbWU6IFRvbmUuVW5pdC5UaW1lLCBkdXJhdGlvbjogbnVtYmVyIH07XG4gICAgICAgIGNvbnN0IHBhaW50S2V5ID0gKGV2ZW50LCBvbjogYm9vbGVhbikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3BhaW50S2V5KCknLCB7IGV2ZW50IH0pO1xuICAgICAgICAgICAgaWYgKCBldmVudC5uYW1lLmluY2x1ZGVzKCcjJykgKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5vaGFzaCA9IGV2ZW50Lm5hbWUucmVwbGFjZSgnIycsICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzW25vaGFzaF1bZXZlbnQubmFtZV0udG9nZ2xlQ2xhc3MoJ29uJywgb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzW2V2ZW50Lm5hbWVdLnRvZ2dsZUNsYXNzKCdvbicsIG9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIG5vdGVPZmZDYWxsYmFjayh0aW1lOiBUb25lLlVuaXQuVGltZSwgZXZlbnQ6IE5vdGVPZmZFdmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBUb25lLkRyYXcuc2NoZWR1bGUoKCkgPT4gcGFpbnRLZXkoZXZlbnQsIGZhbHNlKSwgdGltZSk7XG4gICAgICAgICAgICBwaWFuby5rZXlVcChldmVudC5uYW1lLCB0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gbm90ZU9uQ2FsbGJhY2sodGltZTogVG9uZS5Vbml0LlRpbWUsIGV2ZW50OiBOb3RlT25FdmVudCkge1xuICAgICAgICAgICAgVG9uZS5EcmF3LnNjaGVkdWxlKCgpID0+IHBhaW50S2V5KGV2ZW50LCB0cnVlKSwgdGltZSk7XG4gICAgICAgICAgICBwaWFuby5rZXlEb3duKGV2ZW50Lm5hbWUsIHRpbWUsIGV2ZW50LnZlbG9jaXR5KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGxldCBub3RlT2ZmT2JqczogTm90ZU9mZltdID0gW107XG4gICAgICAgIGxldCBub3RlT25PYmpzOiBOb3RlT25bXSA9IFtdO1xuICAgICAgICBsZXQgbm90ZXM7XG4gICAgICAgIGNvbnN0IG1heEFuaW1hdGlvbk5vdGVzID0gR2xvYi5CaWdDb25maWcuZGV2Lm1heF9hbmltYXRpb25fbm90ZXMoKTtcbiAgICAgICAgaWYgKCBtYXhBbmltYXRpb25Ob3RlcyApIHtcbiAgICAgICAgICAgIG5vdGVzID0gbWlkaS50cmFja3NbMF0ubm90ZXMuc2xpY2UoMCwgbWF4QW5pbWF0aW9uTm90ZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm90ZXMgPSBtaWRpLnRyYWNrc1swXS5ub3RlcztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKCBsZXQgbm90ZSBvZiBub3RlcyApIHtcbiAgICAgICAgICAgIGxldCB7IG5hbWUsIHZlbG9jaXR5LCBkdXJhdGlvbiwgdGltZSA6IHRpbWVPbiB9ID0gbm90ZTtcbiAgICAgICAgICAgIGxldCB0aW1lT2ZmID0gdGltZU9uICsgZHVyYXRpb247XG4gICAgICAgICAgICBub3RlT2ZmT2Jqcy5wdXNoKHsgbmFtZSwgdGltZSA6IHRpbWVPZmYgfSk7XG4gICAgICAgICAgICBub3RlT25PYmpzLnB1c2goeyBuYW1lLCB0aW1lIDogdGltZU9uLCBkdXJhdGlvbiwgdmVsb2NpdHkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc3Qgbm93ID0gVG9uZS5UcmFuc3BvcnQubm93KCk7XG4gICAgICAgIGNvbnN0IG5vdGVPZmZFdmVudHMgPSBuZXcgVG9uZS5QYXJ0KG5vdGVPZmZDYWxsYmFjaywgbm90ZU9mZk9ianMpLnN0YXJ0KCk7XG4gICAgICAgIGNvbnN0IG5vdGVPbkV2ZW50cyA9IG5ldyBUb25lLlBhcnQobm90ZU9uQ2FsbGJhY2ssIG5vdGVPbk9ianMpLnN0YXJ0KCk7XG4gICAgICAgIFRvbmUuVHJhbnNwb3J0LnN0YXJ0KCk7XG4gICAgICAgIFxuICAgICAgICByZW1vdGUuZ2xvYmFsU2hvcnRjdXQucmVnaXN0ZXIoXCJDb21tYW5kT3JDb250cm9sK01cIiwgKCkgPT4gVG9uZS5UcmFuc3BvcnQudG9nZ2xlKCkpO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coeyBzdWJjb25maWcsIG1pZGksIHBpYW5vLCBcIlRvbmUuQ29udGV4dC5nZXREZWZhdWx0cygpXCIgOiBUb25lLkNvbnRleHQuZ2V0RGVmYXVsdHMoKSwgfSk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICB9XG59XG5cbmNvbnN0IGtleWJvYXJkID0gbmV3IEtleWJvYXJkKCk7XG5leHBvcnQgZGVmYXVsdCBrZXlib2FyZDtcbiJdfQ==