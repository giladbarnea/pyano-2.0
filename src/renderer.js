const { remote } = require('electron');
const argvars = remote.process.argv.slice(2).map(s => s.toLowerCase());
const DEBUG = argvars.includes('debug');
const DRYRUN = argvars.includes('dry-run');
const path = require('path');
let ROOT_PATH_ABS;
let SRC_PATH_ABS;
if (path.basename(__dirname) === 'src') {
    ROOT_PATH_ABS = path.join(__dirname, '..');
    SRC_PATH_ABS = __dirname;
}
else {
    ROOT_PATH_ABS = __dirname;
    SRC_PATH_ABS = path.join(ROOT_PATH_ABS, 'src');
}
const TEMPLATES_PATH_ABS = path.join(ROOT_PATH_ABS, 'templates');
const SALAMANDER_PATH_ABS = path.join(TEMPLATES_PATH_ABS, 'Salamander');
const EXPERIMENTS_PATH_ABS = path.join(SRC_PATH_ABS, 'experiments');
const TRUTHS_PATH_ABS = path.join(EXPERIMENTS_PATH_ABS, 'truths');
const CONFIGS_PATH_ABS = path.join(EXPERIMENTS_PATH_ABS, 'configs');
const SUBJECTS_PATH_ABS = path.join(EXPERIMENTS_PATH_ABS, 'subjects');
process.env.ROOT_PATH_ABS = ROOT_PATH_ABS;
process.env.SRC_PATH_ABS = SRC_PATH_ABS;
process.env.TEMPLATES_PATH_ABS = TEMPLATES_PATH_ABS;
process.env.SALAMANDER_PATH_ABS = SALAMANDER_PATH_ABS;
process.env.EXPERIMENTS_PATH_ABS = EXPERIMENTS_PATH_ABS;
process.env.TRUTHS_PATH_ABS = TRUTHS_PATH_ABS;
process.env.CONFIGS_PATH_ABS = CONFIGS_PATH_ABS;
process.env.SUBJECTS_PATH_ABS = SUBJECTS_PATH_ABS;
const { PythonShell } = require("python-shell");
const enginePath = path.join(ROOT_PATH_ABS, "src", "engine");
const pyExecPath = path.join(enginePath, process.platform === "linux" ? "env/bin/python" : "env/Scripts/python.exe");
console.group(`renderer.ts`);
console.table({
    __dirname, ROOT_PATH_ABS, SRC_PATH_ABS,
    TEMPLATES_PATH_ABS,
    SALAMANDER_PATH_ABS,
    EXPERIMENTS_PATH_ABS,
    TRUTHS_PATH_ABS,
    CONFIGS_PATH_ABS,
    SUBJECTS_PATH_ABS,
    DEBUG, DRYRUN,
    enginePath, pyExecPath
});
PythonShell.defaultOptions = {
    pythonPath: pyExecPath,
    pythonOptions: ['-OO'],
};
PythonShell.prototype.runAsync = function () {
    return new Promise((resolve, reject) => {
        const messages = [];
        this.on('message', message => messages.push(message));
        this.end((err, code, signal) => {
            if (err)
                reject(err);
            resolve(messages);
        });
    });
};
PythonShell.myrun = function (scriptPath, options = { args: [], pythonOptions: ['-OO'] }, callback) {
    if (scriptPath.startsWith('-m')) {
        scriptPath = scriptPath.slice(3);
        if (!options.pythonOptions) {
            options.pythonOptions = ['-m'];
        }
        else {
            if (!options.pythonOptions.includes('-m')) {
                options.pythonOptions.push('-m');
            }
        }
    }
    options.args = [ROOT_PATH_ABS, ...options.args];
    if (DEBUG)
        options.args.push('debug');
    if (DRYRUN)
        options.args.push('dry-run');
    if (!callback) {
        callback = (err, output) => {
            if (err) {
                console.error(err);
            }
            if (output)
                console.log(`%c${scriptPath}\n`, 'font-weight: bold', output.join('\n'));
        };
    }
    return PythonShell.run(scriptPath, options, callback);
};
PythonShell.myrun("-m checks.dirs");
const Store = new (require("electron-store"))();
console.log(`Store.path: `, Store.path);
PythonShell.myrun("-m checks.config", { args: [Store.path] });
Object.defineProperty(Object.prototype, "keys", {
    enumerable: false,
    value() {
        return Object.keys(this).map(key => key.isdigit()
            ? parseInt(key) : key);
    }
});
Object.defineProperty(Array.prototype, "last", {
    enumerable: false,
    value() {
        return this[this.length - 1];
    }
});
Object.defineProperty(Array.prototype, "lowerAll", {
    enumerable: false,
    value() {
        return this.map(s => s.lower());
    }
});
Object.defineProperty(Array.prototype, "rsort", {
    enumerable: false,
    value() {
        return this.sort((n, m) => n < m);
    }
});
Object.defineProperty(Array.prototype, "count", {
    enumerable: false,
    value(item, strict = false) {
        let _count = 0;
        for (let x of this) {
            if (strict) {
                if (x === item)
                    _count++;
            }
            else if (x == item) {
                _count++;
            }
        }
        return _count;
    }
});
Object.defineProperty(String.prototype, "upTo", {
    enumerable: false,
    value(searchString, searchFromEnd = false) {
        let end = searchFromEnd
            ? this.lastIndexOf(searchString)
            : this.indexOf(searchString);
        if (end === -1)
            console.warn(`${this.valueOf()}.upTo(${searchString},${searchFromEnd}) index is -1`);
        return this.slice(0, end);
    }
});
Object.defineProperty(String.prototype, "in", {
    enumerable: false,
    value(arr) {
        return arr.includes(this.valueOf());
    }
});
Object.defineProperty(String.prototype, "lower", {
    enumerable: false,
    value() {
        return this.toLowerCase();
    }
});
Object.defineProperty(String.prototype, "upper", {
    enumerable: false,
    value() {
        return this.toUpperCase();
    }
});
Object.defineProperty(String.prototype, "title", {
    enumerable: false,
    value() {
        if (this.includes(' '))
            return this.split(' ').map(str => str.title()).join(' ');
        else
            return this[0].upper() + this.slice(1, this.length).lower();
    }
});
Object.defineProperty(String.prototype, "isdigit", {
    enumerable: false,
    value() {
        return !isNaN(Math.floor(this));
    }
});
Object.defineProperty(String.prototype, "removeAll", {
    enumerable: false,
    value(removeValue, ...removeValues) {
        let temp = this;
        for (let value of [removeValue, ...removeValues])
            temp = temp.replaceAll(value, '');
        return temp;
    }
});
Object.defineProperty(String.prototype, "replaceAll", {
    enumerable: false,
    value(searchValue, replaceValue) {
        const type = typeof searchValue;
        if (type === 'string' || type === 'number') {
            return this
                .split(searchValue)
                .join(replaceValue);
        }
        else if (type === 'object') {
            let temp = this;
            for (let [sv, rv] of Object.entries(searchValue))
                temp = temp.replaceAll(sv, rv);
            return temp;
        }
        else {
            console.warn(`replaceAll got a bad type, searchValue: ${searchValue}, type: ${type}`);
            return this;
        }
    }
});
Object.defineProperty(Number.prototype, "human", {
    enumerable: false,
    value(letters = false) {
        switch (Math.floor(this) + 1) {
            case 0:
                return letters
                    ? "zeroth"
                    : "0th";
            case 1:
                return letters
                    ? "first"
                    : "1st";
            case 2:
                return letters
                    ? "second"
                    : "2nd";
            case 3:
                return letters
                    ? "third"
                    : "3rd";
            case 4:
                return letters
                    ? "fourth"
                    : "4th";
            case 5:
                return letters
                    ? "fifth"
                    : "5th";
            case 6:
                return letters
                    ? "sixth"
                    : "6th";
            case 7:
                return letters
                    ? "seventh"
                    : "7th";
            case 8:
                return letters
                    ? "eighth"
                    : "8th";
            case 9:
                return letters
                    ? "ninth"
                    : "9th";
            default:
                return `${Math.floor(this) + 1}th`;
        }
    }
});
Object.defineProperty(Date.prototype, "human", {
    enumerable: false, value() {
        let d = this.getUTCDate();
        d = d < 10 ? `0${d}` : d;
        let m = this.getMonth() + 1;
        m = m < 10 ? `0${m}` : m;
        const y = this.getFullYear();
        const t = this.toTimeString().slice(0, 8).replaceAll(':', '-');
        return `${d}_${m}_${y}_${t}`;
    }
});
module.exports = {
    PythonShell
};
console.groupEnd();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZW5kZXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUN2RSxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3hDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFM0MsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRTdCLElBQUksYUFBcUIsQ0FBQztBQUMxQixJQUFJLFlBQW9CLENBQUM7QUFDekIsSUFBSyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEtBQUssRUFBRztJQUN0QyxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0MsWUFBWSxHQUFHLFNBQVMsQ0FBQztDQUM1QjtLQUFNO0lBQ0gsYUFBYSxHQUFHLFNBQVMsQ0FBQztJQUMxQixZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDbEQ7QUFFRCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBRWpFLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUd4RSxNQUFNLG9CQUFvQixHQUFHLElB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O1FBQy9ELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0NBQ0osQ0FBQyxDQUFDO0FBR0gsTUFBTSxDQUFDLE9BQU8sR0FBRztJQUNiLFdBQVc7Q0FDZCxDQUFDO0FBRUYsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGlzIHJlcXVpcmVkIGJ5IHRoZSBpbmRleC5odG1sIGZpbGUgYW5kIHdpbGxcbi8vIGJlIGV4ZWN1dGVkIGluIHRoZSByZW5kZXJlciBwcm9jZXNzIGZvciB0aGF0IHdpbmRvdy5cbi8vIE5vIE5vZGUuanMgQVBJcyBhcmUgYXZhaWxhYmxlIGluIHRoaXMgcHJvY2VzcyBiZWNhdXNlXG4vLyBgbm9kZUludGVncmF0aW9uYCBpcyB0dXJuZWQgb2ZmLiBVc2UgYHByZWxvYWQuanNgIHRvXG4vLyBzZWxlY3RpdmVseSBlbmFibGUgZmVhdHVyZXMgbmVlZGVkIGluIHRoZSByZW5kZXJpbmdcbi8vIHByb2Nlc3MuXG5cblxuY29uc3QgeyByZW1vdGUgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5jb25zdCBhcmd2YXJzID0gcmVtb3RlLnByb2Nlc3MuYXJndi5zbGljZSgyKS5tYXAocyA9PiBzLnRvTG93ZXJDYXNlKCkpO1xuY29uc3QgREVCVUcgPSBhcmd2YXJzLmluY2x1ZGVzKCdkZWJ1ZycpO1xuY29uc3QgRFJZUlVOID0gYXJndmFycy5pbmNsdWRlcygnZHJ5LXJ1bicpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbi8vIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmxldCBST09UX1BBVEhfQUJTOiBzdHJpbmc7XG5sZXQgU1JDX1BBVEhfQUJTOiBzdHJpbmc7XG5pZiAoIHBhdGguYmFzZW5hbWUoX19kaXJuYW1lKSA9PT0gJ3NyYycgKSB7XG4gICAgUk9PVF9QQVRIX0FCUyA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicpO1xuICAgIFNSQ19QQVRIX0FCUyA9IF9fZGlybmFtZTtcbn0gZWxzZSB7XG4gICAgUk9PVF9QQVRIX0FCUyA9IF9fZGlybmFtZTtcbiAgICBTUkNfUEFUSF9BQlMgPSBwYXRoLmpvaW4oUk9PVF9QQVRIX0FCUywgJ3NyYycpO1xufVxuLy8gL3NyYy90ZW1wbGF0ZXNcbmNvbnN0IFRFTVBMQVRFU19QQVRIX0FCUyA9IHBhdGguam9pbihST09UX1BBVEhfQUJTLCAndGVtcGxhdGVzJyk7XG4vLyAvc3JjL3RlbXBsYXRlcy9TYWxhbWFuZGVyXG5jb25zdCBTQUxBTUFOREVSX1BBVEhfQUJTID0gcGF0aC5qb2luKFRFTVBMQVRFU19QQVRIX0FCUywgJ1NhbGFtYW5kZXInKTtcblxuLy8gL3NyYy9leHBlcmltZW50c1xuY29uc3QgRVhQRVJJTUVOVFNfUEFUSF9BQlMgPSBwYXRoLmpvaW4oU1JDX1BBVEhfQUJTLCAnZXhwZXJpbWVudHMnKTtcbi8vIC9zcmMvZXhwZXJpbWVudHMvdHJ1dGhzXG5jb25zdCBUUlVUSFNfUEFUSF9BQlMgPSBwYXRoLmpvaW4oRVhQRVJJTUVOVFNfUEFUSF9BQlMsICd0cnV0aHMnKTtcbi8vIC9zcmMvZXhwZXJpbWVudHMvY29uZmlnc1xuY29uc3QgQ09ORklHU19QQVRIX0FCUyA9IHBhdGguam9pbihFWFBFUklNRU5UU19QQVRIX0FCUywgJ2NvbmZpZ3MnKTtcbi8vIC9zcmMvZXhwZXJpbWVudHMvc3ViamVjdHNcbmNvbnN0IFNVQkpFQ1RTX1BBVEhfQUJTID0gcGF0aC5qb2luKEVYUEVSSU1FTlRTX1BBVEhfQUJTLCAnc3ViamVjdHMnKTtcbnByb2Nlc3MuZW52LlJPT1RfUEFUSF9BQlMgPSBST09UX1BBVEhfQUJTO1xucHJvY2Vzcy5lbnYuU1JDX1BBVEhfQUJTID0gU1JDX1BBVEhfQUJTO1xuXG5wcm9jZXNzLmVudi5URU1QTEFURVNfUEFUSF9BQlMgPSBURU1QTEFURVNfUEFUSF9BQlM7XG5wcm9jZXNzLmVudi5TQUxBTUFOREVSX1BBVEhfQUJTID0gU0FMQU1BTkRFUl9QQVRIX0FCUztcblxucHJvY2Vzcy5lbnYuRVhQRVJJTUVOVFNfUEFUSF9BQlMgPSBFWFBFUklNRU5UU19QQVRIX0FCUztcbnByb2Nlc3MuZW52LlRSVVRIU19QQVRIX0FCUyA9IFRSVVRIU19QQVRIX0FCUztcbnByb2Nlc3MuZW52LkNPTkZJR1NfUEFUSF9BQlMgPSBDT05GSUdTX1BBVEhfQUJTO1xucHJvY2Vzcy5lbnYuU1VCSkVDVFNfUEFUSF9BQlMgPSBTVUJKRUNUU19QQVRIX0FCUztcblxuLy8gKiogIFB5dGhvblNoZWxsXG5jb25zdCB7IFB5dGhvblNoZWxsIH0gPSByZXF1aXJlKFwicHl0aG9uLXNoZWxsXCIpO1xuY29uc3QgZW5naW5lUGF0aCA9IHBhdGguam9pbihST09UX1BBVEhfQUJTLCBcInNyY1wiLCBcImVuZ2luZVwiKTtcbmNvbnN0IHB5RXhlY1BhdGggPSBwYXRoLmpvaW4oZW5naW5lUGF0aCwgcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gXCJsaW51eFwiID8gXCJlbnYvYmluL3B5dGhvblwiIDogXCJlbnYvU2NyaXB0cy9weXRob24uZXhlXCIpO1xuY29uc29sZS5ncm91cChgcmVuZGVyZXIudHNgKTtcbmNvbnNvbGUudGFibGUoe1xuICAgIF9fZGlybmFtZSwgUk9PVF9QQVRIX0FCUywgU1JDX1BBVEhfQUJTLFxuICAgIFRFTVBMQVRFU19QQVRIX0FCUyxcbiAgICBTQUxBTUFOREVSX1BBVEhfQUJTLFxuICAgIEVYUEVSSU1FTlRTX1BBVEhfQUJTLFxuICAgIFRSVVRIU19QQVRIX0FCUyxcbiAgICBDT05GSUdTX1BBVEhfQUJTLFxuICAgIFNVQkpFQ1RTX1BBVEhfQUJTLFxuICAgIERFQlVHLCBEUllSVU4sXG4gICAgZW5naW5lUGF0aCwgcHlFeGVjUGF0aFxufSk7XG4vKmNvbnN0IHsgc3Bhd25TeW5jIH0gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG4gY29uc3QgeyBvdXRwdXQgfSA9IHNwYXduU3luYyhQeXRob25TaGVsbC5nZXRQeXRob25QYXRoKCksIFsgJy1jIHByaW50KFwiaGlcIiknIF0pO1xuIGlmICggb3V0cHV0ID09PSBudWxsICkge1xuIC8vIFRPRE86IHRlc3RcbiBjb25zb2xlLmVycm9yKGBTcGF3bmluZyBhIFB5dGhvblNoZWxsLmdldFB5dGhvblBhdGgoKSBmYWlsZWRgKTtcbiBwcm9jZXNzLmV4aXQoMCk7XG4gfSovXG5QeXRob25TaGVsbC5kZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBweXRob25QYXRoIDogcHlFeGVjUGF0aCxcbiAgICAvLyBzY3JpcHRQYXRoIDogZW5naW5lUGF0aCxcbiAgICBweXRob25PcHRpb25zIDogWyAnLU9PJyBdLFxufTtcblxuXG5QeXRob25TaGVsbC5wcm90b3R5cGUucnVuQXN5bmMgPSBmdW5jdGlvbiAoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gW107XG4gICAgICAgIHRoaXMub24oJ21lc3NhZ2UnLCBtZXNzYWdlID0+IG1lc3NhZ2VzLnB1c2gobWVzc2FnZSkpO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZW5kKChlcnIsIGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgICAgICAgaWYgKCBlcnIgKSByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZXMpXG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblB5dGhvblNoZWxsLm15cnVuID0gZnVuY3Rpb24gKHNjcmlwdFBhdGg6IHN0cmluZywgb3B0aW9ucyA9IHsgYXJncyA6IFtdLCBweXRob25PcHRpb25zIDogWyAnLU9PJyBdIH0sIGNhbGxiYWNrKSB7XG4gICAgXG4gICAgaWYgKCBzY3JpcHRQYXRoLnN0YXJ0c1dpdGgoJy1tJykgKSB7XG4gICAgICAgIHNjcmlwdFBhdGggPSBzY3JpcHRQYXRoLnNsaWNlKDMpO1xuICAgICAgICBpZiAoICFvcHRpb25zLnB5dGhvbk9wdGlvbnMgKSB7XG4gICAgICAgICAgICBvcHRpb25zLnB5dGhvbk9wdGlvbnMgPSBbICctbScgXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCAhb3B0aW9ucy5weXRob25PcHRpb25zLmluY2x1ZGVzKCctbScpICkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucHl0aG9uT3B0aW9ucy5wdXNoKCctbScpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgb3B0aW9ucy5hcmdzID0gWyBST09UX1BBVEhfQUJTLCAuLi5vcHRpb25zLmFyZ3MgXTtcbiAgICBpZiAoIERFQlVHIClcbiAgICAgICAgb3B0aW9ucy5hcmdzLnB1c2goJ2RlYnVnJyk7XG4gICAgaWYgKCBEUllSVU4gKVxuICAgICAgICBvcHRpb25zLmFyZ3MucHVzaCgnZHJ5LXJ1bicpO1xuICAgIGlmICggIWNhbGxiYWNrICkge1xuICAgICAgICBjYWxsYmFjayA9IChlcnIsIG91dHB1dCkgPT4ge1xuICAgICAgICAgICAgaWYgKCBlcnIgKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBvdXRwdXQgKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAlYyR7c2NyaXB0UGF0aH1cXG5gLCAnZm9udC13ZWlnaHQ6IGJvbGQnLCBvdXRwdXQuam9pbignXFxuJykpXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFB5dGhvblNoZWxsLnJ1bihzY3JpcHRQYXRoLCBvcHRpb25zLCBjYWxsYmFjaylcbn07XG5cblxuUHl0aG9uU2hlbGwubXlydW4oXCItbSBjaGVja3MuZGlyc1wiKTtcbi8vICoqICBFbGVjdHJvbiBTdG9yZVxuY29uc3QgU3RvcmUgPSBuZXcgKHJlcXVpcmUoXCJlbGVjdHJvbi1zdG9yZVwiKSkoKTtcblxuLy8gY29uc3QgTXlTdG9yZSA9IHJlcXVpcmUoXCIuL015U3RvcmVcIik7XG5cbi8vIGNvbnN0IEVTdG9yZSA9IG5ldyBNeVN0b3JlLk15U3RvcmUodHJ1ZSk7XG5jb25zb2xlLmxvZyhgU3RvcmUucGF0aDogYCwgU3RvcmUucGF0aCk7XG5QeXRob25TaGVsbC5teXJ1bihcIi1tIGNoZWNrcy5jb25maWdcIiwgeyBhcmdzIDogWyBTdG9yZS5wYXRoIF0gfSk7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5wcm90b3R5cGUsIFwia2V5c1wiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLFxuICAgIHZhbHVlKCk6IEFycmF5PHN0cmluZyB8IG51bWJlcj4ge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzKS5tYXAoa2V5ID0+IGtleS5pc2RpZ2l0KClcbiAgICAgICAgICAgID8gcGFyc2VJbnQoa2V5KSA6IGtleSk7XG4gICAgfVxufSk7XG4vLyAqKiAgQXJyYXlcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwibGFzdFwiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLFxuICAgIHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIH1cbn0sKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwibG93ZXJBbGxcIiwge1xuICAgIGVudW1lcmFibGUgOiBmYWxzZSxcbiAgICB2YWx1ZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAocyA9PiBzLmxvd2VyKCkpO1xuICAgIH1cbn0sKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwicnNvcnRcIiwge1xuICAgIGVudW1lcmFibGUgOiBmYWxzZSxcbiAgICB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydCgobiwgbSkgPT4gbiA8IG0pO1xuICAgIH1cbn0sKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsIFwiY291bnRcIiwge1xuICAgIGVudW1lcmFibGUgOiBmYWxzZSxcbiAgICB2YWx1ZShpdGVtOiBhbnksIHN0cmljdCA9IGZhbHNlKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IF9jb3VudCA9IDA7XG4gICAgICAgIGZvciAoIGxldCB4IG9mIHRoaXMgKSB7XG4gICAgICAgICAgICBpZiAoIHN0cmljdCApIHtcbiAgICAgICAgICAgICAgICBpZiAoIHggPT09IGl0ZW0gKVxuICAgICAgICAgICAgICAgICAgICBfY291bnQrKztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHggPT0gaXRlbSApIHtcbiAgICAgICAgICAgICAgICBfY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2NvdW50O1xuICAgICAgICBcbiAgICB9XG4gICAgXG59LCk7XG4vLyAqKiBTdHJpbmdcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcInVwVG9cIiwge1xuICAgIGVudW1lcmFibGUgOiBmYWxzZSxcbiAgICB2YWx1ZShzZWFyY2hTdHJpbmc6IHN0cmluZywgc2VhcmNoRnJvbUVuZCA9IGZhbHNlKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGVuZCA9IHNlYXJjaEZyb21FbmRcbiAgICAgICAgICAgID8gdGhpcy5sYXN0SW5kZXhPZihzZWFyY2hTdHJpbmcpXG4gICAgICAgICAgICA6IHRoaXMuaW5kZXhPZihzZWFyY2hTdHJpbmcpO1xuICAgICAgICBpZiAoIGVuZCA9PT0gLTEgKVxuICAgICAgICAgICAgY29uc29sZS53YXJuKGAke3RoaXMudmFsdWVPZigpfS51cFRvKCR7c2VhcmNoU3RyaW5nfSwke3NlYXJjaEZyb21FbmR9KSBpbmRleCBpcyAtMWApO1xuICAgICAgICByZXR1cm4gdGhpcy5zbGljZSgwLCBlbmQpO1xuICAgIH1cbn0sKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcImluXCIsIHtcbiAgICBlbnVtZXJhYmxlIDogZmFsc2UsXG4gICAgdmFsdWUoYXJyOiBhbnlbXSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gYXJyLmluY2x1ZGVzKHRoaXMudmFsdWVPZigpKTtcbiAgICB9XG59LCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgXCJsb3dlclwiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLFxuICAgIHZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxufSwpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsIFwidXBwZXJcIiwge1xuICAgIGVudW1lcmFibGUgOiBmYWxzZSxcbiAgICB2YWx1ZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbn0sKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcInRpdGxlXCIsIHtcbiAgICBlbnVtZXJhYmxlIDogZmFsc2UsXG4gICAgdmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgXG4gICAgICAgIGlmICggdGhpcy5pbmNsdWRlcygnICcpIClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNwbGl0KCcgJykubWFwKHN0ciA9PiBzdHIudGl0bGUoKSkuam9pbignICcpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gdGhpc1swXS51cHBlcigpICsgdGhpcy5zbGljZSgxLCB0aGlzLmxlbmd0aCkubG93ZXIoKTtcbiAgICAgICAgXG4gICAgfVxufSwpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsIFwiaXNkaWdpdFwiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLFxuICAgIHZhbHVlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIWlzTmFOKE1hdGguZmxvb3IodGhpcykpO1xuICAgIH1cbn0sKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcInJlbW92ZUFsbFwiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLFxuICAgIFxuICAgIHZhbHVlKHJlbW92ZVZhbHVlLCAuLi5yZW1vdmVWYWx1ZXMpIHtcbiAgICAgICAgbGV0IHRlbXAgPSB0aGlzO1xuICAgICAgICBmb3IgKCBsZXQgdmFsdWUgb2YgWyByZW1vdmVWYWx1ZSwgLi4ucmVtb3ZlVmFsdWVzIF0gKVxuICAgICAgICAgICAgdGVtcCA9IHRlbXAucmVwbGFjZUFsbCh2YWx1ZSwgJycpO1xuICAgICAgICByZXR1cm4gdGVtcDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcInJlcGxhY2VBbGxcIiwge1xuICAgIGVudW1lcmFibGUgOiBmYWxzZSxcbiAgICBcbiAgICB2YWx1ZShzZWFyY2hWYWx1ZTogKHN0cmluZyB8IG51bWJlcikgfCBUTWFwPHN0cmluZz4sIHJlcGxhY2VWYWx1ZT86IHN0cmluZykge1xuICAgICAgICBjb25zdCB0eXBlID0gdHlwZW9mIHNlYXJjaFZhbHVlO1xuICAgICAgICBpZiAoIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICdudW1iZXInICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgICAgICAuc3BsaXQoc2VhcmNoVmFsdWUpXG4gICAgICAgICAgICAgICAgLmpvaW4ocmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ29iamVjdCcgKSB7XG4gICAgICAgICAgICBsZXQgdGVtcCA9IHRoaXM7XG4gICAgICAgICAgICBmb3IgKCBsZXQgWyBzdiwgcnYgXSBvZiBPYmplY3QuZW50cmllcyhzZWFyY2hWYWx1ZSkgKVxuICAgICAgICAgICAgICAgIHRlbXAgPSB0ZW1wLnJlcGxhY2VBbGwoc3YsIHJ2KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRlbXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYHJlcGxhY2VBbGwgZ290IGEgYmFkIHR5cGUsIHNlYXJjaFZhbHVlOiAke3NlYXJjaFZhbHVlfSwgdHlwZTogJHt0eXBlfWApO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG59KTtcbi8vICoqICBOdW1iZXJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShOdW1iZXIucHJvdG90eXBlLCBcImh1bWFuXCIsIHtcbiAgICBlbnVtZXJhYmxlIDogZmFsc2UsXG4gICAgdmFsdWUobGV0dGVycyA9IGZhbHNlKSB7XG4gICAgICAgIHN3aXRjaCAoIE1hdGguZmxvb3IodGhpcykgKyAxICkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgID8gXCJ6ZXJvdGhcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiMHRoXCI7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyBcImZpcnN0XCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjFzdFwiO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgID8gXCJzZWNvbmRcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiMm5kXCI7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyBcInRoaXJkXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjNyZFwiO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgID8gXCJmb3VydGhcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiNHRoXCI7XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyBcImZpZnRoXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjV0aFwiO1xuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgID8gXCJzaXh0aFwiXG4gICAgICAgICAgICAgICAgICAgIDogXCI2dGhcIjtcbiAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyc1xuICAgICAgICAgICAgICAgICAgICA/IFwic2V2ZW50aFwiXG4gICAgICAgICAgICAgICAgICAgIDogXCI3dGhcIjtcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyc1xuICAgICAgICAgICAgICAgICAgICA/IFwiZWlnaHRoXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjh0aFwiO1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgID8gXCJuaW50aFwiXG4gICAgICAgICAgICAgICAgICAgIDogXCI5dGhcIjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7TWF0aC5mbG9vcih0aGlzKSArIDF9dGhgO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbn0pO1xuLy8gKiogIERhdGVcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRlLnByb3RvdHlwZSwgXCJodW1hblwiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLCB2YWx1ZSgpIHtcbiAgICAgICAgbGV0IGQgPSB0aGlzLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgZCA9IGQgPCAxMCA/IGAwJHtkfWAgOiBkO1xuICAgICAgICBsZXQgbSA9IHRoaXMuZ2V0TW9udGgoKSArIDE7XG4gICAgICAgIG0gPSBtIDwgMTAgPyBgMCR7bX1gIDogbTtcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMudG9UaW1lU3RyaW5nKCkuc2xpY2UoMCwgOCkucmVwbGFjZUFsbCgnOicsICctJyk7XG4gICAgICAgIHJldHVybiBgJHtkfV8ke219XyR7eX1fJHt0fWA7XG4gICAgfVxufSk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUHl0aG9uU2hlbGxcbn07XG5cbmNvbnNvbGUuZ3JvdXBFbmQoKTtcbiJdfQ==