console.group(`renderer.ts`);
const { remote } = require('electron');
const argvars = remote.process.argv.slice(2).map(s => s.toLowerCase());
const DEBUG = argvars.includes('debug');
const DRYRUN = argvars.includes('dry-run');
const NOPYTHON = argvars.includes('no-python');
const path = require('path');
let ROOT_PATH_ABS;
let SRC_PATH_ABS;
if (path.basename(__dirname) === 'src') {
    ROOT_PATH_ABS = path.join(__dirname, '..');
    SRC_PATH_ABS = __dirname;
}
else {
    ROOT_PATH_ABS = __dirname;
    SRC_PATH_ABS = path.join(ROOT_PATH_ABS, 'src');
}
const TEMPLATES_PATH_ABS = path.join(ROOT_PATH_ABS, 'templates');
const SALAMANDER_PATH_ABS = path.join(TEMPLATES_PATH_ABS, 'Salamander');
const EXPERIMENTS_PATH_ABS = path.join(SRC_PATH_ABS, 'experiments');
const TRUTHS_PATH_ABS = path.join(EXPERIMENTS_PATH_ABS, 'truths');
const CONFIGS_PATH_ABS = path.join(EXPERIMENTS_PATH_ABS, 'configs');
const SUBJECTS_PATH_ABS = path.join(EXPERIMENTS_PATH_ABS, 'subjects');
console.table({
    __dirname,
    ROOT_PATH_ABS,
    SRC_PATH_ABS,
    TEMPLATES_PATH_ABS,
    SALAMANDER_PATH_ABS,
    EXPERIMENTS_PATH_ABS,
    TRUTHS_PATH_ABS,
    CONFIGS_PATH_ABS,
    SUBJECTS_PATH_ABS,
    DEBUG, DRYRUN, NOPYTHON
});
Object.defineProperty(Object.prototype, "keys", {
    enumerable: false,
    value() {
        return Object.keys(this).map(key => key.isdigit()
            ? parseInt(key) : key);
    }
});
Object.defineProperty(Array.prototype, "last", {
    enumerable: false,
    value() {
        return this[this.length - 1];
    }
});
Object.defineProperty(Array.prototype, "lowerAll", {
    enumerable: false,
    value() {
        return this.map(s => s.lower());
    }
});
Object.defineProperty(Array.prototype, "rsort", {
    enumerable: false,
    value() {
        return this.sort((n, m) => n < m);
    }
});
Object.defineProperty(Array.prototype, "count", {
    enumerable: false,
    value(item, strict = false) {
        let _count = 0;
        for (let x of this) {
            if (strict) {
                if (x === item)
                    _count++;
            }
            else if (x == item) {
                _count++;
            }
        }
        return _count;
    }
});
Object.defineProperty(String.prototype, "upTo", {
    enumerable: false,
    value(searchString, searchFromEnd = false) {
        let end = searchFromEnd
            ? this.lastIndexOf(searchString)
            : this.indexOf(searchString);
        if (end === -1)
            console.warn(`${this.valueOf()}.upTo(${searchString},${searchFromEnd}) index is -1`);
        return this.slice(0, end);
    }
});
Object.defineProperty(String.prototype, "in", {
    enumerable: false,
    value(arr) {
        return arr.includes(this.valueOf());
    }
});
Object.defineProperty(String.prototype, "lower", {
    enumerable: false,
    value() {
        return this.toLowerCase();
    }
});
Object.defineProperty(String.prototype, "upper", {
    enumerable: false,
    value() {
        return this.toUpperCase();
    }
});
Object.defineProperty(String.prototype, "title", {
    enumerable: false,
    value() {
        if (this.includes(' '))
            return this.split(' ').map(str => str.title()).join(' ');
        else
            return this[0].upper() + this.slice(1, this.length).lower();
    }
});
Object.defineProperty(String.prototype, "isdigit", {
    enumerable: false,
    value() {
        return !isNaN(Math.floor(this));
    }
});
Object.defineProperty(String.prototype, "removeAll", {
    enumerable: false,
    value(removeValue, ...removeValues) {
        let temp = this;
        for (let value of [removeValue, ...removeValues])
            temp = temp.replaceAll(value, '');
        return temp;
    }
});
Object.defineProperty(String.prototype, "replaceAll", {
    enumerable: false,
    value(searchValue, replaceValue) {
        const type = typeof searchValue;
        if (type === 'string' || type === 'number') {
            return this
                .split(searchValue)
                .join(replaceValue);
        }
        else if (type === 'object') {
            if (searchValue.compile) {
                let temp = this;
                let replaced = temp.replace(searchValue, replaceValue);
                while (replaced !== temp) {
                    temp = replaced;
                    replaced = replaced.replace(searchValue, replaceValue);
                }
                return replaced;
            }
            else {
                let temp = this;
                for (let [sv, rv] of Object.entries(searchValue))
                    temp = temp.replaceAll(sv, rv);
                return temp;
            }
        }
        else {
            console.warn(`replaceAll got a bad type, searchValue: ${searchValue}, type: ${type}`);
            return this;
        }
    }
});
Object.defineProperty(Number.prototype, "human", {
    enumerable: false,
    value(letters = false) {
        const floored = Math.floor(this);
        switch (floored) {
            case 0:
                return letters
                    ? "zeroth"
                    : "0th";
            case 1:
                return letters
                    ? "first"
                    : "1st";
            case 2:
                return letters
                    ? "second"
                    : "2nd";
            case 3:
                return letters
                    ? "third"
                    : "3rd";
            case 4:
                return letters
                    ? "fourth"
                    : "4th";
            case 5:
                return letters
                    ? "fifth"
                    : "5th";
            case 6:
                return letters
                    ? "sixth"
                    : "6th";
            case 7:
                return letters
                    ? "seventh"
                    : "7th";
            case 8:
                return letters
                    ? "eighth"
                    : "8th";
            case 9:
                return letters
                    ? "ninth"
                    : "9th";
            case 10:
                return letters
                    ? "tenth"
                    : "10th";
            case 11:
                return letters
                    ? "eleventh"
                    : "11th";
            case 12:
                return letters
                    ? "twelveth"
                    : "12th";
            case 13:
                return letters
                    ? "thirteenth"
                    : "13th";
            case 14:
                return letters
                    ? "fourteenth"
                    : "14th";
            case 15:
                return letters
                    ? "fifteenth"
                    : "15th";
            case 16:
                return letters
                    ? "sixteenth"
                    : "16th";
            case 17:
                return letters
                    ? "seventeenth"
                    : "17th";
            case 18:
                return letters
                    ? "eighteenth"
                    : "18th";
            case 19:
                return letters
                    ? "ninteenth"
                    : "19th";
            default:
                const stringed = floored.toString();
                const lastChar = stringed.slice(-1);
                let suffix;
                switch (lastChar) {
                    case "1":
                        suffix = "st";
                        break;
                    case "2":
                        suffix = "nd";
                        break;
                    case "3":
                        suffix = "rd";
                        break;
                    default:
                        suffix = "th";
                        break;
                }
                return `${floored}${suffix}`;
        }
    }
});
Object.defineProperty(Date.prototype, "human", {
    enumerable: false, value() {
        let d = this.getUTCDate();
        d = d < 10 ? `0${d}` : d;
        let m = this.getMonth() + 1;
        m = m < 10 ? `0${m}` : m;
        const y = this.getFullYear();
        const t = this.toTimeString().slice(0, 8).replaceAll(':', '-');
        return `${d}_${m}_${y}_${t}`;
    }
});
console.groupEnd();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZW5kZXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRTdCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDdkMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZFLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMzQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRS9DLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUU3QixJQUFJLGFBQXFCLENBQUM7QUFDMUIsSUFBSSxZQUFvQixDQUFDO0FBQ3pCLElBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxLQUFLLEVBQUc7SUFDdEMsYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNDLFlBQVksR0FBRyxTQUFTLENBQUM7Q0FDNUI7S0FBTTtJQUNILGFBQWEsR0FBRyxTQUFTLENBQUM7SUFDMUIsWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ2xEO0FBRUQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsQ0FB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QUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDakMsQ0FBQztDQUNKLENBQUMsQ0FBQztBQU9ILE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBpcyByZXF1aXJlZCBieSB0aGUgaW5kZXguaHRtbCBmaWxlIGFuZCB3aWxsXG4vLyBiZSBleGVjdXRlZCBpbiB0aGUgcmVuZGVyZXIgcHJvY2VzcyBmb3IgdGhhdCB3aW5kb3cuXG4vLyBObyBOb2RlLmpzIEFQSXMgYXJlIGF2YWlsYWJsZSBpbiB0aGlzIHByb2Nlc3MgYmVjYXVzZVxuLy8gYG5vZGVJbnRlZ3JhdGlvbmAgaXMgdHVybmVkIG9mZi4gVXNlIGBwcmVsb2FkLmpzYCB0b1xuLy8gc2VsZWN0aXZlbHkgZW5hYmxlIGZlYXR1cmVzIG5lZWRlZCBpbiB0aGUgcmVuZGVyaW5nXG4vLyBwcm9jZXNzLlxuY29uc29sZS5ncm91cChgcmVuZGVyZXIudHNgKTtcblxuY29uc3QgeyByZW1vdGUgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5jb25zdCBhcmd2YXJzID0gcmVtb3RlLnByb2Nlc3MuYXJndi5zbGljZSgyKS5tYXAocyA9PiBzLnRvTG93ZXJDYXNlKCkpO1xuY29uc3QgREVCVUcgPSBhcmd2YXJzLmluY2x1ZGVzKCdkZWJ1ZycpO1xuY29uc3QgRFJZUlVOID0gYXJndmFycy5pbmNsdWRlcygnZHJ5LXJ1bicpO1xuY29uc3QgTk9QWVRIT04gPSBhcmd2YXJzLmluY2x1ZGVzKCduby1weXRob24nKTtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4vLyBjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5sZXQgUk9PVF9QQVRIX0FCUzogc3RyaW5nO1xubGV0IFNSQ19QQVRIX0FCUzogc3RyaW5nO1xuaWYgKCBwYXRoLmJhc2VuYW1lKF9fZGlybmFtZSkgPT09ICdzcmMnICkge1xuICAgIFJPT1RfUEFUSF9BQlMgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nKTtcbiAgICBTUkNfUEFUSF9BQlMgPSBfX2Rpcm5hbWU7XG59IGVsc2Uge1xuICAgIFJPT1RfUEFUSF9BQlMgPSBfX2Rpcm5hbWU7XG4gICAgU1JDX1BBVEhfQUJTID0gcGF0aC5qb2luKFJPT1RfUEFUSF9BQlMsICdzcmMnKTtcbn1cbi8vIC9zcmMvdGVtcGxhdGVzXG5jb25zdCBURU1QTEFURVNfUEFUSF9BQlMgPSBwYXRoLmpvaW4oUk9PVF9QQVRIX0FCUywgJ3RlbXBsYXRlcycpO1xuLy8gL3NyYy90ZW1wbGF0ZXMvU2FsYW1hbmRlclxuY29uc3QgU0FMQU1BTkRFUl9QQVRIX0FCUyA9IHBhdGguam9pbihURU1QTEFURVNfUEFUSF9BQlMsICdTYWxhbWFuZGVyJyk7XG5cbi8vIC9zcmMvZXhwZXJpbWVudHNcbmNvbnN0IEVYUEVSSU1FTlRTX1BBVEhfQUJTID0gcGF0aC5qb2luKFNSQ19QQVRIX0FCUywgJ2V4cGVyaW1lbnRzJyk7XG4vLyAvc3JjL2V4cGVyaW1lbnRzL3RydXRoc1xuY29uc3QgVFJVVEhTX1BBVEhfQUJTID0gcGF0aC5qb2luKEVYUEVSSU1FTlRTX1BBVEhfQUJTLCAndHJ1dGhzJyk7XG4vLyAvc3JjL2V4cGVyaW1lbnRzL2NvbmZpZ3NcbmNvbnN0IENPTkZJR1NfUEFUSF9BQlMgPSBwYXRoLmpvaW4oRVhQRVJJTUVOVFNfUEFUSF9BQlMsICdjb25maWdzJyk7XG4vLyAvc3JjL2V4cGVyaW1lbnRzL3N1YmplY3RzXG5jb25zdCBTVUJKRUNUU19QQVRIX0FCUyA9IHBhdGguam9pbihFWFBFUklNRU5UU19QQVRIX0FCUywgJ3N1YmplY3RzJyk7XG4vKnByb2Nlc3MuZW52LlJPT1RfUEFUSF9BQlMgPSBST09UX1BBVEhfQUJTO1xuIHByb2Nlc3MuZW52LlNSQ19QQVRIX0FCUyA9IFNSQ19QQVRIX0FCUztcbiBcbiBwcm9jZXNzLmVudi5URU1QTEFURVNfUEFUSF9BQlMgPSBURU1QTEFURVNfUEFUSF9BQlM7XG4gcHJvY2Vzcy5lbnYuU0FMQU1BTkRFUl9QQVRIX0FCUyA9IFNBTEFNQU5ERVJfUEFUSF9BQlM7XG4gXG4gcHJvY2Vzcy5lbnYuRVhQRVJJTUVOVFNfUEFUSF9BQlMgPSBFWFBFUklNRU5UU19QQVRIX0FCUztcbiBwcm9jZXNzLmVudi5UUlVUSFNfUEFUSF9BQlMgPSBUUlVUSFNfUEFUSF9BQlM7XG4gcHJvY2Vzcy5lbnYuQ09ORklHU19QQVRIX0FCUyA9IENPTkZJR1NfUEFUSF9BQlM7XG4gcHJvY2Vzcy5lbnYuU1VCSkVDVFNfUEFUSF9BQlMgPSBTVUJKRUNUU19QQVRIX0FCUzsqL1xuXG4vLyAqKiAgUHl0aG9uU2hlbGxcblxuXG5jb25zb2xlLnRhYmxlKHtcbiAgICBfX2Rpcm5hbWUsXG4gICAgUk9PVF9QQVRIX0FCUyxcbiAgICBTUkNfUEFUSF9BQlMsXG4gICAgVEVNUExBVEVTX1BBVEhfQUJTLFxuICAgIFNBTEFNQU5ERVJfUEFUSF9BQlMsXG4gICAgRVhQRVJJTUVOVFNfUEFUSF9BQlMsXG4gICAgVFJVVEhTX1BBVEhfQUJTLFxuICAgIENPTkZJR1NfUEFUSF9BQlMsXG4gICAgU1VCSkVDVFNfUEFUSF9BQlMsXG4gICAgREVCVUcsIERSWVJVTiwgTk9QWVRIT05cbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LnByb3RvdHlwZSwgXCJrZXlzXCIsIHtcbiAgICBlbnVtZXJhYmxlIDogZmFsc2UsXG4gICAgdmFsdWUoKTogQXJyYXk8c3RyaW5nIHwgbnVtYmVyPiB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMpLm1hcChrZXkgPT4ga2V5LmlzZGlnaXQoKVxuICAgICAgICAgICAgPyBwYXJzZUludChrZXkpIDoga2V5KTtcbiAgICB9XG59KTtcbi8vICoqICBBcnJheVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJsYXN0XCIsIHtcbiAgICBlbnVtZXJhYmxlIDogZmFsc2UsXG4gICAgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgfVxufSwpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJsb3dlckFsbFwiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLFxuICAgIHZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcChzID0+IHMubG93ZXIoKSk7XG4gICAgfVxufSwpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJyc29ydFwiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLFxuICAgIHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3J0KChuLCBtKSA9PiBuIDwgbSk7XG4gICAgfVxufSwpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgXCJjb3VudFwiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLFxuICAgIHZhbHVlKGl0ZW06IGFueSwgc3RyaWN0ID0gZmFsc2UpOiBudW1iZXIge1xuICAgICAgICBsZXQgX2NvdW50ID0gMDtcbiAgICAgICAgZm9yICggbGV0IHggb2YgdGhpcyApIHtcbiAgICAgICAgICAgIGlmICggc3RyaWN0ICkge1xuICAgICAgICAgICAgICAgIGlmICggeCA9PT0gaXRlbSApXG4gICAgICAgICAgICAgICAgICAgIF9jb3VudCsrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBlbHNlIGlmICggeCA9PSBpdGVtICkge1xuICAgICAgICAgICAgICAgIF9jb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfY291bnQ7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbn0sKTtcbi8vICoqICBTdHJpbmdcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcInVwVG9cIiwge1xuICAgIGVudW1lcmFibGUgOiBmYWxzZSxcbiAgICB2YWx1ZShzZWFyY2hTdHJpbmc6IHN0cmluZywgc2VhcmNoRnJvbUVuZCA9IGZhbHNlKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGVuZCA9IHNlYXJjaEZyb21FbmRcbiAgICAgICAgICAgID8gdGhpcy5sYXN0SW5kZXhPZihzZWFyY2hTdHJpbmcpXG4gICAgICAgICAgICA6IHRoaXMuaW5kZXhPZihzZWFyY2hTdHJpbmcpO1xuICAgICAgICBpZiAoIGVuZCA9PT0gLTEgKVxuICAgICAgICAgICAgY29uc29sZS53YXJuKGAke3RoaXMudmFsdWVPZigpfS51cFRvKCR7c2VhcmNoU3RyaW5nfSwke3NlYXJjaEZyb21FbmR9KSBpbmRleCBpcyAtMWApO1xuICAgICAgICByZXR1cm4gdGhpcy5zbGljZSgwLCBlbmQpO1xuICAgIH1cbn0sKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcImluXCIsIHtcbiAgICBlbnVtZXJhYmxlIDogZmFsc2UsXG4gICAgdmFsdWUoYXJyOiBhbnlbXSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gYXJyLmluY2x1ZGVzKHRoaXMudmFsdWVPZigpKTtcbiAgICB9XG59LCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgXCJsb3dlclwiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLFxuICAgIHZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxufSwpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsIFwidXBwZXJcIiwge1xuICAgIGVudW1lcmFibGUgOiBmYWxzZSxcbiAgICB2YWx1ZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbn0sKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcInRpdGxlXCIsIHtcbiAgICBlbnVtZXJhYmxlIDogZmFsc2UsXG4gICAgdmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgXG4gICAgICAgIGlmICggdGhpcy5pbmNsdWRlcygnICcpIClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNwbGl0KCcgJykubWFwKHN0ciA9PiBzdHIudGl0bGUoKSkuam9pbignICcpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gdGhpc1swXS51cHBlcigpICsgdGhpcy5zbGljZSgxLCB0aGlzLmxlbmd0aCkubG93ZXIoKTtcbiAgICAgICAgXG4gICAgfVxufSwpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsIFwiaXNkaWdpdFwiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLFxuICAgIHZhbHVlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIWlzTmFOKE1hdGguZmxvb3IodGhpcykpO1xuICAgIH1cbn0sKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcInJlbW92ZUFsbFwiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLFxuICAgIFxuICAgIHZhbHVlKHJlbW92ZVZhbHVlLCAuLi5yZW1vdmVWYWx1ZXMpIHtcbiAgICAgICAgbGV0IHRlbXAgPSB0aGlzO1xuICAgICAgICBmb3IgKCBsZXQgdmFsdWUgb2YgWyByZW1vdmVWYWx1ZSwgLi4ucmVtb3ZlVmFsdWVzIF0gKVxuICAgICAgICAgICAgdGVtcCA9IHRlbXAucmVwbGFjZUFsbCh2YWx1ZSwgJycpO1xuICAgICAgICByZXR1cm4gdGVtcDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBcInJlcGxhY2VBbGxcIiwge1xuICAgIGVudW1lcmFibGUgOiBmYWxzZSxcbiAgICBcbiAgICB2YWx1ZShzZWFyY2hWYWx1ZTogKHN0cmluZyB8IG51bWJlciB8IFJlZ0V4cCkgfCBUTWFwPHN0cmluZz4sIHJlcGxhY2VWYWx1ZT86IHN0cmluZykge1xuICAgICAgICBjb25zdCB0eXBlID0gdHlwZW9mIHNlYXJjaFZhbHVlO1xuICAgICAgICBpZiAoIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICdudW1iZXInICkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgICAgICAuc3BsaXQoc2VhcmNoVmFsdWUpXG4gICAgICAgICAgICAgICAgLmpvaW4ocmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ29iamVjdCcgKSB7XG4gICAgICAgICAgICBpZiAoICg8UmVnRXhwPiBzZWFyY2hWYWx1ZSkuY29tcGlsZSApIHtcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgbGV0IHJlcGxhY2VkID0gdGVtcC5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICAgICAgICAgIHdoaWxlICggcmVwbGFjZWQgIT09IHRlbXAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXAgPSByZXBsYWNlZDtcbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZWQgPSByZXBsYWNlZC5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwbGFjZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gdGhpcztcbiAgICAgICAgICAgICAgICBmb3IgKCBsZXQgWyBzdiwgcnYgXSBvZiBPYmplY3QuZW50cmllcyhzZWFyY2hWYWx1ZSkgKVxuICAgICAgICAgICAgICAgICAgICB0ZW1wID0gdGVtcC5yZXBsYWNlQWxsKHN2LCBydik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlbXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYHJlcGxhY2VBbGwgZ290IGEgYmFkIHR5cGUsIHNlYXJjaFZhbHVlOiAke3NlYXJjaFZhbHVlfSwgdHlwZTogJHt0eXBlfWApO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG59KTtcbi8vICoqICBOdW1iZXJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShOdW1iZXIucHJvdG90eXBlLCBcImh1bWFuXCIsIHtcbiAgICBlbnVtZXJhYmxlIDogZmFsc2UsXG4gICAgdmFsdWUobGV0dGVycyA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGZsb29yZWQgPSBNYXRoLmZsb29yKHRoaXMpO1xuICAgICAgICBzd2l0Y2ggKCBmbG9vcmVkICkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgID8gXCJ6ZXJvdGhcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiMHRoXCI7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyBcImZpcnN0XCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjFzdFwiO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgID8gXCJzZWNvbmRcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiMm5kXCI7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyBcInRoaXJkXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjNyZFwiO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgID8gXCJmb3VydGhcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiNHRoXCI7XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyBcImZpZnRoXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjV0aFwiO1xuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgID8gXCJzaXh0aFwiXG4gICAgICAgICAgICAgICAgICAgIDogXCI2dGhcIjtcbiAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyc1xuICAgICAgICAgICAgICAgICAgICA/IFwic2V2ZW50aFwiXG4gICAgICAgICAgICAgICAgICAgIDogXCI3dGhcIjtcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyc1xuICAgICAgICAgICAgICAgICAgICA/IFwiZWlnaHRoXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjh0aFwiO1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgID8gXCJuaW50aFwiXG4gICAgICAgICAgICAgICAgICAgIDogXCI5dGhcIjtcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyBcInRlbnRoXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjEwdGhcIjtcbiAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyBcImVsZXZlbnRoXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjExdGhcIjtcbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyBcInR3ZWx2ZXRoXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjEydGhcIjtcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyBcInRoaXJ0ZWVudGhcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiMTN0aFwiO1xuICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyc1xuICAgICAgICAgICAgICAgICAgICA/IFwiZm91cnRlZW50aFwiXG4gICAgICAgICAgICAgICAgICAgIDogXCIxNHRoXCI7XG4gICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgIHJldHVybiBsZXR0ZXJzXG4gICAgICAgICAgICAgICAgICAgID8gXCJmaWZ0ZWVudGhcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiMTV0aFwiO1xuICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyc1xuICAgICAgICAgICAgICAgICAgICA/IFwic2l4dGVlbnRoXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjE2dGhcIjtcbiAgICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyBcInNldmVudGVlbnRoXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjE3dGhcIjtcbiAgICAgICAgICAgIGNhc2UgMTg6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlcnNcbiAgICAgICAgICAgICAgICAgICAgPyBcImVpZ2h0ZWVudGhcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiMTh0aFwiO1xuICAgICAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyc1xuICAgICAgICAgICAgICAgICAgICA/IFwibmludGVlbnRoXCJcbiAgICAgICAgICAgICAgICAgICAgOiBcIjE5dGhcIjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nZWQgPSBmbG9vcmVkLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdENoYXIgPSBzdHJpbmdlZC5zbGljZSgtMSk7XG4gICAgICAgICAgICAgICAgbGV0IHN1ZmZpeDtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKCBsYXN0Q2hhciApIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIjFcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1ZmZpeCA9IFwic3RcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiMlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gXCJuZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCIzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXggPSBcInJkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1ZmZpeCA9IFwidGhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7Zmxvb3JlZH0ke3N1ZmZpeH1gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cbn0pO1xuLy8gKiogIERhdGVcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRlLnByb3RvdHlwZSwgXCJodW1hblwiLCB7XG4gICAgZW51bWVyYWJsZSA6IGZhbHNlLCB2YWx1ZSgpIHtcbiAgICAgICAgbGV0IGQgPSB0aGlzLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgZCA9IGQgPCAxMCA/IGAwJHtkfWAgOiBkO1xuICAgICAgICBsZXQgbSA9IHRoaXMuZ2V0TW9udGgoKSArIDE7XG4gICAgICAgIG0gPSBtIDwgMTAgPyBgMCR7bX1gIDogbTtcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMudG9UaW1lU3RyaW5nKCkuc2xpY2UoMCwgOCkucmVwbGFjZUFsbCgnOicsICctJyk7XG4gICAgICAgIHJldHVybiBgJHtkfV8ke219XyR7eX1fJHt0fWA7XG4gICAgfVxufSk7XG5cblxuLyptb2R1bGUuZXhwb3J0cyA9IHtcbiBQeXRob25TaGVsbFxuIH07Ki9cblxuY29uc29sZS5ncm91cEVuZCgpO1xuIl19