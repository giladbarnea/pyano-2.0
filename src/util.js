"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const fs = require("fs");
const path = require("path");
const MyFs_1 = require("./MyFs");
function round(n, d = 0) {
    const fr = 10 ** d;
    return parseInt(n * fr) / fr;
}
function int(x, base) {
    return parseInt(x, base);
}
function str(val) {
    return val ? val.toString() : "";
}
exports.str = str;
function bool(val) {
    if (!val)
        return false;
    const typeofval = typeof val;
    if (typeofval !== 'object') {
        if (typeofval === 'function')
            return true;
        else
            return !!val;
    }
    let toStringed = {}.toString.call(val);
    if (toStringed === '[object Object]' || toStringed === '[object Array]')
        return Object.keys(val).length !== 0;
    return !!val.valueOf();
}
exports.bool = bool;
function enumerate(obj) {
    let typeofObj = typeof obj;
    if (obj === undefined
        || isEmptyObj(obj)
        || isEmptyArr(obj)
        || obj === "") {
        return [];
    }
    if (obj === null
        || typeofObj === "boolean"
        || typeofObj === "number"
        || typeofObj === "function") {
        throw new TypeError(`${typeofObj} object is not iterable`);
    }
    let array = [];
    if (isArray(obj)) {
        let i = 0;
        for (let x of obj) {
            array.push([i, x]);
            i++;
        }
    }
    else {
        for (let prop in obj) {
            array.push([prop, obj[prop]]);
        }
    }
    return array;
}
exports.enumerate = enumerate;
function wait(ms, acknowledgeSkipFade = true) {
    if (acknowledgeSkipFade) {
        if (require('./Glob').default.skipFade) {
            console.warn(`skipFade!`);
            return;
        }
    }
    if (!bool(ms)) {
        console.warn(`util.wait(${ms})`);
    }
    return new Promise(resolve => setTimeout(resolve, ms));
}
exports.wait = wait;
async function waitUntil(cond, checkInterval = 20, timeout = Infinity) {
    if (checkInterval <= 0)
        throw new Error(`checkInterval <= 0. checkInterval: ${checkInterval}`);
    if (checkInterval > timeout)
        throw new Error(`checkInterval > timeout (${checkInterval} > ${timeout}). Has to be lower than timeout.`);
    const loops = timeout / checkInterval;
    if (loops == 1)
        console.warn(`loops == 1, you probably didn't want this to happen`);
    let count = 0;
    while (count < loops) {
        if (cond()) {
            return true;
        }
        await wait(checkInterval, false);
        count++;
    }
    return false;
}
exports.waitUntil = waitUntil;
let stuff = {
    '()=>{}': () => {
    }, 'function(){}': function () {
    }, 'Function': Function,
    'Function()': Function(),
    "new Function": new Function,
    "new Function()": new Function(),
    "Boolean": Boolean,
    "Boolean()": Boolean(),
    "Boolean(false)": Boolean(false),
    "Boolean(true)": Boolean(true),
    "new Boolean": new Boolean,
    "new Boolean()": new Boolean(),
    "new Boolean(true)": new Boolean(true),
    "new Boolean(false)": new Boolean(false),
    "true": true,
    "false": false,
    "Number": Number,
    "Number()": Number(),
    "Number(0)": Number(0),
    "Number(1)": Number(1),
    "new Number": new Number,
    "new Number()": new Number(),
    "new Number(0)": new Number(0),
    "new Number(1)": new Number(1),
    "0": 0,
    "1": 1,
    "''": '',
    "' '": ' ',
    "'foo'": 'foo',
    "'0'": '0',
    "'1'": '1',
    "{}": {},
    "{ hi : 'bye' }": { hi: 'bye' },
    "[]": [],
    "[ false ]": [false],
    "[ true ]": [true],
    "[ [] ]": [[]],
    "[ 0 ]": [0],
    "[ 1 ]": [1],
    "undefined": undefined,
    "null": null,
    "document.body": document.body,
    "new class{}": new class {
    },
    "new Timeline(...)": "PLACEHOLDER",
};
function notnot(obj) {
    return !!obj;
}
function isArray(obj) {
    if (!obj)
        return false;
    return typeof obj !== 'string' && (Array.isArray(obj) || typeof obj[Symbol.iterator] === 'function');
}
exports.isArray = isArray;
function isEmpty(obj) {
    let toStringed = {}.toString.call(obj);
    return (toStringed === '[object Object]' || toStringed === '[object Array]') && Object.keys(obj).length == 0;
}
function isEmptyArr(collection) {
    return isArray(collection) && getLength(collection) === 0;
}
function isEmptyObj(obj) {
    return isObject(obj) && !isArray(obj) && Object.keys(obj).length === 0;
}
function isFunction(fn) {
    let toStringed = {}.toString.call(fn);
    return !!fn && toStringed === '[object Function]';
}
exports.isFunction = isFunction;
function isTMap(obj) {
    return {}.toString.call(obj) == '[object Object]';
}
function isObject(obj) {
    return typeof obj === 'object' && !!obj;
}
exports.isObject = isObject;
function shallowProperty(key) {
    return function (obj) {
        return obj == null ? void 0 : obj[key];
    };
}
function getLength(collection) {
    return shallowProperty('length')(collection);
}
function any(...args) {
    for (let a of args) {
        if (bool(a)) {
            return true;
        }
    }
    return false;
}
exports.any = any;
function all(...args) {
    for (let a of args) {
        if (!bool(a)) {
            return false;
        }
    }
    return true;
}
exports.all = all;
function sum(arr) {
    let sum = 0;
    let dirty = false;
    for (let v of arr) {
        let number = parseFloat(v);
        if (!isNaN(number)) {
            dirty = true;
            sum += number;
        }
    }
    return !dirty ? undefined : sum;
}
exports.sum = sum;
function getCurrentWindow() {
    return electron_1.remote.getCurrentWindow();
}
exports.getCurrentWindow = getCurrentWindow;
function reloadPage() {
    if (require("./Glob").default.BigConfig.dev.no_reload_on_submit()) {
        return console.warn('reloadPage(), no_reload_on_submit()');
    }
    getCurrentWindow().reload();
}
exports.reloadPage = reloadPage;
function* range(start, stop) {
    for (let i = start; i <= stop; i++)
        yield i;
}
exports.range = range;
async function takeScreenshot(dirname) {
    const webContents = electron_1.remote.getCurrentWebContents();
    const image = await webContents.capturePage();
    MyFs_1.default.createIfNotExists(SESSION_PATH_ABS);
    const dirnameAbs = path.join(SESSION_PATH_ABS, dirname);
    MyFs_1.default.createIfNotExists(dirnameAbs);
    fs.writeFileSync(path.join(dirnameAbs, 'page.png'), image.toPNG());
    return await webContents.savePage(path.join(dirnameAbs, 'screenshot.html'), "HTMLComplete");
}
exports.takeScreenshot = takeScreenshot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSx1Q0FBa0M7QUFDbEMseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixpQ0FBMEI7QUFHMUIsU0FBUyxLQUFLLENBQUMsQ0FBUyxFQUFFLElBQVksQ0FBQztJQUNuQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRW5CLE9BQU8sUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDakMsQ0FBQztBQUdELFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFpQztJQUM3QyxPQUFPLFFBQVEsQ0FBQyxDQUFDLEVBQVcsSUFBSSxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUVELFNBQVMsR0FBRyxDQUFDLEdBQVE7SUFDakIsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0FBQ3BDLENBQUM7QUFxakJHLGtCQUFHO0FBbmpCUCxTQUFTLElBQUksQ0FBQyxHQUFRO0lBK0NsQixJQUFLLENBQUMsR0FBRztRQUNMLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLE1BQU0sU0FBUyxHQUFHLE9BQU8sR0FBRyxDQUFDO0lBQzdCLElBQUssU0FBUyxLQUFLLFFBQVEsRUFBRztRQUMxQixJQUFLLFNBQVMsS0FBSyxVQUFVO1lBQ3pCLE9BQU8sSUFBSSxDQUFDOztZQUVaLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQztLQUNwQjtJQUVELElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLElBQUssVUFBVSxLQUFLLGlCQUFpQixJQUFJLFVBQVUsS0FBSyxnQkFBZ0I7UUFDcEUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FB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RCxnQkFBZ0IsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2hDLENBQUM7QUErQkcsZ0NBQVU7QUE3QmQsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQWEsRUFBRSxJQUFZO0lBQ3ZDLEtBQU0sSUFBSSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxFQUFFO1FBQy9CLE1BQU0sQ0FBQyxDQUFDO0FBRWhCLENBQUM7QUF3Qkcsc0JBQUs7QUFyQlQsS0FBSyxVQUFVLGNBQWMsQ0FBQyxPQUFlO0lBQ3pDLE1BQU0sV0FBVyxHQUFHLGlCQUFNLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUNuRCxNQUFNLEtBQUssR0FBRyxNQUFNLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM5QyxjQUFJLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN6QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hELGNBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNuQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLE9BQU8sTUFBTSxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDaEcsQ0FBQztBQVdHLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiLyoqaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwiLi4vdXRpbFwiXG4gKiB1dGlsLnJlbG9hZFBhZ2UoKTtcbiAqXG4gKiBpbXBvcnQge3JlbG9hZFBhZ2V9IGZyb20gXCIuLi91dGlsXCIqL1xuaW1wb3J0IHsgcmVtb3RlIH0gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgbXlmcyBmcm9tIFwiLi9NeUZzXCI7XG5cblxuZnVuY3Rpb24gcm91bmQobjogbnVtYmVyLCBkOiBudW1iZXIgPSAwKSB7XG4gICAgY29uc3QgZnIgPSAxMCAqKiBkO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gcGFyc2VJbnQobiAqIGZyKSAvIGZyO1xufVxuXG5cbmZ1bmN0aW9uIGludCh4LCBiYXNlPzogc3RyaW5nIHwgbnVtYmVyIHwgRnVuY3Rpb24pOiBudW1iZXIge1xuICAgIHJldHVybiBwYXJzZUludCh4LCA8bnVtYmVyPiBiYXNlKTtcbn1cblxuZnVuY3Rpb24gc3RyKHZhbDogYW55KSB7XG4gICAgcmV0dXJuIHZhbCA/IHZhbC50b1N0cmluZygpIDogXCJcIlxufVxuXG5mdW5jdGlvbiBib29sKHZhbDogYW55KTogYm9vbGVhbiB7XG4gICAgLy8gMCAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAxICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gJzAnICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vICcxJyAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyAnICcgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gJycgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnZm9vJyAgICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gKCk9Pnt9ICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIEJvb2xlYW4gICAgICAgICAgICAgIHRydWVcbiAgICAvLyBCb29sZWFuKCkgICAgICAgICAgICBmYWxzZVxuICAgIC8vIEJvb2xlYW4oZmFsc2UpICAgICAgIGZhbHNlXG4gICAgLy8gQm9vbGVhbih0cnVlKSAgICAgICAgdHJ1ZVxuICAgIC8vIEZ1bmN0aW9uICAgICAgICAgICAgIHRydWVcbiAgICAvLyBGdW5jdGlvbigpICAgICAgICAgICB0cnVlXG4gICAgLy8gTnVtYmVyICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIE51bWJlcigwKSAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gTnVtYmVyKDEpICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIE51bWJlcigpICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gWyAwIF0gICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIFsgMSBdICAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyBbIFtdIF0gICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gWyBmYWxzZSBdICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIFsgdHJ1ZSBdICAgICAgICAgICAgIHRydWVcbiAgICAvLyBbXSAgICAgICAgICAgICAgICAgICBmYWxzZSAgICAgICB1bmxpa2UgbmF0aXZlXG4gICAgLy8gZG9jdW1lbnQuYm9keSAgICAgICAgdHJ1ZVxuICAgIC8vIGZhbHNlICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gZnVuY3Rpb24oKXt9ICAgICAgICAgdHJ1ZVxuICAgIC8vIG5ldyBCb29sZWFuICAgICAgICAgIGZhbHNlICAgICAgIHVubGlrZSBuYXRpdmVcbiAgICAvLyBuZXcgQm9vbGVhbigpICAgICAgICBmYWxzZSAgICAgICB1bmxpa2UgbmF0aXZlXG4gICAgLy8gbmV3IEJvb2xlYW4oZmFsc2UpICAgZmFsc2UgICAgICAgdW5saWtlIG5hdGl2ZVxuICAgIC8vIG5ldyBCb29sZWFuKHRydWUpICAgIHRydWVcbiAgICAvLyBuZXcgRnVuY3Rpb24gICAgICAgICB0cnVlXG4gICAgLy8gbmV3IEZ1bmN0aW9uKCkgICAgICAgdHJ1ZVxuICAgIC8vIG5ldyBOdW1iZXIgICAgICAgICAgIGZhbHNlICAgICAgIHVubGlrZSBuYXRpdmVcbiAgICAvLyBuZXcgTnVtYmVyKDApICAgICAgICBmYWxzZSAgICAgICB1bmxpa2UgbmF0aXZlXG4gICAgLy8gbmV3IE51bWJlcigxKSAgICAgICAgdHJ1ZVxuICAgIC8vIG5ldyBOdW1iZXIoKSAgICAgICAgIGZhbHNlICAgICAgIHVubGlrZSBuYXRpdmVcbiAgICAvLyBuZXcgVGltZWxpbmUoLi4uKSAgICB0cnVlXG4gICAgLy8gbmV3IGNsYXNze30gICAgICAgICAgZmFsc2UgICAgICAgdW5saWtlIG5hdGl2ZVxuICAgIC8vIG51bGwgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gdHJ1ZSAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIHVuZGVmaW5lZCAgICAgICAgICAgIGZhbHNlXG4gICAgLy8geyBoaSA6ICdieWUnIH0gICAgICAgdHJ1ZVxuICAgIC8vIHt9ICAgICAgICAgICAgICAgICAgIGZhbHNlICAgICAgIHVubGlrZSBuYXRpdmVcbiAgICBcbiAgICBcbiAgICBpZiAoICF2YWwgKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgdHlwZW9mdmFsID0gdHlwZW9mIHZhbDtcbiAgICBpZiAoIHR5cGVvZnZhbCAhPT0gJ29iamVjdCcgKSB7XG4gICAgICAgIGlmICggdHlwZW9mdmFsID09PSAnZnVuY3Rpb24nIClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gISF2YWw7XG4gICAgfVxuICAgIC8vIGxldCBrZXlzTGVuZ3RoID0gT2JqZWN0LmtleXModmFsKS5sZW5ndGg7XG4gICAgbGV0IHRvU3RyaW5nZWQgPSB7fS50b1N0cmluZy5jYWxsKHZhbCk7XG4gICAgaWYgKCB0b1N0cmluZ2VkID09PSAnW29iamVjdCBPYmplY3RdJyB8fCB0b1N0cmluZ2VkID09PSAnW29iamVjdCBBcnJheV0nIClcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoICE9PSAwO1xuICAgIFxuICAgIC8vIEJvb2xlYW4sIE51bWJlciwgSFRNTEVsZW1lbnQuLi5cbiAgICByZXR1cm4gISF2YWwudmFsdWVPZigpO1xufVxuXG5mdW5jdGlvbiBlbnVtZXJhdGU8VD4ob2JqOiBUKTogRW51bWVyYXRlZDxUPiB7XG4gICAgLy8gdW5kZWZpbmVkICAgIFtdXG4gICAgLy8ge30gICAgICAgICAgIFtdXG4gICAgLy8gW10gICAgICAgICAgIFtdXG4gICAgLy8gXCJcIiAgICAgICAgICAgW11cbiAgICAvLyBudW1iZXIgICAgICAgVHlwZUVycm9yXG4gICAgLy8gbnVsbCAgICAgICAgIFR5cGVFcnJvclxuICAgIC8vIGJvb2xlYW4gICAgICBUeXBlRXJyb3JcbiAgICAvLyBGdW5jdGlvbiAgICAgVHlwZUVycm9yXG4gICAgLy8gXCJmb29cIiAgICAgICAgWyBbMCwgXCJmXCJdLCBbMSwgXCJvXCJdLCBbMiwgXCJvXCJdIF1cbiAgICAvLyBbIFwiZm9vXCIgXSAgICBbIFswLCBcImZvb1wiXSBdXG4gICAgLy8gWyAxMCBdICAgICAgIFsgWzAsIDEwXSBdXG4gICAgLy8geyBhOiBcImZvb1wiIH0gWyBbXCJhXCIsIFwiZm9vXCJdIF1cbiAgICAvLyAvLyAoKT0+e30gICAgP1xuICAgIGxldCB0eXBlb2ZPYmogPSB0eXBlb2Ygb2JqO1xuICAgIGlmIChcbiAgICAgICAgb2JqID09PSB1bmRlZmluZWRcbiAgICAgICAgfHwgaXNFbXB0eU9iaihvYmopXG4gICAgICAgIHx8IGlzRW1wdHlBcnIob2JqKVxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHx8IG9iaiA9PT0gXCJcIlxuICAgICkge1xuICAgICAgICByZXR1cm4gW10gYXMgRW51bWVyYXRlZDxUPjtcbiAgICB9XG4gICAgXG4gICAgaWYgKFxuICAgICAgICBvYmogPT09IG51bGxcbiAgICAgICAgfHwgdHlwZW9mT2JqID09PSBcImJvb2xlYW5cIlxuICAgICAgICB8fCB0eXBlb2ZPYmogPT09IFwibnVtYmVyXCJcbiAgICAgICAgfHwgdHlwZW9mT2JqID09PSBcImZ1bmN0aW9uXCJcbiAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0eXBlb2ZPYmp9IG9iamVjdCBpcyBub3QgaXRlcmFibGVgKTtcbiAgICB9XG4gICAgbGV0IGFycmF5ID0gW107XG4gICAgaWYgKCBpc0FycmF5KG9iaikgKSB7XG4gICAgICAgIGxldCBpOiBudW1iZXIgPSAwO1xuICAgICAgICBmb3IgKCBsZXQgeCBvZiBvYmogKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKFsgaSwgeCBdKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoIGxldCBwcm9wIGluIG9iaiApIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2goWyBwcm9wLCBvYmpbcHJvcF0gXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5IGFzIEVudW1lcmF0ZWQ8VD47XG59XG5cbmZ1bmN0aW9uIHdhaXQobXM6IG51bWJlciwgYWNrbm93bGVkZ2VTa2lwRmFkZSA9IHRydWUpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICggYWNrbm93bGVkZ2VTa2lwRmFkZSApIHtcbiAgICAgICAgXG4gICAgICAgIGlmICggcmVxdWlyZSgnLi9HbG9iJykuZGVmYXVsdC5za2lwRmFkZSApIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihgc2tpcEZhZGUhYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgKCBHbG9iLnNraXBGYWRlICkgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoICFib29sKG1zKSApIHtcbiAgICAgICAgY29uc29sZS53YXJuKGB1dGlsLndhaXQoJHttc30pYClcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuXG4vKipDaGVjayBldmVyeSBgY2hlY2tJbnRlcnZhbGAgbXMgaWYgYGNvbmQoKWAgaXMgdHJ1dGh5LiBJZiwgd2l0aGluIGB0aW1lb3V0YCwgY29uZCgpIGlzIHRydXRoeSwgcmV0dXJuIGB0cnVlYC4gUmV0dXJuIGBmYWxzZWAgaWYgdGltZSBpcyBvdXQuXG4gKiBAZXhhbXBsZVxuICogLy8gR2l2ZSB0aGUgdXNlciBhIDIwMG1zIGNoYW5jZSB0byBnZXQgaGVyIHBvaW50ZXIgb3ZlciBcIm15ZGl2XCIuIENvbnRpbnVlIGltbWVkaWF0ZWx5IG9uY2Ugc2hlIGRvZXMsIG9yIGFmdGVyIDIwMG1zIGlmIHNoZSBkb2Vzbid0LlxuICogbXlkaXYucG9pbnRlcmVudGVyKCAoKSA9PiBteWRpdi5wb2ludGVySG92ZXJpbmcgPSB0cnVlOyApXG4gKiBjb25zdCBwb2ludGVyT25NeWRpdiA9IGF3YWl0IHdhaXRVbnRpbCgoKSA9PiBteWRpdi5wb2ludGVySG92ZXJpbmcsIDIwMCwgMTApOyovXG5hc3luYyBmdW5jdGlvbiB3YWl0VW50aWwoY29uZDogRnVuY3Rpb25SZXR1cm5zPGJvb2xlYW4+LCBjaGVja0ludGVydmFsOiBudW1iZXIgPSAyMCwgdGltZW91dDogbnVtYmVyID0gSW5maW5pdHkpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZiAoIGNoZWNrSW50ZXJ2YWwgPD0gMCApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2hlY2tJbnRlcnZhbCA8PSAwLiBjaGVja0ludGVydmFsOiAke2NoZWNrSW50ZXJ2YWx9YCk7XG4gICAgaWYgKCBjaGVja0ludGVydmFsID4gdGltZW91dCApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2hlY2tJbnRlcnZhbCA+IHRpbWVvdXQgKCR7Y2hlY2tJbnRlcnZhbH0gPiAke3RpbWVvdXR9KS4gSGFzIHRvIGJlIGxvd2VyIHRoYW4gdGltZW91dC5gKTtcbiAgICBcbiAgICBjb25zdCBsb29wcyA9IHRpbWVvdXQgLyBjaGVja0ludGVydmFsO1xuICAgIGlmICggbG9vcHMgPT0gMSApXG4gICAgICAgIGNvbnNvbGUud2FybihgbG9vcHMgPT0gMSwgeW91IHByb2JhYmx5IGRpZG4ndCB3YW50IHRoaXMgdG8gaGFwcGVuYCk7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICB3aGlsZSAoIGNvdW50IDwgbG9vcHMgKSB7XG4gICAgICAgIGlmICggY29uZCgpICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgd2FpdChjaGVja0ludGVydmFsLCBmYWxzZSk7XG4gICAgICAgIGNvdW50Kys7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxubGV0IHN0dWZmID0ge1xuICAgICcoKT0+e30nIDogKCkgPT4ge1xuICAgIH0sICdmdW5jdGlvbigpe30nIDogZnVuY3Rpb24gKCkge1xuICAgIH0sICdGdW5jdGlvbicgOiBGdW5jdGlvbixcbiAgICAnRnVuY3Rpb24oKScgOiBGdW5jdGlvbigpLFxuICAgIFwibmV3IEZ1bmN0aW9uXCIgOiBuZXcgRnVuY3Rpb24sXG4gICAgXCJuZXcgRnVuY3Rpb24oKVwiIDogbmV3IEZ1bmN0aW9uKCksXG4gICAgXCJCb29sZWFuXCIgOiBCb29sZWFuLFxuICAgIFwiQm9vbGVhbigpXCIgOiBCb29sZWFuKCksXG4gICAgXCJCb29sZWFuKGZhbHNlKVwiIDogQm9vbGVhbihmYWxzZSksXG4gICAgXCJCb29sZWFuKHRydWUpXCIgOiBCb29sZWFuKHRydWUpLFxuICAgIFwibmV3IEJvb2xlYW5cIiA6IG5ldyBCb29sZWFuLFxuICAgIFwibmV3IEJvb2xlYW4oKVwiIDogbmV3IEJvb2xlYW4oKSxcbiAgICBcIm5ldyBCb29sZWFuKHRydWUpXCIgOiBuZXcgQm9vbGVhbih0cnVlKSxcbiAgICBcIm5ldyBCb29sZWFuKGZhbHNlKVwiIDogbmV3IEJvb2xlYW4oZmFsc2UpLFxuICAgIFwidHJ1ZVwiIDogdHJ1ZSxcbiAgICBcImZhbHNlXCIgOiBmYWxzZSxcbiAgICBcIk51bWJlclwiIDogTnVtYmVyLFxuICAgIFwiTnVtYmVyKClcIiA6IE51bWJlcigpLFxuICAgIFwiTnVtYmVyKDApXCIgOiBOdW1iZXIoMCksXG4gICAgXCJOdW1iZXIoMSlcIiA6IE51bWJlcigxKSxcbiAgICBcIm5ldyBOdW1iZXJcIiA6IG5ldyBOdW1iZXIsXG4gICAgXCJuZXcgTnVtYmVyKClcIiA6IG5ldyBOdW1iZXIoKSxcbiAgICBcIm5ldyBOdW1iZXIoMClcIiA6IG5ldyBOdW1iZXIoMCksXG4gICAgXCJuZXcgTnVtYmVyKDEpXCIgOiBuZXcgTnVtYmVyKDEpLFxuICAgIFwiMFwiIDogMCxcbiAgICBcIjFcIiA6IDEsXG4gICAgXCInJ1wiIDogJycsXG4gICAgXCInICdcIiA6ICcgJyxcbiAgICBcIidmb28nXCIgOiAnZm9vJyxcbiAgICBcIicwJ1wiIDogJzAnLFxuICAgIFwiJzEnXCIgOiAnMScsXG4gICAgXCJ7fVwiIDoge30sXG4gICAgXCJ7IGhpIDogJ2J5ZScgfVwiIDogeyBoaSA6ICdieWUnIH0sXG4gICAgXCJbXVwiIDogW10sXG4gICAgXCJbIGZhbHNlIF1cIiA6IFsgZmFsc2UgXSxcbiAgICBcIlsgdHJ1ZSBdXCIgOiBbIHRydWUgXSxcbiAgICBcIlsgW10gXVwiIDogWyBbXSBdLFxuICAgIFwiWyAwIF1cIiA6IFsgMCBdLFxuICAgIFwiWyAxIF1cIiA6IFsgMSBdLFxuICAgIFwidW5kZWZpbmVkXCIgOiB1bmRlZmluZWQsXG4gICAgXCJudWxsXCIgOiBudWxsLFxuICAgIFwiZG9jdW1lbnQuYm9keVwiIDogZG9jdW1lbnQuYm9keSxcbiAgICBcIm5ldyBjbGFzc3t9XCIgOiBuZXcgY2xhc3Mge1xuICAgIH0sXG4gICAgXCJuZXcgVGltZWxpbmUoLi4uKVwiIDogXCJQTEFDRUhPTERFUlwiLFxufTtcblxuXG5mdW5jdGlvbiBub3Rub3Qob2JqKSB7XG4gICAgLy8gLyAwICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gMSAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyAoKT0+e30gICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIGZ1bmN0aW9uKCl7fSAgICAgICB0cnVlXG4gICAgLy8gRnVuY3Rpb24gICAgICAgICAgIHRydWVcbiAgICAvLyBGdW5jdGlvbigpICAgICAgICAgdHJ1ZVxuICAgIC8vIG5ldyBGdW5jdGlvbigpICAgICB0cnVlXG4gICAgLy8gQm9vbGVhbiAgICAgICAgICAgIHRydWVcbiAgICAvLyAvICBCb29sZWFuKCkgICAgICAgZmFsc2VcbiAgICAvLyBuZXcgQm9vbGVhbigpICAgICAgdHJ1ZVxuICAgIC8vIG5ldyBCb29sZWFuKHRydWUpICB0cnVlXG4gICAgLy8gbmV3IEJvb2xlYW4oZmFsc2UpIHRydWVcbiAgICAvLyB0cnVlICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIC8gIGZhbHNlICAgICAgICAgICBmYWxzZVxuICAgIC8vIE51bWJlciAgICAgICAgICAgICB0cnVlXG4gICAgLy8gLyAgTnVtYmVyKCkgICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IE51bWJlcigpICAgICAgIHRydWVcbiAgICAvLyBuZXcgTnVtYmVyKDApICAgICAgdHJ1ZVxuICAgIC8vIG5ldyBOdW1iZXIoMSkgICAgICB0cnVlXG4gICAgLy8gLyAnJyAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJyAnICAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyAnMCcgICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vICcxJyAgICAgICAgICAgICAgICB0cnVlXG4gICAgLy8ge30gICAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyB7IGhpIDogJ2J5ZScgfSAgICAgdHJ1ZVxuICAgIC8vIFtdICAgICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gWyAxIF0gICAgICAgICAgICAgIHRydWVcbiAgICAvLyAvICB1bmRlZmluZWQgICAgICAgZmFsc2VcbiAgICAvLyAvICBudWxsICAgICAgICAgICAgZmFsc2VcbiAgICByZXR1cm4gISFvYmo7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXk8VD4ob2JqKTogb2JqIGlzIEFycmF5PFQ+IHsgLy8gc2FtZSBhcyBBcnJheS5pc0FycmF5XG4gICAgLy8gMCAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIDEgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnJyAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJyAnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICdmb28nICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnMCcgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJzEnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICgpPT57fSAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBCb29sZWFuICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gQm9vbGVhbigpICAgICAgICAgICBmYWxzZVxuICAgIC8vIEZ1bmN0aW9uICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBGdW5jdGlvbigpICAgICAgICAgIGZhbHNlXG4gICAgLy8gTnVtYmVyICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIE51bWJlcigpICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAvIFsgMSBdICAgICAgICAgICAgIHRydWVcbiAgICAvLyAvIFtdICAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyBmYWxzZSAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gZnVuY3Rpb24oKXt9ICAgICAgICBmYWxzZVxuICAgIC8vIG5ldyBCb29sZWFuKCkgICAgICAgZmFsc2VcbiAgICAvLyBuZXcgQm9vbGVhbihmYWxzZSkgIGZhbHNlXG4gICAgLy8gbmV3IEJvb2xlYW4odHJ1ZSkgICBmYWxzZVxuICAgIC8vIG5ldyBGdW5jdGlvbigpICAgICAgZmFsc2VcbiAgICAvLyBuZXcgTnVtYmVyKDApICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IE51bWJlcigxKSAgICAgICBmYWxzZVxuICAgIC8vIG5ldyBOdW1iZXIoKSAgICAgICAgZmFsc2VcbiAgICAvLyBudWxsICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gdHJ1ZSAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIHVuZGVmaW5lZCAgICAgICAgICAgZmFsc2VcbiAgICAvLyB7IGhpIDogJ2J5ZScgfSAgICAgIGZhbHNlXG4gICAgLy8ge30gICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIGlmICggIW9iaiApIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiAhPT0gJ3N0cmluZycgJiYgKEFycmF5LmlzQXJyYXkob2JqKSB8fCB0eXBlb2Ygb2JqW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbicpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5KG9iajogYW55KTogYm9vbGVhbiB7XG4gICAgLy8gMCAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIDEgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnJyAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJyAnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcwJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnMScgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gKCk9Pnt9ICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIEJvb2xlYW4gICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBCb29sZWFuKCkgICAgICAgICAgIGZhbHNlXG4gICAgLy8gRnVuY3Rpb24gICAgICAgICAgICBmYWxzZVxuICAgIC8vIEZ1bmN0aW9uKCkgICAgICAgICAgZmFsc2VcbiAgICAvLyBOdW1iZXIgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gTnVtYmVyKCkgICAgICAgICAgICBmYWxzZVxuICAgIC8vIFsgMSBdICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAvIFtdICAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyBmYWxzZSAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gZnVuY3Rpb24oKXt9ICAgICAgICBmYWxzZVxuICAgIC8vIG5ldyBCb29sZWFuKCkgICAgICAgZmFsc2VcbiAgICAvLyBuZXcgQm9vbGVhbihmYWxzZSkgIGZhbHNlXG4gICAgLy8gbmV3IEJvb2xlYW4odHJ1ZSkgICBmYWxzZVxuICAgIC8vIG5ldyBGdW5jdGlvbigpICAgICAgZmFsc2VcbiAgICAvLyBuZXcgTnVtYmVyKDApICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IE51bWJlcigxKSAgICAgICBmYWxzZVxuICAgIC8vIG5ldyBOdW1iZXIoKSAgICAgICAgZmFsc2VcbiAgICAvLyBudWxsICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gdHJ1ZSAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIHVuZGVmaW5lZCAgICAgICAgICAgZmFsc2VcbiAgICAvLyB7IGhpIDogJ2J5ZScgfSAgICAgIGZhbHNlXG4gICAgLy8gLyB7fSAgICAgICAgICAgICAgICB0cnVlXG4gICAgbGV0IHRvU3RyaW5nZWQgPSB7fS50b1N0cmluZy5jYWxsKG9iaik7XG4gICAgcmV0dXJuICh0b1N0cmluZ2VkID09PSAnW29iamVjdCBPYmplY3RdJyB8fCB0b1N0cmluZ2VkID09PSAnW29iamVjdCBBcnJheV0nKSAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PSAwO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5QXJyKGNvbGxlY3Rpb24pOiBib29sZWFuIHtcbiAgICAvLyAwICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gMSAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcnICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnICcgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJzAnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcxJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAoKT0+e30gICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gQm9vbGVhbiAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIEJvb2xlYW4oKSAgICAgICAgICAgZmFsc2VcbiAgICAvLyBGdW5jdGlvbiAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gRnVuY3Rpb24oKSAgICAgICAgICBmYWxzZVxuICAgIC8vIE51bWJlciAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBOdW1iZXIoKSAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gWyAxIF0gICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIC8gW10gICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIGZhbHNlICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBmdW5jdGlvbigpe30gICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IEJvb2xlYW4oKSAgICAgICBmYWxzZVxuICAgIC8vIG5ldyBCb29sZWFuKGZhbHNlKSAgZmFsc2VcbiAgICAvLyBuZXcgQm9vbGVhbih0cnVlKSAgIGZhbHNlXG4gICAgLy8gbmV3IEZ1bmN0aW9uKCkgICAgICBmYWxzZVxuICAgIC8vIG5ldyBOdW1iZXIoMCkgICAgICAgZmFsc2VcbiAgICAvLyBuZXcgTnVtYmVyKDEpICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IE51bWJlcigpICAgICAgICBmYWxzZVxuICAgIC8vIG51bGwgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyB0cnVlICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gdW5kZWZpbmVkICAgICAgICAgICBmYWxzZVxuICAgIC8vIHsgaGkgOiAnYnllJyB9ICAgICAgZmFsc2VcbiAgICAvLyB7fSAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgcmV0dXJuIGlzQXJyYXkoY29sbGVjdGlvbikgJiYgZ2V0TGVuZ3RoKGNvbGxlY3Rpb24pID09PSAwXG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlPYmoob2JqKTogYm9vbGVhbiB7XG4gICAgLy8gMCAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIDEgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnJyAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJyAnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcwJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnMScgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gKCk9Pnt9ICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIEJvb2xlYW4gICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBCb29sZWFuKCkgICAgICAgICAgIGZhbHNlXG4gICAgLy8gRnVuY3Rpb24gICAgICAgICAgICBmYWxzZVxuICAgIC8vIEZ1bmN0aW9uKCkgICAgICAgICAgZmFsc2VcbiAgICAvLyBOdW1iZXIgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gTnVtYmVyKCkgICAgICAgICAgICBmYWxzZVxuICAgIC8vIFsgMSBdICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBbXSAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gZmFsc2UgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIGZ1bmN0aW9uKCl7fSAgICAgICAgZmFsc2VcbiAgICAvLyAvIG5ldyBCb29sZWFuKCkgICAgIHRydWVcbiAgICAvLyAvIG5ldyBCb29sZWFuKGZhbHNlKXRydWVcbiAgICAvLyAvIG5ldyBCb29sZWFuKHRydWUpIHRydWVcbiAgICAvLyBuZXcgRnVuY3Rpb24oKSAgICAgIGZhbHNlXG4gICAgLy8gLyBuZXcgTnVtYmVyKDApICAgICB0cnVlXG4gICAgLy8gLyBuZXcgTnVtYmVyKDEpICAgICB0cnVlXG4gICAgLy8gLyBuZXcgTnVtYmVyKCkgICAgICB0cnVlXG4gICAgLy8gbnVsbCAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIHRydWUgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyB1bmRlZmluZWQgICAgICAgICAgIGZhbHNlXG4gICAgLy8geyBoaSA6ICdieWUnIH0gICAgICBmYWxzZVxuICAgIC8vIC8ge30gICAgICAgICAgICAgICAgdHJ1ZVxuICAgIHJldHVybiBpc09iamVjdChvYmopICYmICFpc0FycmF5KG9iaikgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDBcbn1cblxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uPFQ+KGZuOiBGdW5jdGlvblJldHVybnM8VD4pOiBmbiBpcyBGdW5jdGlvblJldHVybnM8VD5cbi8vIGZ1bmN0aW9uIGlzRnVuY3Rpb24oZm46IEFueUZ1bmN0aW9uKTogZm4gaXMgQW55RnVuY3Rpb25cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZm4pIHtcbiAgICAvLyAwICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gMSAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcnICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnICcgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJzAnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcxJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAvICgpPT57fSAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIC8gQm9vbGVhbiAgICAgICAgICAgICB0cnVlXG4gICAgLy8gQm9vbGVhbigpICAgICAgICAgICBmYWxzZVxuICAgIC8vIC8gRnVuY3Rpb24gICAgICAgICAgICB0cnVlXG4gICAgLy8gLyBGdW5jdGlvbigpICAgICAgICAgIHRydWVcbiAgICAvLyAvIE51bWJlciAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIE51bWJlcigpICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBbIDEgXSAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gW10gICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIGZhbHNlICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAvIGZ1bmN0aW9uKCl7fSAgICAgICAgdHJ1ZVxuICAgIC8vIG5ldyBCb29sZWFuKCkgICAgICAgZmFsc2VcbiAgICAvLyBuZXcgQm9vbGVhbihmYWxzZSkgIGZhbHNlXG4gICAgLy8gbmV3IEJvb2xlYW4odHJ1ZSkgICBmYWxzZVxuICAgIC8vIC8gbmV3IEZ1bmN0aW9uKCkgICAgICB0cnVlXG4gICAgLy8gbmV3IE51bWJlcigwKSAgICAgICBmYWxzZVxuICAgIC8vIG5ldyBOdW1iZXIoMSkgICAgICAgZmFsc2VcbiAgICAvLyBuZXcgTnVtYmVyKCkgICAgICAgIGZhbHNlXG4gICAgLy8gbnVsbCAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIHRydWUgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyB1bmRlZmluZWQgICAgICAgICAgIGZhbHNlXG4gICAgLy8geyBoaSA6ICdieWUnIH0gICAgICBmYWxzZVxuICAgIC8vIHt9ICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICBsZXQgdG9TdHJpbmdlZCA9IHt9LnRvU3RyaW5nLmNhbGwoZm4pO1xuICAgIHJldHVybiAhIWZuICYmIHRvU3RyaW5nZWQgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbn1cblxuZnVuY3Rpb24gaXNUTWFwPFQ+KG9iajogVE1hcDxUPik6IG9iaiBpcyBUTWFwPFQ+IHtcbiAgICAvLyAwICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gMSAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcnICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnICcgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJzAnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcxJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAoKT0+e30gICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gQm9vbGVhbiAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIEJvb2xlYW4oKSAgICAgICAgICAgZmFsc2VcbiAgICAvLyBGdW5jdGlvbiAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gRnVuY3Rpb24oKSAgICAgICAgICBmYWxzZVxuICAgIC8vIE51bWJlciAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBOdW1iZXIoKSAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gWyAxIF0gICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBbXSAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIGZhbHNlICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBmdW5jdGlvbigpe30gICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IEJvb2xlYW4oKSAgICAgZmFsc2VcbiAgICAvLyBuZXcgQm9vbGVhbihmYWxzZSlmYWxzZVxuICAgIC8vIG5ldyBCb29sZWFuKHRydWUpIGZhbHNlXG4gICAgLy8gbmV3IEZ1bmN0aW9uKCkgICAgICBmYWxzZVxuICAgIC8vIG5ldyBOdW1iZXIoMCkgICAgIGZhbHNlXG4gICAgLy8gbmV3IE51bWJlcigxKSAgICAgZmFsc2VcbiAgICAvLyBuZXcgTnVtYmVyKCkgICAgICBmYWxzZVxuICAgIC8vIG51bGwgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyB0cnVlICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gdW5kZWZpbmVkICAgICAgICAgICBmYWxzZVxuICAgIC8vIC8geyBoaSA6ICdieWUnIH0gICAgdHJ1ZVxuICAgIC8vIC8ge30gICAgICAgICAgICAgICAgdHJ1ZVxuICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuLy8gKiAgdW5kZXJzY29yZS5qc1xuZnVuY3Rpb24gaXNPYmplY3Qob2JqKTogYm9vbGVhbiB7XG4gICAgLy8gMCAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIDEgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnJyAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJyAnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcwJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnMScgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gKCk9Pnt9ICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIEJvb2xlYW4gICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBCb29sZWFuKCkgICAgICAgICAgIGZhbHNlXG4gICAgLy8gRnVuY3Rpb24gICAgICAgICAgICBmYWxzZVxuICAgIC8vIEZ1bmN0aW9uKCkgICAgICAgICAgZmFsc2VcbiAgICAvLyBOdW1iZXIgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gTnVtYmVyKCkgICAgICAgICAgICBmYWxzZVxuICAgIC8vIC8gWyAxIF0gICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIC8gW10gICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIGZhbHNlICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBmdW5jdGlvbigpe30gICAgICAgIGZhbHNlXG4gICAgLy8gLyBuZXcgQm9vbGVhbigpICAgICB0cnVlXG4gICAgLy8gLyBuZXcgQm9vbGVhbihmYWxzZSl0cnVlXG4gICAgLy8gLyBuZXcgQm9vbGVhbih0cnVlKSB0cnVlXG4gICAgLy8gbmV3IEZ1bmN0aW9uKCkgICAgICBmYWxzZVxuICAgIC8vIC8gbmV3IE51bWJlcigwKSAgICAgdHJ1ZVxuICAgIC8vIC8gbmV3IE51bWJlcigxKSAgICAgdHJ1ZVxuICAgIC8vIC8gbmV3IE51bWJlcigpICAgICAgdHJ1ZVxuICAgIC8vIG51bGwgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyB0cnVlICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gdW5kZWZpbmVkICAgICAgICAgICBmYWxzZVxuICAgIC8vIC8geyBoaSA6ICdieWUnIH0gICAgdHJ1ZVxuICAgIC8vIC8ge30gICAgICAgICAgICAgICAgdHJ1ZVxuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhIW9iajtcbn1cblxuXG5mdW5jdGlvbiBzaGFsbG93UHJvcGVydHk8VD4oa2V5OiBzdHJpbmcpOiAob2JqOiBUKSA9PiBUIGV4dGVuZHMgbnVsbCA/IHVuZGVmaW5lZCA6IFRba2V5b2YgVF0ge1xuICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIC8vID09IG51bGwgdHJ1ZSBmb3IgdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtrZXldO1xuICAgIH07XG59XG5cblxuZnVuY3Rpb24gZ2V0TGVuZ3RoKGNvbGxlY3Rpb24pOiBudW1iZXIge1xuICAgIHJldHVybiBzaGFsbG93UHJvcGVydHkoJ2xlbmd0aCcpKGNvbGxlY3Rpb24pXG59XG5cblxuZnVuY3Rpb24gYW55KC4uLmFyZ3M6IGFueVtdKTogYm9vbGVhbiB7XG4gICAgZm9yICggbGV0IGEgb2YgYXJncyApIHtcbiAgICAgICAgaWYgKCBib29sKGEpICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5cbmZ1bmN0aW9uIGFsbCguLi5hcmdzOiBhbnkpOiBib29sZWFuIHtcbiAgICBmb3IgKCBsZXQgYSBvZiBhcmdzICkge1xuICAgICAgICBpZiAoICFib29sKGEpICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5cbmZ1bmN0aW9uIHN1bShhcnI6IGFueVtdKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICBsZXQgc3VtID0gMDtcbiAgICBsZXQgZGlydHkgPSBmYWxzZTtcbiAgICBmb3IgKCBsZXQgdiBvZiBhcnIgKSB7XG4gICAgICAgIGxldCBudW1iZXIgPSBwYXJzZUZsb2F0KHYpO1xuICAgICAgICBpZiAoICFpc05hTihudW1iZXIpICkge1xuICAgICAgICAgICAgZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgc3VtICs9IG51bWJlcjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgcmV0dXJuICFkaXJ0eSA/IHVuZGVmaW5lZCA6IHN1bTtcbn1cblxuZnVuY3Rpb24gZ2V0Q3VycmVudFdpbmRvdygpIHtcbiAgICByZXR1cm4gcmVtb3RlLmdldEN1cnJlbnRXaW5kb3coKTtcbn1cblxuZnVuY3Rpb24gcmVsb2FkUGFnZSgpIHtcbiAgICBpZiAoIHJlcXVpcmUoXCIuL0dsb2JcIikuZGVmYXVsdC5CaWdDb25maWcuZGV2Lm5vX3JlbG9hZF9vbl9zdWJtaXQoKSApIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybigncmVsb2FkUGFnZSgpLCBub19yZWxvYWRfb25fc3VibWl0KCknKTtcbiAgICB9XG4gICAgZ2V0Q3VycmVudFdpbmRvdygpLnJlbG9hZCgpO1xufVxuXG5mdW5jdGlvbiogcmFuZ2Uoc3RhcnQ6IG51bWJlciwgc3RvcDogbnVtYmVyKTogR2VuZXJhdG9yPG51bWJlcj4ge1xuICAgIGZvciAoIGxldCBpID0gc3RhcnQ7IGkgPD0gc3RvcDsgaSsrIClcbiAgICAgICAgeWllbGQgaTtcbiAgICBcbn1cblxuLyoqSnVzdCB0aGUgYmFzZW5hbWUqL1xuYXN5bmMgZnVuY3Rpb24gdGFrZVNjcmVlbnNob3QoZGlybmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3Qgd2ViQ29udGVudHMgPSByZW1vdGUuZ2V0Q3VycmVudFdlYkNvbnRlbnRzKCk7XG4gICAgY29uc3QgaW1hZ2UgPSBhd2FpdCB3ZWJDb250ZW50cy5jYXB0dXJlUGFnZSgpO1xuICAgIG15ZnMuY3JlYXRlSWZOb3RFeGlzdHMoU0VTU0lPTl9QQVRIX0FCUyk7XG4gICAgY29uc3QgZGlybmFtZUFicyA9IHBhdGguam9pbihTRVNTSU9OX1BBVEhfQUJTLCBkaXJuYW1lKTtcbiAgICBteWZzLmNyZWF0ZUlmTm90RXhpc3RzKGRpcm5hbWVBYnMpO1xuICAgIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKGRpcm5hbWVBYnMsICdwYWdlLnBuZycpLCBpbWFnZS50b1BORygpKTtcbiAgICBcbiAgICByZXR1cm4gYXdhaXQgd2ViQ29udGVudHMuc2F2ZVBhZ2UocGF0aC5qb2luKGRpcm5hbWVBYnMsICdzY3JlZW5zaG90Lmh0bWwnKSwgXCJIVE1MQ29tcGxldGVcIik7XG59XG5cbmV4cG9ydCB7XG4gICAgYWxsLFxuICAgIGFueSxcbiAgICBib29sLFxuICAgIGVudW1lcmF0ZSxcbiAgICBpc0FycmF5LFxuICAgIGlzRnVuY3Rpb24sXG4gICAgaXNPYmplY3QsXG4gICAgZ2V0Q3VycmVudFdpbmRvdyxcbiAgICB0YWtlU2NyZWVuc2hvdCxcbiAgICByYW5nZSxcbiAgICByZWxvYWRQYWdlLFxuICAgIHN0cixcbiAgICBzdW0sXG4gICAgd2FpdCxcbiAgICB3YWl0VW50aWxcbn1cblxuIl19