"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const fs = require("fs");
const path = require("path");
const MyFs_1 = require("./MyFs");
function round(n, d = 0) {
    const fr = 10 ** d;
    return parseInt(n * fr) / fr;
}
function int(x, base) {
    return parseInt(x, base);
}
function str(val) {
    return val ? val.toString() : "";
}
exports.str = str;
function bool(val) {
    if (!val) {
        return false;
    }
    const typeofval = typeof val;
    if (typeofval !== 'object') {
        if (typeofval === 'function') {
            return true;
        }
        else {
            return !!val;
        }
    }
    let toStringed = {}.toString.call(val);
    if (toStringed === '[object Object]' || toStringed === '[object Array]') {
        return Object.keys(val).length !== 0;
    }
    return !!val.valueOf();
}
exports.bool = bool;
function enumerate(obj) {
    let typeofObj = typeof obj;
    if (obj === undefined
        || isEmptyObj(obj)
        || isEmptyArr(obj)
        || obj === "") {
        return [];
    }
    if (obj === null
        || typeofObj === "boolean"
        || typeofObj === "number"
        || typeofObj === "function") {
        throw new TypeError(`${typeofObj} object is not iterable`);
    }
    let array = [];
    if (isArray(obj)) {
        let i = 0;
        for (let x of obj) {
            array.push([i, x]);
            i++;
        }
    }
    else {
        for (let prop in obj) {
            array.push([prop, obj[prop]]);
        }
    }
    return array;
}
exports.enumerate = enumerate;
function wait(ms, honorSkipFade = true) {
    if (honorSkipFade) {
        if (require('./Glob').default.skipFade) {
            console.warn(`skipFade!`);
            return;
        }
    }
    if (!bool(ms)) {
        console.warn(`util.wait(${ms})`);
    }
    return new Promise(resolve => setTimeout(resolve, ms));
}
exports.wait = wait;
async function waitUntil(cond, checkInterval = 20, timeout = Infinity) {
    if (checkInterval <= 0) {
        throw new Error(`checkInterval <= 0. checkInterval: ${checkInterval}`);
    }
    if (checkInterval > timeout) {
        throw new Error(`checkInterval > timeout (${checkInterval} > ${timeout}). checkInterval has to be lower than timeout.`);
    }
    const loops = timeout / checkInterval;
    if (loops <= 1) {
        console.warn(`loops <= 1, you probably didn't want this to happen`);
    }
    let count = 0;
    while (count < loops) {
        if (cond()) {
            return true;
        }
        await wait(checkInterval, false);
        count++;
    }
    return false;
}
exports.waitUntil = waitUntil;
function notnot(obj) {
    return !!obj;
}
function isString(obj) {
    return typeof obj === "string";
}
exports.isString = isString;
function isArray(obj) {
    if (!obj) {
        return false;
    }
    return typeof obj !== 'string' && (Array.isArray(obj) || typeof obj[Symbol.iterator] === 'function');
}
exports.isArray = isArray;
function isEmpty(obj) {
    let toStringed = {}.toString.call(obj);
    return (toStringed === '[object Object]' || toStringed === '[object Array]') && Object.keys(obj).length == 0;
}
function isEmptyArr(collection) {
    return isArray(collection) && getLength(collection) === 0;
}
function isEmptyObj(obj) {
    return isObject(obj) && !isArray(obj) && Object.keys(obj).length === 0;
}
function isFunction(fn) {
    let toStringed = {}.toString.call(fn);
    return !!fn && toStringed === '[object Function]';
}
exports.isFunction = isFunction;
function isTMap(obj) {
    return {}.toString.call(obj) == '[object Object]';
}
function isObject(obj) {
    return typeof obj === 'object' && !!obj;
}
exports.isObject = isObject;
function shallowProperty(key) {
    return function (obj) {
        return obj == null ? void 0 : obj[key];
    };
}
function getLength(collection) {
    return shallowProperty('length')(collection);
}
function any(...args) {
    for (let a of args) {
        if (bool(a)) {
            return true;
        }
    }
    return false;
}
exports.any = any;
function all(...args) {
    for (let a of args) {
        if (!bool(a)) {
            return false;
        }
    }
    return true;
}
exports.all = all;
function sum(arr) {
    let sum = 0;
    let dirty = false;
    for (let v of arr) {
        let number = parseFloat(v);
        if (!isNaN(number)) {
            dirty = true;
            sum += number;
        }
    }
    return !dirty ? undefined : sum;
}
exports.sum = sum;
function getCurrentWindow() {
    return electron_1.remote.getCurrentWindow();
}
exports.getCurrentWindow = getCurrentWindow;
function reloadPage() {
    if (require("./Glob").default.BigConfig.dev.no_reload_on_submit()) {
        return;
    }
    getCurrentWindow().reload();
}
exports.reloadPage = reloadPage;
function* range(start, stop) {
    for (let i = start; i <= stop; i++) {
        yield i;
    }
}
exports.range = range;
async function takeScreenshot(dirname) {
    const webContents = electron_1.remote.getCurrentWebContents();
    const image = await webContents.capturePage();
    MyFs_1.default.createIfNotExists(SESSION_PATH_ABS);
    const dirnameAbs = path.join(SESSION_PATH_ABS, dirname);
    MyFs_1.default.createIfNotExists(dirnameAbs);
    const files = { png: undefined, html: undefined };
    if (fs.existsSync(path.join(dirnameAbs, 'page.png'))) {
        files.png = `${dirnameAbs}/page__${new Date().human()}.png`;
    }
    else {
        files.png = path.join(dirnameAbs, 'page.png');
    }
    fs.writeFileSync(files.png, image.toPNG());
    if (fs.existsSync(path.join(dirnameAbs, 'screenshot.html'))) {
        files.html = `${dirnameAbs}/screenshot__${new Date().human()}.html`;
    }
    else {
        files.html = path.join(dirnameAbs, 'screenshot.html');
    }
    return await webContents.savePage(files.html, "HTMLComplete");
}
exports.takeScreenshot = takeScreenshot;
function ignoreErr(fn) {
    try {
        fn();
    }
    catch (e) {
        console.warn(`IGNORED ERROR: `, e);
    }
}
exports.ignoreErr = ignoreErr;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSx1Q0FBa0M7QUFDbEMseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixpQ0FBMEI7QUFHMUIsU0FBUyxLQUFLLENBQUMsQ0FBUyxFQUFFLElBQVksQ0FBQztJQUNuQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRW5CLE9BQU8sUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDakMsQ0FBQztBQUdELFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFzQjtJQUNsQyxPQUFPLFFBQVEsQ0FBQyxDQUFDLEVBQVUsSUFBSSxDQUFDLENBQUM7QUFDckMsQ0FBQztBQUVELFNBQVMsR0FBRyxDQUFDLEdBQVE7SUFDakIsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0FBQ3BDLENBQUM7QUFrbEJHLGtCQUFHO0FBaGxCUCxTQUFTLElBQUksQ0FBQyxHQUFRO0lBK0NsQixJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ04sT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFDRCxNQUFNLFNBQVMsR0FBRyxPQUFPLEdBQUcsQ0FBQztJQUM3QixJQUFJLFNBQVMsS0FBSyxRQUFRLEVBQUU7UUFDeEIsSUFBSSxTQUFTLEtBQUssVUFBVSxFQUFFO1lBQzFCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7YUFBTTtZQUNILE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQztTQUNoQjtLQUNKO0lBRUQsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkMsSUFBSSxVQUFVLEtBQUssaUJBQWlCLElBQUksVUFBVSxLQUFLLGdCQUFnQixFQUFFO1FBQ3JFLE9BQU8sTUFBTSxDQUFD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QkFBaUIsQ0FBQyxDQUFDO0tBQ3pEO0lBQ0QsT0FBTyxNQUFNLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQztBQUNsRSxDQUFDO0FBeUJHLHdDQUFjO0FBdkJsQixTQUFTLFNBQVMsQ0FBQyxFQUEyQjtJQUMxQyxJQUFJO1FBQ0EsRUFBRSxFQUFFLENBQUM7S0FDUjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN0QztBQUNMLENBQUM7QUFRRyw4QkFBUyIsInNvdXJjZXNDb250ZW50IjpbIi8qKmltcG9ydCAqIGFzIHV0aWwgZnJvbSBcIi4uL3V0aWxcIlxuICogdXRpbC5yZWxvYWRQYWdlKCk7XG4gKlxuICogaW1wb3J0IHtyZWxvYWRQYWdlfSBmcm9tIFwiLi4vdXRpbFwiKi9cbmltcG9ydCB7IHJlbW90ZSB9IGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IG15ZnMgZnJvbSBcIi4vTXlGc1wiO1xuXG5cbmZ1bmN0aW9uIHJvdW5kKG46IG51bWJlciwgZDogbnVtYmVyID0gMCkge1xuICAgIGNvbnN0IGZyID0gMTAgKiogZDtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIHBhcnNlSW50KG4gKiBmcikgLyBmcjtcbn1cblxuXG5mdW5jdGlvbiBpbnQoeCwgYmFzZT86IHN0cmluZyB8IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHgsIDxudW1iZXI+YmFzZSk7XG59XG5cbmZ1bmN0aW9uIHN0cih2YWw6IGFueSkge1xuICAgIHJldHVybiB2YWwgPyB2YWwudG9TdHJpbmcoKSA6IFwiXCJcbn1cblxuZnVuY3Rpb24gYm9vbCh2YWw6IGFueSk6IGJvb2xlYW4ge1xuICAgIC8vIDAgICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gMSAgICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vICcwJyAgICAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyAnMScgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gJyAnICAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vICcnICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJ2ZvbycgICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vICgpPT57fSAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyBCb29sZWFuICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gQm9vbGVhbigpICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBCb29sZWFuKGZhbHNlKSAgICAgICBmYWxzZVxuICAgIC8vIEJvb2xlYW4odHJ1ZSkgICAgICAgIHRydWVcbiAgICAvLyBGdW5jdGlvbiAgICAgICAgICAgICB0cnVlXG4gICAgLy8gRnVuY3Rpb24oKSAgICAgICAgICAgdHJ1ZVxuICAgIC8vIE51bWJlciAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyBOdW1iZXIoMCkgICAgICAgICAgICBmYWxzZVxuICAgIC8vIE51bWJlcigxKSAgICAgICAgICAgIHRydWVcbiAgICAvLyBOdW1iZXIoKSAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIFsgMCBdICAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyBbIDEgXSAgICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gWyBbXSBdICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIFsgZmFsc2UgXSAgICAgICAgICAgIHRydWVcbiAgICAvLyBbIHRydWUgXSAgICAgICAgICAgICB0cnVlXG4gICAgLy8gW10gICAgICAgICAgICAgICAgICAgZmFsc2UgICAgICAgdW5saWtlIG5hdGl2ZVxuICAgIC8vIGRvY3VtZW50LmJvZHkgICAgICAgIHRydWVcbiAgICAvLyBmYWxzZSAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIGZ1bmN0aW9uKCl7fSAgICAgICAgIHRydWVcbiAgICAvLyBuZXcgQm9vbGVhbiAgICAgICAgICBmYWxzZSAgICAgICB1bmxpa2UgbmF0aXZlXG4gICAgLy8gbmV3IEJvb2xlYW4oKSAgICAgICAgZmFsc2UgICAgICAgdW5saWtlIG5hdGl2ZVxuICAgIC8vIG5ldyBCb29sZWFuKGZhbHNlKSAgIGZhbHNlICAgICAgIHVubGlrZSBuYXRpdmVcbiAgICAvLyBuZXcgQm9vbGVhbih0cnVlKSAgICB0cnVlXG4gICAgLy8gbmV3IEZ1bmN0aW9uICAgICAgICAgdHJ1ZVxuICAgIC8vIG5ldyBGdW5jdGlvbigpICAgICAgIHRydWVcbiAgICAvLyBuZXcgTnVtYmVyICAgICAgICAgICBmYWxzZSAgICAgICB1bmxpa2UgbmF0aXZlXG4gICAgLy8gbmV3IE51bWJlcigwKSAgICAgICAgZmFsc2UgICAgICAgdW5saWtlIG5hdGl2ZVxuICAgIC8vIG5ldyBOdW1iZXIoMSkgICAgICAgIHRydWVcbiAgICAvLyBuZXcgTnVtYmVyKCkgICAgICAgICBmYWxzZSAgICAgICB1bmxpa2UgbmF0aXZlXG4gICAgLy8gbmV3IFRpbWVsaW5lKC4uLikgICAgdHJ1ZVxuICAgIC8vIG5ldyBjbGFzc3t9ICAgICAgICAgIGZhbHNlICAgICAgIHVubGlrZSBuYXRpdmVcbiAgICAvLyBudWxsICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIHRydWUgICAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyB1bmRlZmluZWQgICAgICAgICAgICBmYWxzZVxuICAgIC8vIHsgaGkgOiAnYnllJyB9ICAgICAgIHRydWVcbiAgICAvLyB7fSAgICAgICAgICAgICAgICAgICBmYWxzZSAgICAgICB1bmxpa2UgbmF0aXZlXG5cblxuICAgIGlmICghdmFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgdHlwZW9mdmFsID0gdHlwZW9mIHZhbDtcbiAgICBpZiAodHlwZW9mdmFsICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAodHlwZW9mdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAhIXZhbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBsZXQga2V5c0xlbmd0aCA9IE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoO1xuICAgIGxldCB0b1N0cmluZ2VkID0ge30udG9TdHJpbmcuY2FsbCh2YWwpO1xuICAgIGlmICh0b1N0cmluZ2VkID09PSAnW29iamVjdCBPYmplY3RdJyB8fCB0b1N0cmluZ2VkID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCAhPT0gMDtcbiAgICB9XG5cbiAgICAvLyBCb29sZWFuLCBOdW1iZXIsIEhUTUxFbGVtZW50Li4uXG4gICAgcmV0dXJuICEhdmFsLnZhbHVlT2YoKTtcbn1cblxuZnVuY3Rpb24gZW51bWVyYXRlPFQ+KG9iajogVCk6IEVudW1lcmF0ZWQ8VD4ge1xuICAgIC8vIHVuZGVmaW5lZCAgICBbXVxuICAgIC8vIHt9ICAgICAgICAgICBbXVxuICAgIC8vIFtdICAgICAgICAgICBbXVxuICAgIC8vIFwiXCIgICAgICAgICAgIFtdXG4gICAgLy8gbnVtYmVyICAgICAgIFR5cGVFcnJvclxuICAgIC8vIG51bGwgICAgICAgICBUeXBlRXJyb3JcbiAgICAvLyBib29sZWFuICAgICAgVHlwZUVycm9yXG4gICAgLy8gRnVuY3Rpb24gICAgIFR5cGVFcnJvclxuICAgIC8vIFwiZm9vXCIgICAgICAgIFsgWzAsIFwiZlwiXSwgWzEsIFwib1wiXSwgWzIsIFwib1wiXSBdXG4gICAgLy8gWyBcImZvb1wiIF0gICAgWyBbMCwgXCJmb29cIl0gXVxuICAgIC8vIFsgMTAgXSAgICAgICBbIFswLCAxMF0gXVxuICAgIC8vIHsgYTogXCJmb29cIiB9IFsgW1wiYVwiLCBcImZvb1wiXSBdXG4gICAgLy8gLy8gKCk9Pnt9ICAgID9cbiAgICBsZXQgdHlwZW9mT2JqID0gdHlwZW9mIG9iajtcbiAgICBpZiAoXG4gICAgICAgIG9iaiA9PT0gdW5kZWZpbmVkXG4gICAgICAgIHx8IGlzRW1wdHlPYmoob2JqKVxuICAgICAgICB8fCBpc0VtcHR5QXJyKG9iailcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB8fCBvYmogPT09IFwiXCJcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIFtdIGFzIEVudW1lcmF0ZWQ8VD47XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgICBvYmogPT09IG51bGxcbiAgICAgICAgfHwgdHlwZW9mT2JqID09PSBcImJvb2xlYW5cIlxuICAgICAgICB8fCB0eXBlb2ZPYmogPT09IFwibnVtYmVyXCJcbiAgICAgICAgfHwgdHlwZW9mT2JqID09PSBcImZ1bmN0aW9uXCJcbiAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHt0eXBlb2ZPYmp9IG9iamVjdCBpcyBub3QgaXRlcmFibGVgKTtcbiAgICB9XG4gICAgbGV0IGFycmF5ID0gW107XG4gICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICBsZXQgaTogbnVtYmVyID0gMDtcbiAgICAgICAgZm9yIChsZXQgeCBvZiBvYmopIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2goW2ksIHhdKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gb2JqKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKFtwcm9wLCBvYmpbcHJvcF1dKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXkgYXMgRW51bWVyYXRlZDxUPjtcbn1cblxuZnVuY3Rpb24gd2FpdChtczogbnVtYmVyLCBob25vclNraXBGYWRlID0gdHJ1ZSk6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKGhvbm9yU2tpcEZhZGUpIHtcblxuICAgICAgICBpZiAocmVxdWlyZSgnLi9HbG9iJykuZGVmYXVsdC5za2lwRmFkZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBza2lwRmFkZSFgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiAoIEdsb2Iuc2tpcEZhZGUgKSByZXR1cm47XG4gICAgfVxuICAgIGlmICghYm9vbChtcykpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGB1dGlsLndhaXQoJHttc30pYClcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuXG4vKipDaGVjayBldmVyeSBgY2hlY2tJbnRlcnZhbGAgbXMgaWYgYGNvbmQoKWAgaXMgdHJ1dGh5LiBJZiwgd2l0aGluIGB0aW1lb3V0YCwgY29uZCgpIGlzIHRydXRoeSwgcmV0dXJuIGB0cnVlYC4gUmV0dXJuIGBmYWxzZWAgaWYgdGltZSBpcyBvdXQuXG4gKiBAZXhhbXBsZVxuICogLy8gR2l2ZSB0aGUgdXNlciBhIDIwMG1zIGNoYW5jZSB0byBnZXQgaGVyIHBvaW50ZXIgb3ZlciBcIm15ZGl2XCIuIENvbnRpbnVlIGltbWVkaWF0ZWx5IG9uY2Ugc2hlIGRvZXMsIG9yIGFmdGVyIDIwMG1zIGlmIHNoZSBkb2Vzbid0LlxuICogbXlkaXYucG9pbnRlcmVudGVyKCAoKSA9PiBteWRpdi5wb2ludGVySG92ZXJpbmcgPSB0cnVlOyApXG4gKiBjb25zdCBwb2ludGVyT25NeWRpdiA9IGF3YWl0IHdhaXRVbnRpbCgoKSA9PiBteWRpdi5wb2ludGVySG92ZXJpbmcsIDIwMCwgMTApOyovXG5hc3luYyBmdW5jdGlvbiB3YWl0VW50aWwoY29uZDogKCkgPT4gYm9vbGVhbiwgY2hlY2tJbnRlcnZhbDogbnVtYmVyID0gMjAsIHRpbWVvdXQ6IG51bWJlciA9IEluZmluaXR5KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgaWYgKGNoZWNrSW50ZXJ2YWwgPD0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNoZWNrSW50ZXJ2YWwgPD0gMC4gY2hlY2tJbnRlcnZhbDogJHtjaGVja0ludGVydmFsfWApO1xuICAgIH1cbiAgICBpZiAoY2hlY2tJbnRlcnZhbCA+IHRpbWVvdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjaGVja0ludGVydmFsID4gdGltZW91dCAoJHtjaGVja0ludGVydmFsfSA+ICR7dGltZW91dH0pLiBjaGVja0ludGVydmFsIGhhcyB0byBiZSBsb3dlciB0aGFuIHRpbWVvdXQuYCk7XG4gICAgfVxuXG4gICAgY29uc3QgbG9vcHMgPSB0aW1lb3V0IC8gY2hlY2tJbnRlcnZhbDtcbiAgICBpZiAobG9vcHMgPD0gMSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYGxvb3BzIDw9IDEsIHlvdSBwcm9iYWJseSBkaWRuJ3Qgd2FudCB0aGlzIHRvIGhhcHBlbmApO1xuICAgIH1cbiAgICBsZXQgY291bnQgPSAwO1xuICAgIHdoaWxlIChjb3VudCA8IGxvb3BzKSB7XG4gICAgICAgIGlmIChjb25kKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHdhaXQoY2hlY2tJbnRlcnZhbCwgZmFsc2UpO1xuICAgICAgICBjb3VudCsrO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qbGV0IHN0dWZmID0ge1xuICAgICcoKT0+e30nOiAoKSA9PiB7XG4gICAgfSwgJ2Z1bmN0aW9uKCl7fSc6IGZ1bmN0aW9uICgpIHtcbiAgICB9LCAnRnVuY3Rpb24nOiBGdW5jdGlvbixcbiAgICAnRnVuY3Rpb24oKSc6IEZ1bmN0aW9uKCksXG4gICAgXCJuZXcgRnVuY3Rpb25cIjogbmV3IEZ1bmN0aW9uLFxuICAgIFwibmV3IEZ1bmN0aW9uKClcIjogbmV3IEZ1bmN0aW9uKCksXG4gICAgXCJCb29sZWFuXCI6IEJvb2xlYW4sXG4gICAgXCJCb29sZWFuKClcIjogQm9vbGVhbigpLFxuICAgIFwiQm9vbGVhbihmYWxzZSlcIjogQm9vbGVhbihmYWxzZSksXG4gICAgXCJCb29sZWFuKHRydWUpXCI6IEJvb2xlYW4odHJ1ZSksXG4gICAgXCJuZXcgQm9vbGVhblwiOiBuZXcgQm9vbGVhbixcbiAgICBcIm5ldyBCb29sZWFuKClcIjogbmV3IEJvb2xlYW4oKSxcbiAgICBcIm5ldyBCb29sZWFuKHRydWUpXCI6IG5ldyBCb29sZWFuKHRydWUpLFxuICAgIFwibmV3IEJvb2xlYW4oZmFsc2UpXCI6IG5ldyBCb29sZWFuKGZhbHNlKSxcbiAgICBcInRydWVcIjogdHJ1ZSxcbiAgICBcImZhbHNlXCI6IGZhbHNlLFxuICAgIFwiTnVtYmVyXCI6IE51bWJlcixcbiAgICBcIk51bWJlcigpXCI6IE51bWJlcigpLFxuICAgIFwiTnVtYmVyKDApXCI6IE51bWJlcigwKSxcbiAgICBcIk51bWJlcigxKVwiOiBOdW1iZXIoMSksXG4gICAgXCJuZXcgTnVtYmVyXCI6IG5ldyBOdW1iZXIsXG4gICAgXCJuZXcgTnVtYmVyKClcIjogbmV3IE51bWJlcigpLFxuICAgIFwibmV3IE51bWJlcigwKVwiOiBuZXcgTnVtYmVyKDApLFxuICAgIFwibmV3IE51bWJlcigxKVwiOiBuZXcgTnVtYmVyKDEpLFxuICAgIFwiMFwiOiAwLFxuICAgIFwiMVwiOiAxLFxuICAgIFwiJydcIjogJycsXG4gICAgXCInICdcIjogJyAnLFxuICAgIFwiJ2ZvbydcIjogJ2ZvbycsXG4gICAgXCInMCdcIjogJzAnLFxuICAgIFwiJzEnXCI6ICcxJyxcbiAgICBcInt9XCI6IHt9LFxuICAgIFwieyBoaSA6ICdieWUnIH1cIjogeyBoaTogJ2J5ZScgfSxcbiAgICBcIltdXCI6IFtdLFxuICAgIFwiWyBmYWxzZSBdXCI6IFtmYWxzZV0sXG4gICAgXCJbIHRydWUgXVwiOiBbdHJ1ZV0sXG4gICAgXCJbIFtdIF1cIjogW1tdXSxcbiAgICBcIlsgMCBdXCI6IFswXSxcbiAgICBcIlsgMSBdXCI6IFsxXSxcbiAgICBcInVuZGVmaW5lZFwiOiB1bmRlZmluZWQsXG4gICAgXCJudWxsXCI6IG51bGwsXG4gICAgXCJkb2N1bWVudC5ib2R5XCI6IGRvY3VtZW50LmJvZHksXG4gICAgXCJuZXcgY2xhc3N7fVwiOiBuZXcgY2xhc3Mge1xuICAgIH0sXG4gICAgXCJuZXcgVGltZWxpbmUoLi4uKVwiOiBcIlBMQUNFSE9MREVSXCIsXG59OyovXG5cblxuZnVuY3Rpb24gbm90bm90KG9iaikge1xuICAgIC8vIC8gMCAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIDEgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gKCk9Pnt9ICAgICAgICAgICAgIHRydWVcbiAgICAvLyBmdW5jdGlvbigpe30gICAgICAgdHJ1ZVxuICAgIC8vIEZ1bmN0aW9uICAgICAgICAgICB0cnVlXG4gICAgLy8gRnVuY3Rpb24oKSAgICAgICAgIHRydWVcbiAgICAvLyBuZXcgRnVuY3Rpb24oKSAgICAgdHJ1ZVxuICAgIC8vIEJvb2xlYW4gICAgICAgICAgICB0cnVlXG4gICAgLy8gLyAgQm9vbGVhbigpICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IEJvb2xlYW4oKSAgICAgIHRydWVcbiAgICAvLyBuZXcgQm9vbGVhbih0cnVlKSAgdHJ1ZVxuICAgIC8vIG5ldyBCb29sZWFuKGZhbHNlKSB0cnVlXG4gICAgLy8gdHJ1ZSAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyAvICBmYWxzZSAgICAgICAgICAgZmFsc2VcbiAgICAvLyBOdW1iZXIgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIC8gIE51bWJlcigpICAgICAgICBmYWxzZVxuICAgIC8vIG5ldyBOdW1iZXIoKSAgICAgICB0cnVlXG4gICAgLy8gbmV3IE51bWJlcigwKSAgICAgIHRydWVcbiAgICAvLyBuZXcgTnVtYmVyKDEpICAgICAgdHJ1ZVxuICAgIC8vIC8gJycgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcgJyAgICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gJzAnICAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyAnMScgICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIHt9ICAgICAgICAgICAgICAgICB0cnVlXG4gICAgLy8geyBoaSA6ICdieWUnIH0gICAgIHRydWVcbiAgICAvLyBbXSAgICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIFsgMSBdICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gLyAgdW5kZWZpbmVkICAgICAgIGZhbHNlXG4gICAgLy8gLyAgbnVsbCAgICAgICAgICAgIGZhbHNlXG4gICAgcmV0dXJuICEhb2JqO1xufVxuXG5mdW5jdGlvbiBpc1N0cmluZyhvYmopOiBvYmogaXMgc3RyaW5nIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIlxufVxuXG5mdW5jdGlvbiBpc0FycmF5PFQ+KG9iaik6IG9iaiBpcyBBcnJheTxUPiB7IC8vIHNhbWUgYXMgQXJyYXkuaXNBcnJheVxuICAgIC8vIDAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAxICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJycgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcgJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnZm9vJyAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJzAnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcxJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAoKT0+e30gICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gQm9vbGVhbiAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIEJvb2xlYW4oKSAgICAgICAgICAgZmFsc2VcbiAgICAvLyBGdW5jdGlvbiAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gRnVuY3Rpb24oKSAgICAgICAgICBmYWxzZVxuICAgIC8vIE51bWJlciAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBOdW1iZXIoKSAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gLyBbIDEgXSAgICAgICAgICAgICB0cnVlXG4gICAgLy8gLyBbXSAgICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gZmFsc2UgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIGZ1bmN0aW9uKCl7fSAgICAgICAgZmFsc2VcbiAgICAvLyBuZXcgQm9vbGVhbigpICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IEJvb2xlYW4oZmFsc2UpICBmYWxzZVxuICAgIC8vIG5ldyBCb29sZWFuKHRydWUpICAgZmFsc2VcbiAgICAvLyBuZXcgRnVuY3Rpb24oKSAgICAgIGZhbHNlXG4gICAgLy8gbmV3IE51bWJlcigwKSAgICAgICBmYWxzZVxuICAgIC8vIG5ldyBOdW1iZXIoMSkgICAgICAgZmFsc2VcbiAgICAvLyBuZXcgTnVtYmVyKCkgICAgICAgIGZhbHNlXG4gICAgLy8gbnVsbCAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIHRydWUgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyB1bmRlZmluZWQgICAgICAgICAgIGZhbHNlXG4gICAgLy8geyBoaSA6ICdieWUnIH0gICAgICBmYWxzZVxuICAgIC8vIHt9ICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICBpZiAoIW9iaikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2Ygb2JqICE9PSAnc3RyaW5nJyAmJiAoQXJyYXkuaXNBcnJheShvYmopIHx8IHR5cGVvZiBvYmpbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkob2JqOiBhbnkpOiBib29sZWFuIHtcbiAgICAvLyAwICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gMSAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcnICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnICcgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJzAnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcxJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAoKT0+e30gICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gQm9vbGVhbiAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIEJvb2xlYW4oKSAgICAgICAgICAgZmFsc2VcbiAgICAvLyBGdW5jdGlvbiAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gRnVuY3Rpb24oKSAgICAgICAgICBmYWxzZVxuICAgIC8vIE51bWJlciAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBOdW1iZXIoKSAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gWyAxIF0gICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIC8gW10gICAgICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIGZhbHNlICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBmdW5jdGlvbigpe30gICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IEJvb2xlYW4oKSAgICAgICBmYWxzZVxuICAgIC8vIG5ldyBCb29sZWFuKGZhbHNlKSAgZmFsc2VcbiAgICAvLyBuZXcgQm9vbGVhbih0cnVlKSAgIGZhbHNlXG4gICAgLy8gbmV3IEZ1bmN0aW9uKCkgICAgICBmYWxzZVxuICAgIC8vIG5ldyBOdW1iZXIoMCkgICAgICAgZmFsc2VcbiAgICAvLyBuZXcgTnVtYmVyKDEpICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IE51bWJlcigpICAgICAgICBmYWxzZVxuICAgIC8vIG51bGwgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyB0cnVlICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gdW5kZWZpbmVkICAgICAgICAgICBmYWxzZVxuICAgIC8vIHsgaGkgOiAnYnllJyB9ICAgICAgZmFsc2VcbiAgICAvLyAvIHt9ICAgICAgICAgICAgICAgIHRydWVcbiAgICBsZXQgdG9TdHJpbmdlZCA9IHt9LnRvU3RyaW5nLmNhbGwob2JqKTtcbiAgICByZXR1cm4gKHRvU3RyaW5nZWQgPT09ICdbb2JqZWN0IE9iamVjdF0nIHx8IHRvU3RyaW5nZWQgPT09ICdbb2JqZWN0IEFycmF5XScpICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09IDA7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlBcnIoY29sbGVjdGlvbik6IGJvb2xlYW4ge1xuICAgIC8vIDAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAxICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJycgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcgJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnMCcgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJzEnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICgpPT57fSAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBCb29sZWFuICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gQm9vbGVhbigpICAgICAgICAgICBmYWxzZVxuICAgIC8vIEZ1bmN0aW9uICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBGdW5jdGlvbigpICAgICAgICAgIGZhbHNlXG4gICAgLy8gTnVtYmVyICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIE51bWJlcigpICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBbIDEgXSAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gLyBbXSAgICAgICAgICAgICAgICB0cnVlXG4gICAgLy8gZmFsc2UgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIGZ1bmN0aW9uKCl7fSAgICAgICAgZmFsc2VcbiAgICAvLyBuZXcgQm9vbGVhbigpICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IEJvb2xlYW4oZmFsc2UpICBmYWxzZVxuICAgIC8vIG5ldyBCb29sZWFuKHRydWUpICAgZmFsc2VcbiAgICAvLyBuZXcgRnVuY3Rpb24oKSAgICAgIGZhbHNlXG4gICAgLy8gbmV3IE51bWJlcigwKSAgICAgICBmYWxzZVxuICAgIC8vIG5ldyBOdW1iZXIoMSkgICAgICAgZmFsc2VcbiAgICAvLyBuZXcgTnVtYmVyKCkgICAgICAgIGZhbHNlXG4gICAgLy8gbnVsbCAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIHRydWUgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyB1bmRlZmluZWQgICAgICAgICAgIGZhbHNlXG4gICAgLy8geyBoaSA6ICdieWUnIH0gICAgICBmYWxzZVxuICAgIC8vIHt9ICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICByZXR1cm4gaXNBcnJheShjb2xsZWN0aW9uKSAmJiBnZXRMZW5ndGgoY29sbGVjdGlvbikgPT09IDBcbn1cblxuZnVuY3Rpb24gaXNFbXB0eU9iaihvYmopOiBib29sZWFuIHtcbiAgICAvLyAwICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gMSAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcnICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnICcgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJzAnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcxJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAoKT0+e30gICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gQm9vbGVhbiAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIEJvb2xlYW4oKSAgICAgICAgICAgZmFsc2VcbiAgICAvLyBGdW5jdGlvbiAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gRnVuY3Rpb24oKSAgICAgICAgICBmYWxzZVxuICAgIC8vIE51bWJlciAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBOdW1iZXIoKSAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gWyAxIF0gICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIFtdICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBmYWxzZSAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gZnVuY3Rpb24oKXt9ICAgICAgICBmYWxzZVxuICAgIC8vIC8gbmV3IEJvb2xlYW4oKSAgICAgdHJ1ZVxuICAgIC8vIC8gbmV3IEJvb2xlYW4oZmFsc2UpdHJ1ZVxuICAgIC8vIC8gbmV3IEJvb2xlYW4odHJ1ZSkgdHJ1ZVxuICAgIC8vIG5ldyBGdW5jdGlvbigpICAgICAgZmFsc2VcbiAgICAvLyAvIG5ldyBOdW1iZXIoMCkgICAgIHRydWVcbiAgICAvLyAvIG5ldyBOdW1iZXIoMSkgICAgIHRydWVcbiAgICAvLyAvIG5ldyBOdW1iZXIoKSAgICAgIHRydWVcbiAgICAvLyBudWxsICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gdHJ1ZSAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIHVuZGVmaW5lZCAgICAgICAgICAgZmFsc2VcbiAgICAvLyB7IGhpIDogJ2J5ZScgfSAgICAgIGZhbHNlXG4gICAgLy8gLyB7fSAgICAgICAgICAgICAgICB0cnVlXG4gICAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgIWlzQXJyYXkob2JqKSAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMFxufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZuKSB7XG4gICAgLy8gMCAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIDEgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnJyAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJyAnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcwJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnMScgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gLyAoKT0+e30gICAgICAgICAgICAgIHRydWVcbiAgICAvLyAvIEJvb2xlYW4gICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIEJvb2xlYW4oKSAgICAgICAgICAgZmFsc2VcbiAgICAvLyAvIEZ1bmN0aW9uICAgICAgICAgICAgdHJ1ZVxuICAgIC8vIC8gRnVuY3Rpb24oKSAgICAgICAgICB0cnVlXG4gICAgLy8gLyBOdW1iZXIgICAgICAgICAgICAgIHRydWVcbiAgICAvLyBOdW1iZXIoKSAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gWyAxIF0gICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIFtdICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBmYWxzZSAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gLyBmdW5jdGlvbigpe30gICAgICAgIHRydWVcbiAgICAvLyBuZXcgQm9vbGVhbigpICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IEJvb2xlYW4oZmFsc2UpICBmYWxzZVxuICAgIC8vIG5ldyBCb29sZWFuKHRydWUpICAgZmFsc2VcbiAgICAvLyAvIG5ldyBGdW5jdGlvbigpICAgICAgdHJ1ZVxuICAgIC8vIG5ldyBOdW1iZXIoMCkgICAgICAgZmFsc2VcbiAgICAvLyBuZXcgTnVtYmVyKDEpICAgICAgIGZhbHNlXG4gICAgLy8gbmV3IE51bWJlcigpICAgICAgICBmYWxzZVxuICAgIC8vIG51bGwgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyB0cnVlICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gdW5kZWZpbmVkICAgICAgICAgICBmYWxzZVxuICAgIC8vIHsgaGkgOiAnYnllJyB9ICAgICAgZmFsc2VcbiAgICAvLyB7fSAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgbGV0IHRvU3RyaW5nZWQgPSB7fS50b1N0cmluZy5jYWxsKGZuKTtcbiAgICByZXR1cm4gISFmbiAmJiB0b1N0cmluZ2VkID09PSAnW29iamVjdCBGdW5jdGlvbl0nXG59XG5cbmZ1bmN0aW9uIGlzVE1hcDxUPihvYmo6IFRNYXA8VD4pOiBvYmogaXMgVE1hcDxUPiB7XG4gICAgLy8gMCAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIDEgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnJyAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJyAnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcwJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnMScgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gKCk9Pnt9ICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIEJvb2xlYW4gICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBCb29sZWFuKCkgICAgICAgICAgIGZhbHNlXG4gICAgLy8gRnVuY3Rpb24gICAgICAgICAgICBmYWxzZVxuICAgIC8vIEZ1bmN0aW9uKCkgICAgICAgICAgZmFsc2VcbiAgICAvLyBOdW1iZXIgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gTnVtYmVyKCkgICAgICAgICAgICBmYWxzZVxuICAgIC8vIFsgMSBdICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gW10gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBmYWxzZSAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gZnVuY3Rpb24oKXt9ICAgICAgICBmYWxzZVxuICAgIC8vIG5ldyBCb29sZWFuKCkgICAgIGZhbHNlXG4gICAgLy8gbmV3IEJvb2xlYW4oZmFsc2UpZmFsc2VcbiAgICAvLyBuZXcgQm9vbGVhbih0cnVlKSBmYWxzZVxuICAgIC8vIG5ldyBGdW5jdGlvbigpICAgICAgZmFsc2VcbiAgICAvLyBuZXcgTnVtYmVyKDApICAgICBmYWxzZVxuICAgIC8vIG5ldyBOdW1iZXIoMSkgICAgIGZhbHNlXG4gICAgLy8gbmV3IE51bWJlcigpICAgICAgZmFsc2VcbiAgICAvLyBudWxsICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gdHJ1ZSAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIHVuZGVmaW5lZCAgICAgICAgICAgZmFsc2VcbiAgICAvLyAvIHsgaGkgOiAnYnllJyB9ICAgIHRydWVcbiAgICAvLyAvIHt9ICAgICAgICAgICAgICAgIHRydWVcbiAgICByZXR1cm4ge30udG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0IE9iamVjdF0nXG59XG5cbi8vICogIHVuZGVyc2NvcmUuanNcbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaik6IGJvb2xlYW4ge1xuICAgIC8vIDAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAxICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJycgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICcgJyAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAnMCcgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gJzEnICAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vICgpPT57fSAgICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBCb29sZWFuICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gQm9vbGVhbigpICAgICAgICAgICBmYWxzZVxuICAgIC8vIEZ1bmN0aW9uICAgICAgICAgICAgZmFsc2VcbiAgICAvLyBGdW5jdGlvbigpICAgICAgICAgIGZhbHNlXG4gICAgLy8gTnVtYmVyICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIE51bWJlcigpICAgICAgICAgICAgZmFsc2VcbiAgICAvLyAvIFsgMSBdICAgICAgICAgICAgIHRydWVcbiAgICAvLyAvIFtdICAgICAgICAgICAgICAgIHRydWVcbiAgICAvLyBmYWxzZSAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gZnVuY3Rpb24oKXt9ICAgICAgICBmYWxzZVxuICAgIC8vIC8gbmV3IEJvb2xlYW4oKSAgICAgdHJ1ZVxuICAgIC8vIC8gbmV3IEJvb2xlYW4oZmFsc2UpdHJ1ZVxuICAgIC8vIC8gbmV3IEJvb2xlYW4odHJ1ZSkgdHJ1ZVxuICAgIC8vIG5ldyBGdW5jdGlvbigpICAgICAgZmFsc2VcbiAgICAvLyAvIG5ldyBOdW1iZXIoMCkgICAgIHRydWVcbiAgICAvLyAvIG5ldyBOdW1iZXIoMSkgICAgIHRydWVcbiAgICAvLyAvIG5ldyBOdW1iZXIoKSAgICAgIHRydWVcbiAgICAvLyBudWxsICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgLy8gdHJ1ZSAgICAgICAgICAgICAgICBmYWxzZVxuICAgIC8vIHVuZGVmaW5lZCAgICAgICAgICAgZmFsc2VcbiAgICAvLyAvIHsgaGkgOiAnYnllJyB9ICAgIHRydWVcbiAgICAvLyAvIHt9ICAgICAgICAgICAgICAgIHRydWVcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgISFvYmo7XG59XG5cblxuZnVuY3Rpb24gc2hhbGxvd1Byb3BlcnR5PFQ+KGtleTogc3RyaW5nKTogKG9iajogVCkgPT4gVCBleHRlbmRzIG51bGwgPyB1bmRlZmluZWQgOiBUW2tleW9mIFRdIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAvLyA9PSBudWxsIHRydWUgZm9yIHVuZGVmaW5lZFxuICAgICAgICByZXR1cm4gb2JqID09IG51bGwgPyB2b2lkIDAgOiBvYmpba2V5XTtcbiAgICB9O1xufVxuXG5cbmZ1bmN0aW9uIGdldExlbmd0aChjb2xsZWN0aW9uKTogbnVtYmVyIHtcbiAgICByZXR1cm4gc2hhbGxvd1Byb3BlcnR5KCdsZW5ndGgnKShjb2xsZWN0aW9uKVxufVxuXG5cbmZ1bmN0aW9uIGFueSguLi5hcmdzOiBhbnlbXSk6IGJvb2xlYW4ge1xuICAgIGZvciAobGV0IGEgb2YgYXJncykge1xuICAgICAgICBpZiAoYm9vbChhKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5cbmZ1bmN0aW9uIGFsbCguLi5hcmdzOiBhbnkpOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBhIG9mIGFyZ3MpIHtcbiAgICAgICAgaWYgKCFib29sKGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cblxuZnVuY3Rpb24gc3VtKGFycjogYW55W10pOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGxldCBkaXJ0eSA9IGZhbHNlO1xuICAgIGZvciAobGV0IHYgb2YgYXJyKSB7XG4gICAgICAgIGxldCBudW1iZXIgPSBwYXJzZUZsb2F0KHYpO1xuICAgICAgICBpZiAoIWlzTmFOKG51bWJlcikpIHtcbiAgICAgICAgICAgIGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIHN1bSArPSBudW1iZXI7XG4gICAgICAgIH1cblxuICAgIH1cbiAgICByZXR1cm4gIWRpcnR5ID8gdW5kZWZpbmVkIDogc3VtO1xufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50V2luZG93KCkge1xuICAgIHJldHVybiByZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpO1xufVxuXG5mdW5jdGlvbiByZWxvYWRQYWdlKCkge1xuICAgIGlmIChyZXF1aXJlKFwiLi9HbG9iXCIpLmRlZmF1bHQuQmlnQ29uZmlnLmRldi5ub19yZWxvYWRfb25fc3VibWl0KCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGdldEN1cnJlbnRXaW5kb3coKS5yZWxvYWQoKTtcbn1cblxuZnVuY3Rpb24qIHJhbmdlKHN0YXJ0OiBudW1iZXIsIHN0b3A6IG51bWJlcik6IEdlbmVyYXRvcjxudW1iZXI+IHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPD0gc3RvcDsgaSsrKSB7XG4gICAgICAgIHlpZWxkIGk7XG4gICAgfVxuXG59XG5cbi8qKkp1c3QgdGhlIGJhc2VuYW1lKi9cbmFzeW5jIGZ1bmN0aW9uIHRha2VTY3JlZW5zaG90KGRpcm5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHdlYkNvbnRlbnRzID0gcmVtb3RlLmdldEN1cnJlbnRXZWJDb250ZW50cygpO1xuICAgIGNvbnN0IGltYWdlID0gYXdhaXQgd2ViQ29udGVudHMuY2FwdHVyZVBhZ2UoKTtcbiAgICBteWZzLmNyZWF0ZUlmTm90RXhpc3RzKFNFU1NJT05fUEFUSF9BQlMpO1xuICAgIGNvbnN0IGRpcm5hbWVBYnMgPSBwYXRoLmpvaW4oU0VTU0lPTl9QQVRIX0FCUywgZGlybmFtZSk7XG4gICAgbXlmcy5jcmVhdGVJZk5vdEV4aXN0cyhkaXJuYW1lQWJzKTtcbiAgICBjb25zdCBmaWxlcyA9IHsgcG5nOiB1bmRlZmluZWQsIGh0bWw6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChmcy5leGlzdHNTeW5jKHBhdGguam9pbihkaXJuYW1lQWJzLCAncGFnZS5wbmcnKSkpIHtcbiAgICAgICAgZmlsZXMucG5nID0gYCR7ZGlybmFtZUFic30vcGFnZV9fJHtuZXcgRGF0ZSgpLmh1bWFuKCl9LnBuZ2BcbiAgICB9IGVsc2Uge1xuICAgICAgICBmaWxlcy5wbmcgPSBwYXRoLmpvaW4oZGlybmFtZUFicywgJ3BhZ2UucG5nJyk7XG4gICAgfVxuICAgIGZzLndyaXRlRmlsZVN5bmMoZmlsZXMucG5nLCBpbWFnZS50b1BORygpKTtcbiAgICBpZiAoZnMuZXhpc3RzU3luYyhwYXRoLmpvaW4oZGlybmFtZUFicywgJ3NjcmVlbnNob3QuaHRtbCcpKSkge1xuICAgICAgICBmaWxlcy5odG1sID0gYCR7ZGlybmFtZUFic30vc2NyZWVuc2hvdF9fJHtuZXcgRGF0ZSgpLmh1bWFuKCl9Lmh0bWxgXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmlsZXMuaHRtbCA9IHBhdGguam9pbihkaXJuYW1lQWJzLCAnc2NyZWVuc2hvdC5odG1sJyk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB3ZWJDb250ZW50cy5zYXZlUGFnZShmaWxlcy5odG1sLCBcIkhUTUxDb21wbGV0ZVwiKTtcbn1cblxuZnVuY3Rpb24gaWdub3JlRXJyKGZuOiAoLi4uYXJnczogYW55W10pID0+IGFueSkge1xuICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYElHTk9SRUQgRVJST1I6IGAsIGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IHtcbiAgICBhbGwsXG4gICAgYW55LFxuICAgIGJvb2wsXG4gICAgZW51bWVyYXRlLFxuICAgIGdldEN1cnJlbnRXaW5kb3csXG4gICAgaWdub3JlRXJyLFxuICAgIGlzQXJyYXksXG4gICAgaXNGdW5jdGlvbixcbiAgICBpc1N0cmluZyxcbiAgICBpc09iamVjdCxcbiAgICByYW5nZSxcbiAgICByZWxvYWRQYWdlLFxuICAgIHN0cixcbiAgICBzdW0sXG4gICAgdGFrZVNjcmVlbnNob3QsXG4gICAgd2FpdCxcbiAgICB3YWl0VW50aWxcbn1cblxuIl19