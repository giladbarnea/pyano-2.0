"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.log('myfs.ts');
const fs = require("fs");
const path = require("path");
const util_1 = require("./util");
function is_name(pathLike) {
    return path.basename(pathLike) === pathLike;
}
function replace_ext(pathLike, ext) {
    if (ext.startsWith('.'))
        ext = ext.slice(1);
    return `${remove_ext(pathLike)}.${ext}`;
}
function remove_ext(pathLike) {
    return path.join(path.dirname(pathLike), path.basename(pathLike, path.extname(pathLike)));
}
function push_before_ext(pathLike, push) {
    let ext = path.extname(pathLike);
    return `${remove_ext(pathLike)}${push}${ext}`;
}
function split_ext(pathLike) {
    const ext = path.extname(pathLike);
    const filename = path.basename(pathLike, ext);
    return [filename, ext];
}
function createIfNotExists(path) {
    try {
        if (!fs.existsSync(path)) {
            fs.mkdirSync(path);
            console.warn(`createIfNotExists(path) created: ${path}`);
            return false;
        }
        return true;
    }
    catch (e) {
        console.error(`createIfNotExists(${path})`, e);
    }
}
function isEmpty(abspath, { recursive }) {
    const items = fs.readdirSync(abspath);
    if (!recursive) {
        return !util_1.bool(items);
    }
    for (let item of items) {
        const itemAbs = path.join(abspath, item);
        let stats = fs.statSync(itemAbs);
        if (stats.isDirectory()) {
            let empty = isEmpty(itemAbs, { recursive: true });
            if (!empty) {
                return false;
            }
        }
        else {
            return false;
        }
    }
    return true;
}
function getEmptyDirs(abspath) {
    const emptyDirs = [];
    const items = fs.readdirSync(abspath);
    let removedFiles = false;
    if (!util_1.bool(items))
        return [abspath];
    for (let item of items) {
        const itemAbs = path.join(abspath, item);
        let stats = fs.statSync(itemAbs);
        if (stats.isDirectory()) {
            if (isEmpty(itemAbs, { recursive: true })) {
                emptyDirs.push(itemAbs);
            }
            else {
                emptyDirs.push(...getEmptyDirs(itemAbs));
            }
        }
        else {
            console.log('stats.size:', stats.size);
            if (stats.size === 0) {
                fs.unlinkSync(itemAbs);
                removedFiles = true;
            }
        }
    }
    if (removedFiles) {
        return getEmptyDirs(abspath);
    }
    return emptyDirs;
}
function removeEmptyDirs(abspath) {
    const emptydirs = getEmptyDirs(abspath);
    console.log({ emptydirs });
    for (let dir of emptydirs) {
        fs.rmdirSync(dir);
    }
}
exports.default = {
    split_ext,
    replace_ext,
    remove_ext,
    push_before_ext,
    is_name,
    createIfNotExists,
    isEmpty,
    getEmptyDirs,
    removeEmptyDirs
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXlmcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm15ZnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZCLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsaUNBQThCO0FBRzlCLFNBQVMsT0FBTyxDQUFDLFFBQWdCO0lBQzdCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxRQUFRLENBQUE7QUFDL0MsQ0FBQztBQUdELFNBQVMsV0FBVyxDQUFDLFFBQWdCLEVBQUUsR0FBVztJQUM5QyxJQUFLLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO1FBQ3BCLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLE9BQU8sR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7QUFDNUMsQ0FBQztBQVNELFNBQVMsVUFBVSxDQUFDLFFBQWdCO0lBQ2hDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlGLENBQUM7QUFJRCxTQUFTLGVBQWUsQ0FBQyxRQUFnQixFQUFFLElBQXFCO0lBRTVELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDakMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDbEQsQ0FBQztBQU1ELFNBQVMsU0FBUyxDQUFDLFFBQWdCO0lBSS9CLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsTUFB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SUFBSyxZQUFZLEVBQUc7UUFFaEIsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDaEM7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUVyQixDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsT0FBZTtJQUNwQyxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDM0IsS0FBTSxJQUFJLEdBQUcsSUFBSSxTQUFTLEVBQUc7UUFDekIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUNwQjtBQUNMLENBQUM7QUFFRCxrQkFBZTtJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLGVBQWU7SUFDZixPQUFPO0lBQ1AsaUJBQWlCO0lBQ2pCLE9BQU87SUFDUCxZQUFZO0lBQ1osZUFBZTtDQUNsQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqaW1wb3J0IG15ZnMgZnJvbSBcIi4uL015RnNcIjsqL1xuY29uc29sZS5sb2coJ215ZnMudHMnKTtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgYm9vbCB9IGZyb20gXCIuL3V0aWxcIjtcblxuXG5mdW5jdGlvbiBpc19uYW1lKHBhdGhMaWtlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcGF0aC5iYXNlbmFtZShwYXRoTGlrZSkgPT09IHBhdGhMaWtlXG59XG5cbi8qKntAbGluayByZW1vdmVfZXh0IFVzZXMgcmVtb3ZlX2V4dH0qL1xuZnVuY3Rpb24gcmVwbGFjZV9leHQocGF0aExpa2U6IHN0cmluZywgZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICggZXh0LnN0YXJ0c1dpdGgoJy4nKSApXG4gICAgICAgIGV4dCA9IGV4dC5zbGljZSgxKTtcbiAgICByZXR1cm4gYCR7cmVtb3ZlX2V4dChwYXRoTGlrZSl9LiR7ZXh0fWA7XG59XG5cblxuLyoqXG4gKiBAZXhhbXBsZVxuICogcmVtb3ZlX2V4dChcImV4cGVyaW1lbnRzL3RydXRocy9mdXJfZWxpc2VfQi50eHRcIilcbiAqID4+PiBleHBlcmltZW50cy90cnV0aHMvZnVyX2VsaXNlX0JcbiAqIHJlbW92ZV9leHQoXCJmdXJfZWxpc2VfQi50eHRcIilcbiAqID4+PiBmdXJfZWxpc2VfQiAqL1xuZnVuY3Rpb24gcmVtb3ZlX2V4dChwYXRoTGlrZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gcGF0aC5qb2luKHBhdGguZGlybmFtZShwYXRoTGlrZSksIHBhdGguYmFzZW5hbWUocGF0aExpa2UsIHBhdGguZXh0bmFtZShwYXRoTGlrZSkpKTtcbn1cblxuXG4vKip7QGxpbmsgcmVtb3ZlX2V4dCBVc2VzIHJlbW92ZV9leHR9ICovXG5mdW5jdGlvbiBwdXNoX2JlZm9yZV9leHQocGF0aExpa2U6IHN0cmluZywgcHVzaDogc3RyaW5nIHwgbnVtYmVyKTogc3RyaW5nIHtcbiAgICAvLyBzYWZlIGJlY2F1c2UgcGF0aC5leHRuYW1lIHJldHVybnMgJycgaWYgbm8gZXh0XG4gICAgbGV0IGV4dCA9IHBhdGguZXh0bmFtZShwYXRoTGlrZSk7XG4gICAgcmV0dXJuIGAke3JlbW92ZV9leHQocGF0aExpa2UpfSR7cHVzaH0ke2V4dH1gO1xufVxuXG4vKipAZXhhbXBsZVxuICogY29uc3QgWyBmaWxlbmFtZSwgZXh0IF0gPSBteWZzLnNwbGl0X2V4dChcInNodWJpLmR1YmlcIik7XG4gKiA+Pj4gZmlsZW5hbWUgICAgIC8vIFwic2h1YmlcIlxuICogPj4+IGV4dCAgICAgICAgICAvLyBcIi5kdWJpXCIqL1xuZnVuY3Rpb24gc3BsaXRfZXh0KHBhdGhMaWtlOiBzdHJpbmcpOiBbIHN0cmluZywgc3RyaW5nIF0ge1xuICAgIC8vICdzaHViaS4nICAgICAgICAgJ3NodWJpJywgJy4nXG4gICAgLy8gJ3NodWJpJyAgICAgICAgICAnc2h1YmknLCAnJ1xuICAgIC8vICcvaG9tZS9zaHViaScgICAgJ3NodWJpJywgJydcbiAgICBjb25zdCBleHQgPSBwYXRoLmV4dG5hbWUocGF0aExpa2UpO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gcGF0aC5iYXNlbmFtZShwYXRoTGlrZSwgZXh0KTtcbiAgICByZXR1cm4gWyBmaWxlbmFtZSwgZXh0IF07XG59XG5cbi8qKlJldHVybnMgd2hldGhlciBleGlzdGVkIGFscmVhZHkqL1xuZnVuY3Rpb24gY3JlYXRlSWZOb3RFeGlzdHMocGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCAhZnMuZXhpc3RzU3luYyhwYXRoKSApIHtcbiAgICAgICAgICAgIGZzLm1rZGlyU3luYyhwYXRoKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgY3JlYXRlSWZOb3RFeGlzdHMocGF0aCkgY3JlYXRlZDogJHtwYXRofWApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgfSBjYXRjaCAoIGUgKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYGNyZWF0ZUlmTm90RXhpc3RzKCR7cGF0aH0pYCwgZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0VtcHR5KGFic3BhdGg6IHN0cmluZywgeyByZWN1cnNpdmUgfTogeyByZWN1cnNpdmU6IGJvb2xlYW4gfSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGl0ZW1zID0gZnMucmVhZGRpclN5bmMoYWJzcGF0aCk7XG4gICAgaWYgKCAhcmVjdXJzaXZlICkge1xuICAgICAgICByZXR1cm4gIWJvb2woaXRlbXMpXG4gICAgfVxuICAgIGZvciAoIGxldCBpdGVtIG9mIGl0ZW1zICkge1xuICAgICAgICBjb25zdCBpdGVtQWJzID0gcGF0aC5qb2luKGFic3BhdGgsIGl0ZW0pO1xuICAgICAgICBsZXQgc3RhdHMgPSBmcy5zdGF0U3luYyhpdGVtQWJzKTtcbiAgICAgICAgXG4gICAgICAgIGlmICggc3RhdHMuaXNEaXJlY3RvcnkoKSApIHtcbiAgICAgICAgICAgIGxldCBlbXB0eSA9IGlzRW1wdHkoaXRlbUFicywgeyByZWN1cnNpdmUgOiB0cnVlIH0pO1xuICAgICAgICAgICAgaWYgKCAhZW1wdHkgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICAgIFxufVxuXG4vKipSZXR1cm5zIGEgbGlzdCBvZiBhYnNvbHV0ZSBwYXRocyBvZiBlbXB0eSBkaXJzKi9cbmZ1bmN0aW9uIGdldEVtcHR5RGlycyhhYnNwYXRoOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgZW1wdHlEaXJzID0gW107XG4gICAgY29uc3QgaXRlbXMgPSBmcy5yZWFkZGlyU3luYyhhYnNwYXRoKTtcbiAgICBsZXQgcmVtb3ZlZEZpbGVzID0gZmFsc2U7XG4gICAgaWYgKCAhYm9vbChpdGVtcykgKVxuICAgICAgICByZXR1cm4gWyBhYnNwYXRoIF07XG4gICAgXG4gICAgZm9yICggbGV0IGl0ZW0gb2YgaXRlbXMgKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1BYnMgPSBwYXRoLmpvaW4oYWJzcGF0aCwgaXRlbSk7XG4gICAgICAgIGxldCBzdGF0cyA9IGZzLnN0YXRTeW5jKGl0ZW1BYnMpO1xuICAgICAgICBpZiAoIHN0YXRzLmlzRGlyZWN0b3J5KCkgKSB7XG4gICAgICAgICAgICBpZiAoIGlzRW1wdHkoaXRlbUFicywgeyByZWN1cnNpdmUgOiB0cnVlIH0pICkge1xuICAgICAgICAgICAgICAgIGVtcHR5RGlycy5wdXNoKGl0ZW1BYnMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbXB0eURpcnMucHVzaCguLi5nZXRFbXB0eURpcnMoaXRlbUFicykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3N0YXRzLnNpemU6Jywgc3RhdHMuc2l6ZSk7XG4gICAgICAgICAgICBpZiAoIHN0YXRzLnNpemUgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgZnMudW5saW5rU3luYyhpdGVtQWJzKTtcbiAgICAgICAgICAgICAgICByZW1vdmVkRmlsZXMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICggcmVtb3ZlZEZpbGVzICkge1xuICAgICAgICAvLyBub2luc3BlY3Rpb24gVGFpbFJlY3Vyc2lvbkpTXG4gICAgICAgIHJldHVybiBnZXRFbXB0eURpcnMoYWJzcGF0aCk7XG4gICAgfVxuICAgIHJldHVybiBlbXB0eURpcnM7XG4gICAgXG59XG5cbmZ1bmN0aW9uIHJlbW92ZUVtcHR5RGlycyhhYnNwYXRoOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBlbXB0eWRpcnMgPSBnZXRFbXB0eURpcnMoYWJzcGF0aCk7XG4gICAgY29uc29sZS5sb2coeyBlbXB0eWRpcnMgfSk7XG4gICAgZm9yICggbGV0IGRpciBvZiBlbXB0eWRpcnMgKSB7XG4gICAgICAgIGZzLnJtZGlyU3luYyhkaXIpXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgc3BsaXRfZXh0LFxuICAgIHJlcGxhY2VfZXh0LFxuICAgIHJlbW92ZV9leHQsXG4gICAgcHVzaF9iZWZvcmVfZXh0LFxuICAgIGlzX25hbWUsXG4gICAgY3JlYXRlSWZOb3RFeGlzdHMsXG4gICAgaXNFbXB0eSxcbiAgICBnZXRFbXB0eURpcnMsXG4gICAgcmVtb3ZlRW1wdHlEaXJzXG59XG4iXX0=