"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.log('src/MyAlert/index.ts');
const sweetalert2_1 = require("sweetalert2");
const bhe_1 = require("../bhe");
const path = require("path");
const util_1 = require("../util");
const swalTypes = {
    info: 0,
    success: 1,
    question: 2,
    warning: 3,
    error: 4
};
function activeIsToast() {
    if (!sweetalert2_1.default.isVisible()) {
        return false;
    }
    return sweetalert2_1.default.getPopup().classList.contains('swal2-toast');
}
function activeType() {
    if (!sweetalert2_1.default.isVisible()) {
        return undefined;
    }
    const classes = sweetalert2_1.default.getIcons().find(div => div.style.display != 'none').classList.value;
    for (let type of ['success', 'error', 'warning', 'info', 'question']) {
        if (classes.includes(type)) {
            return type;
        }
    }
    console.warn(`MyAlert.index.ts activeType() couldnt find type. classes: ${classes}`);
}
async function generic(options) {
    let propname;
    let prop;
    if (options.text || options.html) {
        if (options.text) {
            propname = 'text';
            prop = options.text;
        }
        else if (options.html) {
            propname = 'html';
            prop = options.html;
        }
        if (typeof prop === 'string') {
            if (prop.includes('\n')) {
                prop = prop.replaceAll('\n', '<br>');
            }
        }
        else if (util_1.isObject(prop)) {
            prop = JSON.stringify(prop);
        }
        options[propname] = prop;
    }
    options = Object.assign({ animation: false, width: '90vw', position: options.toast ? "bottom" : "center", showConfirmButton: !options.toast, timer: null }, options);
    if (sweetalert2_1.default.isVisible()) {
        const takePrecedence = (!options.toast && activeIsToast()) || (swalTypes[options.type] > swalTypes[activeType()]);
        if (takePrecedence) {
            return sweetalert2_1.default.fire(options);
        }
        const currentQueueStep = sweetalert2_1.default.getQueueStep();
        if (currentQueueStep === null) {
            const timedout = !(await util_1.waitUntil(() => !sweetalert2_1.default.isVisible(), 500, 60000));
            if (timedout) {
                console.warn(`Swal.generic() | time out waiting for existing swal to close`);
                return undefined;
            }
            const results = await sweetalert2_1.default.queue([options]);
            return results[0];
        }
        else {
            sweetalert2_1.default.insertQueueStep(options);
            return;
        }
    }
    const results = await sweetalert2_1.default.queue([options]);
    return results[0];
}
const smallMixin = sweetalert2_1.default.mixin({
    position: "bottom-start",
    showConfirmButton: false,
    timer: 8000,
    toast: true,
});
const withConfirm = {
    cancelButtonText: "No",
    confirmButtonText: "Yes",
    showCancelButton: true,
    showConfirmButton: true,
    timer: null,
};
const blockingOptions = {
    allowEnterKey: false,
    allowEscapeKey: false,
    allowOutsideClick: false,
    showCancelButton: false,
    showCloseButton: false,
    showConfirmButton: false,
    timer: null
};
const threeButtonsOptions = Object.assign(Object.assign({}, blockingOptions), { showConfirmButton: true, showCancelButton: true });
const blockingSwalMixin = sweetalert2_1.default.mixin(blockingOptions);
const small = {
    _question(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'question' }));
    },
    _info(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'info' }));
    },
    _success(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'success' }));
    },
    _error(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'error' }));
    },
    _warning(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { showConfirmButton: true, type: 'warning' }));
    },
    error(title, text) {
        return smallMixin.fire({
            title,
            text,
            type: "error",
        });
    },
    info(title, text = null, showConfirmBtns = false) {
        let infoOptions = {
            title,
            text,
            type: "info",
        };
        if (showConfirmBtns)
            infoOptions = Object.assign(Object.assign({}, infoOptions), withConfirm);
        return smallMixin.fire(infoOptions);
    },
    success(title, text = null) {
        return generic({
            title,
            text,
            type: "success",
            toast: true
        });
    },
    warning(title, text = null) {
        let warningOptions = {
            title,
            text,
            showConfirmButton: true,
            timer: null,
            type: "warning"
        };
        return smallMixin.fire(warningOptions);
    },
};
const big = {
    async error(options) {
        var _a;
        if (((_a = options) === null || _a === void 0 ? void 0 : _a.html) instanceof Error) {
            const error = options.html;
            const { what, where, cleanstack } = error.toObj();
            console.warn('Error!', error, { cleanstack });
            options.html = `${what}<p>${where}</p>`;
        }
        const dirname = new Date().human();
        const { default: Glob } = require('../Glob');
        if (LOG || !Glob.BigConfig.get('dev')) {
            options.onOpen = async () => {
                await util_1.takeScreenshot(dirname);
            };
            options.onAfterClose = async () => {
                await util_1.wait(500);
                await util_1.takeScreenshot(dirname);
            };
            options.html += `<p>Logs and screenshot saved to errors/${path.basename(SESSION_PATH_ABS)}/${dirname}</p>`;
        }
        return blockingSwalMixin.fire(Object.assign({ type: 'error', showConfirmButton: true }, options));
    },
    warning(options) {
        return this.oneButton(Object.assign({ type: 'warning' }, options));
    },
    async confirm(options) {
        const { value } = await this.oneButton(Object.assign({ type: 'question', cancelButtonText: "No", confirmButtonText: "Yes", showCancelButton: true, showConfirmButton: true }, options));
        return !!value;
    },
    blocking(options, moreOptions) {
        if (moreOptions && moreOptions.strings && moreOptions.clickFn) {
            let { strings, clickFn } = moreOptions;
            let paragraphs = strings
                .map(s => bhe_1.paragraph({ cls: 'clickable', text: s }))
                .map(pElem => pElem.click(() => clickFn(pElem)));
            options = Object.assign(Object.assign({}, options), { onBeforeOpen(modalElement) {
                    console.log('modalElement:', modalElement);
                    return bhe_1.elem({ id: 'swal2-content' })
                        .append(...paragraphs);
                } });
        }
        else {
            options = Object.assign({ showConfirmButton: true, showCancelButton: true }, options);
        }
        if (options.showConfirmButton || options.showCancelButton || options.onOpen) {
            return sweetalert2_1.default.fire(Object.assign(Object.assign({}, blockingOptions), options));
        }
        else {
            return new Promise(resolve => sweetalert2_1.default.fire(Object.assign(Object.assign(Object.assign({}, blockingOptions), options), { onOpen: v => resolve(v) })));
        }
    },
    oneButton(options) {
        return generic(Object.assign(Object.assign(Object.assign({}, blockingOptions), { showConfirmButton: true }), options));
    },
    async twoButtons(options) {
        const { value } = await sweetalert2_1.default.fire(Object.assign({ showCancelButton: true }, options));
        return value ? "confirm" : "second";
    },
    async threeButtons(options) {
        let thirdButtonCss;
        if (options.thirdButtonType === "warning") {
            thirdButtonCss = { backgroundColor: '#FFC66D', color: 'black' };
        }
        console.log({ thirdButtonCss });
        let action;
        const onBeforeOpen = (modal) => {
            let el = bhe_1.elem({
                htmlElement: modal,
                children: { actions: '.swal2-actions' }
            });
            el.actions.append(bhe_1.button({ cls: `swal2-confirm swal2-styled`, html: options.thirdButtonText })
                .css(thirdButtonCss)
                .click((ev) => {
                action = "third";
                sweetalert2_1.default.clickConfirm();
            }));
        };
        options = Object.assign(Object.assign({}, options), { onBeforeOpen, showCancelButton: true });
        const { value } = await sweetalert2_1.default.fire(options);
        if (value) {
            if (action === undefined) {
                action = "confirm";
            }
        }
        else {
            action = "cancel";
        }
        return action;
    }
};
exports.default = Object.assign({ small, big }, sweetalert2_1.default);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUNwQyw2Q0FBd0Y7QUFDeEYsZ0NBQW9FO0FBQ3BFLDZCQUE2QjtBQUM3QixrQ0FBeUU7QUFFekUsTUFBTSxTQUFTLEdBQUc7SUFDZCxJQUFJLEVBQUUsQ0FBQztJQUNQLE9BQU8sRUFBRSxDQUFDO0lBQ1YsUUFBUSxFQUFFLENBQUM7SUFDWCxPQUFPLEVBQUUsQ0FBQztJQUNWLEtBQUssRUFBRSxDQUFDO0NBQ1gsQ0FBQztBQUVGLFNBQVMsYUFBYTtJQUNsQixJQUFJLENBQUMscUJBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtRQUNuQixPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUNELE9BQU8scUJBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBQzVELENBQUM7QUFFRCxTQUFTLFVBQVU7SUFDZixJQUFJLENBQUMscUJBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtRQUNuQixPQUFPLFNBQVMsQ0FBQTtLQUNuQjtJQUNELE1BQU0sT0FBTyxHQUFHLHFCQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztJQUN6RixLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxFQUFFO1FBQ2xFLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN4QixPQUFPLElBQXNCLENBQUE7U0FDaEM7S0FDSjtJQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMs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ZW50IjpbIi8qKmltcG9ydCBBbGVydCBmcm9tICdNeUFsZXJ0JyAob3IgYW55IG90aGVyIG5hbWUpKi9cblxuXG5jb25zb2xlLmxvZygnc3JjL015QWxlcnQvaW5kZXgudHMnKTtcbmltcG9ydCBTd2FsLCB7IFN3ZWV0QWxlcnRSZXN1bHQsIFN3ZWV0QWxlcnRPcHRpb25zLCBTd2VldEFsZXJ0VHlwZSB9IGZyb20gJ3N3ZWV0YWxlcnQyJztcbmltcG9ydCB7IHBhcmFncmFwaCwgZWxlbSwgQmV0dGVySFRNTEVsZW1lbnQsIGJ1dHRvbiB9IGZyb20gXCIuLi9iaGVcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IHdhaXQsIHRha2VTY3JlZW5zaG90LCBpc09iamVjdCwgc3RyLCB3YWl0VW50aWwgfSBmcm9tIFwiLi4vdXRpbFwiO1xuXG5jb25zdCBzd2FsVHlwZXMgPSB7XG4gICAgaW5mbzogMCxcbiAgICBzdWNjZXNzOiAxLFxuICAgIHF1ZXN0aW9uOiAyLFxuICAgIHdhcm5pbmc6IDMsXG4gICAgZXJyb3I6IDRcbn07XG5cbmZ1bmN0aW9uIGFjdGl2ZUlzVG9hc3QoKTogYm9vbGVhbiB7XG4gICAgaWYgKCFTd2FsLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIFN3YWwuZ2V0UG9wdXAoKS5jbGFzc0xpc3QuY29udGFpbnMoJ3N3YWwyLXRvYXN0Jylcbn1cblxuZnVuY3Rpb24gYWN0aXZlVHlwZSgpOiBTd2VldEFsZXJ0VHlwZSB7XG4gICAgaWYgKCFTd2FsLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gICAgY29uc3QgY2xhc3NlcyA9IFN3YWwuZ2V0SWNvbnMoKS5maW5kKGRpdiA9PiBkaXYuc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpLmNsYXNzTGlzdC52YWx1ZTtcbiAgICBmb3IgKGxldCB0eXBlIG9mIFsnc3VjY2VzcycsICdlcnJvcicsICd3YXJuaW5nJywgJ2luZm8nLCAncXVlc3Rpb24nXSkge1xuICAgICAgICBpZiAoY2xhc3Nlcy5pbmNsdWRlcyh0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGUgYXMgU3dlZXRBbGVydFR5cGVcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zb2xlLndhcm4oYE15QWxlcnQuaW5kZXgudHMgYWN0aXZlVHlwZSgpIGNvdWxkbnQgZmluZCB0eXBlLiBjbGFzc2VzOiAke2NsYXNzZXN9YClcbn1cblxuLyoqQ29udmVydHMgbmV3bGluZXMgdG8gaHRtbCA8YnI+LCBhZXN0aGV0aWMgZGVmYXVsdHMgKHRpbWVyOm51bGwpLCBhbmQgbWFuYWdlcyBTd2FsIHF1ZXVlLiovXG5hc3luYyBmdW5jdGlvbiBnZW5lcmljKG9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PiB7XG4gICAgbGV0IHByb3BuYW1lO1xuICAgIGxldCBwcm9wO1xuICAgIGlmIChvcHRpb25zLnRleHQgfHwgb3B0aW9ucy5odG1sKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnRleHQpIHtcbiAgICAgICAgICAgIHByb3BuYW1lID0gJ3RleHQnO1xuICAgICAgICAgICAgcHJvcCA9IG9wdGlvbnMudGV4dDtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmh0bWwpIHtcbiAgICAgICAgICAgIHByb3BuYW1lID0gJ2h0bWwnO1xuICAgICAgICAgICAgcHJvcCA9IG9wdGlvbnMuaHRtbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAocHJvcC5pbmNsdWRlcygnXFxuJykpIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gcHJvcC5yZXBsYWNlQWxsKCdcXG4nLCAnPGJyPicpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocHJvcCkpIHtcbiAgICAgICAgICAgIHByb3AgPSBKU09OLnN0cmluZ2lmeShwcm9wKVxuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnNbcHJvcG5hbWVdID0gcHJvcDtcbiAgICB9XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgICAgYW5pbWF0aW9uOiBmYWxzZSxcbiAgICAgICAgd2lkdGg6ICc5MHZ3JyxcbiAgICAgICAgcG9zaXRpb246IG9wdGlvbnMudG9hc3QgPyBcImJvdHRvbVwiIDogXCJjZW50ZXJcIixcbiAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246ICFvcHRpb25zLnRvYXN0LFxuICAgICAgICAvLyB0aW1lcjogODAwMCxcbiAgICAgICAgdGltZXI6IG51bGwsXG4gICAgICAgIC4uLm9wdGlvbnNcbiAgICB9O1xuICAgIGlmIChTd2FsLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgIC8vIG5vdC10b2FzdCB0cnVtcHMgdG9hc3QsIHdhcm5pbmcgdHJ1bXBzIHN1Y2Nlc3NcbiAgICAgICAgY29uc3QgdGFrZVByZWNlZGVuY2UgPSAoIW9wdGlvbnMudG9hc3QgJiYgYWN0aXZlSXNUb2FzdCgpKSB8fCAoc3dhbFR5cGVzW29wdGlvbnMudHlwZV0gPiBzd2FsVHlwZXNbYWN0aXZlVHlwZSgpXSk7XG4gICAgICAgIGlmICh0YWtlUHJlY2VkZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIFN3YWwuZmlyZShvcHRpb25zKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN1cnJlbnRRdWV1ZVN0ZXAgPSBTd2FsLmdldFF1ZXVlU3RlcCgpO1xuICAgICAgICBpZiAoY3VycmVudFF1ZXVlU3RlcCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gKiBTd2FsIGV4aXN0cywgYnV0IGZpcmVkIHRocm91Z2ggYGZpcmVgIGFuZCBub3QgYHF1ZXVlYFxuICAgICAgICAgICAgY29uc3QgdGltZWRvdXQgPSAhKGF3YWl0IHdhaXRVbnRpbCgoKSA9PiAhU3dhbC5pc1Zpc2libGUoKSwgNTAwLCA2MDAwMCkpO1xuICAgICAgICAgICAgaWYgKHRpbWVkb3V0KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBTd2FsLmdlbmVyaWMoKSB8IHRpbWUgb3V0IHdhaXRpbmcgZm9yIGV4aXN0aW5nIHN3YWwgdG8gY2xvc2VgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgU3dhbC5xdWV1ZShbb3B0aW9uc10pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHNbMF1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vICogU3dhbCBleGlzdHMsIGFuZCBmaXJlZCB0aHJvdWdoIGBxdWV1ZWBcbiAgICAgICAgICAgIFN3YWwuaW5zZXJ0UXVldWVTdGVwKG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgU3dhbC5xdWV1ZShbb3B0aW9uc10pO1xuICAgIHJldHVybiByZXN1bHRzWzBdXG59XG5cbmNvbnN0IHNtYWxsTWl4aW46IHR5cGVvZiBTd2FsID0gU3dhbC5taXhpbih7XG4gICAgcG9zaXRpb246IFwiYm90dG9tLXN0YXJ0XCIsXG4gICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLFxuICAgIHRpbWVyOiA4MDAwLFxuICAgIHRvYXN0OiB0cnVlLFxuXG59KTtcbmNvbnN0IHdpdGhDb25maXJtOiBTd2VldEFsZXJ0T3B0aW9ucyA9IHtcbiAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vXCIsXG4gICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzXCIsXG4gICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSxcbiAgICB0aW1lcjogbnVsbCxcblxufTtcbmNvbnN0IGJsb2NraW5nT3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMgPSB7XG4gICAgYWxsb3dFbnRlcktleTogZmFsc2UsXG4gICAgYWxsb3dFc2NhcGVLZXk6IGZhbHNlLFxuICAgIGFsbG93T3V0c2lkZUNsaWNrOiBmYWxzZSxcbiAgICBzaG93Q2FuY2VsQnV0dG9uOiBmYWxzZSwgLy8gZGVmYXVsdCBmYWxzZVxuICAgIHNob3dDbG9zZUJ1dHRvbjogZmFsc2UsIC8vIGRlZmF1bHQgZmFsc2VcbiAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsXG4gICAgdGltZXI6IG51bGxcbiAgICAvLyB3aWR0aCA6IFwiOTB2d1wiLFxuXG5cbn07XG5jb25zdCB0aHJlZUJ1dHRvbnNPcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyA9IHtcbiAgICAuLi5ibG9ja2luZ09wdGlvbnMsXG4gICAgc2hvd0NvbmZpcm1CdXR0b246IHRydWUsXG4gICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbn07XG5jb25zdCBibG9ja2luZ1N3YWxNaXhpbiA9IFN3YWwubWl4aW4oYmxvY2tpbmdPcHRpb25zKTtcbnR5cGUgU21hbGwgPSB7XG4gICAgX2Vycm9yKG9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBfaW5mbyhvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgX3F1ZXN0aW9uKG9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBfc3VjY2VzcyhvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgX3dhcm5pbmcob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIGVycm9yKHRpdGxlOiBzdHJpbmcsIHRleHQ6IHN0cmluZyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgaW5mbyh0aXRsZTogc3RyaW5nLCB0ZXh0PzogKHN0cmluZyB8IG51bGwpLCBzaG93Q29uZmlybUJ0bnM/OiBib29sZWFuKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBzdWNjZXNzKHRpdGxlOiBzdHJpbmcsIHRleHQ/OiAoc3RyaW5nIHwgbnVsbCksIHRpbWVyPzogbnVtYmVyKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICB3YXJuaW5nKHRpdGxlOiBzdHJpbmcsIHRleHQ/OiAoc3RyaW5nIHwgbnVsbCksIHNob3dDb25maXJtQnRucz86IGJvb2xlYW4pOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxufVxuXG5jb25zdCBzbWFsbDogU21hbGwgPSB7XG4gICAgX3F1ZXN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHNtYWxsTWl4aW4uZmlyZSh7IC4uLm9wdGlvbnMsIHR5cGU6ICdxdWVzdGlvbicgfSlcbiAgICB9LFxuICAgIF9pbmZvKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHNtYWxsTWl4aW4uZmlyZSh7IC4uLm9wdGlvbnMsIHR5cGU6ICdpbmZvJyB9KVxuICAgIH0sXG4gICAgX3N1Y2Nlc3Mob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHsgLi4ub3B0aW9ucywgdHlwZTogJ3N1Y2Nlc3MnIH0pXG4gICAgfSxcbiAgICBfZXJyb3Iob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHsgLi4ub3B0aW9ucywgdHlwZTogJ2Vycm9yJyB9KVxuICAgIH0sXG4gICAgX3dhcm5pbmcob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSwgdHlwZTogJ3dhcm5pbmcnXG4gICAgICAgIH0pXG4gICAgfSxcbiAgICBlcnJvcih0aXRsZSwgdGV4dCkge1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHtcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcblxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGluZm8odGl0bGUsIHRleHQgPSBudWxsLCBzaG93Q29uZmlybUJ0bnMgPSBmYWxzZSkge1xuICAgICAgICBsZXQgaW5mb09wdGlvbnMgPSB7XG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0eXBlOiBcImluZm9cIixcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHNob3dDb25maXJtQnRucylcbiAgICAgICAgICAgIGluZm9PcHRpb25zID0geyAuLi5pbmZvT3B0aW9ucywgLi4ud2l0aENvbmZpcm0gfTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKGluZm9PcHRpb25zKTtcbiAgICB9LFxuICAgIHN1Y2Nlc3ModGl0bGUsIHRleHQgPSBudWxsKSB7XG5cbiAgICAgICAgcmV0dXJuIGdlbmVyaWMoe1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICB0b2FzdDogdHJ1ZVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgd2FybmluZyh0aXRsZSwgdGV4dCA9IG51bGwpIHtcbiAgICAgICAgbGV0IHdhcm5pbmdPcHRpb25zID0ge1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IHRydWUsXG4gICAgICAgICAgICB0aW1lcjogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHdhcm5pbmdPcHRpb25zKTtcbiAgICB9LFxuXG59O1xuZXhwb3J0IHR5cGUgQ3JlYXRlQ29uZmlybVRoaXJkID0gXCJjb25maXJtXCIgfCBcImNhbmNlbFwiIHwgXCJ0aGlyZFwiO1xudHlwZSBCaWcgPSB7XG5cbiAgICBlcnJvcihvcHRpb25zOiBPbWl0PFN3ZWV0QWxlcnRPcHRpb25zLCAnb25PcGVuJyB8ICdvbkFmdGVyQ2xvc2UnPiAmIHsgaHRtbDogc3RyaW5nIHwgRXJyb3IgfSk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgd2FybmluZyhvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgY29uZmlybShvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8Ym9vbGVhbj4sXG4gICAgYmxvY2tpbmcob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMsIG1vcmVPcHRpb25zPzogeyBzdHJpbmdzOiBzdHJpbmdbXSwgY2xpY2tGbjogKGJoZTogQmV0dGVySFRNTEVsZW1lbnQpID0+IGFueSB9KTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBvbmVCdXR0b24ob3B0aW9ucz86IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICB0d29CdXR0b25zKG9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxcImNvbmZpcm1cIiB8IFwic2Vjb25kXCI+XG4gICAgdGhyZWVCdXR0b25zKG9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zICYgeyB0aGlyZEJ1dHRvblRleHQ6IHN0cmluZywgdGhpcmRCdXR0b25UeXBlPzogXCJjb25maXJtXCIgfCBcIndhcm5pbmdcIiB9KTogUHJvbWlzZTxDcmVhdGVDb25maXJtVGhpcmQ+XG59XG5cbmNvbnN0IGJpZzogQmlnID0ge1xuXG4gICAgYXN5bmMgZXJyb3Iob3B0aW9ucykge1xuXG4gICAgICAgIGlmIChvcHRpb25zPy5odG1sIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gb3B0aW9ucy5odG1sO1xuXG5cbiAgICAgICAgICAgIGNvbnN0IHsgd2hhdCwgd2hlcmUsIGNsZWFuc3RhY2sgfSA9IGVycm9yLnRvT2JqKCk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIScsIGVycm9yLCB7IGNsZWFuc3RhY2sgfSk7XG4gICAgICAgICAgICBvcHRpb25zLmh0bWwgPSBgJHt3aGF0fTxwPiR7d2hlcmV9PC9wPmBcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXJuYW1lID0gbmV3IERhdGUoKS5odW1hbigpO1xuICAgICAgICBjb25zdCB7IGRlZmF1bHQ6IEdsb2IgfSA9IHJlcXVpcmUoJy4uL0dsb2InKTtcbiAgICAgICAgaWYgKExPRyB8fCAhR2xvYi5CaWdDb25maWcuZ2V0KCdkZXYnKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5vbk9wZW4gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGFrZVNjcmVlbnNob3QoZGlybmFtZSk7XG5cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvcHRpb25zLm9uQWZ0ZXJDbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB3YWl0KDUwMCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGFrZVNjcmVlbnNob3QoZGlybmFtZSk7XG5cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvcHRpb25zLmh0bWwgKz0gYDxwPkxvZ3MgYW5kIHNjcmVlbnNob3Qgc2F2ZWQgdG8gZXJyb3JzLyR7cGF0aC5iYXNlbmFtZShTRVNTSU9OX1BBVEhfQUJTKX0vJHtkaXJuYW1lfTwvcD5gXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYmxvY2tpbmdTd2FsTWl4aW4uZmlyZSh7XG4gICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IHRydWUsXG4gICAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgd2FybmluZyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uZUJ1dHRvbih7IHR5cGU6ICd3YXJuaW5nJywgLi4ub3B0aW9ucyB9KTtcbiAgICB9LFxuICAgIGFzeW5jIGNvbmZpcm0ob3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBhd2FpdCB0aGlzLm9uZUJ1dHRvbih7XG4gICAgICAgICAgICB0eXBlOiAncXVlc3Rpb24nLFxuICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCJOb1wiLFxuICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzXCIsXG4gICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IHRydWUsXG4gICAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gISF2YWx1ZTtcbiAgICB9LFxuXG4gICAgYmxvY2tpbmcob3B0aW9ucywgbW9yZU9wdGlvbnMpIHtcblxuICAgICAgICBpZiAobW9yZU9wdGlvbnMgJiYgbW9yZU9wdGlvbnMuc3RyaW5ncyAmJiBtb3JlT3B0aW9ucy5jbGlja0ZuKSB7XG4gICAgICAgICAgICBsZXQgeyBzdHJpbmdzLCBjbGlja0ZuIH0gPSBtb3JlT3B0aW9ucztcblxuICAgICAgICAgICAgbGV0IHBhcmFncmFwaHMgPSBzdHJpbmdzXG4gICAgICAgICAgICAgICAgLy8gLm1hcChzID0+ICQoYDxwIGNsYXNzPVwiY2xpY2thYmxlXCI+JHtzfTwvcD5gKSlcbiAgICAgICAgICAgICAgICAubWFwKHMgPT4gcGFyYWdyYXBoKHsgY2xzOiAnY2xpY2thYmxlJywgdGV4dDogcyB9KSlcbiAgICAgICAgICAgICAgICAubWFwKHBFbGVtID0+IHBFbGVtLmNsaWNrKCgpID0+IGNsaWNrRm4ocEVsZW0pKSk7XG5cbiAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBvbkJlZm9yZU9wZW4obW9kYWxFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbW9kYWxFbGVtZW50OicsIG1vZGFsRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtKHsgaWQ6ICdzd2FsMi1jb250ZW50JyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCguLi5wYXJhZ3JhcGhzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgeyAvLyBmb3JjZSBjb25maXJtIGFuZCBjYW5jZWwgYnV0dG9uc1xuICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnNob3dDb25maXJtQnV0dG9uIHx8IG9wdGlvbnMuc2hvd0NhbmNlbEJ1dHRvbiB8fCBvcHRpb25zLm9uT3Blbikge1xuICAgICAgICAgICAgLy8gLyBIYXBwZW5zIHdoZW4gbm90IG9yIGJhZCBtb3JlT3B0aW9uc1xuICAgICAgICAgICAgcmV0dXJuIFN3YWwuZmlyZSh7IC4uLmJsb2NraW5nT3B0aW9ucywgLi4ub3B0aW9ucyB9KTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVE9ETzogb25PcGVuIDogcmVzb2x2ZT9cblxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gU3dhbC5maXJlKHsgLi4uYmxvY2tpbmdPcHRpb25zLCAuLi5vcHRpb25zLCBvbk9wZW46IHYgPT4gcmVzb2x2ZSh2KSB9KSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG9uZUJ1dHRvbihvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucykge1xuICAgICAgICAvKmNvbnNvbGUubG9nKHsgdGl0bGUsIG9wdGlvbnMgfSk7XG4gICAgICAgICBjb25zdCB0eXBlb2Z0aXRsZSA9IHR5cGVvZiB0aXRsZTtcbiAgICAgICAgIGlmICggdHlwZW9mdGl0bGUgPT09IFwib2JqZWN0XCIgKSB7XG4gICAgICAgICBpZiAoIG9wdGlvbnMgKSB7XG4gICAgICAgICBpZiAoIG9wdGlvbnMuaHRtbCApIHtcbiAgICAgICAgIG9wdGlvbnMuaHRtbCArPSAnPGJyPic7XG4gICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgb3B0aW9ucy5odG1sID0gJyc7XG4gICAgICAgICB9XG4gICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgb3B0aW9ucyA9IHsgaHRtbCA6ICcnIH07XG4gICAgICAgICB9XG4gICAgICAgICBpZiAoIHRpdGxlIGluc3RhbmNlb2YgRXJyb3IgKSB7XG4gICAgICAgICB0aXRsZSA9ICdBbiBlcnJvciBoYXMgb2NjdXJyZWQnO1xuICAgICAgICAgb3B0aW9ucy5odG1sICs9IHRpdGxlLm1lc3NhZ2U7XG4gICAgICAgICBjb25zb2xlLmxvZyh7IHRpdGxlLCBvcHRpb25zIH0pO1xuICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgIGxldCBodG1sID0gYDxzdHlsZT5cbiAgICAgICAgIHNwYW4ge1xuICAgICAgICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcbiAgICAgICAgIG1hcmdpbi1sZWZ0OiA0MHB4O1xuICAgICAgICAgfVxuICAgICAgICAgPC9zdHlsZT5cbiAgICAgICAgIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOiBsZWZ0XCI+XG5cbiAgICAgICAgIGA7XG4gICAgICAgICBmb3IgKCBsZXQga2V5IG9mIE9iamVjdC5rZXlzKHRpdGxlKSApIHtcbiAgICAgICAgIGh0bWwgKz0gYDxwPjxiPiR7a2V5fTo8L2I+IDxzcGFuPiR7dGl0bGVba2V5XX08L3NwYW4+PC9wPmBcbiAgICAgICAgIH1cbiAgICAgICAgIGh0bWwgKz0gYDwvZGl2PmA7XG4gICAgICAgICBvcHRpb25zLmh0bWwgKz0gaHRtbDtcbiAgICAgICAgIHRpdGxlID0gJ1NvbWV0aGluZyBoYXBwZW5lZCc7XG5cbiAgICAgICAgIH1cbiAgICAgICAgIH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkodGl0bGUpICkge1xuICAgICAgICAgdGl0bGUgPSAnVGhpcyBpcyB3ZWlyZCc7XG4gICAgICAgICBvcHRpb25zLmh0bWwgKz0gdGl0bGUuam9pbignPC9icj4nKVxuICAgICAgICAgfSovXG4gICAgICAgIHJldHVybiBnZW5lcmljKHtcbiAgICAgICAgICAgIC4uLmJsb2NraW5nT3B0aW9ucyxcbiAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGFzeW5jIHR3b0J1dHRvbnMob3B0aW9ucykge1xuXG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGF3YWl0IFN3YWwuZmlyZSh7XG4gICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdmFsdWUgPyBcImNvbmZpcm1cIiA6IFwic2Vjb25kXCI7XG4gICAgfSxcbiAgICBhc3luYyB0aHJlZUJ1dHRvbnMob3B0aW9ucykge1xuXG4gICAgICAgIC8vIGNvbnN0IHRoaXJkQnV0dG9uVGV4dCA9IG9wdGlvbnMudGhpcmRCdXR0b25UZXh0ID8/ICdPdmVyd3JpdGUnO1xuICAgICAgICBsZXQgdGhpcmRCdXR0b25Dc3M7XG4gICAgICAgIGlmIChvcHRpb25zLnRoaXJkQnV0dG9uVHlwZSA9PT0gXCJ3YXJuaW5nXCIpIHtcbiAgICAgICAgICAgIHRoaXJkQnV0dG9uQ3NzID0geyBiYWNrZ3JvdW5kQ29sb3I6ICcjRkZDNjZEJywgY29sb3I6ICdibGFjaycgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coeyB0aGlyZEJ1dHRvbkNzcyB9KTtcbiAgICAgICAgbGV0IGFjdGlvbjogQ3JlYXRlQ29uZmlybVRoaXJkO1xuICAgICAgICBjb25zdCBvbkJlZm9yZU9wZW4gPSAobW9kYWw6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBsZXQgZWwgPSBlbGVtKHtcbiAgICAgICAgICAgICAgICBodG1sRWxlbWVudDogbW9kYWwsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IHsgYWN0aW9uczogJy5zd2FsMi1hY3Rpb25zJyB9XG4gICAgICAgICAgICB9KSBhcyBCZXR0ZXJIVE1MRWxlbWVudCAmIHsgYWN0aW9uczogQmV0dGVySFRNTEVsZW1lbnQgfTtcblxuICAgICAgICAgICAgZWwuYWN0aW9ucy5hcHBlbmQoXG4gICAgICAgICAgICAgICAgYnV0dG9uKHsgY2xzOiBgc3dhbDItY29uZmlybSBzd2FsMi1zdHlsZWRgLCBodG1sOiBvcHRpb25zLnRoaXJkQnV0dG9uVGV4dCB9KVxuXG4gICAgICAgICAgICAgICAgICAgIC5jc3ModGhpcmRCdXR0b25Dc3MpXG4gICAgICAgICAgICAgICAgICAgIC5jbGljaygoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IFwidGhpcmRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuY2xpY2tDb25maXJtKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgIH07XG4gICAgICAgIG9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIG9uQmVmb3JlT3Blbiwgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSB9O1xuICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBhd2FpdCBTd2FsLmZpcmUob3B0aW9ucyk7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgLy8vIEVpdGhlciB1c2VyIGNsaWNrZWQgQ29uZmlybSAoYWN0aW9uIGlzIHVuZGVmaW5lZCkgb3IgU3dhbC5jbGlja0NvbmZpcm0oKSAoYWN0aW9uIGlzIFwidGhpcmRcIilcbiAgICAgICAgICAgIGlmIChhY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGFjdGlvbiA9IFwiY29uZmlybVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0aW9uID0gXCJjYW5jZWxcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxufTtcbi8vIGV4cG9ydCBkZWZhdWx0IHsgYWxlcnRGbiwgc21hbGwsIGJpZywgY2xvc2UgOiBTd2FsLmNsb3NlLCBpc1Zpc2libGUgOiBTd2FsLmlzVmlzaWJsZSB9O1xuZXhwb3J0IGRlZmF1bHQgeyBzbWFsbCwgYmlnLCAuLi5Td2FsIH07XG4iXX0=