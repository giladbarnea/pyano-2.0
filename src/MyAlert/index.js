"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.log('src/MyAlert/index.ts');
const sweetalert2_1 = require("sweetalert2");
const bhe_1 = require("../bhe");
function alertFn() {
    console.log('alertFn');
}
const smallMixin = sweetalert2_1.default.mixin({
    animation: false,
    customClass: 'animated fadeIn',
    position: "bottom-start",
    showConfirmButton: false,
    timer: 8000,
    toast: true,
});
const withConfirm = {
    cancelButtonText: "No",
    confirmButtonText: "Yes",
    showCancelButton: true,
    showConfirmButton: true,
    timer: null,
};
const blockingOptions = {
    allowEnterKey: false,
    allowEscapeKey: false,
    allowOutsideClick: false,
    animation: false,
    customClass: 'animated fadeIn',
    showCancelButton: false,
    showCloseButton: false,
    showConfirmButton: false,
    width: "75vw"
};
const blockingSwalMixin = sweetalert2_1.default.mixin(blockingOptions);
const small = {
    _question(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'question' }));
    },
    _info(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'info' }));
    },
    _success(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'success' }));
    },
    _error(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'error' }));
    },
    _warning(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { showConfirmButton: true, type: 'warning' }));
    },
    error(title, text) {
        return smallMixin.fire({
            title,
            text,
            type: "error",
        });
    },
    info(title, text = null, showConfirmBtns = false) {
        let infoOptions = {
            title,
            text,
            type: "info",
        };
        if (showConfirmBtns)
            infoOptions = Object.assign(Object.assign({}, infoOptions), withConfirm);
        return smallMixin.fire(infoOptions);
    },
    success(title, text = null, timer = 4000) {
        return smallMixin.fire({
            title,
            text,
            type: "success",
            timer
        });
    },
    warning(title, text = null, showConfirmBtns = false) {
        let warningOptions = {
            title,
            text,
            type: "warning"
        };
        if (showConfirmBtns)
            warningOptions = Object.assign(Object.assign({}, warningOptions), withConfirm);
        return smallMixin.fire(warningOptions);
    },
};
const big = {
    error(options) {
        return blockingSwalMixin.fire(Object.assign({ type: 'error', showCloseButton: true }, options));
    },
    warning(options) {
        if (options.animation === false)
            options = Object.assign({ customClass: null }, options);
        return blockingSwalMixin.fire(Object.assign(Object.assign(Object.assign({}, withConfirm), { type: 'warning' }), options));
    },
    blocking(options, moreOptions) {
        if (moreOptions && moreOptions.strings && moreOptions.clickFn) {
            let { strings, clickFn } = moreOptions;
            let paragraphs = strings
                .map(s => bhe_1.paragraph({ cls: 'clickable', text: s }))
                .map(pElem => pElem.click(() => clickFn(pElem)));
            options = Object.assign(Object.assign({}, options), { onBeforeOpen(modalElement) {
                    console.log('modalElement:', modalElement);
                    return bhe_1.elem({ id: 'swal2-content' })
                        .append(...paragraphs);
                } });
        }
        else {
            options = Object.assign({ showConfirmButton: true, showCancelButton: true }, options);
        }
        if (options.showConfirmButton || options.showCancelButton || options.onOpen) {
            return sweetalert2_1.default.fire(Object.assign(Object.assign({}, blockingOptions), options));
        }
        else {
            return new Promise(resolve => sweetalert2_1.default.fire(Object.assign(Object.assign(Object.assign({}, blockingOptions), options), { onOpen: v => resolve(v) })));
        }
    }
};
exports.default = { alertFn, small, big, close: sweetalert2_1.default.close, isActive: sweetalert2_1.default.isVisible };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUNwQyw2Q0FBd0U7QUFDeEUsZ0NBQTREO0FBRTVELFNBQVMsT0FBTztJQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQUVELE1BQU0sVUFBVSxHQUFnQixxQkFBSSxDQUFDLEtBQUssQ0FBQztJQUN2QyxTQUFTLEVBQUcsS0FBSztJQUNqQixXQUFXLEVBQUcsaUJBQWlCO0lBQy9CLFFBQVEsRUFBRyxjQUFjO0lBQ3pCLGlCQUFpQixFQUFHLEtBQUs7SUFDekIsS0FBSyxFQUFHLElBQUk7SUFDWixLQUFLLEVBQUcsSUFBSTtDQUVmLENBQUMsQ0FBQztBQUNILE1BQU0sV0FBVyxHQUFzQjtJQUNuQyxnQkFBZ0IsRUFBRyxJQUFJO0lBQ3ZCLGlCQUFpQixFQUFHLEtBQUs7SUFDekIsZ0JBQWdCLEVBQUcsSUFBSTtJQUN2QixpQkFBaUIsRUFBRyxJQUFJO0lBQ3hCLEtBQUssRUFBRyxJQUFJO0NBRWYsQ0FBQztBQUNGLE1BQU0sZUFBZSxHQUFzQjtJQUN2QyxhQUFhLEVBQUcsS0FBSztJQUNyQixjQUFjLEVBQUcsS0FBSztJQUN0QixpQkFBaUIsRUFBRyxLQUFLO0lBQ3pCLFNBQVMsRUFBRyxLQUFLO0lBQ2pCLFdBQVcsRUFBRyxpQkFBaUI7SUFDL0IsZ0JBQWdCLEVBQUcsS0FBSztJQUN4QixlQUFlLEVBQUcsS0FBSztJQUN2QixpQkFBaUIsRUFBRyxLQUFLO0lBQ3pCLEtBQUssRUFBRyxNQUFNO0NBR2pCLENBQUM7QUFDRixNQUFNLGlCQUFpQixHQUFHLHFCQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBYXRELE1BQU0sS0FBSyxHQUFVO0lBQ2pCLFNBQVMsQ0FBQyxPQUFPO1FBQ2IsT0FBTyxV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QUFDLFNBQVMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqaW1wb3J0IEFsZXJ0IGZyb20gJ015QWxlcnQnIChvciBhbnkgb3RoZXIgbmFtZSkqL1xuY29uc29sZS5sb2coJ3NyYy9NeUFsZXJ0L2luZGV4LnRzJyk7XG5pbXBvcnQgU3dhbCwgeyBTd2VldEFsZXJ0UmVzdWx0LCBTd2VldEFsZXJ0T3B0aW9ucyB9IGZyb20gJ3N3ZWV0YWxlcnQyJztcbmltcG9ydCB7IHBhcmFncmFwaCwgZWxlbSwgQmV0dGVySFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vYmhlXCI7XG5cbmZ1bmN0aW9uIGFsZXJ0Rm4oKSB7XG4gICAgY29uc29sZS5sb2coJ2FsZXJ0Rm4nKTtcbn1cblxuY29uc3Qgc21hbGxNaXhpbjogdHlwZW9mIFN3YWwgPSBTd2FsLm1peGluKHtcbiAgICBhbmltYXRpb24gOiBmYWxzZSxcbiAgICBjdXN0b21DbGFzcyA6ICdhbmltYXRlZCBmYWRlSW4nLFxuICAgIHBvc2l0aW9uIDogXCJib3R0b20tc3RhcnRcIixcbiAgICBzaG93Q29uZmlybUJ1dHRvbiA6IGZhbHNlLFxuICAgIHRpbWVyIDogODAwMCxcbiAgICB0b2FzdCA6IHRydWUsXG4gICAgXG59KTtcbmNvbnN0IHdpdGhDb25maXJtOiBTd2VldEFsZXJ0T3B0aW9ucyA9IHtcbiAgICBjYW5jZWxCdXR0b25UZXh0IDogXCJOb1wiLFxuICAgIGNvbmZpcm1CdXR0b25UZXh0IDogXCJZZXNcIixcbiAgICBzaG93Q2FuY2VsQnV0dG9uIDogdHJ1ZSxcbiAgICBzaG93Q29uZmlybUJ1dHRvbiA6IHRydWUsXG4gICAgdGltZXIgOiBudWxsLFxuICAgIFxufTtcbmNvbnN0IGJsb2NraW5nT3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMgPSB7XG4gICAgYWxsb3dFbnRlcktleSA6IGZhbHNlLFxuICAgIGFsbG93RXNjYXBlS2V5IDogZmFsc2UsXG4gICAgYWxsb3dPdXRzaWRlQ2xpY2sgOiBmYWxzZSxcbiAgICBhbmltYXRpb24gOiBmYWxzZSxcbiAgICBjdXN0b21DbGFzcyA6ICdhbmltYXRlZCBmYWRlSW4nLFxuICAgIHNob3dDYW5jZWxCdXR0b24gOiBmYWxzZSwgLy8gZGVmYXVsdCBmYWxzZVxuICAgIHNob3dDbG9zZUJ1dHRvbiA6IGZhbHNlLCAvLyBkZWZhdWx0IGZhbHNlXG4gICAgc2hvd0NvbmZpcm1CdXR0b24gOiBmYWxzZSxcbiAgICB3aWR0aCA6IFwiNzV2d1wiXG4gICAgXG4gICAgXG59O1xuY29uc3QgYmxvY2tpbmdTd2FsTWl4aW4gPSBTd2FsLm1peGluKGJsb2NraW5nT3B0aW9ucyk7XG50eXBlIFNtYWxsID0ge1xuICAgIF9lcnJvcihvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgX2luZm8ob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIF9xdWVzdGlvbihvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgX3N1Y2Nlc3Mob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIF93YXJuaW5nKG9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBlcnJvcih0aXRsZTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIGluZm8odGl0bGU6IHN0cmluZywgdGV4dD86IChzdHJpbmcgfCBudWxsKSwgc2hvd0NvbmZpcm1CdG5zPzogYm9vbGVhbik6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgc3VjY2Vzcyh0aXRsZTogc3RyaW5nLCB0ZXh0PzogKHN0cmluZyB8IG51bGwpLCB0aW1lcj86IG51bWJlcik6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgd2FybmluZyh0aXRsZTogc3RyaW5nLCB0ZXh0PzogKHN0cmluZyB8IG51bGwpLCBzaG93Q29uZmlybUJ0bnM/OiBib29sZWFuKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0Pixcbn1cblxuY29uc3Qgc21hbGw6IFNtYWxsID0ge1xuICAgIF9xdWVzdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBzbWFsbE1peGluLmZpcmUoeyAuLi5vcHRpb25zLCB0eXBlIDogJ3F1ZXN0aW9uJyB9KVxuICAgIH0sXG4gICAgX2luZm8ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHsgLi4ub3B0aW9ucywgdHlwZSA6ICdpbmZvJyB9KVxuICAgIH0sXG4gICAgX3N1Y2Nlc3Mob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHsgLi4ub3B0aW9ucywgdHlwZSA6ICdzdWNjZXNzJyB9KVxuICAgIH0sXG4gICAgX2Vycm9yKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHNtYWxsTWl4aW4uZmlyZSh7IC4uLm9wdGlvbnMsIHR5cGUgOiAnZXJyb3InIH0pXG4gICAgfSxcbiAgICBfd2FybmluZyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBzbWFsbE1peGluLmZpcmUoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uIDogdHJ1ZSwgdHlwZSA6ICd3YXJuaW5nJ1xuICAgICAgICB9KVxuICAgIH0sXG4gICAgZXJyb3IodGl0bGUsIHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHNtYWxsTWl4aW4uZmlyZSh7XG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0eXBlIDogXCJlcnJvclwiLFxuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgaW5mbyh0aXRsZSwgdGV4dCA9IG51bGwsIHNob3dDb25maXJtQnRucyA9IGZhbHNlKSB7XG4gICAgICAgIGxldCBpbmZvT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHR5cGUgOiBcImluZm9cIixcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCBzaG93Q29uZmlybUJ0bnMgKVxuICAgICAgICAgICAgaW5mb09wdGlvbnMgPSB7IC4uLmluZm9PcHRpb25zLCAuLi53aXRoQ29uZmlybSB9O1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBzbWFsbE1peGluLmZpcmUoaW5mb09wdGlvbnMpO1xuICAgIH0sXG4gICAgc3VjY2Vzcyh0aXRsZSwgdGV4dCA9IG51bGwsIHRpbWVyID0gNDAwMCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHNtYWxsTWl4aW4uZmlyZSh7XG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0eXBlIDogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICB0aW1lclxuICAgICAgICB9KVxuICAgIH0sXG4gICAgd2FybmluZyh0aXRsZSwgdGV4dCA9IG51bGwsIHNob3dDb25maXJtQnRucyA9IGZhbHNlKSB7XG4gICAgICAgIGxldCB3YXJuaW5nT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHR5cGUgOiBcIndhcm5pbmdcIlxuICAgICAgICB9O1xuICAgICAgICBpZiAoIHNob3dDb25maXJtQnRucyApXG4gICAgICAgICAgICB3YXJuaW5nT3B0aW9ucyA9IHsgLi4ud2FybmluZ09wdGlvbnMsIC4uLndpdGhDb25maXJtIH07XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIHNtYWxsTWl4aW4uZmlyZSh3YXJuaW5nT3B0aW9ucyk7XG4gICAgfSxcbiAgICBcbn07XG50eXBlIEJpZyA9IHtcbiAgICBcbiAgICBlcnJvcihvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgd2FybmluZyhvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgXG4gICAgYmxvY2tpbmcob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMsIG1vcmVPcHRpb25zPzogeyBzdHJpbmdzOiBzdHJpbmdbXSwgY2xpY2tGbjogKGJoZTogQmV0dGVySFRNTEVsZW1lbnQpID0+IGFueSB9KTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0IHwgSFRNTEVsZW1lbnQ+LFxuICAgIFxufVxuY29uc3QgYmlnOiBCaWcgPSB7XG4gICAgZXJyb3Iob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gYmxvY2tpbmdTd2FsTWl4aW4uZmlyZSh7IHR5cGUgOiAnZXJyb3InLCBzaG93Q2xvc2VCdXR0b24gOiB0cnVlLCAuLi5vcHRpb25zIH0pO1xuICAgIH0sXG4gICAgd2FybmluZyhvcHRpb25zKSB7XG4gICAgICAgIGlmICggb3B0aW9ucy5hbmltYXRpb24gPT09IGZhbHNlIClcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7IGN1c3RvbUNsYXNzIDogbnVsbCwgLi4ub3B0aW9ucyB9O1xuICAgICAgICByZXR1cm4gYmxvY2tpbmdTd2FsTWl4aW4uZmlyZSh7IC4uLndpdGhDb25maXJtLCB0eXBlIDogJ3dhcm5pbmcnLCAuLi5vcHRpb25zIH0pO1xuICAgIH0sXG4gICAgXG4gICAgLy8gYmxvY2tpbmcob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMsIHsgc3RyaW5ncywgY2xpY2tGbiB9ID0ge30pOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+IHtcbiAgICBibG9ja2luZyhvcHRpb25zLCBtb3JlT3B0aW9ucykge1xuICAgICAgICBcbiAgICAgICAgaWYgKCBtb3JlT3B0aW9ucyAmJiBtb3JlT3B0aW9ucy5zdHJpbmdzICYmIG1vcmVPcHRpb25zLmNsaWNrRm4gKSB7XG4gICAgICAgICAgICBsZXQgeyBzdHJpbmdzLCBjbGlja0ZuIH0gPSBtb3JlT3B0aW9ucztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IHBhcmFncmFwaHMgPSBzdHJpbmdzXG4gICAgICAgICAgICAgICAgLy8gLm1hcChzID0+ICQoYDxwIGNsYXNzPVwiY2xpY2thYmxlXCI+JHtzfTwvcD5gKSlcbiAgICAgICAgICAgICAgICAubWFwKHMgPT4gcGFyYWdyYXBoKHsgY2xzIDogJ2NsaWNrYWJsZScsIHRleHQgOiBzIH0pKVxuICAgICAgICAgICAgICAgIC5tYXAocEVsZW0gPT4gcEVsZW0uY2xpY2soKCkgPT4gY2xpY2tGbihwRWxlbSkpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIG9uQmVmb3JlT3Blbihtb2RhbEVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdtb2RhbEVsZW1lbnQ6JywgbW9kYWxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0oeyBpZCA6ICdzd2FsMi1jb250ZW50JyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCguLi5wYXJhZ3JhcGhzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgeyAvLyBmb3JjZSBjb25maXJtIGFuZCBjYW5jZWwgYnV0dG9uc1xuICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbiA6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbiA6IHRydWUsXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBvcHRpb25zLnNob3dDb25maXJtQnV0dG9uIHx8IG9wdGlvbnMuc2hvd0NhbmNlbEJ1dHRvbiB8fCBvcHRpb25zLm9uT3BlbiApIHtcbiAgICAgICAgICAgIHJldHVybiBTd2FsLmZpcmUoeyAuLi5ibG9ja2luZ09wdGlvbnMsIC4uLm9wdGlvbnMgfSk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRPRE86IG9uT3BlbiA6IHJlc29sdmU/XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IFN3YWwuZmlyZSh7IC4uLmJsb2NraW5nT3B0aW9ucywgLi4ub3B0aW9ucywgb25PcGVuIDogdiA9PiByZXNvbHZlKHYpIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7IGFsZXJ0Rm4sIHNtYWxsLCBiaWcsIGNsb3NlIDogU3dhbC5jbG9zZSwgaXNBY3RpdmUgOiBTd2FsLmlzVmlzaWJsZSB9O1xuIl19