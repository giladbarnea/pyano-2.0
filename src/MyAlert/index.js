"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.log('src/MyAlert/index.ts');
const sweetalert2_1 = require("sweetalert2");
const bhe_1 = require("../bhe");
const path = require("path");
const util_1 = require("../util");
const smallMixin = sweetalert2_1.default.mixin({
    animation: false,
    customClass: 'animated fadeIn',
    position: "bottom-start",
    showConfirmButton: false,
    timer: 8000,
    toast: true,
});
const withConfirm = {
    cancelButtonText: "No",
    confirmButtonText: "Yes",
    showCancelButton: true,
    showConfirmButton: true,
    timer: null,
};
const blockingOptions = {
    allowEnterKey: false,
    allowEscapeKey: false,
    allowOutsideClick: false,
    animation: false,
    customClass: 'animated fadeIn',
    showCancelButton: false,
    showCloseButton: false,
    showConfirmButton: false,
    width: "75vw",
};
const threeButtonsOptions = Object.assign(Object.assign({}, blockingOptions), { showConfirmButton: true, showCancelButton: true });
const blockingSwalMixin = sweetalert2_1.default.mixin(blockingOptions);
const small = {
    _question(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'question' }));
    },
    _info(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'info' }));
    },
    _success(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'success' }));
    },
    _error(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'error' }));
    },
    _warning(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { showConfirmButton: true, type: 'warning' }));
    },
    error(title, text) {
        return smallMixin.fire({
            title,
            text,
            type: "error",
        });
    },
    info(title, text = null, showConfirmBtns = false) {
        let infoOptions = {
            title,
            text,
            type: "info",
        };
        if (showConfirmBtns)
            infoOptions = Object.assign(Object.assign({}, infoOptions), withConfirm);
        return smallMixin.fire(infoOptions);
    },
    success(title, text = null, timer = 6000) {
        return smallMixin.fire({
            title,
            text,
            type: "success",
            timer
        });
    },
    warning(title, text = null) {
        let warningOptions = {
            title,
            text,
            showConfirmButton: true,
            timer: null,
            type: "warning"
        };
        return smallMixin.fire(warningOptions);
    },
};
const big = {
    async error(options) {
        var _a;
        if (((_a = options) === null || _a === void 0 ? void 0 : _a.html) instanceof Error) {
            const error = options.html;
            const { what, where, cleanstack } = error.toObj();
            console.log({ cleanstack });
            options.html = `${what}<p>${where}</p>`;
        }
        const dirname = new Date().human();
        const { default: Glob } = require('../Glob');
        if (LOG || Glob.BigConfig.get('dev')) {
            options.onOpen = async () => {
                await util_1.takeScreenshot(dirname);
            };
            options.onAfterClose = async () => {
                await util_1.wait(500);
                await util_1.takeScreenshot(dirname);
            };
            options.html += `<p>Logs and screenshot saved to errors/${path.basename(SESSION_PATH_ABS)}/${dirname}</p>`;
        }
        return blockingSwalMixin.fire(Object.assign({ type: 'error', showConfirmButton: true }, options));
    },
    warning(options) {
        if (options.animation === false)
            options = Object.assign({ customClass: null }, options);
        return blockingSwalMixin.fire(Object.assign(Object.assign(Object.assign({}, withConfirm), { type: 'warning' }), options));
    },
    blocking(options, moreOptions) {
        if (moreOptions && moreOptions.strings && moreOptions.clickFn) {
            let { strings, clickFn } = moreOptions;
            let paragraphs = strings
                .map(s => bhe_1.paragraph({ cls: 'clickable', text: s }))
                .map(pElem => pElem.click(() => clickFn(pElem)));
            options = Object.assign(Object.assign({}, options), { onBeforeOpen(modalElement) {
                    console.log('modalElement:', modalElement);
                    return bhe_1.elem({ id: 'swal2-content' })
                        .append(...paragraphs);
                } });
        }
        else {
            options = Object.assign({ showConfirmButton: true, showCancelButton: true }, options);
        }
        if (options.showConfirmButton || options.showCancelButton || options.onOpen) {
            return sweetalert2_1.default.fire(Object.assign(Object.assign({}, blockingOptions), options));
        }
        else {
            return new Promise(resolve => sweetalert2_1.default.fire(Object.assign(Object.assign(Object.assign({}, blockingOptions), options), { onOpen: v => resolve(v) })));
        }
    },
    oneButton(title, options) {
        return blockingSwalMixin.fire(Object.assign({ title: title, showConfirmButton: true, customClass: 'animated fadeIn' }, options));
    },
    async twoButtons(options) {
        const { value } = await sweetalert2_1.default.fire(Object.assign({ showCancelButton: true, customClass: 'animated fadeIn' }, options));
        return value ? "confirm" : "second";
    },
    async threeButtons(options) {
        let thirdButtonCss;
        if (options.thirdButtonType === "warning") {
            thirdButtonCss = { backgroundColor: '#FFC66D', color: 'black' };
        }
        console.log({ thirdButtonCss });
        let action;
        const onBeforeOpen = (modal) => {
            let el = bhe_1.elem({
                htmlElement: modal,
                children: { actions: '.swal2-actions' }
            });
            el.actions.append(bhe_1.button({ cls: `swal2-confirm swal2-styled`, html: options.thirdButtonText })
                .css(thirdButtonCss)
                .click((ev) => {
                action = "third";
                sweetalert2_1.default.clickConfirm();
            }));
        };
        options = Object.assign(Object.assign({}, options), { onBeforeOpen, showCancelButton: true });
        const { value } = await sweetalert2_1.default.fire(options);
        if (value) {
            if (action === undefined) {
                action = "confirm";
            }
        }
        else {
            action = "cancel";
        }
        return action;
    }
};
exports.default = Object.assign({ small, big }, sweetalert2_1.default);
//# sourceMappingURL=data:application/json;base64,