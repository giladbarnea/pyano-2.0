"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.log('src/MyAlert/index.ts');
const sweetalert2_1 = require("sweetalert2");
const bhe_1 = require("../bhe");
const smallMixin = sweetalert2_1.default.mixin({
    animation: false,
    customClass: 'animated fadeIn',
    position: "bottom-start",
    showConfirmButton: false,
    timer: 8000,
    toast: true,
});
const withConfirm = {
    cancelButtonText: "No",
    confirmButtonText: "Yes",
    showCancelButton: true,
    showConfirmButton: true,
    timer: null,
};
const blockingOptions = {
    allowEnterKey: false,
    allowEscapeKey: false,
    allowOutsideClick: false,
    animation: false,
    customClass: 'animated fadeIn',
    showCancelButton: false,
    showCloseButton: false,
    showConfirmButton: false,
    width: "75vw",
};
const threeButtonsOptions = Object.assign(Object.assign({}, blockingOptions), { showConfirmButton: true, showCancelButton: true });
const blockingSwalMixin = sweetalert2_1.default.mixin(blockingOptions);
const small = {
    _question(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'question' }));
    },
    _info(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'info' }));
    },
    _success(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'success' }));
    },
    _error(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'error' }));
    },
    _warning(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { showConfirmButton: true, type: 'warning' }));
    },
    error(title, text) {
        return smallMixin.fire({
            title,
            text,
            type: "error",
        });
    },
    info(title, text = null, showConfirmBtns = false) {
        let infoOptions = {
            title,
            text,
            type: "info",
        };
        if (showConfirmBtns)
            infoOptions = Object.assign(Object.assign({}, infoOptions), withConfirm);
        return smallMixin.fire(infoOptions);
    },
    success(title, text = null, timer = 6000) {
        return smallMixin.fire({
            title,
            text,
            type: "success",
            timer
        });
    },
    warning(title, text = null) {
        let warningOptions = {
            title,
            text,
            showConfirmButton: true,
            timer: null,
            type: "warning"
        };
        return smallMixin.fire(warningOptions);
    },
};
const big = {
    error(options) {
        return blockingSwalMixin.fire(Object.assign({ type: 'error', showCloseButton: true }, options));
    },
    warning(options) {
        if (options.animation === false)
            options = Object.assign({ customClass: null }, options);
        return blockingSwalMixin.fire(Object.assign(Object.assign(Object.assign({}, withConfirm), { type: 'warning' }), options));
    },
    blocking(options, moreOptions) {
        if (moreOptions && moreOptions.strings && moreOptions.clickFn) {
            let { strings, clickFn } = moreOptions;
            let paragraphs = strings
                .map(s => bhe_1.paragraph({ cls: 'clickable', text: s }))
                .map(pElem => pElem.click(() => clickFn(pElem)));
            options = Object.assign(Object.assign({}, options), { onBeforeOpen(modalElement) {
                    console.log('modalElement:', modalElement);
                    return bhe_1.elem({ id: 'swal2-content' })
                        .append(...paragraphs);
                } });
        }
        else {
            options = Object.assign({ showConfirmButton: true, showCancelButton: true }, options);
        }
        if (options.showConfirmButton || options.showCancelButton || options.onOpen) {
            return sweetalert2_1.default.fire(Object.assign(Object.assign({}, blockingOptions), options));
        }
        else {
            return new Promise(resolve => sweetalert2_1.default.fire(Object.assign(Object.assign(Object.assign({}, blockingOptions), options), { onOpen: v => resolve(v) })));
        }
    },
    oneButton(title, options) {
        return blockingSwalMixin.fire(Object.assign({ title: title, showConfirmButton: true, customClass: 'animated fadeIn' }, options));
    },
    async twoButtons(title, options) {
        const { value } = await sweetalert2_1.default.fire(Object.assign({ title, showCancelButton: true, customClass: 'animated fadeIn' }, options));
        return value ? "confirm" : "cancel";
    },
    async threeButtons(options) {
        let thirdButtonCss;
        if (options.thirdButtonType === "warning") {
            thirdButtonCss = { backgroundColor: '#FFC66D', color: 'black' };
        }
        console.log({ thirdButtonCss });
        let action;
        const onBeforeOpen = (modal) => {
            let el = bhe_1.elem({
                htmlElement: modal,
                children: { actions: '.swal2-actions' }
            });
            el.actions.append(bhe_1.button({ cls: `swal2-confirm swal2-styled`, html: options.thirdButtonText })
                .css(thirdButtonCss)
                .click((ev) => {
                action = "third";
                sweetalert2_1.default.clickConfirm();
            }));
        };
        options = Object.assign(Object.assign({}, options), { onBeforeOpen, showCancelButton: true });
        const { value } = await sweetalert2_1.default.fire(options);
        if (value) {
            if (action === undefined) {
                action = "confirm";
            }
        }
        else {
            action = "cancel";
        }
        return action;
    }
};
exports.default = Object.assign({ small, big }, sweetalert2_1.default);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUNwQyw2Q0FBd0U7QUFDeEUsZ0NBQW9FO0FBR3BFLE1BQU0sVUFBVSxHQUFnQixxQkFBSSxDQUFDLEtBQUssQ0FBQztJQUN2QyxTQUFTLEVBQUcsS0FBSztJQUNqQixXQUFXLEVBQUcsaUJBQWlCO0lBQy9CLFFBQVEsRUFBRyxjQUFjO0lBQ3pCLGlCQUFpQixFQUFHLEtBQUs7SUFDekIsS0FBSyxFQUFHLElBQUk7SUFDWixLQUFLLEVBQUcsSUFBSTtDQUVmLENBQUMsQ0FBQztBQUNILE1BQU0sV0FBVyxHQUFzQjtJQUNuQyxnQkFBZ0IsRUFBRyxJQUFJO0lBQ3ZCLGlCQUFpQixFQUFHLEtBQUs7SUFDekIsZ0JBQWdCLEVBQUcsSUFBSTtJQUN2QixpQkFBaUIsRUFBRyxJQUFJO0lBQ3hCLEtBQUssRUFBRyxJQUFJO0NBRWYsQ0FBQztBQUNGLE1BQU0sZUFBZSxHQUFzQjtJQUN2QyxhQUFhLEVBQUcsS0FBSztJQUNyQixjQUFjLEVBQUcsS0FBSztJQUN0QixpQkFBaUIsRUFBRyxLQUFLO0lBQ3pCLFNBQVMsRUFBRyxLQUFLO0lBQ2pCLFdBQVcsRUFBRyxpQkFBaUI7SUFDL0IsZ0JBQWdCLEVBQUcsS0FBSztJQUN4QixlQUFlLEVBQUcsS0FBSztJQUN2QixpQkFBaUIsRUFBRyxLQUFLO0lBQ3pCLEtBQUssRUFBRyxNQUFNO0NBR2pCLENBQUM7QUFDRixNQUFNLG1CQUFtQixtQ0FDbEIsZUFBZSxLQUNsQixpQkFBaUIsRUFBRyxJQUFJLEVBQ3hCLGdCQUFnQixFQUFHLElBQUksR0FDMUIsQ0FBQztBQUNGLE1BQU0saUJBQWlCLEdBQUcscUJBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7QUFhdEQsTUFBTSxLQUFLLEdBQVU7SUFDakIsU0FBUyxD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QUM7WUFDeEIsQ0FBQyxDQUFDLENBQ1QsQ0FBQTtRQUNMLENBQUMsQ0FBQztRQUNGLE9BQU8sbUNBQVEsT0FBTyxLQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRyxJQUFJLEdBQUUsQ0FBQztRQUNoRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxxQkFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQyxJQUFLLEtBQUssRUFBRztZQUVULElBQUssTUFBTSxLQUFLLFNBQVMsRUFBRztnQkFDeEIsTUFBTSxHQUFHLFNBQVMsQ0FBQzthQUN0QjtTQUNKO2FBQU07WUFDSCxNQUFNLEdBQUcsUUFBUSxDQUFDO1NBQ3JCO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztDQUNKLENBQUM7QUFFRixrQ0FBaUIsS0FBSyxFQUFFLEdBQUcsSUFBSyxxQkFBSSxFQUFHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqaW1wb3J0IEFsZXJ0IGZyb20gJ015QWxlcnQnIChvciBhbnkgb3RoZXIgbmFtZSkqL1xuXG5jb25zb2xlLmxvZygnc3JjL015QWxlcnQvaW5kZXgudHMnKTtcbmltcG9ydCBTd2FsLCB7IFN3ZWV0QWxlcnRSZXN1bHQsIFN3ZWV0QWxlcnRPcHRpb25zIH0gZnJvbSAnc3dlZXRhbGVydDInO1xuaW1wb3J0IHsgcGFyYWdyYXBoLCBlbGVtLCBCZXR0ZXJIVE1MRWxlbWVudCwgYnV0dG9uIH0gZnJvbSBcIi4uL2JoZVwiO1xuXG5cbmNvbnN0IHNtYWxsTWl4aW46IHR5cGVvZiBTd2FsID0gU3dhbC5taXhpbih7XG4gICAgYW5pbWF0aW9uIDogZmFsc2UsXG4gICAgY3VzdG9tQ2xhc3MgOiAnYW5pbWF0ZWQgZmFkZUluJyxcbiAgICBwb3NpdGlvbiA6IFwiYm90dG9tLXN0YXJ0XCIsXG4gICAgc2hvd0NvbmZpcm1CdXR0b24gOiBmYWxzZSxcbiAgICB0aW1lciA6IDgwMDAsXG4gICAgdG9hc3QgOiB0cnVlLFxuICAgIFxufSk7XG5jb25zdCB3aXRoQ29uZmlybTogU3dlZXRBbGVydE9wdGlvbnMgPSB7XG4gICAgY2FuY2VsQnV0dG9uVGV4dCA6IFwiTm9cIixcbiAgICBjb25maXJtQnV0dG9uVGV4dCA6IFwiWWVzXCIsXG4gICAgc2hvd0NhbmNlbEJ1dHRvbiA6IHRydWUsXG4gICAgc2hvd0NvbmZpcm1CdXR0b24gOiB0cnVlLFxuICAgIHRpbWVyIDogbnVsbCxcbiAgICBcbn07XG5jb25zdCBibG9ja2luZ09wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zID0ge1xuICAgIGFsbG93RW50ZXJLZXkgOiBmYWxzZSxcbiAgICBhbGxvd0VzY2FwZUtleSA6IGZhbHNlLFxuICAgIGFsbG93T3V0c2lkZUNsaWNrIDogZmFsc2UsXG4gICAgYW5pbWF0aW9uIDogZmFsc2UsXG4gICAgY3VzdG9tQ2xhc3MgOiAnYW5pbWF0ZWQgZmFkZUluJyxcbiAgICBzaG93Q2FuY2VsQnV0dG9uIDogZmFsc2UsIC8vIGRlZmF1bHQgZmFsc2VcbiAgICBzaG93Q2xvc2VCdXR0b24gOiBmYWxzZSwgLy8gZGVmYXVsdCBmYWxzZVxuICAgIHNob3dDb25maXJtQnV0dG9uIDogZmFsc2UsXG4gICAgd2lkdGggOiBcIjc1dndcIixcbiAgICBcbiAgICBcbn07XG5jb25zdCB0aHJlZUJ1dHRvbnNPcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyA9IHtcbiAgICAuLi5ibG9ja2luZ09wdGlvbnMsXG4gICAgc2hvd0NvbmZpcm1CdXR0b24gOiB0cnVlLFxuICAgIHNob3dDYW5jZWxCdXR0b24gOiB0cnVlLFxufTtcbmNvbnN0IGJsb2NraW5nU3dhbE1peGluID0gU3dhbC5taXhpbihibG9ja2luZ09wdGlvbnMpO1xudHlwZSBTbWFsbCA9IHtcbiAgICBfZXJyb3Iob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIF9pbmZvKG9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBfcXVlc3Rpb24ob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIF9zdWNjZXNzKG9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBfd2FybmluZyhvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgZXJyb3IodGl0bGU6IHN0cmluZywgdGV4dDogc3RyaW5nKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBpbmZvKHRpdGxlOiBzdHJpbmcsIHRleHQ/OiAoc3RyaW5nIHwgbnVsbCksIHNob3dDb25maXJtQnRucz86IGJvb2xlYW4pOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIHN1Y2Nlc3ModGl0bGU6IHN0cmluZywgdGV4dD86IChzdHJpbmcgfCBudWxsKSwgdGltZXI/OiBudW1iZXIpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIHdhcm5pbmcodGl0bGU6IHN0cmluZywgdGV4dD86IChzdHJpbmcgfCBudWxsKSwgc2hvd0NvbmZpcm1CdG5zPzogYm9vbGVhbik6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG59XG5cbmNvbnN0IHNtYWxsOiBTbWFsbCA9IHtcbiAgICBfcXVlc3Rpb24ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHsgLi4ub3B0aW9ucywgdHlwZSA6ICdxdWVzdGlvbicgfSlcbiAgICB9LFxuICAgIF9pbmZvKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHNtYWxsTWl4aW4uZmlyZSh7IC4uLm9wdGlvbnMsIHR5cGUgOiAnaW5mbycgfSlcbiAgICB9LFxuICAgIF9zdWNjZXNzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHNtYWxsTWl4aW4uZmlyZSh7IC4uLm9wdGlvbnMsIHR5cGUgOiAnc3VjY2VzcycgfSlcbiAgICB9LFxuICAgIF9lcnJvcihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBzbWFsbE1peGluLmZpcmUoeyAuLi5vcHRpb25zLCB0eXBlIDogJ2Vycm9yJyB9KVxuICAgIH0sXG4gICAgX3dhcm5pbmcob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbiA6IHRydWUsIHR5cGUgOiAnd2FybmluZydcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIGVycm9yKHRpdGxlLCB0ZXh0KSB7XG4gICAgICAgIHJldHVybiBzbWFsbE1peGluLmZpcmUoe1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdHlwZSA6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGluZm8odGl0bGUsIHRleHQgPSBudWxsLCBzaG93Q29uZmlybUJ0bnMgPSBmYWxzZSkge1xuICAgICAgICBsZXQgaW5mb09wdGlvbnMgPSB7XG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0eXBlIDogXCJpbmZvXCIsXG4gICAgICAgIH07XG4gICAgICAgIGlmICggc2hvd0NvbmZpcm1CdG5zIClcbiAgICAgICAgICAgIGluZm9PcHRpb25zID0geyAuLi5pbmZvT3B0aW9ucywgLi4ud2l0aENvbmZpcm0gfTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKGluZm9PcHRpb25zKTtcbiAgICB9LFxuICAgIHN1Y2Nlc3ModGl0bGUsIHRleHQgPSBudWxsLCB0aW1lciA9IDYwMDApIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzbWFsbE1peGluLmZpcmUoe1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdHlwZSA6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgdGltZXJcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIHdhcm5pbmcodGl0bGUsIHRleHQgPSBudWxsKSB7XG4gICAgICAgIGxldCB3YXJuaW5nT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uIDogdHJ1ZSxcbiAgICAgICAgICAgIHRpbWVyIDogbnVsbCxcbiAgICAgICAgICAgIHR5cGUgOiBcIndhcm5pbmdcIlxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHdhcm5pbmdPcHRpb25zKTtcbiAgICB9LFxuICAgIFxufTtcbmV4cG9ydCB0eXBlIENyZWF0ZUNvbmZpcm1DYW5jZWwgPSBcImNvbmZpcm1cIiB8IFwiY2FuY2VsXCIgfCBcInRoaXJkXCI7XG50eXBlIEJpZyA9IHtcbiAgICBcbiAgICBlcnJvcihvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgd2FybmluZyhvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgYmxvY2tpbmcob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMsIG1vcmVPcHRpb25zPzogeyBzdHJpbmdzOiBzdHJpbmdbXSwgY2xpY2tGbjogKGJoZTogQmV0dGVySFRNTEVsZW1lbnQpID0+IGFueSB9KTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBvbmVCdXR0b24odGl0bGU6IHN0cmluZywgb3B0aW9ucz86IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICB0d29CdXR0b25zKHRpdGxlOiBzdHJpbmcsIG9wdGlvbnM/OiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8XCJjb25maXJtXCIgfCBcImNhbmNlbFwiPlxuICAgIHRocmVlQnV0dG9ucyhvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyAmIHsgdGhpcmRCdXR0b25UZXh0OiBzdHJpbmcsIHRoaXJkQnV0dG9uVHlwZT86IFwiY29uZmlybVwiIHwgXCJ3YXJuaW5nXCIgfSk6IFByb21pc2U8Q3JlYXRlQ29uZmlybUNhbmNlbD5cbn1cblxuY29uc3QgYmlnOiBCaWcgPSB7XG4gICAgZXJyb3Iob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gYmxvY2tpbmdTd2FsTWl4aW4uZmlyZSh7IHR5cGUgOiAnZXJyb3InLCBzaG93Q2xvc2VCdXR0b24gOiB0cnVlLCAuLi5vcHRpb25zIH0pO1xuICAgIH0sXG4gICAgd2FybmluZyhvcHRpb25zKSB7XG4gICAgICAgIGlmICggb3B0aW9ucy5hbmltYXRpb24gPT09IGZhbHNlIClcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7IGN1c3RvbUNsYXNzIDogbnVsbCwgLi4ub3B0aW9ucyB9O1xuICAgICAgICByZXR1cm4gYmxvY2tpbmdTd2FsTWl4aW4uZmlyZSh7IC4uLndpdGhDb25maXJtLCB0eXBlIDogJ3dhcm5pbmcnLCAuLi5vcHRpb25zIH0pO1xuICAgIH0sXG4gICAgXG4gICAgLy8gYmxvY2tpbmcob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMsIHsgc3RyaW5ncywgY2xpY2tGbiB9ID0ge30pOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+IHtcbiAgICBibG9ja2luZyhvcHRpb25zLCBtb3JlT3B0aW9ucykge1xuICAgICAgICBcbiAgICAgICAgaWYgKCBtb3JlT3B0aW9ucyAmJiBtb3JlT3B0aW9ucy5zdHJpbmdzICYmIG1vcmVPcHRpb25zLmNsaWNrRm4gKSB7XG4gICAgICAgICAgICBsZXQgeyBzdHJpbmdzLCBjbGlja0ZuIH0gPSBtb3JlT3B0aW9ucztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IHBhcmFncmFwaHMgPSBzdHJpbmdzXG4gICAgICAgICAgICAgICAgLy8gLm1hcChzID0+ICQoYDxwIGNsYXNzPVwiY2xpY2thYmxlXCI+JHtzfTwvcD5gKSlcbiAgICAgICAgICAgICAgICAubWFwKHMgPT4gcGFyYWdyYXBoKHsgY2xzIDogJ2NsaWNrYWJsZScsIHRleHQgOiBzIH0pKVxuICAgICAgICAgICAgICAgIC5tYXAocEVsZW0gPT4gcEVsZW0uY2xpY2soKCkgPT4gY2xpY2tGbihwRWxlbSkpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIG9uQmVmb3JlT3Blbihtb2RhbEVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdtb2RhbEVsZW1lbnQ6JywgbW9kYWxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0oeyBpZCA6ICdzd2FsMi1jb250ZW50JyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCguLi5wYXJhZ3JhcGhzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgeyAvLyBmb3JjZSBjb25maXJtIGFuZCBjYW5jZWwgYnV0dG9uc1xuICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbiA6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbiA6IHRydWUsXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBvcHRpb25zLnNob3dDb25maXJtQnV0dG9uIHx8IG9wdGlvbnMuc2hvd0NhbmNlbEJ1dHRvbiB8fCBvcHRpb25zLm9uT3BlbiApIHtcbiAgICAgICAgICAgIC8vIC8gSGFwcGVucyB3aGVuIG5vdCBvciBiYWQgbW9yZU9wdGlvbnNcbiAgICAgICAgICAgIHJldHVybiBTd2FsLmZpcmUoeyAuLi5ibG9ja2luZ09wdGlvbnMsIC4uLm9wdGlvbnMgfSk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRPRE86IG9uT3BlbiA6IHJlc29sdmU/XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IFN3YWwuZmlyZSh7IC4uLmJsb2NraW5nT3B0aW9ucywgLi4ub3B0aW9ucywgb25PcGVuIDogdiA9PiByZXNvbHZlKHYpIH0pKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXG4gICAgb25lQnV0dG9uKHRpdGxlLCBvcHRpb25zKSB7XG4gICAgICAgIC8qY29uc29sZS5sb2coeyB0aXRsZSwgb3B0aW9ucyB9KTtcbiAgICAgICAgIGNvbnN0IHR5cGVvZnRpdGxlID0gdHlwZW9mIHRpdGxlO1xuICAgICAgICAgaWYgKCB0eXBlb2Z0aXRsZSA9PT0gXCJvYmplY3RcIiApIHtcbiAgICAgICAgIGlmICggb3B0aW9ucyApIHtcbiAgICAgICAgIGlmICggb3B0aW9ucy5odG1sICkge1xuICAgICAgICAgb3B0aW9ucy5odG1sICs9ICc8YnI+JztcbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICBvcHRpb25zLmh0bWwgPSAnJztcbiAgICAgICAgIH1cbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICBvcHRpb25zID0geyBodG1sIDogJycgfTtcbiAgICAgICAgIH1cbiAgICAgICAgIGlmICggdGl0bGUgaW5zdGFuY2VvZiBFcnJvciApIHtcbiAgICAgICAgIHRpdGxlID0gJ0FuIGVycm9yIGhhcyBvY2N1cnJlZCc7XG4gICAgICAgICBvcHRpb25zLmh0bWwgKz0gdGl0bGUubWVzc2FnZTtcbiAgICAgICAgIGNvbnNvbGUubG9nKHsgdGl0bGUsIG9wdGlvbnMgfSk7XG4gICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgbGV0IGh0bWwgPSBgPHN0eWxlPlxuICAgICAgICAgc3BhbiB7XG4gICAgICAgICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xuICAgICAgICAgbWFyZ2luLWxlZnQ6IDQwcHg7XG4gICAgICAgICB9XG4gICAgICAgICA8L3N0eWxlPlxuICAgICAgICAgPGRpdiBzdHlsZT1cInRleHQtYWxpZ246IGxlZnRcIj5cbiAgICAgICAgIFxuICAgICAgICAgYDtcbiAgICAgICAgIGZvciAoIGxldCBrZXkgb2YgT2JqZWN0LmtleXModGl0bGUpICkge1xuICAgICAgICAgaHRtbCArPSBgPHA+PGI+JHtrZXl9OjwvYj4gPHNwYW4+JHt0aXRsZVtrZXldfTwvc3Bhbj48L3A+YFxuICAgICAgICAgfVxuICAgICAgICAgaHRtbCArPSBgPC9kaXY+YDtcbiAgICAgICAgIG9wdGlvbnMuaHRtbCArPSBodG1sO1xuICAgICAgICAgdGl0bGUgPSAnU29tZXRoaW5nIGhhcHBlbmVkJztcbiAgICAgICAgIFxuICAgICAgICAgfVxuICAgICAgICAgfSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSh0aXRsZSkgKSB7XG4gICAgICAgICB0aXRsZSA9ICdUaGlzIGlzIHdlaXJkJztcbiAgICAgICAgIG9wdGlvbnMuaHRtbCArPSB0aXRsZS5qb2luKCc8L2JyPicpXG4gICAgICAgICB9Ki9cbiAgICAgICAgcmV0dXJuIGJsb2NraW5nU3dhbE1peGluLmZpcmUoe1xuICAgICAgICAgICAgdGl0bGUgOiB0aXRsZSBhcyBzdHJpbmcsXG4gICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbiA6IHRydWUsXG4gICAgICAgICAgICBjdXN0b21DbGFzcyA6ICdhbmltYXRlZCBmYWRlSW4nLFxuICAgICAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGFzeW5jIHR3b0J1dHRvbnModGl0bGUsIG9wdGlvbnMpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGF3YWl0IFN3YWwuZmlyZSh7XG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b24gOiB0cnVlLFxuICAgICAgICAgICAgY3VzdG9tQ2xhc3MgOiAnYW5pbWF0ZWQgZmFkZUluJyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdmFsdWUgPyBcImNvbmZpcm1cIiA6IFwiY2FuY2VsXCI7XG4gICAgfSxcbiAgICBhc3luYyB0aHJlZUJ1dHRvbnMob3B0aW9ucykge1xuICAgICAgICBcbiAgICAgICAgLy8gY29uc3QgdGhpcmRCdXR0b25UZXh0ID0gb3B0aW9ucy50aGlyZEJ1dHRvblRleHQgPz8gJ092ZXJ3cml0ZSc7XG4gICAgICAgIGxldCB0aGlyZEJ1dHRvbkNzcztcbiAgICAgICAgaWYgKCBvcHRpb25zLnRoaXJkQnV0dG9uVHlwZSA9PT0gXCJ3YXJuaW5nXCIgKSB7XG4gICAgICAgICAgICB0aGlyZEJ1dHRvbkNzcyA9IHsgYmFja2dyb3VuZENvbG9yIDogJyNGRkM2NkQnLCBjb2xvciA6ICdibGFjaycgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyh7IHRoaXJkQnV0dG9uQ3NzIH0pO1xuICAgICAgICBsZXQgYWN0aW9uOiBDcmVhdGVDb25maXJtQ2FuY2VsO1xuICAgICAgICBjb25zdCBvbkJlZm9yZU9wZW4gPSAobW9kYWw6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBsZXQgZWwgPSBlbGVtKHtcbiAgICAgICAgICAgICAgICBodG1sRWxlbWVudCA6IG1vZGFsLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuIDogeyBhY3Rpb25zIDogJy5zd2FsMi1hY3Rpb25zJyB9XG4gICAgICAgICAgICB9KSBhcyBCZXR0ZXJIVE1MRWxlbWVudCAmIHsgYWN0aW9uczogQmV0dGVySFRNTEVsZW1lbnQgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZWwuYWN0aW9ucy5hcHBlbmQoXG4gICAgICAgICAgICAgICAgYnV0dG9uKHsgY2xzIDogYHN3YWwyLWNvbmZpcm0gc3dhbDItc3R5bGVkYCwgaHRtbCA6IG9wdGlvbnMudGhpcmRCdXR0b25UZXh0IH0pXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAuY3NzKHRoaXJkQnV0dG9uQ3NzKVxuICAgICAgICAgICAgICAgICAgICAuY2xpY2soKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBcInRoaXJkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmNsaWNrQ29uZmlybSgpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICB9O1xuICAgICAgICBvcHRpb25zID0geyAuLi5vcHRpb25zLCBvbkJlZm9yZU9wZW4sIHNob3dDYW5jZWxCdXR0b24gOiB0cnVlIH07XG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGF3YWl0IFN3YWwuZmlyZShvcHRpb25zKTtcbiAgICAgICAgaWYgKCB2YWx1ZSApIHtcbiAgICAgICAgICAgIC8vLyBFaXRoZXIgdXNlciBjbGlja2VkIENvbmZpcm0gKGFjdGlvbiBpcyB1bmRlZmluZWQpIG9yIFN3YWwuY2xpY2tDb25maXJtKCkgKGFjdGlvbiBpcyBcInRoaXJkXCIpXG4gICAgICAgICAgICBpZiAoIGFjdGlvbiA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgICAgIGFjdGlvbiA9IFwiY29uZmlybVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0aW9uID0gXCJjYW5jZWxcIjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9XG59O1xuLy8gZXhwb3J0IGRlZmF1bHQgeyBhbGVydEZuLCBzbWFsbCwgYmlnLCBjbG9zZSA6IFN3YWwuY2xvc2UsIGlzVmlzaWJsZSA6IFN3YWwuaXNWaXNpYmxlIH07XG5leHBvcnQgZGVmYXVsdCB7IHNtYWxsLCBiaWcsIC4uLlN3YWwgfTtcbiJdfQ==