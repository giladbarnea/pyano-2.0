"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.log('src/MyAlert/index.ts');
const sweetalert2_1 = require("sweetalert2");
const bhe_1 = require("../bhe");
const path = require("path");
const util_1 = require("../util");
const smallMixin = sweetalert2_1.default.mixin({
    animation: false,
    customClass: 'animated fadeIn',
    position: "bottom-start",
    showConfirmButton: false,
    timer: 8000,
    toast: true,
});
const withConfirm = {
    cancelButtonText: "No",
    confirmButtonText: "Yes",
    showCancelButton: true,
    showConfirmButton: true,
    timer: null,
};
const blockingOptions = {
    allowEnterKey: false,
    allowEscapeKey: false,
    allowOutsideClick: false,
    animation: false,
    customClass: 'animated fadeIn',
    showCancelButton: false,
    showCloseButton: false,
    showConfirmButton: false,
    width: "75vw",
};
const threeButtonsOptions = Object.assign(Object.assign({}, blockingOptions), { showConfirmButton: true, showCancelButton: true });
const blockingSwalMixin = sweetalert2_1.default.mixin(blockingOptions);
const small = {
    _question(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'question' }));
    },
    _info(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'info' }));
    },
    _success(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'success' }));
    },
    _error(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { type: 'error' }));
    },
    _warning(options) {
        return smallMixin.fire(Object.assign(Object.assign({}, options), { showConfirmButton: true, type: 'warning' }));
    },
    error(title, text) {
        return smallMixin.fire({
            title,
            text,
            type: "error",
        });
    },
    info(title, text = null, showConfirmBtns = false) {
        let infoOptions = {
            title,
            text,
            type: "info",
        };
        if (showConfirmBtns)
            infoOptions = Object.assign(Object.assign({}, infoOptions), withConfirm);
        return smallMixin.fire(infoOptions);
    },
    success(title, text = null, timer = 6000) {
        return smallMixin.fire({
            title,
            text,
            type: "success",
            timer
        });
    },
    warning(title, text = null) {
        let warningOptions = {
            title,
            text,
            showConfirmButton: true,
            timer: null,
            type: "warning"
        };
        return smallMixin.fire(warningOptions);
    },
};
const big = {
    async error(options) {
        var _a;
        if (((_a = options) === null || _a === void 0 ? void 0 : _a.html) instanceof Error) {
            const error = options.html;
            const { what, where, cleanstack } = error.toObj();
            console.log({ cleanstack });
            options.html = `${what}<p>${where}</p>`;
        }
        const dirname = new Date().human();
        const { default: Glob } = require('../Glob');
        if (LOG || !Glob.BigConfig.get('dev')) {
            options.onOpen = async () => {
                await util_1.takeScreenshot(dirname);
            };
            options.onAfterClose = async () => {
                await util_1.wait(500);
                await util_1.takeScreenshot(dirname);
            };
            options.html += `<p>Logs and screenshot saved to errors/${path.basename(SESSION_PATH_ABS)}/${dirname}</p>`;
        }
        return blockingSwalMixin.fire(Object.assign({ type: 'error', showConfirmButton: true }, options));
    },
    warning(options) {
        if (options.animation === false)
            options = Object.assign({ customClass: null }, options);
        return blockingSwalMixin.fire(Object.assign(Object.assign(Object.assign({}, withConfirm), { type: 'warning' }), options));
    },
    blocking(options, moreOptions) {
        if (moreOptions && moreOptions.strings && moreOptions.clickFn) {
            let { strings, clickFn } = moreOptions;
            let paragraphs = strings
                .map(s => bhe_1.paragraph({ cls: 'clickable', text: s }))
                .map(pElem => pElem.click(() => clickFn(pElem)));
            options = Object.assign(Object.assign({}, options), { onBeforeOpen(modalElement) {
                    console.log('modalElement:', modalElement);
                    return bhe_1.elem({ id: 'swal2-content' })
                        .append(...paragraphs);
                } });
        }
        else {
            options = Object.assign({ showConfirmButton: true, showCancelButton: true }, options);
        }
        if (options.showConfirmButton || options.showCancelButton || options.onOpen) {
            return sweetalert2_1.default.fire(Object.assign(Object.assign({}, blockingOptions), options));
        }
        else {
            return new Promise(resolve => sweetalert2_1.default.fire(Object.assign(Object.assign(Object.assign({}, blockingOptions), options), { onOpen: v => resolve(v) })));
        }
    },
    oneButton(title, options) {
        return blockingSwalMixin.fire(Object.assign({ title: title, showConfirmButton: true, customClass: 'animated fadeIn' }, options));
    },
    async twoButtons(options) {
        const { value } = await sweetalert2_1.default.fire(Object.assign({ showCancelButton: true, customClass: 'animated fadeIn' }, options));
        return value ? "confirm" : "second";
    },
    async threeButtons(options) {
        let thirdButtonCss;
        if (options.thirdButtonType === "warning") {
            thirdButtonCss = { backgroundColor: '#FFC66D', color: 'black' };
        }
        console.log({ thirdButtonCss });
        let action;
        const onBeforeOpen = (modal) => {
            let el = bhe_1.elem({
                htmlElement: modal,
                children: { actions: '.swal2-actions' }
            });
            el.actions.append(bhe_1.button({ cls: `swal2-confirm swal2-styled`, html: options.thirdButtonText })
                .css(thirdButtonCss)
                .click((ev) => {
                action = "third";
                sweetalert2_1.default.clickConfirm();
            }));
        };
        options = Object.assign(Object.assign({}, options), { onBeforeOpen, showCancelButton: true });
        const { value } = await sweetalert2_1.default.fire(options);
        if (value) {
            if (action === undefined) {
                action = "confirm";
            }
        }
        else {
            action = "cancel";
        }
        return action;
    }
};
exports.default = Object.assign({ small, big }, sweetalert2_1.default);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUNwQyw2Q0FBd0U7QUFDeEUsZ0NBQW9FO0FBQ3BFLDZCQUE2QjtBQUM3QixrQ0FBK0M7QUFFL0MsTUFBTSxVQUFVLEdBQWdCLHFCQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3ZDLFNBQVMsRUFBRyxLQUFLO0lBQ2pCLFdBQVcsRUFBRyxpQkFBaUI7SUFDL0IsUUFBUSxFQUFHLGNBQWM7SUFDekIsaUJBQWlCLEVBQUcsS0FBSztJQUN6QixLQUFLLEVBQUcsSUFBSTtJQUNaLEtBQUssRUFBRyxJQUFJO0NBRWYsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxXQUFXLEdBQXNCO0lBQ25DLGdCQUFnQixFQUFHLElBQUk7SUFDdkIsaUJBQWlCLEVBQUcsS0FBSztJQUN6QixnQkFBZ0IsRUFBRyxJQUFJO0lBQ3ZCLGlCQUFpQixFQUFHLElBQUk7SUFDeEIsS0FBSyxFQUFHLElBQUk7Q0FFZixDQUFDO0FBQ0YsTUFBTSxlQUFlLEdBQXNCO0lBQ3ZDLGFBQWEsRUFBRyxLQUFLO0lBQ3JCLGNBQWMsRUFBRyxLQUFLO0lBQ3RCLGlCQUFpQixFQUFHLEtBQUs7SUFDekIsU0FBUyxFQUFHLEtBQUs7SUFDakIsV0FBVyxFQUFHLGlCQUFpQjtJQUMvQixnQkFBZ0IsRUFBRyxLQUFLO0lBQ3hCLGVBQWUsRUFBRyxLQUFLO0lBQ3ZCLGlCQUFpQixFQUFHLEtBQUs7SUFDekIsS0FBSyxFQUFHLE1BQU07Q0FHakIsQ0FBQztBQUNGLE1BQU0sbUJBQW1CLG1DQUNsQixlQUFlLEtBQ2xCLGlCQUFpQixFQUFHLElBQUksRUFDeEIsZ0JBQWdCLEVBQUcsSUFBSSxHQUMxQixDQUFDO0FBQ0YsTUFBTSxpQkFBaUIsR0FBRyxxQkFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztBQWF0RCxNQUFNLEtBQUssR0FBVTtJQUNqQixTQUFTLENBQUMsT0FBTztRQUNiLE9BQU8sVUFBVSxDQUFDLElBQUksaUNBQU0sT0FBTyxLQUFFLElBQUksRUFBRyxVQUFVLElBQUcsQ0FBQTtJQUM3RCxDQUFDO0lBQ0QsS0FBSyxDQUFDLE9BQU87UUFDVCxPQUFPLFVBQVUsQ0FBQyxJQUFJLGlDQUFNLE9BQU8sS0FBRSxJQUFJLEVBQUcsTUFBTSxJQUFHLENBQUE7SUFDekQsQ0FBQztJQUNELFFBQVEsQ0FBQyxPQUFPO1FBQ1osT0FBTyxVQUFVLENBQUMsSUFBSSxpQ0FBTSxPQUFPLEtBQUUsSUFBSSxFQUFHLFNBQVMsSUFBRyxDQUFBO0lBQzVELENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTztRQUNWLE9BQU8sVUFBVSxDQUFDLElBQUksaUNBQU0sT0FBTyxLQUFFLElBQUksRUFBRyxPQUFPLElBQUcsQ0FBQTtJQUMxRCxDQUFDO0lBQ0QsUUFBUSxDQUFDLE9BQU87UUFDWixPQUFPLFVBQVUsQ0FBQyxJQUFJLGlDQUNmLE9BQU8sS0FDVixpQkFBaUIsRUFBRyxJQUFJLEVBQUUsSUFBSSxFQUFHLFNBQVMsSUFDNUMsQ0FBQTtJQUNOLENBQUM7SUFDRCxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUk7UUFDYixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDbkIsS0FBSztZQUNMLElBQUk7WUFDSixJQUFJLEVBQUcsT0FBTztTQUVqQixDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLGVBQWUsR0FBRyxLQUFLO1FBQzVDLElBQUksV0FBVyxHQUFHO1lBQ2QsS0FBSztZQUNMLElBQUk7WUFDSixJQUFJLEVBQUcsTUFBTTtTQUNoQixDQUFDO1FBQ0YsSUFBSyxlQUFlO1lBQ2hCLFdBQVcsbUNBQVEsV0FBVyxHQUFLLFdBQVcsQ0FBRSxDQUFDO1FBRXJELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLEtBQUssR0FBRyxJQUFJO1FBRXBDLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQztZQUNuQixLQUFLO1lBQ0wsSUFBSTtZQUNKLElBQUksRUFBRyxTQUFTO1lBQ2hCLEtBQUs7U0FDUixDQUFDLENBQUE7SUFDTixDQUFDO0lBQ0QsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsSUFBSTtRQUN0QixJQUFJLGNBQWMsR0FBRztZQUNqQixLQUFLO1lBQ0wsSUFBSTtZQUNKLGlCQUFpQixFQUFHLElBQUk7WUFDeEIsS0FBSyxFQUFHLElBQUk7WUFDWixJQUFJLEVBQUcsU0FBUztTQUNuQixDQUFDO1FBR0YsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7Q0FFSixDQUFDO0FBWUYsTUFBTSxHQUFHLEdBQVE7SUFDYixLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU87O1FBRWYsSUFBSyxPQUFBLE9BQU8sMENBQUUsSUFBSSxhQUFZLEtBQUssRUFBRztZQUNsQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBRzNCLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNsRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUM1QixPQUFPLENBQUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxNQUFNLEtBQUssTUFBTSxDQUFBO1NBQzFDO1FBQ0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQyxNQUFNLEVBQUUsT0FBTyxFQUFHLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5QyxJQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFHO1lBQ3JDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsS0FBSyxJQUFJLEVBQUU7Z0JBQ3hCLE1BQU0scUJBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVsQyxDQUFDLENBQUM7WUFDRixPQUFPLENBQUMsWUFBWSxHQUFHLEtBQUssSUFBSSxFQUFFO2dCQUM5QixNQUFNLFdBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDaEIsTUFBTSxxQkFBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRWxDLENBQUMsQ0FBQztZQUNGLE9BQU8sQ0FBQyxJQUFJLElBQUksMENBQTBDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQTtTQUM3RztRQUVELE9BQU8saUJBQWlCLENBQUMsSUFBSSxpQkFDekIsSUFBSSxFQUFHLE9BQU8sRUFDZCxpQkFBaUIsRUFBRyxJQUFJLElBQ3JCLE9BQU8sRUFDWixDQUFDO0lBQ1AsQ0FBQztJQUNELE9BQU8sQ0FBQyxPQUFPO1FBQ1gsSUFBSyxPQUFPLENBQUMsU0FBUyxLQUFLLEtBQUs7WUFDNUIsT0FBTyxtQkFBSyxXQUFXLEVBQUcsSUFBSSxJQUFLLE9BQU8sQ0FBRSxDQUFDO1FBQ2pELE9BQU8saUJBQWlCLENBQUMsSUFBSSwrQ0FBTSxXQUFXLEtBQUUsSUFBSSxFQUFHLFNBQVMsS0FBSyxPQUFPLEVBQUcsQ0FBQztJQUNwRixDQUFDO0lBRUQsUUFBUSxDQUFDLE9BQU8sRUFBRSxXQUFXO1FBRXpCLElBQUssV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRztZQUM3RCxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQztZQUV2QyxJQUFJLFVBQVUsR0FBRyxPQUFPO2lCQUVuQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFTLENBQUMsRUFBRSxHQUFHLEVBQUcsV0FBVyxFQUFFLElBQUksRUFBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2lCQUNwRCxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFckQsT0FBTyxtQ0FDQSxPQUFPLEtBQ1YsWUFBWSxDQUFDLFlBQXlCO29CQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsQ0FBQztvQkFDM0MsT0FBTyxVQUFJLENBQUMsRUFBRSxFQUFFLEVBQUcsZUFBZSxFQUFFLENBQUM7eUJBRWhDLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO2dCQUMvQixDQUFDLEdBQ0osQ0FBQztTQUNMO2FBQU07WUFDSCxPQUFPLG1CQUNILGlCQUFpQixFQUFHLElBQUksRUFDeEIsZ0JBQWdCLEVBQUcsSUFBSSxJQUNwQixPQUFPLENBQ2IsQ0FBQztTQUNMO1FBQ0QsSUFBSyxPQUFPLENBQUMsaUJBQWlCLElBQUksT0FBTyxDQUFDLGdCQUFnQixJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUc7WUFFM0UsT0FBTyxxQkFBSSxDQUFDLElBQUksaUNBQU0sZUFBZSxHQUFLLE9BQU8sRUFBRyxDQUFDO1NBQ3hEO2FBQU07WUFHSCxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMscUJBQUksQ0FBQyxJQUFJLCtDQUFNLGVBQWUsR0FBSyxPQUFPLEtBQUUsTUFBTSxFQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztTQUMxRztJQUNMLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU87UUF1Q3BCLE9BQU8saUJBQWlCLENBQUMsSUFBSSxpQkFDekIsS0FBSyxFQUFHLEtBQWUsRUFDdkIsaUJBQWlCLEVBQUcsSUFBSSxFQUN4QixXQUFXLEVBQUcsaUJBQWlCLElBRTVCLE9BQU8sRUFDWixDQUFDO0lBQ1AsQ0FBQztJQUNELEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBTztRQUVwQixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxxQkFBSSxDQUFDLElBQUksaUJBRTdCLGdCQUFnQixFQUFHLElBQUksRUFDdkIsV0FBVyxFQUFHLGlCQUFpQixJQUM1QixPQUFPLEVBQ1osQ0FBQztRQUVILE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPO1FBR3RCLElBQUksY0FBYyxDQUFDO1FBQ25CLElBQUssT0FBTyxDQUFDLGVBQWUsS0FBSyxTQUFTLEVBQUc7WUFDekMsY0FBYyxHQUFHLEVBQUUsZUFBZSxFQUFHLFNBQVMsRUFBRSxLQUFLLEVBQUcsT0FBTyxFQUFFLENBQUE7U0FDcEU7UUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztRQUNoQyxJQUFJLE1BQTBCLENBQUM7UUFDL0IsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFrQixFQUFFLEVBQUU7WUFDeEMsSUFBSSxFQUFFLEdBQUcsVUFBSSxDQUFDO2dCQUNWLFdBQVcsRUFBRyxLQUFLO2dCQUNuQixRQUFRLEVBQUcsRUFBRSxPQUFPLEVBQUcsZ0JBQWdCLEVBQUU7YUFDNUMsQ0FBdUQsQ0FBQztZQUV6RCxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FDYixZQUFNLENBQUMsRUFBRSxHQUFHLEVBQUcsNEJBQTRCLEVBQUUsSUFBSSxFQUFHLE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQztpQkFFekUsR0FBRyxDQUFDLGNBQWMsQ0FBQztpQkFDbkIsS0FBSyxDQUFDLENBQUMsRUFBYyxFQUFFLEVBQUU7Z0JBQ3RCLE1BQU0sR0FBRyxPQUFPLENBQUM7Z0JBQ2pCLHFCQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQ1QsQ0FBQTtRQUNMLENBQUMsQ0FBQztRQUNGLE9BQU8sbUNBQVEsT0FBTyxLQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRyxJQUFJLEdBQUUsQ0FBQztRQUNoRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxxQkFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQyxJQUFLLEtBQUssRUFBRztZQUVULElBQUssTUFBTSxLQUFLLFNBQVMsRUFBRztnQkFDeEIsTUFBTSxHQUFHLFNBQVMsQ0FBQzthQUN0QjtTQUNKO2FBQU07WUFDSCxNQUFNLEdBQUcsUUFBUSxDQUFDO1NBQ3JCO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztDQUNKLENBQUM7QUFFRixrQ0FBaUIsS0FBSyxFQUFFLEdBQUcsSUFBSyxxQkFBSSxFQUFHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqaW1wb3J0IEFsZXJ0IGZyb20gJ015QWxlcnQnIChvciBhbnkgb3RoZXIgbmFtZSkqL1xuXG5cbmNvbnNvbGUubG9nKCdzcmMvTXlBbGVydC9pbmRleC50cycpO1xuaW1wb3J0IFN3YWwsIHsgU3dlZXRBbGVydFJlc3VsdCwgU3dlZXRBbGVydE9wdGlvbnMgfSBmcm9tICdzd2VldGFsZXJ0Mic7XG5pbXBvcnQgeyBwYXJhZ3JhcGgsIGVsZW0sIEJldHRlckhUTUxFbGVtZW50LCBidXR0b24gfSBmcm9tIFwiLi4vYmhlXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyB3YWl0LCB0YWtlU2NyZWVuc2hvdCB9IGZyb20gXCIuLi91dGlsXCI7XG5cbmNvbnN0IHNtYWxsTWl4aW46IHR5cGVvZiBTd2FsID0gU3dhbC5taXhpbih7XG4gICAgYW5pbWF0aW9uIDogZmFsc2UsXG4gICAgY3VzdG9tQ2xhc3MgOiAnYW5pbWF0ZWQgZmFkZUluJyxcbiAgICBwb3NpdGlvbiA6IFwiYm90dG9tLXN0YXJ0XCIsXG4gICAgc2hvd0NvbmZpcm1CdXR0b24gOiBmYWxzZSxcbiAgICB0aW1lciA6IDgwMDAsXG4gICAgdG9hc3QgOiB0cnVlLFxuICAgIFxufSk7XG5jb25zdCB3aXRoQ29uZmlybTogU3dlZXRBbGVydE9wdGlvbnMgPSB7XG4gICAgY2FuY2VsQnV0dG9uVGV4dCA6IFwiTm9cIixcbiAgICBjb25maXJtQnV0dG9uVGV4dCA6IFwiWWVzXCIsXG4gICAgc2hvd0NhbmNlbEJ1dHRvbiA6IHRydWUsXG4gICAgc2hvd0NvbmZpcm1CdXR0b24gOiB0cnVlLFxuICAgIHRpbWVyIDogbnVsbCxcbiAgICBcbn07XG5jb25zdCBibG9ja2luZ09wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zID0ge1xuICAgIGFsbG93RW50ZXJLZXkgOiBmYWxzZSxcbiAgICBhbGxvd0VzY2FwZUtleSA6IGZhbHNlLFxuICAgIGFsbG93T3V0c2lkZUNsaWNrIDogZmFsc2UsXG4gICAgYW5pbWF0aW9uIDogZmFsc2UsXG4gICAgY3VzdG9tQ2xhc3MgOiAnYW5pbWF0ZWQgZmFkZUluJyxcbiAgICBzaG93Q2FuY2VsQnV0dG9uIDogZmFsc2UsIC8vIGRlZmF1bHQgZmFsc2VcbiAgICBzaG93Q2xvc2VCdXR0b24gOiBmYWxzZSwgLy8gZGVmYXVsdCBmYWxzZVxuICAgIHNob3dDb25maXJtQnV0dG9uIDogZmFsc2UsXG4gICAgd2lkdGggOiBcIjc1dndcIixcbiAgICBcbiAgICBcbn07XG5jb25zdCB0aHJlZUJ1dHRvbnNPcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyA9IHtcbiAgICAuLi5ibG9ja2luZ09wdGlvbnMsXG4gICAgc2hvd0NvbmZpcm1CdXR0b24gOiB0cnVlLFxuICAgIHNob3dDYW5jZWxCdXR0b24gOiB0cnVlLFxufTtcbmNvbnN0IGJsb2NraW5nU3dhbE1peGluID0gU3dhbC5taXhpbihibG9ja2luZ09wdGlvbnMpO1xudHlwZSBTbWFsbCA9IHtcbiAgICBfZXJyb3Iob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIF9pbmZvKG9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBfcXVlc3Rpb24ob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIF9zdWNjZXNzKG9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBfd2FybmluZyhvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucyk6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG4gICAgZXJyb3IodGl0bGU6IHN0cmluZywgdGV4dDogc3RyaW5nKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBpbmZvKHRpdGxlOiBzdHJpbmcsIHRleHQ/OiAoc3RyaW5nIHwgbnVsbCksIHNob3dDb25maXJtQnRucz86IGJvb2xlYW4pOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIHN1Y2Nlc3ModGl0bGU6IHN0cmluZywgdGV4dD86IChzdHJpbmcgfCBudWxsKSwgdGltZXI/OiBudW1iZXIpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIHdhcm5pbmcodGl0bGU6IHN0cmluZywgdGV4dD86IChzdHJpbmcgfCBudWxsKSwgc2hvd0NvbmZpcm1CdG5zPzogYm9vbGVhbik6IFByb21pc2U8U3dlZXRBbGVydFJlc3VsdD4sXG59XG5cbmNvbnN0IHNtYWxsOiBTbWFsbCA9IHtcbiAgICBfcXVlc3Rpb24ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHsgLi4ub3B0aW9ucywgdHlwZSA6ICdxdWVzdGlvbicgfSlcbiAgICB9LFxuICAgIF9pbmZvKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHNtYWxsTWl4aW4uZmlyZSh7IC4uLm9wdGlvbnMsIHR5cGUgOiAnaW5mbycgfSlcbiAgICB9LFxuICAgIF9zdWNjZXNzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHNtYWxsTWl4aW4uZmlyZSh7IC4uLm9wdGlvbnMsIHR5cGUgOiAnc3VjY2VzcycgfSlcbiAgICB9LFxuICAgIF9lcnJvcihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBzbWFsbE1peGluLmZpcmUoeyAuLi5vcHRpb25zLCB0eXBlIDogJ2Vycm9yJyB9KVxuICAgIH0sXG4gICAgX3dhcm5pbmcob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbiA6IHRydWUsIHR5cGUgOiAnd2FybmluZydcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIGVycm9yKHRpdGxlLCB0ZXh0KSB7XG4gICAgICAgIHJldHVybiBzbWFsbE1peGluLmZpcmUoe1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdHlwZSA6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGluZm8odGl0bGUsIHRleHQgPSBudWxsLCBzaG93Q29uZmlybUJ0bnMgPSBmYWxzZSkge1xuICAgICAgICBsZXQgaW5mb09wdGlvbnMgPSB7XG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICB0eXBlIDogXCJpbmZvXCIsXG4gICAgICAgIH07XG4gICAgICAgIGlmICggc2hvd0NvbmZpcm1CdG5zIClcbiAgICAgICAgICAgIGluZm9PcHRpb25zID0geyAuLi5pbmZvT3B0aW9ucywgLi4ud2l0aENvbmZpcm0gfTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKGluZm9PcHRpb25zKTtcbiAgICB9LFxuICAgIHN1Y2Nlc3ModGl0bGUsIHRleHQgPSBudWxsLCB0aW1lciA9IDYwMDApIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzbWFsbE1peGluLmZpcmUoe1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgdHlwZSA6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgdGltZXJcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIHdhcm5pbmcodGl0bGUsIHRleHQgPSBudWxsKSB7XG4gICAgICAgIGxldCB3YXJuaW5nT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uIDogdHJ1ZSxcbiAgICAgICAgICAgIHRpbWVyIDogbnVsbCxcbiAgICAgICAgICAgIHR5cGUgOiBcIndhcm5pbmdcIlxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gc21hbGxNaXhpbi5maXJlKHdhcm5pbmdPcHRpb25zKTtcbiAgICB9LFxuICAgIFxufTtcbmV4cG9ydCB0eXBlIENyZWF0ZUNvbmZpcm1UaGlyZCA9IFwiY29uZmlybVwiIHwgXCJjYW5jZWxcIiB8IFwidGhpcmRcIjtcbnR5cGUgQmlnID0ge1xuICAgIFxuICAgIGVycm9yKG9wdGlvbnM6IE9taXQ8U3dlZXRBbGVydE9wdGlvbnMsICdvbk9wZW4nIHwgJ29uQWZ0ZXJDbG9zZSc+ICYgeyBodG1sOiBzdHJpbmcgfCBFcnJvciB9KTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICB3YXJuaW5nKG9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zKTogUHJvbWlzZTxTd2VldEFsZXJ0UmVzdWx0PixcbiAgICBibG9ja2luZyhvcHRpb25zOiBTd2VldEFsZXJ0T3B0aW9ucywgbW9yZU9wdGlvbnM/OiB7IHN0cmluZ3M6IHN0cmluZ1tdLCBjbGlja0ZuOiAoYmhlOiBCZXR0ZXJIVE1MRWxlbWVudCkgPT4gYW55IH0pOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIG9uZUJ1dHRvbih0aXRsZTogc3RyaW5nLCBvcHRpb25zPzogU3dlZXRBbGVydE9wdGlvbnMpOiBQcm9taXNlPFN3ZWV0QWxlcnRSZXN1bHQ+LFxuICAgIHR3b0J1dHRvbnMob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMpOiBQcm9taXNlPFwiY29uZmlybVwiIHwgXCJzZWNvbmRcIj5cbiAgICB0aHJlZUJ1dHRvbnMob3B0aW9uczogU3dlZXRBbGVydE9wdGlvbnMgJiB7IHRoaXJkQnV0dG9uVGV4dDogc3RyaW5nLCB0aGlyZEJ1dHRvblR5cGU/OiBcImNvbmZpcm1cIiB8IFwid2FybmluZ1wiIH0pOiBQcm9taXNlPENyZWF0ZUNvbmZpcm1UaGlyZD5cbn1cblxuY29uc3QgYmlnOiBCaWcgPSB7XG4gICAgYXN5bmMgZXJyb3Iob3B0aW9ucykge1xuICAgICAgICBcbiAgICAgICAgaWYgKCBvcHRpb25zPy5odG1sIGluc3RhbmNlb2YgRXJyb3IgKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG9wdGlvbnMuaHRtbDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB7IHdoYXQsIHdoZXJlLCBjbGVhbnN0YWNrIH0gPSBlcnJvci50b09iaigpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coeyBjbGVhbnN0YWNrIH0pO1xuICAgICAgICAgICAgb3B0aW9ucy5odG1sID0gYCR7d2hhdH08cD4ke3doZXJlfTwvcD5gXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlybmFtZSA9IG5ldyBEYXRlKCkuaHVtYW4oKTtcbiAgICAgICAgY29uc3QgeyBkZWZhdWx0IDogR2xvYiB9ID0gcmVxdWlyZSgnLi4vR2xvYicpO1xuICAgICAgICBpZiAoIExPRyB8fCAhR2xvYi5CaWdDb25maWcuZ2V0KCdkZXYnKSApIHtcbiAgICAgICAgICAgIG9wdGlvbnMub25PcGVuID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRha2VTY3JlZW5zaG90KGRpcm5hbWUpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9wdGlvbnMub25BZnRlckNsb3NlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHdhaXQoNTAwKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0YWtlU2NyZWVuc2hvdChkaXJuYW1lKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvcHRpb25zLmh0bWwgKz0gYDxwPkxvZ3MgYW5kIHNjcmVlbnNob3Qgc2F2ZWQgdG8gZXJyb3JzLyR7cGF0aC5iYXNlbmFtZShTRVNTSU9OX1BBVEhfQUJTKX0vJHtkaXJuYW1lfTwvcD5gXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBibG9ja2luZ1N3YWxNaXhpbi5maXJlKHtcbiAgICAgICAgICAgIHR5cGUgOiAnZXJyb3InLFxuICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b24gOiB0cnVlLFxuICAgICAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHdhcm5pbmcob3B0aW9ucykge1xuICAgICAgICBpZiAoIG9wdGlvbnMuYW5pbWF0aW9uID09PSBmYWxzZSApXG4gICAgICAgICAgICBvcHRpb25zID0geyBjdXN0b21DbGFzcyA6IG51bGwsIC4uLm9wdGlvbnMgfTtcbiAgICAgICAgcmV0dXJuIGJsb2NraW5nU3dhbE1peGluLmZpcmUoeyAuLi53aXRoQ29uZmlybSwgdHlwZSA6ICd3YXJuaW5nJywgLi4ub3B0aW9ucyB9KTtcbiAgICB9LFxuICAgIFxuICAgIGJsb2NraW5nKG9wdGlvbnMsIG1vcmVPcHRpb25zKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoIG1vcmVPcHRpb25zICYmIG1vcmVPcHRpb25zLnN0cmluZ3MgJiYgbW9yZU9wdGlvbnMuY2xpY2tGbiApIHtcbiAgICAgICAgICAgIGxldCB7IHN0cmluZ3MsIGNsaWNrRm4gfSA9IG1vcmVPcHRpb25zO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgcGFyYWdyYXBocyA9IHN0cmluZ3NcbiAgICAgICAgICAgICAgICAvLyAubWFwKHMgPT4gJChgPHAgY2xhc3M9XCJjbGlja2FibGVcIj4ke3N9PC9wPmApKVxuICAgICAgICAgICAgICAgIC5tYXAocyA9PiBwYXJhZ3JhcGgoeyBjbHMgOiAnY2xpY2thYmxlJywgdGV4dCA6IHMgfSkpXG4gICAgICAgICAgICAgICAgLm1hcChwRWxlbSA9PiBwRWxlbS5jbGljaygoKSA9PiBjbGlja0ZuKHBFbGVtKSkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgb25CZWZvcmVPcGVuKG1vZGFsRWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ21vZGFsRWxlbWVudDonLCBtb2RhbEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbSh7IGlkIDogJ3N3YWwyLWNvbnRlbnQnIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKC4uLnBhcmFncmFwaHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7IC8vIGZvcmNlIGNvbmZpcm0gYW5kIGNhbmNlbCBidXR0b25zXG4gICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIG9wdGlvbnMuc2hvd0NvbmZpcm1CdXR0b24gfHwgb3B0aW9ucy5zaG93Q2FuY2VsQnV0dG9uIHx8IG9wdGlvbnMub25PcGVuICkge1xuICAgICAgICAgICAgLy8gLyBIYXBwZW5zIHdoZW4gbm90IG9yIGJhZCBtb3JlT3B0aW9uc1xuICAgICAgICAgICAgcmV0dXJuIFN3YWwuZmlyZSh7IC4uLmJsb2NraW5nT3B0aW9ucywgLi4ub3B0aW9ucyB9KTtcbiAgICAgICAgfSBlbHNlIHsgLy8gVE9ETzogb25PcGVuIDogcmVzb2x2ZT9cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gU3dhbC5maXJlKHsgLi4uYmxvY2tpbmdPcHRpb25zLCAuLi5vcHRpb25zLCBvbk9wZW4gOiB2ID0+IHJlc29sdmUodikgfSkpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBcbiAgICBvbmVCdXR0b24odGl0bGUsIG9wdGlvbnMpIHtcbiAgICAgICAgLypjb25zb2xlLmxvZyh7IHRpdGxlLCBvcHRpb25zIH0pO1xuICAgICAgICAgY29uc3QgdHlwZW9mdGl0bGUgPSB0eXBlb2YgdGl0bGU7XG4gICAgICAgICBpZiAoIHR5cGVvZnRpdGxlID09PSBcIm9iamVjdFwiICkge1xuICAgICAgICAgaWYgKCBvcHRpb25zICkge1xuICAgICAgICAgaWYgKCBvcHRpb25zLmh0bWwgKSB7XG4gICAgICAgICBvcHRpb25zLmh0bWwgKz0gJzxicj4nO1xuICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgIG9wdGlvbnMuaHRtbCA9ICcnO1xuICAgICAgICAgfVxuICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgIG9wdGlvbnMgPSB7IGh0bWwgOiAnJyB9O1xuICAgICAgICAgfVxuICAgICAgICAgaWYgKCB0aXRsZSBpbnN0YW5jZW9mIEVycm9yICkge1xuICAgICAgICAgdGl0bGUgPSAnQW4gZXJyb3IgaGFzIG9jY3VycmVkJztcbiAgICAgICAgIG9wdGlvbnMuaHRtbCArPSB0aXRsZS5tZXNzYWdlO1xuICAgICAgICAgY29uc29sZS5sb2coeyB0aXRsZSwgb3B0aW9ucyB9KTtcbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICBsZXQgaHRtbCA9IGA8c3R5bGU+XG4gICAgICAgICBzcGFuIHtcbiAgICAgICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XG4gICAgICAgICBtYXJnaW4tbGVmdDogNDBweDtcbiAgICAgICAgIH1cbiAgICAgICAgIDwvc3R5bGU+XG4gICAgICAgICA8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjogbGVmdFwiPlxuICAgICAgICAgXG4gICAgICAgICBgO1xuICAgICAgICAgZm9yICggbGV0IGtleSBvZiBPYmplY3Qua2V5cyh0aXRsZSkgKSB7XG4gICAgICAgICBodG1sICs9IGA8cD48Yj4ke2tleX06PC9iPiA8c3Bhbj4ke3RpdGxlW2tleV19PC9zcGFuPjwvcD5gXG4gICAgICAgICB9XG4gICAgICAgICBodG1sICs9IGA8L2Rpdj5gO1xuICAgICAgICAgb3B0aW9ucy5odG1sICs9IGh0bWw7XG4gICAgICAgICB0aXRsZSA9ICdTb21ldGhpbmcgaGFwcGVuZWQnO1xuICAgICAgICAgXG4gICAgICAgICB9XG4gICAgICAgICB9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KHRpdGxlKSApIHtcbiAgICAgICAgIHRpdGxlID0gJ1RoaXMgaXMgd2VpcmQnO1xuICAgICAgICAgb3B0aW9ucy5odG1sICs9IHRpdGxlLmpvaW4oJzwvYnI+JylcbiAgICAgICAgIH0qL1xuICAgICAgICByZXR1cm4gYmxvY2tpbmdTd2FsTWl4aW4uZmlyZSh7XG4gICAgICAgICAgICB0aXRsZSA6IHRpdGxlIGFzIHN0cmluZyxcbiAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uIDogdHJ1ZSxcbiAgICAgICAgICAgIGN1c3RvbUNsYXNzIDogJ2FuaW1hdGVkIGZhZGVJbicsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBhc3luYyB0d29CdXR0b25zKG9wdGlvbnMpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGF3YWl0IFN3YWwuZmlyZSh7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b24gOiB0cnVlLFxuICAgICAgICAgICAgY3VzdG9tQ2xhc3MgOiAnYW5pbWF0ZWQgZmFkZUluJyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdmFsdWUgPyBcImNvbmZpcm1cIiA6IFwic2Vjb25kXCI7XG4gICAgfSxcbiAgICBhc3luYyB0aHJlZUJ1dHRvbnMob3B0aW9ucykge1xuICAgICAgICBcbiAgICAgICAgLy8gY29uc3QgdGhpcmRCdXR0b25UZXh0ID0gb3B0aW9ucy50aGlyZEJ1dHRvblRleHQgPz8gJ092ZXJ3cml0ZSc7XG4gICAgICAgIGxldCB0aGlyZEJ1dHRvbkNzcztcbiAgICAgICAgaWYgKCBvcHRpb25zLnRoaXJkQnV0dG9uVHlwZSA9PT0gXCJ3YXJuaW5nXCIgKSB7XG4gICAgICAgICAgICB0aGlyZEJ1dHRvbkNzcyA9IHsgYmFja2dyb3VuZENvbG9yIDogJyNGRkM2NkQnLCBjb2xvciA6ICdibGFjaycgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyh7IHRoaXJkQnV0dG9uQ3NzIH0pO1xuICAgICAgICBsZXQgYWN0aW9uOiBDcmVhdGVDb25maXJtVGhpcmQ7XG4gICAgICAgIGNvbnN0IG9uQmVmb3JlT3BlbiA9IChtb2RhbDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGxldCBlbCA9IGVsZW0oe1xuICAgICAgICAgICAgICAgIGh0bWxFbGVtZW50IDogbW9kYWwsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gOiB7IGFjdGlvbnMgOiAnLnN3YWwyLWFjdGlvbnMnIH1cbiAgICAgICAgICAgIH0pIGFzIEJldHRlckhUTUxFbGVtZW50ICYgeyBhY3Rpb25zOiBCZXR0ZXJIVE1MRWxlbWVudCB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBlbC5hY3Rpb25zLmFwcGVuZChcbiAgICAgICAgICAgICAgICBidXR0b24oeyBjbHMgOiBgc3dhbDItY29uZmlybSBzd2FsMi1zdHlsZWRgLCBodG1sIDogb3B0aW9ucy50aGlyZEJ1dHRvblRleHQgfSlcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC5jc3ModGhpcmRCdXR0b25Dc3MpXG4gICAgICAgICAgICAgICAgICAgIC5jbGljaygoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IFwidGhpcmRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuY2xpY2tDb25maXJtKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgIH07XG4gICAgICAgIG9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIG9uQmVmb3JlT3Blbiwgc2hvd0NhbmNlbEJ1dHRvbiA6IHRydWUgfTtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gYXdhaXQgU3dhbC5maXJlKG9wdGlvbnMpO1xuICAgICAgICBpZiAoIHZhbHVlICkge1xuICAgICAgICAgICAgLy8vIEVpdGhlciB1c2VyIGNsaWNrZWQgQ29uZmlybSAoYWN0aW9uIGlzIHVuZGVmaW5lZCkgb3IgU3dhbC5jbGlja0NvbmZpcm0oKSAoYWN0aW9uIGlzIFwidGhpcmRcIilcbiAgICAgICAgICAgIGlmICggYWN0aW9uID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gXCJjb25maXJtXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3Rpb24gPSBcImNhbmNlbFwiO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbn07XG4vLyBleHBvcnQgZGVmYXVsdCB7IGFsZXJ0Rm4sIHNtYWxsLCBiaWcsIGNsb3NlIDogU3dhbC5jbG9zZSwgaXNWaXNpYmxlIDogU3dhbC5pc1Zpc2libGUgfTtcbmV4cG9ydCBkZWZhdWx0IHsgc21hbGwsIGJpZywgLi4uU3dhbCB9O1xuIl19