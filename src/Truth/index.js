"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const util_1 = require("../util");
const MyFs_1 = require("../MyFs");
class File {
    constructor(absPathWithExt) {
        if (!util_1.bool(path.extname(absPathWithExt))) {
            throw new Error(`File constructor: passed 'absPathWithExt' is extensionless: ${absPathWithExt}`);
        }
        if (!path.isAbsolute(absPathWithExt)) {
            throw new Error(`File constructor: passed 'absPathWithExt' NOT absolute: ${absPathWithExt}`);
        }
        this._absPath = absPathWithExt;
    }
    get absPath() {
        return this._absPath;
    }
    set absPath(absPathWithExt) {
        if (!util_1.bool(path.extname(absPathWithExt))) {
            throw new Error(`File constructor: passed 'absPathWithExt' is extensionless: ${absPathWithExt}`);
        }
        if (!path.isAbsolute(absPathWithExt)) {
            throw new Error(`File constructor: passed 'absPathWithExt' NOT absolute: ${absPathWithExt}`);
        }
        this._absPath = absPathWithExt;
        fs.renameSync(this._absPath, absPathWithExt);
    }
    renameByOtherFile(other) {
        console.warn('called renameByOtherFile(), use set absPath instead');
        this.absPath = other.absPath;
    }
    renameByCTime() {
        const stats = fs.lstatSync(this.absPath);
        const datestr = stats.ctime.human();
        const newPath = MyFs_1.default.push_before_ext(this.absPath, `__CREATED_${datestr}`);
        console.log('renameByCTime() to: ', newPath);
        this.absPath = newPath;
    }
    async getBitrateAndHeight() {
        if (!this._absPath.endsWith('mp4') && !this._absPath.endsWith('mov')) {
            console.warn(`File: "${this._absPath}" isn't "mp4" or "mov"`);
            return undefined;
        }
        const { execSync } = require('child_process');
        const ffprobeCmd = `ffprobe -v quiet -print_format json -show_streams -show_format`;
        const probe = JSON.parse(execSync(`${ffprobeCmd} "${this._absPath}"`, { encoding: 'utf8' }));
        const { bit_rate, height } = probe.streams.find(s => s["codec_type"] === "video");
        return [bit_rate, height];
    }
    exists() {
        return fs.existsSync(this._absPath);
    }
    remove() {
        fs.unlinkSync(this._absPath);
    }
    size() {
        let { size } = fs.lstatSync(this._absPath);
        return size;
    }
}
class Txt {
    constructor(nameNoExt) {
        const absPath = path.join(TRUTHS_PATH_ABS, nameNoExt);
        this.base = new File(`${absPath}.txt`);
        this.on = new File(`${absPath}_on.txt`);
        this.off = new File(`${absPath}_off.txt`);
    }
    getAll() {
        return [this.base, this.on, this.off];
    }
    getExisting() {
        const existing = [];
        existing.push(this.base.exists() ? this.base : false);
        existing.push(this.on.exists() ? this.on : false);
        existing.push(this.off.exists() ? this.off : false);
        return existing;
    }
    allExist() {
        return (this.base.exists()
            && this.on.exists()
            && this.off.exists());
    }
    anyExist() {
        return (this.base.exists()
            || this.on.exists()
            || this.off.exists());
    }
    removeAll() {
        if (this.base.exists())
            this.base.remove();
        if (this.on.exists())
            this.on.remove();
        if (this.off.exists())
            this.off.remove();
    }
    renameByOtherTxt(other) {
        this.base.absPath = other.base.absPath;
        this.on.absPath = other.on.absPath;
        this.off.absPath = other.off.absPath;
    }
}
class Truth {
    constructor(nameNoExt) {
        if (util_1.bool(path.extname(nameNoExt))) {
            console.warn(`Passed name is not extensionless: ${nameNoExt}. Removing extension`);
            nameNoExt = MyFs_1.default.remove_ext(nameNoExt);
        }
        if (nameNoExt.endsWith('off') || nameNoExt.endsWith('on')) {
            nameNoExt = `${nameNoExt.upTo('_', true)}`;
            console.warn(`Passed path of "_on" or "_off" file and not base. Using name: "${nameNoExt}"`);
        }
        this.name = nameNoExt;
        this.txt = new Txt(nameNoExt);
        const absPath = path.join(TRUTHS_PATH_ABS, nameNoExt);
        this.midi = new File(`${absPath}.mid`);
        this.mp4 = new File(`${absPath}.mp4`);
        this.mov = new File(`${absPath}.mov`);
        this.onsets = new File(`${absPath}_onsets.json`);
    }
    numOfNotes() {
        if (!this.txt.on.exists()) {
            console.warn(`this.txt.on (${this.txt.on.absPath}) does not exist, returning undefined`);
            return undefined;
        }
        const strings = fs
            .readFileSync(this.txt.on.absPath, { encoding: 'utf8' })
            .split('\n');
        let notes = 0;
        for (let s of strings) {
            if (s.includes('\\')) {
                console.warn(`s includes backslash, ${this.txt.on}`);
            }
            else if (util_1.bool(s)) {
                notes++;
            }
        }
        return notes;
    }
}
exports.Truth = Truth;
//# sourceMappingURL=data:application/json;base64,