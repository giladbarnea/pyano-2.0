"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const MyFs_1 = require("../MyFs");
const asx_1 = require("../asx");
const MyDate_1 = require("../MyDate");
/**An object wrapping a path with extension. Can be absolute or base.
 * ``toString()`` returns ``this.path``.
 * ``name`` property exists only if wrapping an absolute path.*/
class File {
    constructor(pathWithExt) {
        if (!bool(path.extname(pathWithExt)))
            throw new Error(`File constructor: passed 'pathWithExt' is extensionless: ${pathWithExt}`);
        this.path = pathWithExt;
        this.pathNoExt = MyFs_1.default.remove_ext(this.path);
        if (path.isAbsolute(this.path))
            this.name = new File(path.basename(this.path));
    }
    toString() {
        return this.path;
    }
    async renameByOtherFile(other) {
        const fs = require("fs");
        await fs.renameSync(this.path, other.path);
    }
    async renameByCTime() {
        const stats = fs.lstatSync(this.path);
        const datestr = MyDate_1.date(stats.ctime).human();
        const newPath = MyFs_1.default.push_before_ext(this.path, `__CREATED_${datestr}`);
        console.log('renameByCTime() to: ', newPath);
        await fs.renameSync(this.path, newPath);
    }
    async getBitrateAndHeight() {
        if (!this.path.endsWith('mp4') && !this.path.endsWith('mov')) {
            console.warn(`File: "${this.path}" isn't "mp4" or "mov"`);
            return undefined;
        }
        const { execSync } = require('child_process');
        const ffprobeCmd = `ffprobe -v quiet -print_format json -show_streams -show_format`;
        const probe = JSON.parse(await execSync(`${ffprobeCmd} "${this.path}"`, { encoding: 'utf8' }));
        const { bit_rate, height } = probe.streams.find(s => s["codec_type"] == "video");
        return [bit_rate, height];
    }
    async exists() {
        return await MyFs_1.default.path_exists(this.path);
    }
    remove() {
        fs.unlinkSync(this.path);
    }
    size() {
        let { size } = fs.lstatSync(this.path);
        return size;
    }
}
class Txt {
    constructor(pathNoExt) {
        this.base = new File(`${pathNoExt}.txt`);
        this.on = new File(`${pathNoExt}_on.txt`);
        this.off = new File(`${pathNoExt}_off.txt`);
    }
    getAll() {
        return [this.base, this.on, this.off];
    }
    async getMissing() {
        let missing = [];
        if (!(await this.base.exists()))
            missing.push(this.base);
        if (!(await this.on.exists()))
            missing.push(this.on);
        if (!(await this.off.exists()))
            missing.push(this.off);
        return missing;
    }
    async allExist() {
        return all(await asx_1.default.concurrent(this.base.exists(), this.on.exists(), this.off.exists()));
    }
    async anyExist() {
        return any(await asx_1.default.concurrent(this.base.exists(), this.on.exists(), this.off.exists()));
    }
    async removeAll() {
        if (await this.base.exists())
            await this.base.remove();
        if (await this.on.exists())
            await this.on.remove();
        if (await this.off.exists())
            await this.off.remove();
    }
    async renameByOtherTxt(other) {
        console.warn('renameByOtherTxt: didnt set new this props');
        return await asx_1.default.concurrent(fs.renameSync(this.base.path, other.base.path), fs.renameSync(this.on.path, other.on.path), fs.renameSync(this.off.path, other.off.path));
    }
}
class Truth {
    /**An object wrapping an absolute path without extension.*/
    constructor(pathNoExt) {
        if (!path.isAbsolute(pathNoExt))
            throw new Error(`Passed path is not absolute: ${pathNoExt}`);
        if (bool(path.extname(pathNoExt)))
            throw new Error(`Passed path is not extensionless: ${pathNoExt}`);
        if (pathNoExt.endsWith('off') || pathNoExt.endsWith('on'))
            throw new Error(`Passed path of "_on" or "_off" file and not base: ${pathNoExt}`);
        this.pathNoExt = pathNoExt;
        this.name = path.basename(this.pathNoExt);
        this.txt = new Txt(this.pathNoExt);
        this.midi = new File(`${this.pathNoExt}.mid`);
        this.mp4 = new File(`${this.pathNoExt}.mp4`);
        this.mov = new File(`${this.pathNoExt}.mov`);
        this.onsets = new File(`${this.pathNoExt}_onsets.json`);
    }
    /**Counts the number of non-empty lines in the txt on path file.*/
    numOfNotes() {
        return fs
            .readFileSync(this.txt.on.path, { encoding: 'utf8' })
            .split('\n')
            .filter(line => bool(line)).length;
    }
}
//# sourceMappingURL=data:application/json;base64,