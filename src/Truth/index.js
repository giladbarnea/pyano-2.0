"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const MyFs_1 = require("../MyFs");
const str_1 = require("../str");
const MyDate_1 = require("../MyDate");
const util_1 = require("../util");
class File {
    constructor(pathWithExt) {
        if (!util_1.bool(path.extname(pathWithExt))) {
            throw new Error(`File constructor: passed 'pathWithExt' is extensionless: ${pathWithExt}`);
        }
        this.path = pathWithExt;
        this.pathNoExt = MyFs_1.default.remove_ext(this.path);
        if (path.isAbsolute(this.path))
            this.name = new File(path.basename(this.path));
    }
    toString() {
        return this.path;
    }
    renameByOtherFile(other) {
        console.warn('renameByOtherFile not setting new this.path');
        fs.renameSync(this.path, other.path);
    }
    renameByCTime() {
        console.warn('renameByCTime not setting new this.path');
        const stats = fs.lstatSync(this.path);
        const datestr = MyDate_1.date(stats.ctime).human();
        const newPath = MyFs_1.default.push_before_ext(this.path, `__CREATED_${datestr}`);
        console.log('renameByCTime() to: ', newPath);
        fs.renameSync(this.path, newPath);
    }
    async getBitrateAndHeight() {
        if (!this.path.endsWith('mp4') && !this.path.endsWith('mov')) {
            console.warn(`File: "${this.path}" isn't "mp4" or "mov"`);
            return undefined;
        }
        const { execSync } = require('child_process');
        const ffprobeCmd = `ffprobe -v quiet -print_format json -show_streams -show_format`;
        const probe = JSON.parse(execSync(`${ffprobeCmd} "${this.path}"`, { encoding: 'utf8' }));
        const { bit_rate, height } = probe.streams.find(s => s["codec_type"] === "video");
        return [bit_rate, height];
    }
    exists() {
        return fs.existsSync(this.path);
    }
    remove() {
        fs.unlinkSync(this.path);
    }
    size() {
        let { size } = fs.lstatSync(this.path);
        return size;
    }
}
class Txt {
    constructor(pathNoExt) {
        this.base = new File(`${pathNoExt}.txt`);
        this.on = new File(`${pathNoExt}_on.txt`);
        this.off = new File(`${pathNoExt}_off.txt`);
    }
    getAll() {
        return [this.base, this.on, this.off];
    }
    getExisting() {
        const existing = [];
        existing.push(this.base.exists() ? this.base : false);
        existing.push(this.on.exists() ? this.on : false);
        existing.push(this.off.exists() ? this.off : false);
        return existing;
    }
    allExist() {
        return (this.base.exists()
            && this.on.exists()
            && this.off.exists());
    }
    anyExist() {
        return (this.base.exists()
            || this.on.exists()
            || this.off.exists());
    }
    removeAll() {
        if (this.base.exists())
            this.base.remove();
        if (this.on.exists())
            this.on.remove();
        if (this.off.exists())
            this.off.remove();
    }
    renameByOtherTxt(other) {
        console.warn('renameByOtherTxt: didnt set new this base / on / off');
        fs.renameSync(this.base.path, other.base.path);
        fs.renameSync(this.on.path, other.on.path);
        fs.renameSync(this.off.path, other.off.path);
    }
}
class Truth {
    constructor(pathNoExt) {
        if (!path.isAbsolute(pathNoExt))
            throw new Error(`Passed path is not absolute: ${pathNoExt}`);
        if (util_1.bool(path.extname(pathNoExt))) {
            console.warn(`Passed path is not extensionless: ${pathNoExt}. Removing extension`);
            pathNoExt = MyFs_1.default.remove_ext(pathNoExt);
        }
        if (pathNoExt.endsWith('off') || pathNoExt.endsWith('on')) {
            console.warn(`Passed path of "_on" or "_off" file and not base: ${pathNoExt}. Using base`);
            let noExt = str_1.str(MyFs_1.default.remove_ext(pathNoExt));
            pathNoExt = `${noExt.upTo('_', true)}${path.extname(pathNoExt)}`;
        }
        this.pathNoExt = pathNoExt;
        this.name = path.basename(this.pathNoExt);
        this.txt = new Txt(this.pathNoExt);
        this.midi = new File(`${this.pathNoExt}.mid`);
        this.mp4 = new File(`${this.pathNoExt}.mp4`);
        this.mov = new File(`${this.pathNoExt}.mov`);
        this.onsets = new File(`${this.pathNoExt}_onsets.json`);
    }
    numOfNotes() {
        if (!this.txt.on.exists()) {
            console.warn(`this.txt.on (${this.txt.on}) does not exist, returning undefined`);
            return undefined;
        }
        const strings = fs
            .readFileSync(this.txt.on.path, { encoding: 'utf8' })
            .split('\n');
        let notes = 0;
        for (let s of strings) {
            if (s.includes('\\')) {
                console.warn(`s includes backslash, ${this.txt.on}`);
            }
            else if (util_1.bool(s)) {
                notes++;
            }
        }
        return notes;
    }
}
//# sourceMappingURL=data:application/json;base64,