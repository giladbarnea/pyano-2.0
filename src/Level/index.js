"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
class Level {
    constructor(level, index, internalTrialIndex) {
        if (index == undefined)
            throw new Error("index is undefined");
        const { notes, rhythm, tempo, trials } = level;
        this.notes = notes;
        this.rhythm = rhythm;
        this.tempo = tempo;
        this.trials = trials;
        this.index = index;
        this.internalTrialIndex = internalTrialIndex;
    }
    isFirstTrial() {
        if (this.internalTrialIndex == undefined)
            throw new Error("internalTrialIndex is undefined");
        return this.internalTrialIndex == 0;
    }
    isLastTrial() {
        return this.internalTrialIndex == this.trials - 1;
    }
    hasZeroes() {
        return !util_1.bool(this.notes) || !util_1.bool(this.trials);
    }
}
exports.Level = Level;
class LevelCollection {
    constructor(levels, currentLevelIndex, currentInternalTrialIndex) {
        this._levels = levels.map((level, index) => new Level(level, index));
        if (currentLevelIndex !== undefined) {
            this.current = this._levels[currentLevelIndex];
            this.current.internalTrialIndex = currentInternalTrialIndex;
        }
    }
    get length() {
        return this._levels.length;
    }
    get(i) {
        return this._levels[i];
    }
    someHaveZeroes() {
        return this._levels.some(level => level.hasZeroes());
    }
    slicesByNotes() {
        let byNotes = {};
        for (let level of this._levels) {
            if (level.notes in byNotes)
                byNotes[level.notes].addLevel(level);
            else
                byNotes[level.notes] = new LevelCollection([level]);
        }
        return Object.values(byNotes);
    }
    addLevel(level) {
        this._levels.push(level);
    }
    getNextTempoOfThisNotes() {
        if (this.current.rhythm)
            return this.current.tempo;
        for (let i = this.current.index; i < this._levels.length; i++) {
            const lvl = this._levels[i];
            if (lvl.notes != this.current.notes)
                return 100;
            if (lvl.tempo != null)
                return lvl.tempo;
        }
        return 100;
    }
    isCurrentLastLevel() {
        return this.current.index == this.length - 1;
    }
    maxNotes() {
        return Math.max(...this._levels.map(lvl => lvl.notes));
    }
    [Symbol.iterator]() {
        return this._levels.values();
    }
}
exports.LevelCollection = LevelCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUErQjtBQVMvQixNQUFhLEtBQUs7SUFRZCxZQUFZLEtBQWEsRUFBRSxLQUFhLEVBQUUsa0JBQTJCO1FBQ2pFLElBQUssS0FBSyxJQUFJLFNBQVM7WUFBRyxNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDaEUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQztRQUMvQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7SUFDakQsQ0FBQztJQUVELFlBQVk7UUFDUixJQUFLLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxTQUFTO1lBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztRQUN2RCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsU0FBUztRQUNMLE9BQU8sQ0FBQyxXQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBRUo7QUFqQ0Qsc0JBaUNDO0FBRUQsTUFBYSxlQUFl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b2wgfSBmcm9tIFwiLi4vdXRpbFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElMZXZlbCB7XG4gICAgbm90ZXM6IG51bWJlcjtcbiAgICByaHl0aG06IGJvb2xlYW47XG4gICAgdGVtcG86IG51bWJlciB8IG51bGw7XG4gICAgdHJpYWxzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBMZXZlbCBpbXBsZW1lbnRzIElMZXZlbCB7XG4gICAgcmVhZG9ubHkgbm90ZXM6IG51bWJlcjtcbiAgICByZWFkb25seSByaHl0aG06IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgdGVtcG86IG51bWJlciB8IG51bGw7XG4gICAgcmVhZG9ubHkgdHJpYWxzOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgaW5kZXg6IG51bWJlcjtcbiAgICBpbnRlcm5hbFRyaWFsSW5kZXg6IG51bWJlcjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihsZXZlbDogSUxldmVsLCBpbmRleDogbnVtYmVyLCBpbnRlcm5hbFRyaWFsSW5kZXg/OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKCBpbmRleCA9PSB1bmRlZmluZWQgKSB0aHJvdyBuZXcgRXJyb3IoXCJpbmRleCBpcyB1bmRlZmluZWRcIik7XG4gICAgICAgIGNvbnN0IHsgbm90ZXMsIHJoeXRobSwgdGVtcG8sIHRyaWFscyB9ID0gbGV2ZWw7XG4gICAgICAgIHRoaXMubm90ZXMgPSBub3RlcztcbiAgICAgICAgdGhpcy5yaHl0aG0gPSByaHl0aG07XG4gICAgICAgIHRoaXMudGVtcG8gPSB0ZW1wbztcbiAgICAgICAgdGhpcy50cmlhbHMgPSB0cmlhbHM7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5pbnRlcm5hbFRyaWFsSW5kZXggPSBpbnRlcm5hbFRyaWFsSW5kZXg7XG4gICAgfVxuICAgIFxuICAgIGlzRmlyc3RUcmlhbCgpIHtcbiAgICAgICAgaWYgKCB0aGlzLmludGVybmFsVHJpYWxJbmRleCA9PSB1bmRlZmluZWQgKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW50ZXJuYWxUcmlhbEluZGV4IGlzIHVuZGVmaW5lZFwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxUcmlhbEluZGV4ID09IDA7XG4gICAgfVxuICAgIFxuICAgIGlzTGFzdFRyaWFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbFRyaWFsSW5kZXggPT0gdGhpcy50cmlhbHMgLSAxO1xuICAgIH1cbiAgICBcbiAgICBoYXNaZXJvZXMoKSB7XG4gICAgICAgIHJldHVybiAhYm9vbCh0aGlzLm5vdGVzKSB8fCAhYm9vbCh0aGlzLnRyaWFscyk7XG4gICAgfVxuICAgIFxufVxuXG5leHBvcnQgY2xhc3MgTGV2ZWxDb2xsZWN0aW9uIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9sZXZlbHM6IExldmVsW107XG4gICAgcHJpdmF0ZSByZWFkb25seSBjdXJyZW50OiBMZXZlbDtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihsZXZlbHM6IElMZXZlbFtdLCBjdXJyZW50TGV2ZWxJbmRleD86IG51bWJlciwgY3VycmVudEludGVybmFsVHJpYWxJbmRleD86IG51bWJlcikge1xuICAgICAgICBcbiAgICAgICAgdGhpcy5fbGV2ZWxzID0gbGV2ZWxzLm1hcCgobGV2ZWwsIGluZGV4KSA9PiBuZXcgTGV2ZWwobGV2ZWwsIGluZGV4KSk7XG4gICAgICAgIGlmICggY3VycmVudExldmVsSW5kZXggIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMuX2xldmVsc1tjdXJyZW50TGV2ZWxJbmRleF07XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQuaW50ZXJuYWxUcmlhbEluZGV4ID0gY3VycmVudEludGVybmFsVHJpYWxJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZ2V0IGxlbmd0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGV2ZWxzLmxlbmd0aDtcbiAgICB9XG4gICAgXG4gICAgZ2V0KGk6IG51bWJlcik6IExldmVsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xldmVsc1tpXTtcbiAgICB9XG4gICAgXG4gICAgc29tZUhhdmVaZXJvZXMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sZXZlbHMuc29tZShsZXZlbCA9PiBsZXZlbC5oYXNaZXJvZXMoKSk7XG4gICAgfVxuICAgIFxuICAgIHNsaWNlc0J5Tm90ZXMoKTogTGV2ZWxDb2xsZWN0aW9uW10ge1xuICAgICAgICBsZXQgYnlOb3RlcyA9IHt9O1xuICAgICAgICBmb3IgKCBsZXQgbGV2ZWwgb2YgdGhpcy5fbGV2ZWxzICkge1xuICAgICAgICAgICAgaWYgKCBsZXZlbC5ub3RlcyBpbiBieU5vdGVzIClcbiAgICAgICAgICAgICAgICBieU5vdGVzW2xldmVsLm5vdGVzXS5hZGRMZXZlbChsZXZlbCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYnlOb3Rlc1tsZXZlbC5ub3Rlc10gPSBuZXcgTGV2ZWxDb2xsZWN0aW9uKFsgbGV2ZWwgXSk7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhieU5vdGVzKTtcbiAgICB9XG4gICAgXG4gICAgYWRkTGV2ZWwobGV2ZWw6IExldmVsKSB7XG4gICAgICAgIHRoaXMuX2xldmVscy5wdXNoKGxldmVsKTtcbiAgICB9XG4gICAgXG4gICAgZ2V0TmV4dFRlbXBvT2ZUaGlzTm90ZXMoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKCB0aGlzLmN1cnJlbnQucmh5dGhtIClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQudGVtcG87XG4gICAgICAgIGZvciAoIGxldCBpID0gdGhpcy5jdXJyZW50LmluZGV4OyBpIDwgdGhpcy5fbGV2ZWxzLmxlbmd0aDsgaSsrICkge1xuICAgICAgICAgICAgY29uc3QgbHZsID0gdGhpcy5fbGV2ZWxzW2ldO1xuICAgICAgICAgICAgaWYgKCBsdmwubm90ZXMgIT0gdGhpcy5jdXJyZW50Lm5vdGVzIClcbiAgICAgICAgICAgICAgICByZXR1cm4gMTAwOyAvLyB3ZW50IG92ZXIgYWxsIGxldmVsIHdpdGggc2FtZSBudW1iZXIgb2Ygbm90ZXMgYW5kIGRpZG4ndCBmaW5kIGFueXRoaW5nXG4gICAgICAgICAgICBpZiAoIGx2bC50ZW1wbyAhPSBudWxsIClcbiAgICAgICAgICAgICAgICByZXR1cm4gbHZsLnRlbXBvO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxMDA7XG4gICAgfVxuICAgIFxuICAgIGlzQ3VycmVudExhc3RMZXZlbCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudC5pbmRleCA9PSB0aGlzLmxlbmd0aCAtIDE7XG4gICAgfVxuICAgIFxuICAgIG1heE5vdGVzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCguLi50aGlzLl9sZXZlbHMubWFwKGx2bCA9PiBsdmwubm90ZXMpKTtcbiAgICB9XG4gICAgXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sZXZlbHMudmFsdWVzKCk7XG4gICAgfVxufVxuIl19