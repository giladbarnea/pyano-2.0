const { app, BrowserWindow } = require('electron');
const path = require('path');
console.log('%cmain.ts', 'font-weight: bold');
const argv = process.argv.slice(2);
console.table({
    appPath: app.getAppPath(),
    exe: app.getPath("exe"),
    userData: app.getPath("userData"),
    appData: app.getPath("appData"),
    DEBUG: argv.includes('debug'),
    DRYRUN: argv.includes('dry-run'),
    NOPYTHON: argv.includes('no-python'),
});
let mainWindow;
function createWindow() {
    mainWindow = new BrowserWindow({
        width: 2560,
        height: 1440,
        darkTheme: true,
        autoHideMenuBar: true,
        webPreferences: {
            experimentalFeatures: true,
            nodeIntegration: true,
            allowRunningInsecureContent: true,
            autoplayPolicy: "no-user-gesture-required"
        },
    });
    mainWindow.loadFile(path.join(__dirname, "./index.html")).then((done) => {
    });
    mainWindow.webContents.openDevTools();
    mainWindow.on('closed', function () {
        mainWindow = null;
    });
}
app.on('ready', createWindow);
app.on('window-all-closed', function () {
    if (process.platform !== 'darwin')
        app.quit();
});
app.on('activate', function () {
    if (mainWindow === null)
        createWindow();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFJbkQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBVTdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDOUMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNWLE9BQU8sRUFBRyxHQUFHLENBQUMsVUFBVSxFQUFFO0lBQzFCLEdBQUcsRUFBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN4QixRQUFRLEVBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDbEMsT0FBTyxFQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ2hDLEtBQUssRUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUM5QixNQUFNLEVBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFDakMsUUFBUSxFQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO0NBQ3hDLENBQUMsQ0FBQztBQUVILElBQUksVUFBa0MsQ0FBQztBQUV2QyxTQUFTLFlBQVk7SUFFakIsVUFBVSxHQUFHLElBQUksYUFBYSxDQUFDO1FBQzNCLEtBQUssRUFBRyxJQUFJO1FBQ1osTUFBTSxFQUFHLElBQUk7UUFDYixTQUFTLEVBQUcsSUFBSTtRQUNoQixlQUFlLEVBQUcsSUFBSTtRQUV0QixjQUFjLEVBQUc7WUFFYixvQkFBb0IsRUFBRyxJQUFJO1lBQzNCLGVBQWUsRUFBRyxJQUFJO1lBQ3RCLDJCQUEyQixFQUFHLElBQUk7WUFDbEMsY0FBYyxFQUFHLDBCQUEwQjtTQUU5QztLQUdKLENBQUMsQ0FBQztJQVlILFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtJQUV4RSxDQUFDLENBQUMsQ0FBQztJQUlILFVBQVUsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7SUFHdEMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFJcEIsVUFBVSxHQUFHLElBQUksQ0FBQTtJQUNyQixDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUM7QUFLRCxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztBQUc5QixHQUFHLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFO0lBR3hCLElBQUssT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRO1FBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ25ELENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUU7SUFJZixJQUFLLFVBQVUsS0FBSyxJQUFJO1FBQUcsWUFBWSxFQUFFLENBQUE7QUFDN0MsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2R1bGVzIHRvIGNvbnRyb2wgYXBwbGljYXRpb24gbGlmZSBhbmQgY3JlYXRlIG5hdGl2ZSBicm93c2VyIHdpbmRvd1xuLy8gaW1wb3J0IHthcHAsIEJyb3dzZXJXaW5kb3d9IGZyb20gXCJlbGVjdHJvblwiO1xuY29uc3QgeyBhcHAsIEJyb3dzZXJXaW5kb3cgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5cbi8vIGltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4vLyBjb25zdCBlbGVjdG9uUmVsb2FkUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdub2RlX21vZHVsZXMnLCAnLmJpbicsICdlbGVjdHJvbicpO1xuLy8gY29uc29sZS50YWJsZSh7X19kaXJuYW1lLCBlbGVjdG9uUmVsb2FkUGF0aH0pO1xuXG4vLyByZXF1aXJlKCdlbGVjdHJvbi1yZWxvYWQnKShfX2Rpcm5hbWUsIHtcbi8vICAgICBlbGVjdHJvbjogZWxlY3RvblJlbG9hZFBhdGhcbi8vIH0pO1xuXG4vLyBLZWVwIGEgZ2xvYmFsIHJlZmVyZW5jZSBvZiB0aGUgd2luZG93IG9iamVjdCwgaWYgeW91IGRvbid0LCB0aGUgd2luZG93IHdpbGxcbi8vIGJlIGNsb3NlZCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIEphdmFTY3JpcHQgb2JqZWN0IGlzIGdhcmJhZ2UgY29sbGVjdGVkLlxuY29uc29sZS5sb2coJyVjbWFpbi50cycsICdmb250LXdlaWdodDogYm9sZCcpO1xuY29uc3QgYXJndiA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcbmNvbnNvbGUudGFibGUoe1xuICAgIGFwcFBhdGggOiBhcHAuZ2V0QXBwUGF0aCgpLFxuICAgIGV4ZSA6IGFwcC5nZXRQYXRoKFwiZXhlXCIpLFxuICAgIHVzZXJEYXRhIDogYXBwLmdldFBhdGgoXCJ1c2VyRGF0YVwiKSxcbiAgICBhcHBEYXRhIDogYXBwLmdldFBhdGgoXCJhcHBEYXRhXCIpLFxuICAgIERFQlVHIDogYXJndi5pbmNsdWRlcygnZGVidWcnKSxcbiAgICBEUllSVU4gOiBhcmd2LmluY2x1ZGVzKCdkcnktcnVuJyksXG4gICAgTk9QWVRIT04gOiBhcmd2LmluY2x1ZGVzKCduby1weXRob24nKSxcbn0pO1xuXG5sZXQgbWFpbldpbmRvdzogRWxlY3Ryb24uQnJvd3NlcldpbmRvdztcblxuZnVuY3Rpb24gY3JlYXRlV2luZG93KCkge1xuICAgIC8vIENyZWF0ZSB0aGUgYnJvd3NlciB3aW5kb3cuXG4gICAgbWFpbldpbmRvdyA9IG5ldyBCcm93c2VyV2luZG93KHtcbiAgICAgICAgd2lkdGggOiAyNTYwLFxuICAgICAgICBoZWlnaHQgOiAxNDQwLFxuICAgICAgICBkYXJrVGhlbWUgOiB0cnVlLFxuICAgICAgICBhdXRvSGlkZU1lbnVCYXIgOiB0cnVlLFxuICAgICAgICBcbiAgICAgICAgd2ViUHJlZmVyZW5jZXMgOiB7XG4gICAgICAgICAgICAvLyBwcmVsb2FkIDogcGF0aC5qb2luKF9fZGlybmFtZSwgJ3ByZWxvYWQuanMnKSxcbiAgICAgICAgICAgIGV4cGVyaW1lbnRhbEZlYXR1cmVzIDogdHJ1ZSxcbiAgICAgICAgICAgIG5vZGVJbnRlZ3JhdGlvbiA6IHRydWUsXG4gICAgICAgICAgICBhbGxvd1J1bm5pbmdJbnNlY3VyZUNvbnRlbnQgOiB0cnVlLFxuICAgICAgICAgICAgYXV0b3BsYXlQb2xpY3kgOiBcIm5vLXVzZXItZ2VzdHVyZS1yZXF1aXJlZFwiXG4gICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH0pO1xuICAgIC8vIG1haW5XaW5kb3cuc2V0QmFja2dyb3VuZENvbG9yKCcjMTgxODE4Jyk7XG4gICAgXG4gICAgXG4gICAgLyptYWluV2luZG93LnNldFNpemUoMTkxOSwgMTA4MCwgdHJ1ZSk7XG4gICAgIG1haW5XaW5kb3cucmVzaXphYmxlID0gdHJ1ZTtcbiAgICAgbWFpbldpbmRvdy5zZXRNZW51KG51bGwpO1xuICAgICBtYWluV2luZG93LmF1dG9IaWRlTWVudUJhciA9IHRydWU7XG4gICAgIG1haW5XaW5kb3cubWF4aW1pemUoKTtcbiAgICAgbWFpbldpbmRvdy5zZXRNZW51QmFyVmlzaWJpbGl0eSh0cnVlKTtcbiAgICAgbWFpbldpbmRvdy5zZXRGdWxsU2NyZWVuKGZhbHNlKTsqL1xuICAgIFxuICAgIG1haW5XaW5kb3cubG9hZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgXCIuL2luZGV4Lmh0bWxcIikpLnRoZW4oKGRvbmUpID0+IHtcbiAgICBcbiAgICB9KTtcbiAgICBcbiAgICBcbiAgICAvLyBPcGVuIHRoZSBEZXZUb29scy5cbiAgICBtYWluV2luZG93LndlYkNvbnRlbnRzLm9wZW5EZXZUb29scygpO1xuICAgIFxuICAgIC8vIEVtaXR0ZWQgd2hlbiB0aGUgd2luZG93IGlzIGNsb3NlZC5cbiAgICBtYWluV2luZG93Lm9uKCdjbG9zZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERlcmVmZXJlbmNlIHRoZSB3aW5kb3cgb2JqZWN0LCB1c3VhbGx5IHlvdSB3b3VsZCBzdG9yZSB3aW5kb3dzXG4gICAgICAgIC8vIGluIGFuIGFycmF5IGlmIHlvdXIgYXBwIHN1cHBvcnRzIG11bHRpIHdpbmRvd3MsIHRoaXMgaXMgdGhlIHRpbWVcbiAgICAgICAgLy8gd2hlbiB5b3Ugc2hvdWxkIGRlbGV0ZSB0aGUgY29ycmVzcG9uZGluZyBlbGVtZW50LlxuICAgICAgICBtYWluV2luZG93ID0gbnVsbFxuICAgIH0pXG59XG5cbi8vIFRoaXMgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIHdoZW4gRWxlY3Ryb24gaGFzIGZpbmlzaGVkXG4vLyBpbml0aWFsaXphdGlvbiBhbmQgaXMgcmVhZHkgdG8gY3JlYXRlIGJyb3dzZXIgd2luZG93cy5cbi8vIFNvbWUgQVBJcyBjYW4gb25seSBiZSB1c2VkIGFmdGVyIHRoaXMgZXZlbnQgb2NjdXJzLlxuYXBwLm9uKCdyZWFkeScsIGNyZWF0ZVdpbmRvdyk7XG5cbi8vIFF1aXQgd2hlbiBhbGwgd2luZG93cyBhcmUgY2xvc2VkLlxuYXBwLm9uKCd3aW5kb3ctYWxsLWNsb3NlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBPbiBtYWNPUyBpdCBpcyBjb21tb24gZm9yIGFwcGxpY2F0aW9ucyBhbmQgdGhlaXIgbWVudSBiYXJcbiAgICAvLyB0byBzdGF5IGFjdGl2ZSB1bnRpbCB0aGUgdXNlciBxdWl0cyBleHBsaWNpdGx5IHdpdGggQ21kICsgUVxuICAgIGlmICggcHJvY2Vzcy5wbGF0Zm9ybSAhPT0gJ2RhcndpbicgKSBhcHAucXVpdCgpXG59KTtcblxuYXBwLm9uKCdhY3RpdmF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBPbiBtYWNPUyBpdCdzIGNvbW1vbiB0byByZS1jcmVhdGUgYSB3aW5kb3cgaW4gdGhlIGFwcCB3aGVuIHRoZVxuICAgIC8vIGRvY2sgaWNvbiBpcyBjbGlja2VkIGFuZCB0aGVyZSBhcmUgbm8gb3RoZXIgd2luZG93cyBvcGVuLlxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoIG1haW5XaW5kb3cgPT09IG51bGwgKSBjcmVhdGVXaW5kb3coKVxufSk7XG5cbi8vIEluIHRoaXMgZmlsZSB5b3UgY2FuIGluY2x1ZGUgdGhlIHJlc3Qgb2YgeW91ciBhcHAncyBzcGVjaWZpYyBtYWluIHByb2Nlc3Ncbi8vIGNvZGUuIFlvdSBjYW4gYWxzbyBwdXQgdGhlbSBpbiBzZXBhcmF0ZSBmaWxlcyBhbmQgcmVxdWlyZSB0aGVtIGhlcmUuXG4iXX0=