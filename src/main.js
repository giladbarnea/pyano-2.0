const { app, BrowserWindow } = require('electron');
const path = require('path');
console.log('%cmain.ts', 'font-weight: bold');
const argv = process.argv.slice(2);
console.table({
    appPath: app.getAppPath(),
    exe: app.getPath("exe"),
    userData: app.getPath("userData"),
    appData: app.getPath("appData"),
    DEBUG: argv.includes('debug'),
    DRYRUN: argv.includes('dry-run'),
    NOPYTHON: argv.includes('no-python'),
});
let mainWindow;
function createWindow() {
    mainWindow = new BrowserWindow({
        width: 2560,
        height: 1440,
        darkTheme: true,
        autoHideMenuBar: true,
        webPreferences: {
            experimentalFeatures: true,
            nodeIntegration: true,
            allowRunningInsecureContent: true,
            autoplayPolicy: "no-user-gesture-required"
        },
    });
    mainWindow.loadFile(path.join(__dirname, "./index.html")).then((done) => {
    });
    mainWindow.webContents.openDevTools();
    mainWindow.on('closed', function () {
        mainWindow = null;
    });
}
app.on('ready', createWindow);
app.on('window-all-closed', function () {
    if (process.platform !== 'darwin')
        app.quit();
});
app.on('activate', function () {
    if (mainWindow === null)
        createWindow();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFJbkQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBVTdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDOUMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFbkMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNWLE9BQU8sRUFBRyxHQUFHLENBQUMsVUFBVSxFQUFFO0lBQzFCLEdBQUcsRUFBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN4QixRQUFRLEVBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDbEMsT0FBTyxFQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ2hDLEtBQUssRUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUM5QixNQUFNLEVBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFDakMsUUFBUSxFQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO0NBQ3hDLENBQUMsQ0FBQztBQUVILElBQUksVUFBa0MsQ0FBQztBQUV2QyxTQUFTLFlBQVk7SUFFakIsVUFBVSxHQUFHLElBQUksYUFBYSxDQUFDO1FBQzNCLEtBQUssRUFBRyxJQUFJO1FBQ1osTUFBTSxFQUFHLElBQUk7UUFDYixTQUFTLEVBQUcsSUFBSTtRQUNoQixlQUFlLEVBQUcsSUFBSTtRQUV0QixjQUFjLEVBQUc7WUFFYixvQkFBb0IsRUFBRyxJQUFJO1lBQzNCLGVBQWUsRUFBRyxJQUFJO1lBQ3RCLDJCQUEyQixFQUFHLElBQUk7WUFDbEMsY0FBYyxFQUFHLDBCQUEwQjtTQUU5QztLQUdKLENBQUMsQ0FBQztJQWNILFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtJQUV4RSxDQUFDLENBQUMsQ0FBQztJQUlILFVBQVUsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7SUFLdEMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFJcEIsVUFBVSxHQUFHLElBQUksQ0FBQTtJQUNyQixDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUM7QUFNRCxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztBQUc5QixHQUFHLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFO0lBR3hCLElBQUssT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRO1FBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ25ELENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUU7SUFJZixJQUFLLFVBQVUsS0FBSyxJQUFJO1FBQUcsWUFBWSxFQUFFLENBQUE7QUFDN0MsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2R1bGVzIHRvIGNvbnRyb2wgYXBwbGljYXRpb24gbGlmZSBhbmQgY3JlYXRlIG5hdGl2ZSBicm93c2VyIHdpbmRvd1xuLy8gaW1wb3J0IHthcHAsIEJyb3dzZXJXaW5kb3d9IGZyb20gXCJlbGVjdHJvblwiO1xuY29uc3QgeyBhcHAsIEJyb3dzZXJXaW5kb3cgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5cbi8vIGltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4vLyBjb25zdCBlbGVjdG9uUmVsb2FkUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdub2RlX21vZHVsZXMnLCAnLmJpbicsICdlbGVjdHJvbicpO1xuLy8gY29uc29sZS50YWJsZSh7X19kaXJuYW1lLCBlbGVjdG9uUmVsb2FkUGF0aH0pO1xuXG4vLyByZXF1aXJlKCdlbGVjdHJvbi1yZWxvYWQnKShfX2Rpcm5hbWUsIHtcbi8vICAgICBlbGVjdHJvbjogZWxlY3RvblJlbG9hZFBhdGhcbi8vIH0pO1xuXG4vLyBLZWVwIGEgZ2xvYmFsIHJlZmVyZW5jZSBvZiB0aGUgd2luZG93IG9iamVjdCwgaWYgeW91IGRvbid0LCB0aGUgd2luZG93IHdpbGxcbi8vIGJlIGNsb3NlZCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIEphdmFTY3JpcHQgb2JqZWN0IGlzIGdhcmJhZ2UgY29sbGVjdGVkLlxuY29uc29sZS5sb2coJyVjbWFpbi50cycsICdmb250LXdlaWdodDogYm9sZCcpO1xuY29uc3QgYXJndiA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuY29uc29sZS50YWJsZSh7XG4gICAgYXBwUGF0aCA6IGFwcC5nZXRBcHBQYXRoKCksXG4gICAgZXhlIDogYXBwLmdldFBhdGgoXCJleGVcIiksXG4gICAgdXNlckRhdGEgOiBhcHAuZ2V0UGF0aChcInVzZXJEYXRhXCIpLFxuICAgIGFwcERhdGEgOiBhcHAuZ2V0UGF0aChcImFwcERhdGFcIiksXG4gICAgREVCVUcgOiBhcmd2LmluY2x1ZGVzKCdkZWJ1ZycpLFxuICAgIERSWVJVTiA6IGFyZ3YuaW5jbHVkZXMoJ2RyeS1ydW4nKSxcbiAgICBOT1BZVEhPTiA6IGFyZ3YuaW5jbHVkZXMoJ25vLXB5dGhvbicpLFxufSk7XG5cbmxldCBtYWluV2luZG93OiBFbGVjdHJvbi5Ccm93c2VyV2luZG93O1xuXG5mdW5jdGlvbiBjcmVhdGVXaW5kb3coKSB7XG4gICAgLy8gQ3JlYXRlIHRoZSBicm93c2VyIHdpbmRvdy5cbiAgICBtYWluV2luZG93ID0gbmV3IEJyb3dzZXJXaW5kb3coe1xuICAgICAgICB3aWR0aCA6IDI1NjAsXG4gICAgICAgIGhlaWdodCA6IDE0NDAsXG4gICAgICAgIGRhcmtUaGVtZSA6IHRydWUsXG4gICAgICAgIGF1dG9IaWRlTWVudUJhciA6IHRydWUsXG4gICAgICAgIFxuICAgICAgICB3ZWJQcmVmZXJlbmNlcyA6IHtcbiAgICAgICAgICAgIC8vIHByZWxvYWQgOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAncHJlbG9hZC5qcycpLFxuICAgICAgICAgICAgZXhwZXJpbWVudGFsRmVhdHVyZXMgOiB0cnVlLFxuICAgICAgICAgICAgbm9kZUludGVncmF0aW9uIDogdHJ1ZSxcbiAgICAgICAgICAgIGFsbG93UnVubmluZ0luc2VjdXJlQ29udGVudCA6IHRydWUsXG4gICAgICAgICAgICBhdXRvcGxheVBvbGljeSA6IFwibm8tdXNlci1nZXN0dXJlLXJlcXVpcmVkXCJcbiAgICAgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgXG4gICAgfSk7XG4gICAgXG4gICAgLy8gcmVtb3RlLmdsb2JhbFNob3J0Y3V0LnJlZ2lzdGVyKCdDb21tYW5kT3JDb250cm9sK1knLCAoKSA9PiByZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpLndlYkNvbnRlbnRzLm9wZW5EZXZUb29scygpKTtcbiAgICAvLyBtYWluV2luZG93LnNldEJhY2tncm91bmRDb2xvcignIzE4MTgxOCcpO1xuICAgIFxuICAgIFxuICAgIC8qbWFpbldpbmRvdy5zZXRTaXplKDE5MTksIDEwODAsIHRydWUpO1xuICAgICBtYWluV2luZG93LnJlc2l6YWJsZSA9IHRydWU7XG4gICAgIG1haW5XaW5kb3cuc2V0TWVudShudWxsKTtcbiAgICAgbWFpbldpbmRvdy5hdXRvSGlkZU1lbnVCYXIgPSB0cnVlO1xuICAgICBtYWluV2luZG93Lm1heGltaXplKCk7XG4gICAgIG1haW5XaW5kb3cuc2V0TWVudUJhclZpc2liaWxpdHkodHJ1ZSk7XG4gICAgIG1haW5XaW5kb3cuc2V0RnVsbFNjcmVlbihmYWxzZSk7Ki9cbiAgICBcbiAgICBtYWluV2luZG93LmxvYWRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi9pbmRleC5odG1sXCIpKS50aGVuKChkb25lKSA9PiB7XG4gICAgXG4gICAgfSk7XG4gICAgXG4gICAgXG4gICAgLy8gT3BlbiB0aGUgRGV2VG9vbHMuXG4gICAgbWFpbldpbmRvdy53ZWJDb250ZW50cy5vcGVuRGV2VG9vbHMoKTtcbiAgICBcbiAgICBcbiAgICBcbiAgICAvLyBFbWl0dGVkIHdoZW4gdGhlIHdpbmRvdyBpcyBjbG9zZWQuXG4gICAgbWFpbldpbmRvdy5vbignY2xvc2VkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBEZXJlZmVyZW5jZSB0aGUgd2luZG93IG9iamVjdCwgdXN1YWxseSB5b3Ugd291bGQgc3RvcmUgd2luZG93c1xuICAgICAgICAvLyBpbiBhbiBhcnJheSBpZiB5b3VyIGFwcCBzdXBwb3J0cyBtdWx0aSB3aW5kb3dzLCB0aGlzIGlzIHRoZSB0aW1lXG4gICAgICAgIC8vIHdoZW4geW91IHNob3VsZCBkZWxldGUgdGhlIGNvcnJlc3BvbmRpbmcgZWxlbWVudC5cbiAgICAgICAgbWFpbldpbmRvdyA9IG51bGxcbiAgICB9KVxufVxuXG5cbi8vIFRoaXMgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIHdoZW4gRWxlY3Ryb24gaGFzIGZpbmlzaGVkXG4vLyBpbml0aWFsaXphdGlvbiBhbmQgaXMgcmVhZHkgdG8gY3JlYXRlIGJyb3dzZXIgd2luZG93cy5cbi8vIFNvbWUgQVBJcyBjYW4gb25seSBiZSB1c2VkIGFmdGVyIHRoaXMgZXZlbnQgb2NjdXJzLlxuYXBwLm9uKCdyZWFkeScsIGNyZWF0ZVdpbmRvdyk7XG5cbi8vIFF1aXQgd2hlbiBhbGwgd2luZG93cyBhcmUgY2xvc2VkLlxuYXBwLm9uKCd3aW5kb3ctYWxsLWNsb3NlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBPbiBtYWNPUyBpdCBpcyBjb21tb24gZm9yIGFwcGxpY2F0aW9ucyBhbmQgdGhlaXIgbWVudSBiYXJcbiAgICAvLyB0byBzdGF5IGFjdGl2ZSB1bnRpbCB0aGUgdXNlciBxdWl0cyBleHBsaWNpdGx5IHdpdGggQ21kICsgUVxuICAgIGlmICggcHJvY2Vzcy5wbGF0Zm9ybSAhPT0gJ2RhcndpbicgKSBhcHAucXVpdCgpXG59KTtcblxuYXBwLm9uKCdhY3RpdmF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBPbiBtYWNPUyBpdCdzIGNvbW1vbiB0byByZS1jcmVhdGUgYSB3aW5kb3cgaW4gdGhlIGFwcCB3aGVuIHRoZVxuICAgIC8vIGRvY2sgaWNvbiBpcyBjbGlja2VkIGFuZCB0aGVyZSBhcmUgbm8gb3RoZXIgd2luZG93cyBvcGVuLlxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoIG1haW5XaW5kb3cgPT09IG51bGwgKSBjcmVhdGVXaW5kb3coKVxufSk7XG5cbi8vIEluIHRoaXMgZmlsZSB5b3UgY2FuIGluY2x1ZGUgdGhlIHJlc3Qgb2YgeW91ciBhcHAncyBzcGVjaWZpYyBtYWluIHByb2Nlc3Ncbi8vIGNvZGUuIFlvdSBjYW4gYWxzbyBwdXQgdGhlbSBpbiBzZXBhcmF0ZSBmaWxlcyBhbmQgcmVxdWlyZSB0aGVtIGhlcmUuXG4iXX0=