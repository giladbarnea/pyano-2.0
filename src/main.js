const { app, BrowserWindow } = require('electron');
const path = require('path');
console.log('%cmain.ts', 'font-weight: bold');
const argv = process.argv.slice(2);
console.table({
    appPath: app.getAppPath(),
    exe: app.getPath("exe"),
    userData: app.getPath("userData"),
    appData: app.getPath("appData"),
    DEBUG: argv.includes('debug'),
    DRYRUN: argv.includes('dry-run'),
    NOPYTHON: argv.includes('no-python'),
});
let mainWindow;
function createWindow() {
    mainWindow = new BrowserWindow({
        width: 2560,
        height: 1440,
        darkTheme: true,
        autoHideMenuBar: true,
        webPreferences: {
            experimentalFeatures: true,
            nodeIntegration: true,
            allowRunningInsecureContent: true,
            autoplayPolicy: "no-user-gesture-required"
        },
    });
    mainWindow.loadFile(path.join(__dirname, "./index.html")).then((done) => {
    });
    mainWindow.webContents.openDevTools();
    mainWindow.on('closed', function () {
        mainWindow = null;
    });
}
app.on('ready', createWindow);
app.on('window-all-closed', function () {
    if (process.platform !== 'darwin')
        app.quit();
});
app.on('activate', function () {
    if (mainWindow === null)
        createWindow();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFJbkQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBVTdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDOUMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNWLE9BQU8sRUFBRyxHQUFHLENBQUMsVUFBVSxFQUFFO0lBQzFCLEdBQUcsRUFBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN4QixRQUFRLEVBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDbEMsT0FBTyxFQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ2hDLEtBQUssRUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUM5QixNQUFNLEVBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFDakMsUUFBUSxFQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO0NBQ3hDLENBQUMsQ0FBQztBQUVILElBQUksVUFBa0MsQ0FBQztBQUV2QyxTQUFTLFlBQVk7SUFFakIsVUFBVSxHQUFHLElBQUksYUFBYSxDQUFDO1FBQzNCLEtBQUssRUFBRyxJQUFJO1FBQ1osTUFBTSxFQUFHLElBQUk7UUFDYixTQUFTLEVBQUcsSUFBSTtRQUNoQixlQUFlLEVBQUcsSUFBSTtRQUV0QixjQUFjLEVBQUc7WUFFYixvQkFBb0IsRUFBRyxJQUFJO1lBQzNCLGVBQWUsRUFBRyxJQUFJO1lBQ3RCLDJCQUEyQixFQUFHLElBQUk7WUFDbEMsY0FBYyxFQUFHLDBCQUEwQjtTQUU5QztLQUdKLENBQUMsQ0FBQztJQWNILFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtJQUV4RSxDQUFDLENBQUMsQ0FBQztJQUlILFVBQVUsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7SUFHdEMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFJcEIsVUFBVSxHQUFHLElBQUksQ0FBQTtJQUNyQixDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUM7QUFNRCxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztBQUc5QixHQUFHLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFO0lBR3hCLElBQUssT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRO1FBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ25ELENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUU7SUFJZixJQUFLLFVBQVUsS0FBSyxJQUFJO1FBQUcsWUFBWSxFQUFFLENBQUE7QUFDN0MsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2R1bGVzIHRvIGNvbnRyb2wgYXBwbGljYXRpb24gbGlmZSBhbmQgY3JlYXRlIG5hdGl2ZSBicm93c2VyIHdpbmRvd1xuLy8gaW1wb3J0IHthcHAsIEJyb3dzZXJXaW5kb3d9IGZyb20gXCJlbGVjdHJvblwiO1xuY29uc3QgeyBhcHAsIEJyb3dzZXJXaW5kb3cgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5cbi8vIGltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4vLyBjb25zdCBlbGVjdG9uUmVsb2FkUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdub2RlX21vZHVsZXMnLCAnLmJpbicsICdlbGVjdHJvbicpO1xuLy8gY29uc29sZS50YWJsZSh7X19kaXJuYW1lLCBlbGVjdG9uUmVsb2FkUGF0aH0pO1xuXG4vLyByZXF1aXJlKCdlbGVjdHJvbi1yZWxvYWQnKShfX2Rpcm5hbWUsIHtcbi8vICAgICBlbGVjdHJvbjogZWxlY3RvblJlbG9hZFBhdGhcbi8vIH0pO1xuXG4vLyBLZWVwIGEgZ2xvYmFsIHJlZmVyZW5jZSBvZiB0aGUgd2luZG93IG9iamVjdCwgaWYgeW91IGRvbid0LCB0aGUgd2luZG93IHdpbGxcbi8vIGJlIGNsb3NlZCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIEphdmFTY3JpcHQgb2JqZWN0IGlzIGdhcmJhZ2UgY29sbGVjdGVkLlxuY29uc29sZS5sb2coJyVjbWFpbi50cycsICdmb250LXdlaWdodDogYm9sZCcpO1xuY29uc3QgYXJndiA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcbmNvbnNvbGUudGFibGUoe1xuICAgIGFwcFBhdGggOiBhcHAuZ2V0QXBwUGF0aCgpLFxuICAgIGV4ZSA6IGFwcC5nZXRQYXRoKFwiZXhlXCIpLFxuICAgIHVzZXJEYXRhIDogYXBwLmdldFBhdGgoXCJ1c2VyRGF0YVwiKSxcbiAgICBhcHBEYXRhIDogYXBwLmdldFBhdGgoXCJhcHBEYXRhXCIpLFxuICAgIERFQlVHIDogYXJndi5pbmNsdWRlcygnZGVidWcnKSxcbiAgICBEUllSVU4gOiBhcmd2LmluY2x1ZGVzKCdkcnktcnVuJyksXG4gICAgTk9QWVRIT04gOiBhcmd2LmluY2x1ZGVzKCduby1weXRob24nKSxcbn0pO1xuXG5sZXQgbWFpbldpbmRvdzogRWxlY3Ryb24uQnJvd3NlcldpbmRvdztcblxuZnVuY3Rpb24gY3JlYXRlV2luZG93KCkge1xuICAgIC8vIENyZWF0ZSB0aGUgYnJvd3NlciB3aW5kb3cuXG4gICAgbWFpbldpbmRvdyA9IG5ldyBCcm93c2VyV2luZG93KHtcbiAgICAgICAgd2lkdGggOiAyNTYwLFxuICAgICAgICBoZWlnaHQgOiAxNDQwLFxuICAgICAgICBkYXJrVGhlbWUgOiB0cnVlLFxuICAgICAgICBhdXRvSGlkZU1lbnVCYXIgOiB0cnVlLFxuICAgICAgICBcbiAgICAgICAgd2ViUHJlZmVyZW5jZXMgOiB7XG4gICAgICAgICAgICAvLyBwcmVsb2FkIDogcGF0aC5qb2luKF9fZGlybmFtZSwgJ3ByZWxvYWQuanMnKSxcbiAgICAgICAgICAgIGV4cGVyaW1lbnRhbEZlYXR1cmVzIDogdHJ1ZSxcbiAgICAgICAgICAgIG5vZGVJbnRlZ3JhdGlvbiA6IHRydWUsXG4gICAgICAgICAgICBhbGxvd1J1bm5pbmdJbnNlY3VyZUNvbnRlbnQgOiB0cnVlLFxuICAgICAgICAgICAgYXV0b3BsYXlQb2xpY3kgOiBcIm5vLXVzZXItZ2VzdHVyZS1yZXF1aXJlZFwiXG4gICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH0pO1xuICAgIFxuICAgIC8vIHJlbW90ZS5nbG9iYWxTaG9ydGN1dC5yZWdpc3RlcignQ29tbWFuZE9yQ29udHJvbCtZJywgKCkgPT4gcmVtb3RlLmdldEN1cnJlbnRXaW5kb3coKS53ZWJDb250ZW50cy5vcGVuRGV2VG9vbHMoKSk7XG4gICAgLy8gbWFpbldpbmRvdy5zZXRCYWNrZ3JvdW5kQ29sb3IoJyMxODE4MTgnKTtcbiAgICBcbiAgICBcbiAgICAvKm1haW5XaW5kb3cuc2V0U2l6ZSgxOTE5LCAxMDgwLCB0cnVlKTtcbiAgICAgbWFpbldpbmRvdy5yZXNpemFibGUgPSB0cnVlO1xuICAgICBtYWluV2luZG93LnNldE1lbnUobnVsbCk7XG4gICAgIG1haW5XaW5kb3cuYXV0b0hpZGVNZW51QmFyID0gdHJ1ZTtcbiAgICAgbWFpbldpbmRvdy5tYXhpbWl6ZSgpO1xuICAgICBtYWluV2luZG93LnNldE1lbnVCYXJWaXNpYmlsaXR5KHRydWUpO1xuICAgICBtYWluV2luZG93LnNldEZ1bGxTY3JlZW4oZmFsc2UpOyovXG4gICAgXG4gICAgbWFpbldpbmRvdy5sb2FkRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCBcIi4vaW5kZXguaHRtbFwiKSkudGhlbigoZG9uZSkgPT4ge1xuICAgIFxuICAgIH0pO1xuICAgIFxuICAgIFxuICAgIC8vIE9wZW4gdGhlIERldlRvb2xzLlxuICAgIG1haW5XaW5kb3cud2ViQ29udGVudHMub3BlbkRldlRvb2xzKCk7XG4gICAgXG4gICAgLy8gRW1pdHRlZCB3aGVuIHRoZSB3aW5kb3cgaXMgY2xvc2VkLlxuICAgIG1haW5XaW5kb3cub24oJ2Nsb3NlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGVyZWZlcmVuY2UgdGhlIHdpbmRvdyBvYmplY3QsIHVzdWFsbHkgeW91IHdvdWxkIHN0b3JlIHdpbmRvd3NcbiAgICAgICAgLy8gaW4gYW4gYXJyYXkgaWYgeW91ciBhcHAgc3VwcG9ydHMgbXVsdGkgd2luZG93cywgdGhpcyBpcyB0aGUgdGltZVxuICAgICAgICAvLyB3aGVuIHlvdSBzaG91bGQgZGVsZXRlIHRoZSBjb3JyZXNwb25kaW5nIGVsZW1lbnQuXG4gICAgICAgIG1haW5XaW5kb3cgPSBudWxsXG4gICAgfSlcbn1cblxuXG4vLyBUaGlzIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCB3aGVuIEVsZWN0cm9uIGhhcyBmaW5pc2hlZFxuLy8gaW5pdGlhbGl6YXRpb24gYW5kIGlzIHJlYWR5IHRvIGNyZWF0ZSBicm93c2VyIHdpbmRvd3MuXG4vLyBTb21lIEFQSXMgY2FuIG9ubHkgYmUgdXNlZCBhZnRlciB0aGlzIGV2ZW50IG9jY3Vycy5cbmFwcC5vbigncmVhZHknLCBjcmVhdGVXaW5kb3cpO1xuXG4vLyBRdWl0IHdoZW4gYWxsIHdpbmRvd3MgYXJlIGNsb3NlZC5cbmFwcC5vbignd2luZG93LWFsbC1jbG9zZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gT24gbWFjT1MgaXQgaXMgY29tbW9uIGZvciBhcHBsaWNhdGlvbnMgYW5kIHRoZWlyIG1lbnUgYmFyXG4gICAgLy8gdG8gc3RheSBhY3RpdmUgdW50aWwgdGhlIHVzZXIgcXVpdHMgZXhwbGljaXRseSB3aXRoIENtZCArIFFcbiAgICBpZiAoIHByb2Nlc3MucGxhdGZvcm0gIT09ICdkYXJ3aW4nICkgYXBwLnF1aXQoKVxufSk7XG5cbmFwcC5vbignYWN0aXZhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gT24gbWFjT1MgaXQncyBjb21tb24gdG8gcmUtY3JlYXRlIGEgd2luZG93IGluIHRoZSBhcHAgd2hlbiB0aGVcbiAgICAvLyBkb2NrIGljb24gaXMgY2xpY2tlZCBhbmQgdGhlcmUgYXJlIG5vIG90aGVyIHdpbmRvd3Mgb3Blbi5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKCBtYWluV2luZG93ID09PSBudWxsICkgY3JlYXRlV2luZG93KClcbn0pO1xuXG4vLyBJbiB0aGlzIGZpbGUgeW91IGNhbiBpbmNsdWRlIHRoZSByZXN0IG9mIHlvdXIgYXBwJ3Mgc3BlY2lmaWMgbWFpbiBwcm9jZXNzXG4vLyBjb2RlLiBZb3UgY2FuIGFsc28gcHV0IHRoZW0gaW4gc2VwYXJhdGUgZmlsZXMgYW5kIHJlcXVpcmUgdGhlbSBoZXJlLlxuIl19