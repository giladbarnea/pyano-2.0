const { app, BrowserWindow } = require('electron');
const path = require('path');
console.log('%cmain.ts', 'font-weight: bold');
const argv = process.argv.slice(2);
console.table({
    appPath: app.getAppPath(),
    exe: app.getPath("exe"),
    userData: app.getPath("userData"),
    appData: app.getPath("appData"),
    DEBUG: argv.includes('debug'),
    DRYRUN: argv.includes('dry-run'),
    NOPYTHON: argv.includes('no-python'),
    LOG: argv.includes('log'),
});
let mainWindow;
function createWindow() {
    mainWindow = new BrowserWindow({
        width: 1000,
        height: 1440,
        darkTheme: true,
        autoHideMenuBar: true,
        webPreferences: {
            experimentalFeatures: true,
            nodeIntegration: true,
            allowRunningInsecureContent: true,
            autoplayPolicy: "no-user-gesture-required"
        },
    });
    mainWindow.loadFile(path.join(__dirname, "./index.html")).then((done) => {
    });
    mainWindow.webContents.openDevTools();
    mainWindow.on('closed', function () {
        mainWindow = null;
    });
}
app.on('ready', createWindow);
app.on('window-all-closed', function () {
    if (process.platform !== 'darwin')
        app.quit();
});
app.on('activate', function () {
    if (mainWindow === null)
        createWindow();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFJbkQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBVzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDOUMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFbkMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNWLE9BQU8sRUFBRSxHQUFHLENBQUMsVUFBVSxFQUFFO0lBQ3pCLEdBQUcsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN2QixRQUFRLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDakMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQy9CLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFDaEMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO0lBQ3BDLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztDQUM1QixDQUFDLENBQUM7QUFFSCxJQUFJLFVBQWtDLENBQUM7QUFFdkMsU0FBUyxZQUFZO0lBRWpCLFVBQVUsR0FBRyxJQUFJLGFBQWEsQ0FBQztRQUMzQixLQUFLLEVBQUUsSUFBSTtRQUNYLE1BQU0sRUFBRSxJQUFJO1FBQ1osU0FBUyxFQUFFLElBQUk7UUFDZixlQUFlLEVBQUUsSUFBSTtRQUVyQixjQUFjLEVBQUU7WUFFWixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLDJCQUEyQixFQUFFLElBQUk7WUFDakMsY0FBYyxFQUFFLDBCQUEwQjtTQUU3QztLQUdKLENBQUMsQ0FBQztJQWNILFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtJQUV4RSxDQUFDLENBQUMsQ0FBQztJQUlILFVBQVUsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7SUFJdEMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFJcEIsVUFBVSxHQUFHLElBQUksQ0FBQTtJQUNyQixDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUM7QUFNRCxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztBQUc5QixHQUFHLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFO0lBR3hCLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRO1FBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ2pELENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUU7SUFJZixJQUFJLFVBQVUsS0FBSyxJQUFJO1FBQUUsWUFBWSxFQUFFLENBQUE7QUFDM0MsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2R1bGVzIHRvIGNvbnRyb2wgYXBwbGljYXRpb24gbGlmZSBhbmQgY3JlYXRlIG5hdGl2ZSBicm93c2VyIHdpbmRvd1xuLy8gaW1wb3J0IHthcHAsIEJyb3dzZXJXaW5kb3d9IGZyb20gXCJlbGVjdHJvblwiO1xuY29uc3QgeyBhcHAsIEJyb3dzZXJXaW5kb3cgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5cbi8vIGltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4vLyBpbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG4vLyBjb25zdCBlbGVjdG9uUmVsb2FkUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdub2RlX21vZHVsZXMnLCAnLmJpbicsICdlbGVjdHJvbicpO1xuLy8gY29uc29sZS50YWJsZSh7X19kaXJuYW1lLCBlbGVjdG9uUmVsb2FkUGF0aH0pO1xuXG4vLyByZXF1aXJlKCdlbGVjdHJvbi1yZWxvYWQnKShfX2Rpcm5hbWUsIHtcbi8vICAgICBlbGVjdHJvbjogZWxlY3RvblJlbG9hZFBhdGhcbi8vIH0pO1xuXG4vLyBLZWVwIGEgZ2xvYmFsIHJlZmVyZW5jZSBvZiB0aGUgd2luZG93IG9iamVjdCwgaWYgeW91IGRvbid0LCB0aGUgd2luZG93IHdpbGxcbi8vIGJlIGNsb3NlZCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIEphdmFTY3JpcHQgb2JqZWN0IGlzIGdhcmJhZ2UgY29sbGVjdGVkLlxuY29uc29sZS5sb2coJyVjbWFpbi50cycsICdmb250LXdlaWdodDogYm9sZCcpO1xuY29uc3QgYXJndiA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuY29uc29sZS50YWJsZSh7XG4gICAgYXBwUGF0aDogYXBwLmdldEFwcFBhdGgoKSxcbiAgICBleGU6IGFwcC5nZXRQYXRoKFwiZXhlXCIpLFxuICAgIHVzZXJEYXRhOiBhcHAuZ2V0UGF0aChcInVzZXJEYXRhXCIpLFxuICAgIGFwcERhdGE6IGFwcC5nZXRQYXRoKFwiYXBwRGF0YVwiKSxcbiAgICBERUJVRzogYXJndi5pbmNsdWRlcygnZGVidWcnKSxcbiAgICBEUllSVU46IGFyZ3YuaW5jbHVkZXMoJ2RyeS1ydW4nKSxcbiAgICBOT1BZVEhPTjogYXJndi5pbmNsdWRlcygnbm8tcHl0aG9uJyksXG4gICAgTE9HOiBhcmd2LmluY2x1ZGVzKCdsb2cnKSxcbn0pO1xuXG5sZXQgbWFpbldpbmRvdzogRWxlY3Ryb24uQnJvd3NlcldpbmRvdztcblxuZnVuY3Rpb24gY3JlYXRlV2luZG93KCkge1xuICAgIC8vIENyZWF0ZSB0aGUgYnJvd3NlciB3aW5kb3cuXG4gICAgbWFpbldpbmRvdyA9IG5ldyBCcm93c2VyV2luZG93KHtcbiAgICAgICAgd2lkdGg6IDEwMDAsXG4gICAgICAgIGhlaWdodDogMTQ0MCxcbiAgICAgICAgZGFya1RoZW1lOiB0cnVlLFxuICAgICAgICBhdXRvSGlkZU1lbnVCYXI6IHRydWUsXG5cbiAgICAgICAgd2ViUHJlZmVyZW5jZXM6IHtcbiAgICAgICAgICAgIC8vIHByZWxvYWQgOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAncHJlbG9hZC5qcycpLFxuICAgICAgICAgICAgZXhwZXJpbWVudGFsRmVhdHVyZXM6IHRydWUsXG4gICAgICAgICAgICBub2RlSW50ZWdyYXRpb246IHRydWUsXG4gICAgICAgICAgICBhbGxvd1J1bm5pbmdJbnNlY3VyZUNvbnRlbnQ6IHRydWUsXG4gICAgICAgICAgICBhdXRvcGxheVBvbGljeTogXCJuby11c2VyLWdlc3R1cmUtcmVxdWlyZWRcIlxuXG4gICAgICAgIH0sXG5cblxuICAgIH0pO1xuXG4gICAgLy8gcmVtb3RlLmdsb2JhbFNob3J0Y3V0LnJlZ2lzdGVyKCdDb21tYW5kT3JDb250cm9sK1knLCAoKSA9PiByZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpLndlYkNvbnRlbnRzLm9wZW5EZXZUb29scygpKTtcbiAgICAvLyBtYWluV2luZG93LnNldEJhY2tncm91bmRDb2xvcignIzE4MTgxOCcpO1xuXG5cbiAgICAvKm1haW5XaW5kb3cuc2V0U2l6ZSgxOTE5LCAxMDgwLCB0cnVlKTtcbiAgICAgbWFpbldpbmRvdy5yZXNpemFibGUgPSB0cnVlO1xuICAgICBtYWluV2luZG93LnNldE1lbnUobnVsbCk7XG4gICAgIG1haW5XaW5kb3cuYXV0b0hpZGVNZW51QmFyID0gdHJ1ZTtcbiAgICAgbWFpbldpbmRvdy5tYXhpbWl6ZSgpO1xuICAgICBtYWluV2luZG93LnNldE1lbnVCYXJWaXNpYmlsaXR5KHRydWUpO1xuICAgICBtYWluV2luZG93LnNldEZ1bGxTY3JlZW4oZmFsc2UpOyovXG5cbiAgICBtYWluV2luZG93LmxvYWRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi9pbmRleC5odG1sXCIpKS50aGVuKChkb25lKSA9PiB7XG5cbiAgICB9KTtcblxuXG4gICAgLy8gT3BlbiB0aGUgRGV2VG9vbHMuXG4gICAgbWFpbldpbmRvdy53ZWJDb250ZW50cy5vcGVuRGV2VG9vbHMoKTtcblxuXG4gICAgLy8gRW1pdHRlZCB3aGVuIHRoZSB3aW5kb3cgaXMgY2xvc2VkLlxuICAgIG1haW5XaW5kb3cub24oJ2Nsb3NlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGVyZWZlcmVuY2UgdGhlIHdpbmRvdyBvYmplY3QsIHVzdWFsbHkgeW91IHdvdWxkIHN0b3JlIHdpbmRvd3NcbiAgICAgICAgLy8gaW4gYW4gYXJyYXkgaWYgeW91ciBhcHAgc3VwcG9ydHMgbXVsdGkgd2luZG93cywgdGhpcyBpcyB0aGUgdGltZVxuICAgICAgICAvLyB3aGVuIHlvdSBzaG91bGQgZGVsZXRlIHRoZSBjb3JyZXNwb25kaW5nIGVsZW1lbnQuXG4gICAgICAgIG1haW5XaW5kb3cgPSBudWxsXG4gICAgfSlcbn1cblxuXG4vLyBUaGlzIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCB3aGVuIEVsZWN0cm9uIGhhcyBmaW5pc2hlZFxuLy8gaW5pdGlhbGl6YXRpb24gYW5kIGlzIHJlYWR5IHRvIGNyZWF0ZSBicm93c2VyIHdpbmRvd3MuXG4vLyBTb21lIEFQSXMgY2FuIG9ubHkgYmUgdXNlZCBhZnRlciB0aGlzIGV2ZW50IG9jY3Vycy5cbmFwcC5vbigncmVhZHknLCBjcmVhdGVXaW5kb3cpO1xuXG4vLyBRdWl0IHdoZW4gYWxsIHdpbmRvd3MgYXJlIGNsb3NlZC5cbmFwcC5vbignd2luZG93LWFsbC1jbG9zZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gT24gbWFjT1MgaXQgaXMgY29tbW9uIGZvciBhcHBsaWNhdGlvbnMgYW5kIHRoZWlyIG1lbnUgYmFyXG4gICAgLy8gdG8gc3RheSBhY3RpdmUgdW50aWwgdGhlIHVzZXIgcXVpdHMgZXhwbGljaXRseSB3aXRoIENtZCArIFFcbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSAhPT0gJ2RhcndpbicpIGFwcC5xdWl0KClcbn0pO1xuXG5hcHAub24oJ2FjdGl2YXRlJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIE9uIG1hY09TIGl0J3MgY29tbW9uIHRvIHJlLWNyZWF0ZSBhIHdpbmRvdyBpbiB0aGUgYXBwIHdoZW4gdGhlXG4gICAgLy8gZG9jayBpY29uIGlzIGNsaWNrZWQgYW5kIHRoZXJlIGFyZSBubyBvdGhlciB3aW5kb3dzIG9wZW4uXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChtYWluV2luZG93ID09PSBudWxsKSBjcmVhdGVXaW5kb3coKVxufSk7XG5cbi8vIEluIHRoaXMgZmlsZSB5b3UgY2FuIGluY2x1ZGUgdGhlIHJlc3Qgb2YgeW91ciBhcHAncyBzcGVjaWZpYyBtYWluIHByb2Nlc3Ncbi8vIGNvZGUuIFlvdSBjYW4gYWxzbyBwdXQgdGhlbSBpbiBzZXBhcmF0ZSBmaWxlcyBhbmQgcmVxdWlyZSB0aGVtIGhlcmUuXG4iXX0=