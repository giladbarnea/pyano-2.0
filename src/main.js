const { app, BrowserWindow } = require('electron');
const path = require('path');
console.log('%cmain.ts', 'font-weight: bold');
const argv = process.argv.slice(2);
console.table({
    appPath: app.getAppPath(),
    exe: app.getPath("exe"),
    userData: app.getPath("userData"),
    appData: app.getPath("appData"),
    DEBUG: argv.includes('debug'),
    DRYRUN: argv.includes('dry-run'),
    NOPYTHON: argv.includes('no-python'),
});
let mainWindow;
function createWindow() {
    mainWindow = new BrowserWindow({
        width: 2560,
        height: 1440,
        darkTheme: true,
        autoHideMenuBar: true,
        webPreferences: {
            experimentalFeatures: true,
            nodeIntegration: true,
            allowRunningInsecureContent: true,
            autoplayPolicy: "no-user-gesture-required"
        },
    });
    mainWindow.loadFile(path.join(__dirname, "./index.html")).then((done) => {
    });
    mainWindow.on('closed', function () {
        mainWindow = null;
    });
}
app.on('ready', createWindow);
app.on('window-all-closed', function () {
    if (process.platform !== 'darwin')
        app.quit();
});
app.on('activate', function () {
    if (mainWindow === null)
        createWindow();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFJbkQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBVTdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDOUMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNWLE9BQU8sRUFBRyxHQUFHLENBQUMsVUFBVSxFQUFFO0lBQzFCLEdBQUcsRUFBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN4QixRQUFRLEVBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDbEMsT0FBTyxFQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ2hDLEtBQUssRUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUM5QixNQUFNLEVBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFDakMsUUFBUSxFQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO0NBQ3hDLENBQUMsQ0FBQztBQUVILElBQUksVUFBa0MsQ0FBQztBQUV2QyxTQUFTLFlBQVk7SUFFakIsVUFBVSxHQUFHLElBQUksYUFBYSxDQUFDO1FBQzNCLEtBQUssRUFBRyxJQUFJO1FBQ1osTUFBTSxFQUFHLElBQUk7UUFDYixTQUFTLEVBQUcsSUFBSTtRQUNoQixlQUFlLEVBQUcsSUFBSTtRQUV0QixjQUFjLEVBQUc7WUFFYixvQkFBb0IsRUFBRyxJQUFJO1lBQzNCLGVBQWUsRUFBRyxJQUFJO1lBQ3RCLDJCQUEyQixFQUFHLElBQUk7WUFDbEMsY0FBYyxFQUFHLDBCQUEwQjtTQUU5QztLQUdKLENBQUMsQ0FBQztJQWNILFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtJQUV4RSxDQUFDLENBQUMsQ0FBQztJQU9ILFVBQVUsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBSXBCLFVBQVUsR0FBRyxJQUFJLENBQUE7SUFDckIsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDO0FBTUQsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFHOUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRTtJQUd4QixJQUFLLE9BQU8sQ0FBQyxRQUFRLEtBQUssUUFBUTtRQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtBQUNuRCxDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFO0lBSWYsSUFBSyxVQUFVLEtBQUssSUFBSTtRQUFHLFlBQVksRUFBRSxDQUFBO0FBQzdDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTW9kdWxlcyB0byBjb250cm9sIGFwcGxpY2F0aW9uIGxpZmUgYW5kIGNyZWF0ZSBuYXRpdmUgYnJvd3NlciB3aW5kb3dcbi8vIGltcG9ydCB7YXBwLCBCcm93c2VyV2luZG93fSBmcm9tIFwiZWxlY3Ryb25cIjtcbmNvbnN0IHsgYXBwLCBCcm93c2VyV2luZG93IH0gPSByZXF1aXJlKCdlbGVjdHJvbicpO1xuXG4vLyBpbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG4vLyBAdHMtaWdub3JlXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuLy8gY29uc3QgZWxlY3RvblJlbG9hZFBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnbm9kZV9tb2R1bGVzJywgJy5iaW4nLCAnZWxlY3Ryb24nKTtcbi8vIGNvbnNvbGUudGFibGUoe19fZGlybmFtZSwgZWxlY3RvblJlbG9hZFBhdGh9KTtcblxuLy8gcmVxdWlyZSgnZWxlY3Ryb24tcmVsb2FkJykoX19kaXJuYW1lLCB7XG4vLyAgICAgZWxlY3Ryb246IGVsZWN0b25SZWxvYWRQYXRoXG4vLyB9KTtcblxuLy8gS2VlcCBhIGdsb2JhbCByZWZlcmVuY2Ugb2YgdGhlIHdpbmRvdyBvYmplY3QsIGlmIHlvdSBkb24ndCwgdGhlIHdpbmRvdyB3aWxsXG4vLyBiZSBjbG9zZWQgYXV0b21hdGljYWxseSB3aGVuIHRoZSBKYXZhU2NyaXB0IG9iamVjdCBpcyBnYXJiYWdlIGNvbGxlY3RlZC5cbmNvbnNvbGUubG9nKCclY21haW4udHMnLCAnZm9udC13ZWlnaHQ6IGJvbGQnKTtcbmNvbnN0IGFyZ3YgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5jb25zb2xlLnRhYmxlKHtcbiAgICBhcHBQYXRoIDogYXBwLmdldEFwcFBhdGgoKSxcbiAgICBleGUgOiBhcHAuZ2V0UGF0aChcImV4ZVwiKSxcbiAgICB1c2VyRGF0YSA6IGFwcC5nZXRQYXRoKFwidXNlckRhdGFcIiksXG4gICAgYXBwRGF0YSA6IGFwcC5nZXRQYXRoKFwiYXBwRGF0YVwiKSxcbiAgICBERUJVRyA6IGFyZ3YuaW5jbHVkZXMoJ2RlYnVnJyksXG4gICAgRFJZUlVOIDogYXJndi5pbmNsdWRlcygnZHJ5LXJ1bicpLFxuICAgIE5PUFlUSE9OIDogYXJndi5pbmNsdWRlcygnbm8tcHl0aG9uJyksXG59KTtcblxubGV0IG1haW5XaW5kb3c6IEVsZWN0cm9uLkJyb3dzZXJXaW5kb3c7XG5cbmZ1bmN0aW9uIGNyZWF0ZVdpbmRvdygpIHtcbiAgICAvLyBDcmVhdGUgdGhlIGJyb3dzZXIgd2luZG93LlxuICAgIG1haW5XaW5kb3cgPSBuZXcgQnJvd3NlcldpbmRvdyh7XG4gICAgICAgIHdpZHRoIDogMjU2MCxcbiAgICAgICAgaGVpZ2h0IDogMTQ0MCxcbiAgICAgICAgZGFya1RoZW1lIDogdHJ1ZSxcbiAgICAgICAgYXV0b0hpZGVNZW51QmFyIDogdHJ1ZSxcbiAgICAgICAgXG4gICAgICAgIHdlYlByZWZlcmVuY2VzIDoge1xuICAgICAgICAgICAgLy8gcHJlbG9hZCA6IHBhdGguam9pbihfX2Rpcm5hbWUsICdwcmVsb2FkLmpzJyksXG4gICAgICAgICAgICBleHBlcmltZW50YWxGZWF0dXJlcyA6IHRydWUsXG4gICAgICAgICAgICBub2RlSW50ZWdyYXRpb24gOiB0cnVlLFxuICAgICAgICAgICAgYWxsb3dSdW5uaW5nSW5zZWN1cmVDb250ZW50IDogdHJ1ZSxcbiAgICAgICAgICAgIGF1dG9wbGF5UG9saWN5IDogXCJuby11c2VyLWdlc3R1cmUtcmVxdWlyZWRcIlxuICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9KTtcbiAgICBcbiAgICAvLyByZW1vdGUuZ2xvYmFsU2hvcnRjdXQucmVnaXN0ZXIoJ0NvbW1hbmRPckNvbnRyb2wrWScsICgpID0+IHJlbW90ZS5nZXRDdXJyZW50V2luZG93KCkud2ViQ29udGVudHMub3BlbkRldlRvb2xzKCkpO1xuICAgIC8vIG1haW5XaW5kb3cuc2V0QmFja2dyb3VuZENvbG9yKCcjMTgxODE4Jyk7XG4gICAgXG4gICAgXG4gICAgLyptYWluV2luZG93LnNldFNpemUoMTkxOSwgMTA4MCwgdHJ1ZSk7XG4gICAgIG1haW5XaW5kb3cucmVzaXphYmxlID0gdHJ1ZTtcbiAgICAgbWFpbldpbmRvdy5zZXRNZW51KG51bGwpO1xuICAgICBtYWluV2luZG93LmF1dG9IaWRlTWVudUJhciA9IHRydWU7XG4gICAgIG1haW5XaW5kb3cubWF4aW1pemUoKTtcbiAgICAgbWFpbldpbmRvdy5zZXRNZW51QmFyVmlzaWJpbGl0eSh0cnVlKTtcbiAgICAgbWFpbldpbmRvdy5zZXRGdWxsU2NyZWVuKGZhbHNlKTsqL1xuICAgIFxuICAgIG1haW5XaW5kb3cubG9hZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgXCIuL2luZGV4Lmh0bWxcIikpLnRoZW4oKGRvbmUpID0+IHtcbiAgICBcbiAgICB9KTtcbiAgICBcbiAgICBcbiAgICAvLyBPcGVuIHRoZSBEZXZUb29scy5cbiAgICAvLyBtYWluV2luZG93LndlYkNvbnRlbnRzLm9wZW5EZXZUb29scygpO1xuICAgIFxuICAgIC8vIEVtaXR0ZWQgd2hlbiB0aGUgd2luZG93IGlzIGNsb3NlZC5cbiAgICBtYWluV2luZG93Lm9uKCdjbG9zZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERlcmVmZXJlbmNlIHRoZSB3aW5kb3cgb2JqZWN0LCB1c3VhbGx5IHlvdSB3b3VsZCBzdG9yZSB3aW5kb3dzXG4gICAgICAgIC8vIGluIGFuIGFycmF5IGlmIHlvdXIgYXBwIHN1cHBvcnRzIG11bHRpIHdpbmRvd3MsIHRoaXMgaXMgdGhlIHRpbWVcbiAgICAgICAgLy8gd2hlbiB5b3Ugc2hvdWxkIGRlbGV0ZSB0aGUgY29ycmVzcG9uZGluZyBlbGVtZW50LlxuICAgICAgICBtYWluV2luZG93ID0gbnVsbFxuICAgIH0pXG59XG5cblxuLy8gVGhpcyBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgd2hlbiBFbGVjdHJvbiBoYXMgZmluaXNoZWRcbi8vIGluaXRpYWxpemF0aW9uIGFuZCBpcyByZWFkeSB0byBjcmVhdGUgYnJvd3NlciB3aW5kb3dzLlxuLy8gU29tZSBBUElzIGNhbiBvbmx5IGJlIHVzZWQgYWZ0ZXIgdGhpcyBldmVudCBvY2N1cnMuXG5hcHAub24oJ3JlYWR5JywgY3JlYXRlV2luZG93KTtcblxuLy8gUXVpdCB3aGVuIGFsbCB3aW5kb3dzIGFyZSBjbG9zZWQuXG5hcHAub24oJ3dpbmRvdy1hbGwtY2xvc2VkJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIE9uIG1hY09TIGl0IGlzIGNvbW1vbiBmb3IgYXBwbGljYXRpb25zIGFuZCB0aGVpciBtZW51IGJhclxuICAgIC8vIHRvIHN0YXkgYWN0aXZlIHVudGlsIHRoZSB1c2VyIHF1aXRzIGV4cGxpY2l0bHkgd2l0aCBDbWQgKyBRXG4gICAgaWYgKCBwcm9jZXNzLnBsYXRmb3JtICE9PSAnZGFyd2luJyApIGFwcC5xdWl0KClcbn0pO1xuXG5hcHAub24oJ2FjdGl2YXRlJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIE9uIG1hY09TIGl0J3MgY29tbW9uIHRvIHJlLWNyZWF0ZSBhIHdpbmRvdyBpbiB0aGUgYXBwIHdoZW4gdGhlXG4gICAgLy8gZG9jayBpY29uIGlzIGNsaWNrZWQgYW5kIHRoZXJlIGFyZSBubyBvdGhlciB3aW5kb3dzIG9wZW4uXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmICggbWFpbldpbmRvdyA9PT0gbnVsbCApIGNyZWF0ZVdpbmRvdygpXG59KTtcblxuLy8gSW4gdGhpcyBmaWxlIHlvdSBjYW4gaW5jbHVkZSB0aGUgcmVzdCBvZiB5b3VyIGFwcCdzIHNwZWNpZmljIG1haW4gcHJvY2Vzc1xuLy8gY29kZS4gWW91IGNhbiBhbHNvIHB1dCB0aGVtIGluIHNlcGFyYXRlIGZpbGVzIGFuZCByZXF1aXJlIHRoZW0gaGVyZS5cbiJdfQ==