const { app, BrowserWindow } = require('electron');
const path = require('path');
console.log('%cmain.ts', 'font-weight: bold');
console.table({
    appPath: app.getAppPath(),
    exe: app.getPath("exe"),
    userData: app.getPath("userData"),
    appData: app.getPath("appData"),
    DEBUG: process.argv.slice(2).includes('debug'),
    DRYRUN: process.argv.slice(2).includes('dry-run'),
});
let mainWindow;
function createWindow() {
    mainWindow = new BrowserWindow({
        width: 1200,
        height: 2000,
        darkTheme: true,
        webPreferences: {
            preload: path.join(__dirname, 'preload.js'),
            experimentalFeatures: true,
            nodeIntegration: true,
            allowRunningInsecureContent: true,
            autoplayPolicy: "no-user-gesture-required",
        },
    });
    mainWindow.loadFile(path.join(__dirname, "./index.html")).then((done) => {
        console.log('done loading index.html');
    });
    mainWindow.webContents.openDevTools();
    mainWindow.on('closed', function () {
        mainWindow = null;
    });
}
app.on('ready', createWindow);
app.on('window-all-closed', function () {
    if (process.platform !== 'darwin')
        app.quit();
});
app.on('activate', function () {
    if (mainWindow === null)
        createWindow();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFJbkQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBVTdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDOUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNWLE9BQU8sRUFBRyxHQUFHLENBQUMsVUFBVSxFQUFFO0lBQzFCLEdBQUcsRUFBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN4QixRQUFRLEVBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDbEMsT0FBTyxFQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ2hDLEtBQUssRUFBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBQy9DLE1BQU0sRUFBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO0NBQ3JELENBQUMsQ0FBQztBQUVILElBQUksVUFBa0MsQ0FBQztBQUV2QyxTQUFTLFlBQVk7SUFFakIsVUFBVSxHQUFHLElBQUksYUFBYSxDQUFDO1FBQzNCLEtBQUssRUFBRyxJQUFJO1FBQ1osTUFBTSxFQUFHLElBQUk7UUFDYixTQUFTLEVBQUcsSUFBSTtRQUNoQixjQUFjLEVBQUc7WUFDYixPQUFPLEVBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDO1lBQzVDLG9CQUFvQixFQUFHLElBQUk7WUFDM0IsZUFBZSxFQUFHLElBQUk7WUFDdEIsMkJBQTJCLEVBQUcsSUFBSTtZQUNsQyxjQUFjLEVBQUcsMEJBQTBCO1NBRzlDO0tBR0osQ0FBQyxDQUFDO0lBWUgsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ3BFLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMzQyxDQUFDLENBQUMsQ0FBQztJQUlILFVBQVUsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7SUFHdEMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFJcEIsVUFBVSxHQUFHLElBQUksQ0FBQTtJQUNyQixDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUM7QUFLRCxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztBQUc5QixHQUFHLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFO0lBR3hCLElBQUssT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRO1FBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFBO0FBQ25ELENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUU7SUFJZixJQUFLLFVBQVUsS0FBSyxJQUFJO1FBQUcsWUFBWSxFQUFFLENBQUE7QUFDN0MsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2R1bGVzIHRvIGNvbnRyb2wgYXBwbGljYXRpb24gbGlmZSBhbmQgY3JlYXRlIG5hdGl2ZSBicm93c2VyIHdpbmRvd1xuLy8gaW1wb3J0IHthcHAsIEJyb3dzZXJXaW5kb3d9IGZyb20gXCJlbGVjdHJvblwiO1xuY29uc3QgeyBhcHAsIEJyb3dzZXJXaW5kb3cgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5cbi8vIGltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4vLyBjb25zdCBlbGVjdG9uUmVsb2FkUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdub2RlX21vZHVsZXMnLCAnLmJpbicsICdlbGVjdHJvbicpO1xuLy8gY29uc29sZS50YWJsZSh7X19kaXJuYW1lLCBlbGVjdG9uUmVsb2FkUGF0aH0pO1xuXG4vLyByZXF1aXJlKCdlbGVjdHJvbi1yZWxvYWQnKShfX2Rpcm5hbWUsIHtcbi8vICAgICBlbGVjdHJvbjogZWxlY3RvblJlbG9hZFBhdGhcbi8vIH0pO1xuXG4vLyBLZWVwIGEgZ2xvYmFsIHJlZmVyZW5jZSBvZiB0aGUgd2luZG93IG9iamVjdCwgaWYgeW91IGRvbid0LCB0aGUgd2luZG93IHdpbGxcbi8vIGJlIGNsb3NlZCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIEphdmFTY3JpcHQgb2JqZWN0IGlzIGdhcmJhZ2UgY29sbGVjdGVkLlxuY29uc29sZS5sb2coJyVjbWFpbi50cycsICdmb250LXdlaWdodDogYm9sZCcpO1xuY29uc29sZS50YWJsZSh7XG4gICAgYXBwUGF0aCA6IGFwcC5nZXRBcHBQYXRoKCksXG4gICAgZXhlIDogYXBwLmdldFBhdGgoXCJleGVcIiksXG4gICAgdXNlckRhdGEgOiBhcHAuZ2V0UGF0aChcInVzZXJEYXRhXCIpLFxuICAgIGFwcERhdGEgOiBhcHAuZ2V0UGF0aChcImFwcERhdGFcIiksXG4gICAgREVCVUcgOiBwcm9jZXNzLmFyZ3Yuc2xpY2UoMikuaW5jbHVkZXMoJ2RlYnVnJyksXG4gICAgRFJZUlVOIDogcHJvY2Vzcy5hcmd2LnNsaWNlKDIpLmluY2x1ZGVzKCdkcnktcnVuJyksXG59KTtcblxubGV0IG1haW5XaW5kb3c6IEVsZWN0cm9uLkJyb3dzZXJXaW5kb3c7XG5cbmZ1bmN0aW9uIGNyZWF0ZVdpbmRvdygpIHtcbiAgICAvLyBDcmVhdGUgdGhlIGJyb3dzZXIgd2luZG93LlxuICAgIG1haW5XaW5kb3cgPSBuZXcgQnJvd3NlcldpbmRvdyh7XG4gICAgICAgIHdpZHRoIDogMTIwMCxcbiAgICAgICAgaGVpZ2h0IDogMjAwMCxcbiAgICAgICAgZGFya1RoZW1lIDogdHJ1ZSxcbiAgICAgICAgd2ViUHJlZmVyZW5jZXMgOiB7XG4gICAgICAgICAgICBwcmVsb2FkIDogcGF0aC5qb2luKF9fZGlybmFtZSwgJ3ByZWxvYWQuanMnKSxcbiAgICAgICAgICAgIGV4cGVyaW1lbnRhbEZlYXR1cmVzIDogdHJ1ZSxcbiAgICAgICAgICAgIG5vZGVJbnRlZ3JhdGlvbiA6IHRydWUsXG4gICAgICAgICAgICBhbGxvd1J1bm5pbmdJbnNlY3VyZUNvbnRlbnQgOiB0cnVlLFxuICAgICAgICAgICAgYXV0b3BsYXlQb2xpY3kgOiBcIm5vLXVzZXItZ2VzdHVyZS1yZXF1aXJlZFwiLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH0pO1xuICAgIC8vIG1haW5XaW5kb3cuc2V0QmFja2dyb3VuZENvbG9yKCcjMTgxODE4Jyk7XG4gICAgXG4gICAgXG4gICAgLyptYWluV2luZG93LnNldFNpemUoMTkxOSwgMTA4MCwgdHJ1ZSk7XG4gICAgIG1haW5XaW5kb3cucmVzaXphYmxlID0gdHJ1ZTtcbiAgICAgbWFpbldpbmRvdy5zZXRNZW51KG51bGwpO1xuICAgICBtYWluV2luZG93LmF1dG9IaWRlTWVudUJhciA9IHRydWU7XG4gICAgIG1haW5XaW5kb3cubWF4aW1pemUoKTtcbiAgICAgbWFpbldpbmRvdy5zZXRNZW51QmFyVmlzaWJpbGl0eSh0cnVlKTtcbiAgICAgbWFpbldpbmRvdy5zZXRGdWxsU2NyZWVuKGZhbHNlKTsqL1xuICAgIFxuICAgIG1haW5XaW5kb3cubG9hZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgXCIuL2luZGV4Lmh0bWxcIikpLnRoZW4oKGRvbmUpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ2RvbmUgbG9hZGluZyBpbmRleC5odG1sJyk7XG4gICAgfSk7XG4gICAgXG4gICAgXG4gICAgLy8gT3BlbiB0aGUgRGV2VG9vbHMuXG4gICAgbWFpbldpbmRvdy53ZWJDb250ZW50cy5vcGVuRGV2VG9vbHMoKTtcbiAgICBcbiAgICAvLyBFbWl0dGVkIHdoZW4gdGhlIHdpbmRvdyBpcyBjbG9zZWQuXG4gICAgbWFpbldpbmRvdy5vbignY2xvc2VkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBEZXJlZmVyZW5jZSB0aGUgd2luZG93IG9iamVjdCwgdXN1YWxseSB5b3Ugd291bGQgc3RvcmUgd2luZG93c1xuICAgICAgICAvLyBpbiBhbiBhcnJheSBpZiB5b3VyIGFwcCBzdXBwb3J0cyBtdWx0aSB3aW5kb3dzLCB0aGlzIGlzIHRoZSB0aW1lXG4gICAgICAgIC8vIHdoZW4geW91IHNob3VsZCBkZWxldGUgdGhlIGNvcnJlc3BvbmRpbmcgZWxlbWVudC5cbiAgICAgICAgbWFpbldpbmRvdyA9IG51bGxcbiAgICB9KVxufVxuXG4vLyBUaGlzIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCB3aGVuIEVsZWN0cm9uIGhhcyBmaW5pc2hlZFxuLy8gaW5pdGlhbGl6YXRpb24gYW5kIGlzIHJlYWR5IHRvIGNyZWF0ZSBicm93c2VyIHdpbmRvd3MuXG4vLyBTb21lIEFQSXMgY2FuIG9ubHkgYmUgdXNlZCBhZnRlciB0aGlzIGV2ZW50IG9jY3Vycy5cbmFwcC5vbigncmVhZHknLCBjcmVhdGVXaW5kb3cpO1xuXG4vLyBRdWl0IHdoZW4gYWxsIHdpbmRvd3MgYXJlIGNsb3NlZC5cbmFwcC5vbignd2luZG93LWFsbC1jbG9zZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gT24gbWFjT1MgaXQgaXMgY29tbW9uIGZvciBhcHBsaWNhdGlvbnMgYW5kIHRoZWlyIG1lbnUgYmFyXG4gICAgLy8gdG8gc3RheSBhY3RpdmUgdW50aWwgdGhlIHVzZXIgcXVpdHMgZXhwbGljaXRseSB3aXRoIENtZCArIFFcbiAgICBpZiAoIHByb2Nlc3MucGxhdGZvcm0gIT09ICdkYXJ3aW4nICkgYXBwLnF1aXQoKVxufSk7XG5cbmFwcC5vbignYWN0aXZhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gT24gbWFjT1MgaXQncyBjb21tb24gdG8gcmUtY3JlYXRlIGEgd2luZG93IGluIHRoZSBhcHAgd2hlbiB0aGVcbiAgICAvLyBkb2NrIGljb24gaXMgY2xpY2tlZCBhbmQgdGhlcmUgYXJlIG5vIG90aGVyIHdpbmRvd3Mgb3Blbi5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKCBtYWluV2luZG93ID09PSBudWxsICkgY3JlYXRlV2luZG93KClcbn0pO1xuXG4vLyBJbiB0aGlzIGZpbGUgeW91IGNhbiBpbmNsdWRlIHRoZSByZXN0IG9mIHlvdXIgYXBwJ3Mgc3BlY2lmaWMgbWFpbiBwcm9jZXNzXG4vLyBjb2RlLiBZb3UgY2FuIGFsc28gcHV0IHRoZW0gaW4gc2VwYXJhdGUgZmlsZXMgYW5kIHJlcXVpcmUgdGhlbSBoZXJlLlxuIl19