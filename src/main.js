const { app, BrowserWindow } = require('electron');
const path = require('path');
console.log('%cmain.ts', 'font-weight: bold');
console.table({
    appPath: app.getAppPath(),
    exe: app.getPath("exe"),
    userData: app.getPath("userData"),
    appData: app.getPath("appData"),
    DEBUG: process.argv.slice(2).includes('debug'),
    DRYRUN: process.argv.slice(2).includes('dry-run'),
});
let mainWindow;
function createWindow() {
    mainWindow = new BrowserWindow({
        width: 1200,
        height: 2000,
        darkTheme: true,
        webPreferences: {
            preload: path.join(__dirname, 'preload.js'),
            experimentalFeatures: true,
            nodeIntegration: true,
            allowRunningInsecureContent: true,
            autoplayPolicy: "no-user-gesture-required"
        },
    });
    mainWindow.loadFile(path.join(__dirname, "./index.html")).then((done) => {
    });
    mainWindow.webContents.openDevTools();
    mainWindow.on('closed', function () {
        mainWindow = null;
    });
}
app.on('ready', createWindow);
app.on('window-all-closed', function () {
    if (process.platform !== 'darwin')
        app.quit();
});
app.on('activate', function () {
    if (mainWindow === null)
        createWindow();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFJbkQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBVTdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDOUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNWLE9BQU8sRUFBRyxHQUFHLENBQUMsVUFBVSxFQUFFO0lBQzFCLEdBQUcsRUFBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUN4QixRQUFRLEVBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDbEMsT0FBTyxFQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ2hDLEtBQUssRUFBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBQy9DLE1BQU0sRUFBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO0NBQ3JELENBQUMsQ0FBQztBQUVILElBQUksVUFBa0MsQ0FBQztBQUV2QyxTQUFTLFlBQVk7SUFFakIsVUFBVSxHQUFHLElBQUksYUFBYSxDQUFDO1FBQzNCLEtBQUssRUFBRyxJQUFJO1FBQ1osTUFBTSxFQUFHLElBQUk7UUFDYixTQUFTLEVBQUcsSUFBSTtRQUVoQixjQUFjLEVBQUc7WUFDYixPQUFPLEVBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDO1lBQzVDLG9CQUFvQixFQUFHLElBQUk7WUFDM0IsZUFBZSxFQUFHLElBQUk7WUFDdEIsMkJBQTJCLEVBQUcsSUFBSTtZQUNsQyxjQUFjLEVBQUcsMEJBQTBCO1NBRTlDO0tBR0osQ0FBQyxDQUFDO0lBWUgsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO0lBRXhFLENBQUMsQ0FBQyxDQUFDO0lBSUgsVUFBVSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUd0QyxVQUFVLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRTtRQUlwQixVQUFVLEdBQUcsSUFBSSxDQUFBO0lBQ3JCLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQUtELEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBRzlCLEdBQUcsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUU7SUFHeEIsSUFBSyxPQUFPLENBQUMsUUFBUSxLQUFLLFFBQVE7UUFBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUE7QUFDbkQsQ0FBQyxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRTtJQUlmLElBQUssVUFBVSxLQUFLLElBQUk7UUFBRyxZQUFZLEVBQUUsQ0FBQTtBQUM3QyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1vZHVsZXMgdG8gY29udHJvbCBhcHBsaWNhdGlvbiBsaWZlIGFuZCBjcmVhdGUgbmF0aXZlIGJyb3dzZXIgd2luZG93XG4vLyBpbXBvcnQge2FwcCwgQnJvd3NlcldpbmRvd30gZnJvbSBcImVsZWN0cm9uXCI7XG5jb25zdCB7IGFwcCwgQnJvd3NlcldpbmRvdyB9ID0gcmVxdWlyZSgnZWxlY3Ryb24nKTtcblxuLy8gaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbi8vIGNvbnN0IGVsZWN0b25SZWxvYWRQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ25vZGVfbW9kdWxlcycsICcuYmluJywgJ2VsZWN0cm9uJyk7XG4vLyBjb25zb2xlLnRhYmxlKHtfX2Rpcm5hbWUsIGVsZWN0b25SZWxvYWRQYXRofSk7XG5cbi8vIHJlcXVpcmUoJ2VsZWN0cm9uLXJlbG9hZCcpKF9fZGlybmFtZSwge1xuLy8gICAgIGVsZWN0cm9uOiBlbGVjdG9uUmVsb2FkUGF0aFxuLy8gfSk7XG5cbi8vIEtlZXAgYSBnbG9iYWwgcmVmZXJlbmNlIG9mIHRoZSB3aW5kb3cgb2JqZWN0LCBpZiB5b3UgZG9uJ3QsIHRoZSB3aW5kb3cgd2lsbFxuLy8gYmUgY2xvc2VkIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGUgSmF2YVNjcmlwdCBvYmplY3QgaXMgZ2FyYmFnZSBjb2xsZWN0ZWQuXG5jb25zb2xlLmxvZygnJWNtYWluLnRzJywgJ2ZvbnQtd2VpZ2h0OiBib2xkJyk7XG5jb25zb2xlLnRhYmxlKHtcbiAgICBhcHBQYXRoIDogYXBwLmdldEFwcFBhdGgoKSxcbiAgICBleGUgOiBhcHAuZ2V0UGF0aChcImV4ZVwiKSxcbiAgICB1c2VyRGF0YSA6IGFwcC5nZXRQYXRoKFwidXNlckRhdGFcIiksXG4gICAgYXBwRGF0YSA6IGFwcC5nZXRQYXRoKFwiYXBwRGF0YVwiKSxcbiAgICBERUJVRyA6IHByb2Nlc3MuYXJndi5zbGljZSgyKS5pbmNsdWRlcygnZGVidWcnKSxcbiAgICBEUllSVU4gOiBwcm9jZXNzLmFyZ3Yuc2xpY2UoMikuaW5jbHVkZXMoJ2RyeS1ydW4nKSxcbn0pO1xuXG5sZXQgbWFpbldpbmRvdzogRWxlY3Ryb24uQnJvd3NlcldpbmRvdztcblxuZnVuY3Rpb24gY3JlYXRlV2luZG93KCkge1xuICAgIC8vIENyZWF0ZSB0aGUgYnJvd3NlciB3aW5kb3cuXG4gICAgbWFpbldpbmRvdyA9IG5ldyBCcm93c2VyV2luZG93KHtcbiAgICAgICAgd2lkdGggOiAxMjAwLFxuICAgICAgICBoZWlnaHQgOiAyMDAwLFxuICAgICAgICBkYXJrVGhlbWUgOiB0cnVlLFxuICAgICAgICBcbiAgICAgICAgd2ViUHJlZmVyZW5jZXMgOiB7XG4gICAgICAgICAgICBwcmVsb2FkIDogcGF0aC5qb2luKF9fZGlybmFtZSwgJ3ByZWxvYWQuanMnKSxcbiAgICAgICAgICAgIGV4cGVyaW1lbnRhbEZlYXR1cmVzIDogdHJ1ZSxcbiAgICAgICAgICAgIG5vZGVJbnRlZ3JhdGlvbiA6IHRydWUsXG4gICAgICAgICAgICBhbGxvd1J1bm5pbmdJbnNlY3VyZUNvbnRlbnQgOiB0cnVlLFxuICAgICAgICAgICAgYXV0b3BsYXlQb2xpY3kgOiBcIm5vLXVzZXItZ2VzdHVyZS1yZXF1aXJlZFwiXG4gICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIFxuICAgIH0pO1xuICAgIC8vIG1haW5XaW5kb3cuc2V0QmFja2dyb3VuZENvbG9yKCcjMTgxODE4Jyk7XG4gICAgXG4gICAgXG4gICAgLyptYWluV2luZG93LnNldFNpemUoMTkxOSwgMTA4MCwgdHJ1ZSk7XG4gICAgIG1haW5XaW5kb3cucmVzaXphYmxlID0gdHJ1ZTtcbiAgICAgbWFpbldpbmRvdy5zZXRNZW51KG51bGwpO1xuICAgICBtYWluV2luZG93LmF1dG9IaWRlTWVudUJhciA9IHRydWU7XG4gICAgIG1haW5XaW5kb3cubWF4aW1pemUoKTtcbiAgICAgbWFpbldpbmRvdy5zZXRNZW51QmFyVmlzaWJpbGl0eSh0cnVlKTtcbiAgICAgbWFpbldpbmRvdy5zZXRGdWxsU2NyZWVuKGZhbHNlKTsqL1xuICAgIFxuICAgIG1haW5XaW5kb3cubG9hZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgXCIuL2luZGV4Lmh0bWxcIikpLnRoZW4oKGRvbmUpID0+IHtcbiAgICBcbiAgICB9KTtcbiAgICBcbiAgICBcbiAgICAvLyBPcGVuIHRoZSBEZXZUb29scy5cbiAgICBtYWluV2luZG93LndlYkNvbnRlbnRzLm9wZW5EZXZUb29scygpO1xuICAgIFxuICAgIC8vIEVtaXR0ZWQgd2hlbiB0aGUgd2luZG93IGlzIGNsb3NlZC5cbiAgICBtYWluV2luZG93Lm9uKCdjbG9zZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERlcmVmZXJlbmNlIHRoZSB3aW5kb3cgb2JqZWN0LCB1c3VhbGx5IHlvdSB3b3VsZCBzdG9yZSB3aW5kb3dzXG4gICAgICAgIC8vIGluIGFuIGFycmF5IGlmIHlvdXIgYXBwIHN1cHBvcnRzIG11bHRpIHdpbmRvd3MsIHRoaXMgaXMgdGhlIHRpbWVcbiAgICAgICAgLy8gd2hlbiB5b3Ugc2hvdWxkIGRlbGV0ZSB0aGUgY29ycmVzcG9uZGluZyBlbGVtZW50LlxuICAgICAgICBtYWluV2luZG93ID0gbnVsbFxuICAgIH0pXG59XG5cbi8vIFRoaXMgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIHdoZW4gRWxlY3Ryb24gaGFzIGZpbmlzaGVkXG4vLyBpbml0aWFsaXphdGlvbiBhbmQgaXMgcmVhZHkgdG8gY3JlYXRlIGJyb3dzZXIgd2luZG93cy5cbi8vIFNvbWUgQVBJcyBjYW4gb25seSBiZSB1c2VkIGFmdGVyIHRoaXMgZXZlbnQgb2NjdXJzLlxuYXBwLm9uKCdyZWFkeScsIGNyZWF0ZVdpbmRvdyk7XG5cbi8vIFF1aXQgd2hlbiBhbGwgd2luZG93cyBhcmUgY2xvc2VkLlxuYXBwLm9uKCd3aW5kb3ctYWxsLWNsb3NlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBPbiBtYWNPUyBpdCBpcyBjb21tb24gZm9yIGFwcGxpY2F0aW9ucyBhbmQgdGhlaXIgbWVudSBiYXJcbiAgICAvLyB0byBzdGF5IGFjdGl2ZSB1bnRpbCB0aGUgdXNlciBxdWl0cyBleHBsaWNpdGx5IHdpdGggQ21kICsgUVxuICAgIGlmICggcHJvY2Vzcy5wbGF0Zm9ybSAhPT0gJ2RhcndpbicgKSBhcHAucXVpdCgpXG59KTtcblxuYXBwLm9uKCdhY3RpdmF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBPbiBtYWNPUyBpdCdzIGNvbW1vbiB0byByZS1jcmVhdGUgYSB3aW5kb3cgaW4gdGhlIGFwcCB3aGVuIHRoZVxuICAgIC8vIGRvY2sgaWNvbiBpcyBjbGlja2VkIGFuZCB0aGVyZSBhcmUgbm8gb3RoZXIgd2luZG93cyBvcGVuLlxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoIG1haW5XaW5kb3cgPT09IG51bGwgKSBjcmVhdGVXaW5kb3coKVxufSk7XG5cbi8vIEluIHRoaXMgZmlsZSB5b3UgY2FuIGluY2x1ZGUgdGhlIHJlc3Qgb2YgeW91ciBhcHAncyBzcGVjaWZpYyBtYWluIHByb2Nlc3Ncbi8vIGNvZGUuIFlvdSBjYW4gYWxzbyBwdXQgdGhlbSBpbiBzZXBhcmF0ZSBmaWxlcyBhbmQgcmVxdWlyZSB0aGVtIGhlcmUuXG4iXX0=