"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bhe_1 = require("./bhe");
console.group('init.ts');
const util_1 = require("./util");
const MyPyShell_1 = require("./MyPyShell");
const Pages = require("./pages");
const MyAlert_1 = require("./MyAlert");
const Glob_1 = require("./Glob");
const electron_1 = require("electron");
util_1.waitUntil(MyPyShell_1.isDone).then(() => {
    console.group('init.ts MyPyShell done');
    Pages.sidebar.build();
    const last_page = Glob_1.default.Store.last_page;
    console.log('last_page:', last_page);
    Pages.toPage(last_page, false);
    bhe_1.elem({ id: 'exit_btn' }).click(async () => {
        let { value: shouldExit } = await MyAlert_1.default.big.warning({
            title: 'Are you sure you want to exit?',
            confirmButtonColor: '#dc3545',
            animation: false
        });
        if (shouldExit)
            electron_1.remote.getCurrentWindow().close();
    });
    bhe_1.elem({ id: 'minimize_btn' }).click(() => electron_1.remote.getCurrentWindow().minimize());
    console.groupEnd();
});
console.groupEnd();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBNkI7QUFFN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN6QixpQ0FBbUM7QUFHbkMsMkNBQXFDO0FBRXJDLGlDQUFpQztBQUNqQyx1Q0FBK0I7QUFDL0IsaUNBQTBCO0FBQzFCLHVDQUFpQztBQUtqQyxnQkFBUyxDQUFDLGtCQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0lBQ3hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUN4QyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBR3RCLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3JDLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9CLFVBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRyxVQUFVLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksRUFBRTtRQUN2QyxJQUFJLEVBQUUsS0FBSyxFQUFHLFVBQVUsRUFBRSxHQUFHLE1BQU0saUJBQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO1lBQ25ELEtBQUssRUFBRyxnQ0FBZ0M7WUFDeEMsa0JBQWtCLEVBQUcsU0FBUztZQUM5QixTQUFTLEVBQUcsS0FBSztTQUNwQixDQUFDLENBQUM7UUFDSCxJQUFLLFVBQVU7WUFDWCxpQkFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDSCxVQUFJLENBQUMsRUFBRSxFQUFFLEVBQUcsY0FBYyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsaUJBQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFHaEYsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0FBT0gsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZWxlbSB9IGZyb20gXCIuL2JoZVwiO1xuXG5jb25zb2xlLmdyb3VwKCdpbml0LnRzJyk7XG5pbXBvcnQgeyB3YWl0VW50aWwgfSBmcm9tIFwiLi91dGlsXCI7XG5cblxuaW1wb3J0IHsgaXNEb25lIH0gZnJvbSBcIi4vTXlQeVNoZWxsXCI7XG5cbmltcG9ydCAqIGFzIFBhZ2VzIGZyb20gXCIuL3BhZ2VzXCI7XG5pbXBvcnQgTXlBbGVydCBmcm9tICcuL015QWxlcnQnXG5pbXBvcnQgR2xvYiBmcm9tICcuL0dsb2InO1xuaW1wb3J0IHsgcmVtb3RlIH0gZnJvbSAnZWxlY3Ryb24nXG5cbi8vIGNvbnNvbGUubG9nKCdhZnRlciBpbXBvcnRpbmcgTXlQeVNoZWxsJywgaXNEb25lKCkpO1xuXG5cbndhaXRVbnRpbChpc0RvbmUpLnRoZW4oKCkgPT4ge1xuICAgIGNvbnNvbGUuZ3JvdXAoJ2luaXQudHMgTXlQeVNoZWxsIGRvbmUnKTtcbiAgICBQYWdlcy5zaWRlYmFyLmJ1aWxkKCk7XG4gICAgXG4gICAgXG4gICAgY29uc3QgbGFzdF9wYWdlID0gR2xvYi5TdG9yZS5sYXN0X3BhZ2U7XG4gICAgY29uc29sZS5sb2coJ2xhc3RfcGFnZTonLCBsYXN0X3BhZ2UpO1xuICAgIFBhZ2VzLnRvUGFnZShsYXN0X3BhZ2UsIGZhbHNlKTtcbiAgICBlbGVtKHsgaWQgOiAnZXhpdF9idG4nIH0pLmNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IHsgdmFsdWUgOiBzaG91bGRFeGl0IH0gPSBhd2FpdCBNeUFsZXJ0LmJpZy53YXJuaW5nKHtcbiAgICAgICAgICAgIHRpdGxlIDogJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBleGl0PycsXG4gICAgICAgICAgICBjb25maXJtQnV0dG9uQ29sb3IgOiAnI2RjMzU0NScsXG4gICAgICAgICAgICBhbmltYXRpb24gOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCBzaG91bGRFeGl0IClcbiAgICAgICAgICAgIHJlbW90ZS5nZXRDdXJyZW50V2luZG93KCkuY2xvc2UoKTtcbiAgICB9KTtcbiAgICBlbGVtKHsgaWQgOiAnbWluaW1pemVfYnRuJyB9KS5jbGljaygoKSA9PiByZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpLm1pbmltaXplKCkpO1xuICAgIFxuICAgIFxuICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbn0pO1xuXG5cbi8qXG4gXG4gXG4gLyoqL1xuY29uc29sZS5ncm91cEVuZCgpO1xuLypcbiBpbXBvcnQgeyByZW1vdGUgfSBmcm9tIFwiZWxlY3Ryb25cIjtcbiBcbiBcbiBcbiBpbXBvcnQgeyBFU3RvcmUgfSBmcm9tIFwicHlhbm9fbG9jYWxfbW9kdWxlcy9leHRfbGlic1wiO1xuIFxuIFxuIGZ1bmN0aW9uIG1heWJlVG9nZ2xlTm9DdXJzb3IoKSB7XG4gY29uc3Qgc2hvdWxkVG9nZ2xlID0gRVN0b3JlLmxhc3RfcGFnZSA9PSBcImluc2lkZV90ZXN0XCI7XG4gY29uc29sZS5sb2coYFByZXNzZWQgQWx0K0MsICR7c2hvdWxkVG9nZ2xlID8gJycgOiAnbm90ICd9dG9nZ2xpbmcgbm9jdXJzb3JgKTtcbiBpZiAoIHNob3VsZFRvZ2dsZSApXG4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haW5fY29udGVudCcpLmNsYXNzTGlzdC50b2dnbGUoJ25vY3Vyc29yJyk7XG4gfVxuIFxuIFxuIGZ1bmN0aW9uIHJlbG9hZE1haW5XaW5kb3coKSB7XG4gcmVtb3RlLmdldEN1cnJlbnRXaW5kb3coKS5yZWxvYWQoKTtcbiB9XG4gXG4gXG4gZnVuY3Rpb24gcmVsb2FkVG9OZXdUZXN0KCkge1xuIGNvbnNvbGUubG9nKCdQcmVzc2VkIGN0cmwrcSwgc2V0dGluZyBsYXN0IHBhZ2UgdG8gbmV3IHRlc3QgYW5kIHJlbG9hZGluZycpO1xuIEVTdG9yZS5sYXN0X3BhZ2UgPSAnbmV3X3Rlc3QnO1xuIHJlbW90ZS5nZXRDdXJyZW50V2luZG93KCkucmVsb2FkKCk7XG4gfVxuIFxuIFxuIGZ1bmN0aW9uIG9wZW5EZXZUb29scygpIHtcbiBjb25zb2xlLmxvZygnUHJlc3NlZCBjdHJsK3ksIG9wZW5pbmcgRGV2VG9vbHMnKTtcbiByZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpLndlYkNvbnRlbnRzLm9wZW5EZXZUb29scygpO1xuIH1cbiBcbiBcbiBmdW5jdGlvbiB0b2dnbGVNYXhpbWl6ZSgpIHtcbiBjb25zb2xlLmxvZygnUHJlc3NlZCBjdHJsK3UsIHRvZ2dsaW5nIG1heGltaXplJyk7XG4gY29uc3QgY3VycmVudFdpbmRvdyA9IHJlbW90ZS5nZXRDdXJyZW50V2luZG93KCk7XG4gY3VycmVudFdpbmRvdy5zZXRGdWxsU2NyZWVuKCFjdXJyZW50V2luZG93LmlzRnVsbFNjcmVlbigpKTtcbiBjdXJyZW50V2luZG93LnNldE1lbnVCYXJWaXNpYmlsaXR5KGN1cnJlbnRXaW5kb3cuaXNGdWxsU2NyZWVuKCkpO1xuIH1cbiBcbiByZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpLm9uKFwiZm9jdXNcIiwgKCkgPT4ge1xuIHJlbW90ZS5nbG9iYWxTaG9ydGN1dC5yZWdpc3RlcignQWx0K0MnLCBtYXliZVRvZ2dsZU5vQ3Vyc29yKTtcbiByZW1vdGUuZ2xvYmFsU2hvcnRjdXQucmVnaXN0ZXIoJ0NvbW1hbmRPckNvbnRyb2wrUicsIHJlbG9hZE1haW5XaW5kb3cpO1xuIHJlbW90ZS5nbG9iYWxTaG9ydGN1dC5yZWdpc3RlcignQ29tbWFuZE9yQ29udHJvbCtRJywgcmVsb2FkVG9OZXdUZXN0KTtcbiByZW1vdGUuZ2xvYmFsU2hvcnRjdXQucmVnaXN0ZXIoJ0NvbW1hbmRPckNvbnRyb2wrWScsIG9wZW5EZXZUb29scyk7XG4gcmVtb3RlLmdsb2JhbFNob3J0Y3V0LnJlZ2lzdGVyKCdDb21tYW5kT3JDb250cm9sK1UnLCB0b2dnbGVNYXhpbWl6ZSk7XG4gfSk7XG4gcmVtb3RlLmdldEN1cnJlbnRXaW5kb3coKS5vbignYmx1cicsICgpID0+IHJlbW90ZS5nbG9iYWxTaG9ydGN1dC51bnJlZ2lzdGVyQWxsKCkpO1xuIFxuIFxuIGNvbnN0IHNpZGViYXIgPSByZXF1aXJlKFwicHlhbm9fbG9jYWxfbW9kdWxlcy9zaWRlYmFyXCIpO1xuIHNpZGViYXIuYnVpbGQoKTtcbiBjb25zdCBQYWdlcyA9IHJlcXVpcmUoXCJweWFub19sb2NhbF9tb2R1bGVzL3BhZ2VzL3BhZ2VzXCIpO1xuIFxuIGNvbnN0IGxhc3RfcGFnZSA9IEVTdG9yZS5sYXN0X3BhZ2U7XG4gY29uc29sZS5sb2coJ2luaXQuanMnLCB7IGxhc3RfcGFnZSB9KTtcbiBQYWdlcy50b1BhZ2UobGFzdF9wYWdlLCBmYWxzZSk7XG4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4aXRfYnRuJylcbiAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gbGV0IHsgdmFsdWUgOiBzaG91bGRFeGl0IH0gPSBhd2FpdCBBbGVydC5iaWcud2FybmluZyh7XG4gdGl0bGUgOiAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGV4aXQ/JyxcbiBjb25maXJtQnV0dG9uQ29sb3IgOiAnI2RjMzU0NScsXG4gYW5pbWF0aW9uIDogZmFsc2VcbiB9KTtcbiBpZiAoIHNob3VsZEV4aXQgKVxuIGdldEN1cnJlbnRXaW5kb3coKS5jbG9zZSgpO1xuIH0pO1xuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtaW5pbWl6ZV9idG4nKVxuIC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGdldEN1cnJlbnRXaW5kb3coKS5taW5pbWl6ZSgpKTtcbiAqL1xuIl19