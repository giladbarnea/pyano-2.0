"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tone_1 = require("tone");
const Component_1 = require("./Component");
const Salamander_1 = require("./Salamander");
const String_1 = require("./String");
/**
 *  Manages all of the hammered string sounds
 */
class PianoStrings extends Component_1.PianoComponent {
    constructor(options) {
        super(options);
        const notes = Salamander_1.getNotesInRange(options.minNote, options.maxNote);
        const velocities = Salamander_1.velocitiesMap[options.velocities].slice();
        this._strings = velocities.map(velocity => {
            const string = new String_1.PianoString(Object.assign(options, {
                notes, velocity,
            }));
            return string;
        });
        this._activeNotes = new Map();
    }
    /**
     * Scale a value between a given range
     */
    scale(val, inMin, inMax, outMin, outMax) {
        return ((val - inMin) / (inMax - inMin)) * (outMax - outMin) + outMin;
    }
    triggerAttack(note, time, velocity) {
        const scaledVel = this.scale(velocity, 0, 1, -0.5, this._strings.length - 0.51);
        const stringIndex = Math.max(Math.round(scaledVel), 0);
        let gain = 1 + scaledVel - stringIndex;
        if (this._strings.length === 1) {
            gain = velocity;
        }
        const sampler = this._strings[stringIndex];
        if (this._activeNotes.has(note)) {
            this.triggerRelease(note, time);
        }
        this._activeNotes.set(note, sampler);
        sampler.triggerAttack(tone_1.Midi(note).toNote(), time, gain);
    }
    triggerRelease(note, time) {
        // trigger the release of all of the notes at that velociy
        if (this._activeNotes.has(note)) {
            this._activeNotes.get(note).triggerRelease(tone_1.Midi(note).toNote(), time);
            this._activeNotes.delete(note);
        }
    }
    async _internalLoad() {
        await Promise.all(this._strings.map(async (s) => {
            await s.load();
            s.connect(this.output);
        }));
    }
}
exports.PianoStrings = PianoStrings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TdHJpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTJCO0FBQzNCLDJDQUFtRTtBQUNuRSw2Q0FBNkQ7QUFDN0QscUNBQXNDO0FBUXRDOztHQUVHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsMEJBQWM7SUFZL0MsWUFBWSxPQUF1QjtRQUNsQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFZCxNQUFNLEtBQUssR0FBRyw0QkFBZSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRS9ELE1BQU0sVUFBVSxHQUFHLDBCQUFhLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBRTVELElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN6QyxNQUFNLE1BQU0sR0FBRyxJQUFJLG9CQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7Z0JBQ3JELEtBQUssRUFBRSxRQUFRO2FBQ2YsQ0FBQyxDQUFDLENBQUE7WUFDSCxPQUFPLE1BQU0sQ0FBQTtRQUNkLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO0lBQzlCLENBQUM7SUFFRDs7T0FFRztJQUNLLEtBQUssQ0FBQyxHQUFXLEVBQUUsS0FBYSxFQUFFLEtBQWEsRUFBRSxNQUFjLEVBQUUsTUFBYztRQUN0RixPQUFPLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUE7SUFDdEUsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLFFBQWdCO1FBQ3pELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDL0UsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3RELElBQUksSUFBSSxHQUFHLENBQUMsR0FBRyxTQUFTLEdBQUcsV0FBVyxDQUFBO1FBRXRDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQy9CLElBQUksR0FBRyxRQUFRLENBQUE7U0FDZjtRQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUE7UUFFMUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtTQUMvQjtRQUVELElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUNwQyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDdkQsQ0FBQztJQUVELGNBQWMsQ0FBQyxJQUFZLEVBQUUsSUFBWTtRQUN4QywwREFBMEQ7UUFDMUQsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsV0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQ3JFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1NBQzlCO0lBQ0YsQ0FBQztJQUVTLEtBQUssQ0FBQyxhQUFhO1FBQzVCLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLEVBQUU7WUFDN0MsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7WUFDZCxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN2QixDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNEO0FBckVELG9DQXFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1pZGkgfSBmcm9tICd0b25lJ1xuaW1wb3J0IHsgUGlhbm9Db21wb25lbnQsIFBpYW5vQ29tcG9uZW50T3B0aW9ucyB9IGZyb20gJy4vQ29tcG9uZW50J1xuaW1wb3J0IHsgZ2V0Tm90ZXNJblJhbmdlLCB2ZWxvY2l0aWVzTWFwIH0gZnJvbSAnLi9TYWxhbWFuZGVyJ1xuaW1wb3J0IHsgUGlhbm9TdHJpbmcgfSBmcm9tICcuL1N0cmluZydcblxuaW50ZXJmYWNlIFN0cmluZ3NPcHRpb25zIGV4dGVuZHMgUGlhbm9Db21wb25lbnRPcHRpb25zIHtcblx0bWluTm90ZTogbnVtYmVyXG5cdG1heE5vdGU6IG51bWJlclxuXHR2ZWxvY2l0aWVzOiBudW1iZXJcbn1cblxuLyoqXG4gKiAgTWFuYWdlcyBhbGwgb2YgdGhlIGhhbW1lcmVkIHN0cmluZyBzb3VuZHNcbiAqL1xuZXhwb3J0IGNsYXNzIFBpYW5vU3RyaW5ncyBleHRlbmRzIFBpYW5vQ29tcG9uZW50IHtcblxuXHQvKipcblx0ICogQWxsIG9mIHRoZSBwaWFubyBzdHJpbmdzXG5cdCAqL1xuXHRwcml2YXRlIF9zdHJpbmdzOiBQaWFub1N0cmluZ1tdXG5cblx0LyoqXG5cdCAqIE1hcHMgYSBtaWRpIG5vdGUgdG8gYSBwaWFubyBzdHJpbmdcblx0ICovXG5cdHByaXZhdGUgX2FjdGl2ZU5vdGVzOiBNYXA8bnVtYmVyLCBQaWFub1N0cmluZz5cblxuXHRjb25zdHJ1Y3RvcihvcHRpb25zOiBTdHJpbmdzT3B0aW9ucykge1xuXHRcdHN1cGVyKG9wdGlvbnMpXG5cblx0XHRjb25zdCBub3RlcyA9IGdldE5vdGVzSW5SYW5nZShvcHRpb25zLm1pbk5vdGUsIG9wdGlvbnMubWF4Tm90ZSlcblxuXHRcdGNvbnN0IHZlbG9jaXRpZXMgPSB2ZWxvY2l0aWVzTWFwW29wdGlvbnMudmVsb2NpdGllc10uc2xpY2UoKVxuXG5cdFx0dGhpcy5fc3RyaW5ncyA9IHZlbG9jaXRpZXMubWFwKHZlbG9jaXR5ID0+IHtcblx0XHRcdGNvbnN0IHN0cmluZyA9IG5ldyBQaWFub1N0cmluZyhPYmplY3QuYXNzaWduKG9wdGlvbnMsIHtcblx0XHRcdFx0bm90ZXMsIHZlbG9jaXR5LFxuXHRcdFx0fSkpXG5cdFx0XHRyZXR1cm4gc3RyaW5nXG5cdFx0fSlcblxuXHRcdHRoaXMuX2FjdGl2ZU5vdGVzID0gbmV3IE1hcCgpXG5cdH1cblxuXHQvKipcblx0ICogU2NhbGUgYSB2YWx1ZSBiZXR3ZWVuIGEgZ2l2ZW4gcmFuZ2Vcblx0ICovXG5cdHByaXZhdGUgc2NhbGUodmFsOiBudW1iZXIsIGluTWluOiBudW1iZXIsIGluTWF4OiBudW1iZXIsIG91dE1pbjogbnVtYmVyLCBvdXRNYXg6IG51bWJlcik6IG51bWJlciB7XG5cdFx0cmV0dXJuICgodmFsIC0gaW5NaW4pIC8gKGluTWF4IC0gaW5NaW4pKSAqIChvdXRNYXggLSBvdXRNaW4pICsgb3V0TWluXG5cdH1cblxuXHR0cmlnZ2VyQXR0YWNrKG5vdGU6IG51bWJlciwgdGltZTogbnVtYmVyLCB2ZWxvY2l0eTogbnVtYmVyKTogdm9pZCB7XG5cdFx0Y29uc3Qgc2NhbGVkVmVsID0gdGhpcy5zY2FsZSh2ZWxvY2l0eSwgMCwgMSwgLTAuNSwgdGhpcy5fc3RyaW5ncy5sZW5ndGggLSAwLjUxKVxuXHRcdGNvbnN0IHN0cmluZ0luZGV4ID0gTWF0aC5tYXgoTWF0aC5yb3VuZChzY2FsZWRWZWwpLCAwKVxuXHRcdGxldCBnYWluID0gMSArIHNjYWxlZFZlbCAtIHN0cmluZ0luZGV4XG5cblx0XHRpZiAodGhpcy5fc3RyaW5ncy5sZW5ndGggPT09IDEpIHtcblx0XHRcdGdhaW4gPSB2ZWxvY2l0eVxuXHRcdH1cblxuXHRcdGNvbnN0IHNhbXBsZXIgPSB0aGlzLl9zdHJpbmdzW3N0cmluZ0luZGV4XVxuXG5cdFx0aWYgKHRoaXMuX2FjdGl2ZU5vdGVzLmhhcyhub3RlKSkge1xuXHRcdFx0dGhpcy50cmlnZ2VyUmVsZWFzZShub3RlLCB0aW1lKVxuXHRcdH1cblxuXHRcdHRoaXMuX2FjdGl2ZU5vdGVzLnNldChub3RlLCBzYW1wbGVyKVxuXHRcdHNhbXBsZXIudHJpZ2dlckF0dGFjayhNaWRpKG5vdGUpLnRvTm90ZSgpLCB0aW1lLCBnYWluKVxuXHR9XG5cblx0dHJpZ2dlclJlbGVhc2Uobm90ZTogbnVtYmVyLCB0aW1lOiBudW1iZXIpOiB2b2lkIHtcblx0XHQvLyB0cmlnZ2VyIHRoZSByZWxlYXNlIG9mIGFsbCBvZiB0aGUgbm90ZXMgYXQgdGhhdCB2ZWxvY2l5XG5cdFx0aWYgKHRoaXMuX2FjdGl2ZU5vdGVzLmhhcyhub3RlKSkge1xuXHRcdFx0dGhpcy5fYWN0aXZlTm90ZXMuZ2V0KG5vdGUpLnRyaWdnZXJSZWxlYXNlKE1pZGkobm90ZSkudG9Ob3RlKCksIHRpbWUpXG5cdFx0XHR0aGlzLl9hY3RpdmVOb3Rlcy5kZWxldGUobm90ZSlcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgYXN5bmMgX2ludGVybmFsTG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRhd2FpdCBQcm9taXNlLmFsbCh0aGlzLl9zdHJpbmdzLm1hcChhc3luYyBzID0+IHtcblx0XHRcdGF3YWl0IHMubG9hZCgpXG5cdFx0XHRzLmNvbm5lY3QodGhpcy5vdXRwdXQpXG5cdFx0fSkpXG5cdH1cbn1cbiJdfQ==