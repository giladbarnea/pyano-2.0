"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const WebMidi = require('webmidi');
class MidiKeyboard extends events_1.EventEmitter {
    constructor() {
        super();
        this.connectedDevices = new Map();
        console.group(`MidiKeyboard.constructor()`);
        this.ready = new Promise((done, error) => {
            WebMidi.enable((e) => {
                if (e) {
                    error(e);
                }
                WebMidi.addListener('connected', (event) => {
                    console.log('WebMidi connected', event);
                    if (event.port.type === 'input') {
                        this._addListeners(event.port);
                    }
                });
                WebMidi.addListener('WebMidi disconnected', (event) => {
                    console.log('disconnected');
                    this._removeListeners(event.port);
                });
                done();
            });
        });
        console.groupEnd();
    }
    _addListeners(device) {
        console.group(`_addListeners(device)`, device);
        console.log("this.connectedDevices", this.connectedDevices);
        if (!this.connectedDevices.has(device.id)) {
            this.connectedDevices.set(device.id, device);
            device.addListener('noteon', 'all', (event) => {
                console.log('%cnoteon', 'color: #1db954');
                this.emit('keyDown', `${event.note.name}${event.note.octave}`, event.velocity);
            });
            device.addListener('noteoff', 'all', (event) => {
                console.log('%cnoteoff', 'color: #1db954');
                this.emit('keyUp', `${event.note.name}${event.note.octave}`, event.velocity);
            });
            device.addListener('controlchange', 'all', (event) => {
                if (event.controller.name === 'holdpedal') {
                    this.emit(event.value ? 'pedalDown' : 'pedalUp');
                }
            });
        }
        console.groupEnd();
    }
    _removeListeners(event) {
        if (this.connectedDevices.has(event.id)) {
            const device = this.connectedDevices.get(event.id);
            this.connectedDevices.delete(event.id);
            device.removeListener('noteon');
            device.removeListener('noteoff');
            device.removeListener('controlchange');
        }
    }
}
exports.MidiKeyboard = MidiKeyboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWlkaUtleWJvYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTWlkaUtleWJvYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXFDO0FBR3JDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUVuQyxNQUFhLFlBQWEsU0FBUSxxQkFBWTtJQU0xQztRQUNJLEtBQUssRUFBRSxDQUFDO1FBTEoscUJBQWdCLEdBQXVCLElBQUksR0FBRyxFQUFFLENBQUM7UUFNckQsT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBRTVDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDckMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUNqQixJQUFLLENBQUMsRUFBRztvQkFDTCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQ1g7Z0JBQ0QsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtvQkFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsQ0FBQztvQkFDeEMsSUFBSyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUc7d0JBQy9CLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO3FCQUNqQztnQkFDTCxDQUFDLENBQUMsQ0FBQztnQkFDSCxPQUFPLENBQUMsV0FBVyxDQUFDLHNCQUFzQixFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7b0JBQzVCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7Z0JBQ3JDLENBQUMsQ0FBQyxDQUFDO2dCQUNILElBQUksRUFBRSxDQUFBO1lBQ1YsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUV2QixDQUFDO0lBRU8sYUFBYSxDQUFDLE1BQWE7UUFFL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzVELElBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRztZQUN6QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFN0MsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLGdCQUFnQixDQUFDLENBQUM7Z0JBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDbEYsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUNoRixDQUFDLENBQUMsQ0FBQztZQUVILE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNqRCxJQUFLLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRztvQkFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFBO2lCQUNuRDtZQUNMLENBQUMsQ0FBQyxDQUFBO1NBQ0w7UUFDRCxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFdkIsQ0FBQztJQUVPLGdCQUFnQixDQUFDLEtBQWtCO1FBQ3ZDLElBQUssSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUc7WUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoQyxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUE7U0FFekM7SUFDTCxDQUFDO0NBQ0o7QUFwRUQsb0NBb0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJ1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwid2VibWlkaVwiO1xuLy8gaW1wb3J0IFdlYk1pZGksIHsgSW5wdXQgfSBmcm9tICd3ZWJtaWRpJ1xuY29uc3QgV2ViTWlkaSA9IHJlcXVpcmUoJ3dlYm1pZGknKTtcblxuZXhwb3J0IGNsYXNzIE1pZGlLZXlib2FyZCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgXG4gICAgcHJpdmF0ZSBjb25uZWN0ZWREZXZpY2VzOiBNYXA8c3RyaW5nLCBJbnB1dD4gPSBuZXcgTWFwKCk7XG4gICAgXG4gICAgcmVhZG9ubHkgcmVhZHk6IFByb21pc2U8dW5rbm93bj47XG4gICAgXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYE1pZGlLZXlib2FyZC5jb25zdHJ1Y3RvcigpYCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnJlYWR5ID0gbmV3IFByb21pc2UoKGRvbmUsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICBXZWJNaWRpLmVuYWJsZSgoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICggZSApIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgV2ViTWlkaS5hZGRMaXN0ZW5lcignY29ubmVjdGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXZWJNaWRpIGNvbm5lY3RlZCcsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBldmVudC5wb3J0LnR5cGUgPT09ICdpbnB1dCcgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRMaXN0ZW5lcnMoZXZlbnQucG9ydClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFdlYk1pZGkuYWRkTGlzdGVuZXIoJ1dlYk1pZGkgZGlzY29ubmVjdGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb25uZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzKGV2ZW50LnBvcnQpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBfYWRkTGlzdGVuZXJzKGRldmljZTogSW5wdXQpOiB2b2lkIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYF9hZGRMaXN0ZW5lcnMoZGV2aWNlKWAsIGRldmljZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwidGhpcy5jb25uZWN0ZWREZXZpY2VzXCIsIHRoaXMuY29ubmVjdGVkRGV2aWNlcyk7XG4gICAgICAgIGlmICggIXRoaXMuY29ubmVjdGVkRGV2aWNlcy5oYXMoZGV2aWNlLmlkKSApIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkRGV2aWNlcy5zZXQoZGV2aWNlLmlkLCBkZXZpY2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBkZXZpY2UuYWRkTGlzdGVuZXIoJ25vdGVvbicsICdhbGwnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnJWNub3Rlb24nLCAnY29sb3I6ICMxZGI5NTQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2tleURvd24nLCBgJHtldmVudC5ub3RlLm5hbWV9JHtldmVudC5ub3RlLm9jdGF2ZX1gLCBldmVudC52ZWxvY2l0eSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGV2aWNlLmFkZExpc3RlbmVyKCdub3Rlb2ZmJywgJ2FsbCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCclY25vdGVvZmYnLCAnY29sb3I6ICMxZGI5NTQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2tleVVwJywgYCR7ZXZlbnQubm90ZS5uYW1lfSR7ZXZlbnQubm90ZS5vY3RhdmV9YCwgZXZlbnQudmVsb2NpdHkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGV2aWNlLmFkZExpc3RlbmVyKCdjb250cm9sY2hhbmdlJywgJ2FsbCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICggZXZlbnQuY29udHJvbGxlci5uYW1lID09PSAnaG9sZHBlZGFsJyApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KGV2ZW50LnZhbHVlID8gJ3BlZGFsRG93bicgOiAncGVkYWxVcCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIF9yZW1vdmVMaXN0ZW5lcnMoZXZlbnQ6IHsgaWQ6IGFueSB9KTogdm9pZCB7XG4gICAgICAgIGlmICggdGhpcy5jb25uZWN0ZWREZXZpY2VzLmhhcyhldmVudC5pZCkgKSB7XG4gICAgICAgICAgICBjb25zdCBkZXZpY2UgPSB0aGlzLmNvbm5lY3RlZERldmljZXMuZ2V0KGV2ZW50LmlkKTtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkRGV2aWNlcy5kZWxldGUoZXZlbnQuaWQpO1xuICAgICAgICAgICAgZGV2aWNlLnJlbW92ZUxpc3RlbmVyKCdub3Rlb24nKTtcbiAgICAgICAgICAgIGRldmljZS5yZW1vdmVMaXN0ZW5lcignbm90ZW9mZicpO1xuICAgICAgICAgICAgZGV2aWNlLnJlbW92ZUxpc3RlbmVyKCdjb250cm9sY2hhbmdlJylcbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxufVxuIl19