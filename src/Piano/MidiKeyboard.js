"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const WebMidi = require('webmidi');
class MidiKeyboard extends events_1.EventEmitter {
    constructor() {
        super();
        this.connectedDevices = new Map();
        this.notes = [];
        console.group(`MidiKeyboard.constructor()`);
        this.ready = new Promise((done, error) => {
            WebMidi.enable((e) => {
                if (e) {
                    error(e);
                }
                WebMidi.addListener('connected', (event) => {
                    console.log(`%cWebMidi connected (name: ${event.port.name}, type: ${event.port.type})`, 'color: #0F9D58', event);
                    if (event.port.type === 'input') {
                        this._addListeners(event.port);
                    }
                });
                WebMidi.addListener('disconnected', (event) => {
                    console.log(`%cWebMidi disconnected (name: ${event.port.name}, type: ${event.port.type})`, 'color: #DB4437', event);
                    this._removeListeners(event.port);
                });
                done();
            });
        });
        console.groupEnd();
    }
    _addListeners(device) {
        if (!this.connectedDevices.has(device.id)) {
            this.connectedDevices.set(device.id, device);
            console.log(`connected device id: ${device.id}`);
            device.addListener('noteon', 'all', (event) => {
                console.log('%cnoteon', 'color: #0F9D58', event);
                this.notes.push({
                    time: event.timestamp,
                    note: event.note.number,
                    kind: 'on',
                    velocity: event.rawVelocity
                });
                this.emit('keyDown', `${event.note.name}${event.note.octave}`, event.velocity);
            });
            device.addListener('noteoff', 'all', (event) => {
                console.log('%cnoteoff', 'color: #DB4437', event);
                this.notes.push({
                    time: event.timestamp,
                    note: event.note.number,
                    kind: 'off',
                });
                this.emit('keyUp', `${event.note.name}${event.note.octave}`, event.velocity);
            });
            device.addListener('controlchange', 'all', (event) => {
                if (event.controller.name === 'holdpedal') {
                    this.emit(event.value ? 'pedalDown' : 'pedalUp');
                }
            });
        }
    }
    _removeListeners(event) {
        if (this.connectedDevices.has(event.id)) {
            const device = this.connectedDevices.get(event.id);
            this.connectedDevices.delete(event.id);
            device.removeListener('noteon');
            device.removeListener('noteoff');
            device.removeListener('controlchange');
        }
    }
}
exports.MidiKeyboard = MidiKeyboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWlkaUtleWJvYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTWlkaUtleWJvYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXFDO0FBTXJDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUVuQyxNQUFhLFlBQWEsU0FBUSxxQkFBWTtJQU0xQztRQUNJLEtBQUssRUFBRSxDQUFDO1FBTEoscUJBQWdCLEdBQXVCLElBQUksR0FBRyxFQUFFLENBQUM7UUFFaEQsVUFBSyxHQUFVLEVBQUUsQ0FBQztRQUl2QixPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFFNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUVyQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2pCLElBQUssQ0FBQyxFQUFHO29CQUNMLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtpQkFDWDtnQkFDRCxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUV2QyxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDO29CQUNqSCxJQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRzt3QkFDL0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7cUJBQ2pDO2dCQUNMLENBQUMsQ0FBQyxDQUFDO2dCQUNILE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMs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QUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNqQyxNQUFNLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFBO1NBRXpDO0lBQ0wsQ0FBQztDQUNKO0FBaEZELG9DQWdGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cydcbmltcG9ydCB7IElucHV0LCBJbnB1dEV2ZW50Tm90ZW9mZiwgSW5wdXRFdmVudE5vdGVvbiwgV2ViTWlkaSB9IGZyb20gXCJ3ZWJtaWRpXCI7XG5pbXBvcnQgeyBJTXNnIH0gZnJvbSBcIi4uL015UHlTaGVsbFwiO1xuLy8gaW1wb3J0ICogYXMgd2VibWlkaSBmcm9tICd3ZWJtaWRpJ1xuLy8gd2VibWlkaSA9IHdlYm1pZGkgYXMgV2ViTWlkaTtcblxuY29uc3QgV2ViTWlkaSA9IHJlcXVpcmUoJ3dlYm1pZGknKTtcblxuZXhwb3J0IGNsYXNzIE1pZGlLZXlib2FyZCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgXG4gICAgcHJpdmF0ZSBjb25uZWN0ZWREZXZpY2VzOiBNYXA8c3RyaW5nLCBJbnB1dD4gPSBuZXcgTWFwKCk7XG4gICAgcmVhZG9ubHkgcmVhZHk6IFByb21pc2U8dW5rbm93bj47XG4gICAgcmVhZG9ubHkgbm90ZXM6SU1zZ1tdID0gW107XG4gICAgXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYE1pZGlLZXlib2FyZC5jb25zdHJ1Y3RvcigpYCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnJlYWR5ID0gbmV3IFByb21pc2UoKGRvbmUsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFdlYk1pZGkuZW5hYmxlKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCBlICkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcihlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBXZWJNaWRpLmFkZExpc3RlbmVyKCdjb25uZWN0ZWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAlY1dlYk1pZGkgY29ubmVjdGVkIChuYW1lOiAke2V2ZW50LnBvcnQubmFtZX0sIHR5cGU6ICR7ZXZlbnQucG9ydC50eXBlfSlgLCAnY29sb3I6ICMwRjlENTgnLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggZXZlbnQucG9ydC50eXBlID09PSAnaW5wdXQnICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkTGlzdGVuZXJzKGV2ZW50LnBvcnQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBXZWJNaWRpLmFkZExpc3RlbmVyKCdkaXNjb25uZWN0ZWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCVjV2ViTWlkaSBkaXNjb25uZWN0ZWQgKG5hbWU6ICR7ZXZlbnQucG9ydC5uYW1lfSwgdHlwZTogJHtldmVudC5wb3J0LnR5cGV9KWAsICdjb2xvcjogI0RCNDQzNycsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzKGV2ZW50LnBvcnQpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBfYWRkTGlzdGVuZXJzKGRldmljZTogSW5wdXQpOiB2b2lkIHtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiAoICF0aGlzLmNvbm5lY3RlZERldmljZXMuaGFzKGRldmljZS5pZCkgKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RlZERldmljZXMuc2V0KGRldmljZS5pZCwgZGV2aWNlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBjb25uZWN0ZWQgZGV2aWNlIGlkOiAke2RldmljZS5pZH1gKTtcbiAgICAgICAgICAgIGRldmljZS5hZGRMaXN0ZW5lcignbm90ZW9uJywgJ2FsbCcsIChldmVudDogSW5wdXRFdmVudE5vdGVvbikgPT4ge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCclY25vdGVvbicsICdjb2xvcjogIzBGOUQ1OCcsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aW1lIDogZXZlbnQudGltZXN0YW1wLFxuICAgICAgICAgICAgICAgICAgICBub3RlIDogZXZlbnQubm90ZS5udW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIGtpbmQgOiAnb24nLFxuICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eSA6IGV2ZW50LnJhd1ZlbG9jaXR5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdrZXlEb3duJywgYCR7ZXZlbnQubm90ZS5uYW1lfSR7ZXZlbnQubm90ZS5vY3RhdmV9YCwgZXZlbnQudmVsb2NpdHkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRldmljZS5hZGRMaXN0ZW5lcignbm90ZW9mZicsICdhbGwnLCAoZXZlbnQ6IElucHV0RXZlbnROb3Rlb2ZmKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJyVjbm90ZW9mZicsICdjb2xvcjogI0RCNDQzNycsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aW1lIDogZXZlbnQudGltZXN0YW1wLFxuICAgICAgICAgICAgICAgICAgICBub3RlIDogZXZlbnQubm90ZS5udW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIGtpbmQgOiAnb2ZmJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2tleVVwJywgYCR7ZXZlbnQubm90ZS5uYW1lfSR7ZXZlbnQubm90ZS5vY3RhdmV9YCwgZXZlbnQudmVsb2NpdHkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGV2aWNlLmFkZExpc3RlbmVyKCdjb250cm9sY2hhbmdlJywgJ2FsbCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICggZXZlbnQuY29udHJvbGxlci5uYW1lID09PSAnaG9sZHBlZGFsJyApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KGV2ZW50LnZhbHVlID8gJ3BlZGFsRG93bicgOiAncGVkYWxVcCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBfcmVtb3ZlTGlzdGVuZXJzKGV2ZW50OiB7IGlkOiBhbnkgfSk6IHZvaWQge1xuICAgICAgICBpZiAoIHRoaXMuY29ubmVjdGVkRGV2aWNlcy5oYXMoZXZlbnQuaWQpICkge1xuICAgICAgICAgICAgY29uc3QgZGV2aWNlID0gdGhpcy5jb25uZWN0ZWREZXZpY2VzLmdldChldmVudC5pZCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RlZERldmljZXMuZGVsZXRlKGV2ZW50LmlkKTtcbiAgICAgICAgICAgIGRldmljZS5yZW1vdmVMaXN0ZW5lcignbm90ZW9uJyk7XG4gICAgICAgICAgICBkZXZpY2UucmVtb3ZlTGlzdGVuZXIoJ25vdGVvZmYnKTtcbiAgICAgICAgICAgIGRldmljZS5yZW1vdmVMaXN0ZW5lcignY29udHJvbGNoYW5nZScpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==