"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const webmidi_1 = require("webmidi");
class MidiKeyboard extends events_1.EventEmitter {
    constructor() {
        super();
        this.connectedDevices = new Map();
        this.ready = new Promise((done, error) => {
            webmidi_1.default.enable((e) => {
                if (e) {
                    error(e);
                }
                webmidi_1.default.addListener('connected', (event) => {
                    if (event.port.type === 'input') {
                        this._addListeners(event.port);
                    }
                });
                webmidi_1.default.addListener('disconnected', (event) => {
                    this._removeListeners(event.port);
                });
                done();
            });
        });
    }
    _addListeners(device) {
        if (!this.connectedDevices.has(device.id)) {
            this.connectedDevices.set(device.id, device);
            device.addListener('noteon', 'all', (event) => {
                this.emit('keyDown', `${event.note.name}${event.note.octave}`, event.velocity);
            });
            device.addListener('noteoff', 'all', (event) => {
                this.emit('keyUp', `${event.note.name}${event.note.octave}`, event.velocity);
            });
            device.addListener('controlchange', 'all', (event) => {
                if (event.controller.name === 'holdpedal') {
                    this.emit(event.value ? 'pedalDown' : 'pedalUp');
                }
            });
        }
    }
    _removeListeners(event) {
        if (this.connectedDevices.has(event.id)) {
            const device = this.connectedDevices.get(event.id);
            this.connectedDevices.delete(event.id);
            device.removeListener('noteon');
            device.removeListener('noteoff');
            device.removeListener('controlchange');
        }
    }
}
exports.MidiKeyboard = MidiKeyboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWlkaUtleWJvYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL01pZGlLZXlib2FyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFxQztBQUNyQyxxQ0FBd0M7QUFFeEMsTUFBYSxZQUFhLFNBQVEscUJBQVk7SUFNN0M7UUFDQyxLQUFLLEVBQUUsQ0FBQTtRQUxBLHFCQUFnQixHQUF1QixJQUFJLEdBQUcsRUFBRSxDQUFBO1FBT3ZELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDeEMsaUJBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLEVBQUU7b0JBQ04sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO2lCQUNSO2dCQUNELGlCQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUMxQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTt3QkFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7cUJBQzlCO2dCQUNGLENBQUMsQ0FBQyxDQUFBO2dCQUNGLGlCQUFPLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUM3QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUNsQyxDQUFDLENBQUMsQ0FBQTtnQkFDRixJQUFJLEVBQUUsQ0FBQTtZQUNQLENBQUMsQ0FBQyxDQUFBO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFSCxDQUFDO0lBRU8sYUFBYSxDQUFDLE1BQWE7UUFFbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQzFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUU1QyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUMvRSxDQUFDLENBQUMsQ0FBQTtZQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUM5QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQzdFLENBQUMsQ0FBQyxDQUFBO1lBRUYsTUFBTSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ3BELElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssV0FBVyxFQUFFO29CQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7aUJBQ2hEO1lBQ0YsQ0FBQyxDQUFDLENBQUE7U0FDRjtJQUVGLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxLQUFrQjtRQUMxQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3hDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ2xELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ3RDLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDL0IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUNoQyxNQUFNLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFBO1NBRXRDO0lBQ0YsQ0FBQztDQUNEO0FBM0RELG9DQTJEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cydcbmltcG9ydCBXZWJNaWRpLCB7IElucHV0IH0gZnJvbSAnd2VibWlkaSdcblxuZXhwb3J0IGNsYXNzIE1pZGlLZXlib2FyZCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cblx0cHJpdmF0ZSBjb25uZWN0ZWREZXZpY2VzOiBNYXA8c3RyaW5nLCBJbnB1dD4gPSBuZXcgTWFwKClcblxuXHRyZWFkb25seSByZWFkeTogUHJvbWlzZTx1bmtub3duPlxuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKClcblxuXHRcdHRoaXMucmVhZHkgPSBuZXcgUHJvbWlzZSgoZG9uZSwgZXJyb3IpID0+IHtcblx0XHRcdFdlYk1pZGkuZW5hYmxlKChlKSA9PiB7XG5cdFx0XHRcdGlmIChlKSB7XG5cdFx0XHRcdFx0ZXJyb3IoZSlcblx0XHRcdFx0fVxuXHRcdFx0XHRXZWJNaWRpLmFkZExpc3RlbmVyKCdjb25uZWN0ZWQnLCAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRpZiAoZXZlbnQucG9ydC50eXBlID09PSAnaW5wdXQnKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9hZGRMaXN0ZW5lcnMoZXZlbnQucG9ydClcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdFdlYk1pZGkuYWRkTGlzdGVuZXIoJ2Rpc2Nvbm5lY3RlZCcsIChldmVudCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuX3JlbW92ZUxpc3RlbmVycyhldmVudC5wb3J0KVxuXHRcdFx0XHR9KVxuXHRcdFx0XHRkb25lKClcblx0XHRcdH0pXG5cdFx0fSlcblxuXHR9XG5cblx0cHJpdmF0ZSBfYWRkTGlzdGVuZXJzKGRldmljZTogSW5wdXQpOiB2b2lkIHtcblxuXHRcdGlmICghdGhpcy5jb25uZWN0ZWREZXZpY2VzLmhhcyhkZXZpY2UuaWQpKSB7XG5cdFx0XHR0aGlzLmNvbm5lY3RlZERldmljZXMuc2V0KGRldmljZS5pZCwgZGV2aWNlKVxuXG5cdFx0XHRkZXZpY2UuYWRkTGlzdGVuZXIoJ25vdGVvbicsICdhbGwnLCAoZXZlbnQpID0+IHtcblx0XHRcdFx0dGhpcy5lbWl0KCdrZXlEb3duJywgYCR7ZXZlbnQubm90ZS5uYW1lfSR7ZXZlbnQubm90ZS5vY3RhdmV9YCwgZXZlbnQudmVsb2NpdHkpXG5cdFx0XHR9KVxuXHRcdFx0ZGV2aWNlLmFkZExpc3RlbmVyKCdub3Rlb2ZmJywgJ2FsbCcsIChldmVudCkgPT4ge1xuXHRcdFx0XHR0aGlzLmVtaXQoJ2tleVVwJywgYCR7ZXZlbnQubm90ZS5uYW1lfSR7ZXZlbnQubm90ZS5vY3RhdmV9YCwgZXZlbnQudmVsb2NpdHkpXG5cdFx0XHR9KVxuXG5cdFx0XHRkZXZpY2UuYWRkTGlzdGVuZXIoJ2NvbnRyb2xjaGFuZ2UnLCAnYWxsJywgKGV2ZW50KSA9PiB7XG5cdFx0XHRcdGlmIChldmVudC5jb250cm9sbGVyLm5hbWUgPT09ICdob2xkcGVkYWwnKSB7XG5cdFx0XHRcdFx0dGhpcy5lbWl0KGV2ZW50LnZhbHVlID8gJ3BlZGFsRG93bicgOiAncGVkYWxVcCcpXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0fVxuXG5cdH1cblxuXHRwcml2YXRlIF9yZW1vdmVMaXN0ZW5lcnMoZXZlbnQ6IHsgaWQ6IGFueSB9KTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuY29ubmVjdGVkRGV2aWNlcy5oYXMoZXZlbnQuaWQpKSB7XG5cdFx0XHRjb25zdCBkZXZpY2UgPSB0aGlzLmNvbm5lY3RlZERldmljZXMuZ2V0KGV2ZW50LmlkKVxuXHRcdFx0dGhpcy5jb25uZWN0ZWREZXZpY2VzLmRlbGV0ZShldmVudC5pZClcblx0XHRcdGRldmljZS5yZW1vdmVMaXN0ZW5lcignbm90ZW9uJylcblx0XHRcdGRldmljZS5yZW1vdmVMaXN0ZW5lcignbm90ZW9mZicpXG5cdFx0XHRkZXZpY2UucmVtb3ZlTGlzdGVuZXIoJ2NvbnRyb2xjaGFuZ2UnKVxuXG5cdFx0fVxuXHR9XG59XG4iXX0=