"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const webmidi_1 = require("webmidi");
class MidiKeyboard extends events_1.EventEmitter {
    constructor() {
        super();
        this.connectedDevices = new Map();
        this.ready = new Promise((done, error) => {
            webmidi_1.default.enable((e) => {
                if (e) {
                    error(e);
                }
                webmidi_1.default.addListener('connected', (event) => {
                    if (event.port.type === 'input') {
                        this._addListeners(event.port);
                    }
                });
                webmidi_1.default.addListener('disconnected', (event) => {
                    this._removeListeners(event.port);
                });
                done();
            });
        });
    }
    _addListeners(device) {
        if (!this.connectedDevices.has(device.id)) {
            this.connectedDevices.set(device.id, device);
            device.addListener('noteon', 'all', (event) => {
                this.emit('keyDown', `${event.note.name}${event.note.octave}`, event.velocity);
            });
            device.addListener('noteoff', 'all', (event) => {
                this.emit('keyUp', `${event.note.name}${event.note.octave}`, event.velocity);
            });
            device.addListener('controlchange', 'all', (event) => {
                if (event.controller.name === 'holdpedal') {
                    this.emit(event.value ? 'pedalDown' : 'pedalUp');
                }
            });
        }
    }
    _removeListeners(event) {
        if (this.connectedDevices.has(event.id)) {
            const device = this.connectedDevices.get(event.id);
            this.connectedDevices.delete(event.id);
            device.removeListener('noteon');
            device.removeListener('noteoff');
            device.removeListener('controlchange');
        }
    }
}
exports.MidiKeyboard = MidiKeyboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWlkaUtleWJvYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTWlkaUtleWJvYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXFDO0FBQ3JDLHFDQUF3QztBQUV4QyxNQUFhLFlBQWEsU0FBUSxxQkFBWTtJQU0xQztRQUNJLEtBQUssRUFBRSxDQUFDO1FBTEoscUJBQWdCLEdBQXVCLElBQUksR0FBRyxFQUFFLENBQUM7UUFPckQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNyQyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUNqQixJQUFLLENBQUMsRUFBRztvQkFDTCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQ1g7Z0JBQ0QsaUJBQU8sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQ3ZDLElBQUssS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFHO3dCQUMvQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtxQkFDakM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsaUJBQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQzFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7Z0JBQ3JDLENBQUMsQ0FBQyxDQUFDO2dCQUNILElBQUksRUFBRSxDQUFBO1lBQ1YsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQTtJQUVOLENBQUM7SUFFTyxhQUFhLENBQUMsTUFBYTtRQUUvQixJQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUc7WUFDekMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRTdDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ2xGLENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDaEYsQ0FBQyxDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDakQsSUFBSyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUc7b0JBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtpQkFDbkQ7WUFDTCxDQUFDLENBQUMsQ0FBQTtTQUNMO0lBRUwsQ0FBQztJQUVPLGdCQUFnQixDQUFDLEtBQWtCO1FBQ3ZDLElBQUssSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUc7WUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoQyxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUE7U0FFekM7SUFDTCxDQUFDO0NBQ0o7QUEzREQsb0NBMkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJ1xuaW1wb3J0IFdlYk1pZGksIHsgSW5wdXQgfSBmcm9tICd3ZWJtaWRpJ1xuXG5leHBvcnQgY2xhc3MgTWlkaUtleWJvYXJkIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgICBcbiAgICBwcml2YXRlIGNvbm5lY3RlZERldmljZXM6IE1hcDxzdHJpbmcsIElucHV0PiA9IG5ldyBNYXAoKTtcbiAgICBcbiAgICByZWFkb25seSByZWFkeTogUHJvbWlzZTx1bmtub3duPjtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucmVhZHkgPSBuZXcgUHJvbWlzZSgoZG9uZSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgIFdlYk1pZGkuZW5hYmxlKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCBlICkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcihlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBXZWJNaWRpLmFkZExpc3RlbmVyKCdjb25uZWN0ZWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBldmVudC5wb3J0LnR5cGUgPT09ICdpbnB1dCcgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRMaXN0ZW5lcnMoZXZlbnQucG9ydClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFdlYk1pZGkuYWRkTGlzdGVuZXIoJ2Rpc2Nvbm5lY3RlZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVMaXN0ZW5lcnMoZXZlbnQucG9ydClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkb25lKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIF9hZGRMaXN0ZW5lcnMoZGV2aWNlOiBJbnB1dCk6IHZvaWQge1xuICAgICAgICBcbiAgICAgICAgaWYgKCAhdGhpcy5jb25uZWN0ZWREZXZpY2VzLmhhcyhkZXZpY2UuaWQpICkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWREZXZpY2VzLnNldChkZXZpY2UuaWQsIGRldmljZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRldmljZS5hZGRMaXN0ZW5lcignbm90ZW9uJywgJ2FsbCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgna2V5RG93bicsIGAke2V2ZW50Lm5vdGUubmFtZX0ke2V2ZW50Lm5vdGUub2N0YXZlfWAsIGV2ZW50LnZlbG9jaXR5KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZXZpY2UuYWRkTGlzdGVuZXIoJ25vdGVvZmYnLCAnYWxsJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdrZXlVcCcsIGAke2V2ZW50Lm5vdGUubmFtZX0ke2V2ZW50Lm5vdGUub2N0YXZlfWAsIGV2ZW50LnZlbG9jaXR5KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRldmljZS5hZGRMaXN0ZW5lcignY29udHJvbGNoYW5nZScsICdhbGwnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIGV2ZW50LmNvbnRyb2xsZXIubmFtZSA9PT0gJ2hvbGRwZWRhbCcgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChldmVudC52YWx1ZSA/ICdwZWRhbERvd24nIDogJ3BlZGFsVXAnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgX3JlbW92ZUxpc3RlbmVycyhldmVudDogeyBpZDogYW55IH0pOiB2b2lkIHtcbiAgICAgICAgaWYgKCB0aGlzLmNvbm5lY3RlZERldmljZXMuaGFzKGV2ZW50LmlkKSApIHtcbiAgICAgICAgICAgIGNvbnN0IGRldmljZSA9IHRoaXMuY29ubmVjdGVkRGV2aWNlcy5nZXQoZXZlbnQuaWQpO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWREZXZpY2VzLmRlbGV0ZShldmVudC5pZCk7XG4gICAgICAgICAgICBkZXZpY2UucmVtb3ZlTGlzdGVuZXIoJ25vdGVvbicpO1xuICAgICAgICAgICAgZGV2aWNlLnJlbW92ZUxpc3RlbmVyKCdub3Rlb2ZmJyk7XG4gICAgICAgICAgICBkZXZpY2UucmVtb3ZlTGlzdGVuZXIoJ2NvbnRyb2xjaGFuZ2UnKVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=