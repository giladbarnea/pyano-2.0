"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const WebMidi = require('webmidi');
class MidiKeyboard extends events_1.EventEmitter {
    constructor() {
        super();
        this.connectedDevices = new Map();
        console.group(`MidiKeyboard.constructor()`);
        this.ready = new Promise((done, error) => {
            WebMidi.enable((e) => {
                if (e) {
                    error(e);
                }
                WebMidi.addListener('connected', (event) => {
                    console.log(`%cWebMidi connected (name: ${event.port.name}, type: ${event.port.type})`, 'color: #0F9D58', event);
                    if (event.port.type === 'input') {
                        this._addListeners(event.port);
                    }
                });
                WebMidi.addListener('disconnected', (event) => {
                    console.log(`%cWebMidi disconnected (name: ${event.port.name}, type: ${event.port.type})`, 'color: #DB4437', event);
                    this._removeListeners(event.port);
                });
                done();
            });
        });
        console.groupEnd();
    }
    _addListeners(device) {
        if (!this.connectedDevices.has(device.id)) {
            this.connectedDevices.set(device.id, device);
            console.log(`connected device id: ${device.id}`);
            device.addListener('noteon', 'all', (event) => {
                console.log('%cnoteon', 'color: #0F9D58', event);
                this.emit('keyDown', `${event.note.name}${event.note.octave}`, event.velocity);
            });
            device.addListener('noteoff', 'all', (event) => {
                console.log('%cnoteoff', 'color: #DB4437', event);
                this.emit('keyUp', `${event.note.name}${event.note.octave}`, event.velocity);
            });
            device.addListener('controlchange', 'all', (event) => {
                if (event.controller.name === 'holdpedal') {
                    this.emit(event.value ? 'pedalDown' : 'pedalUp');
                }
            });
        }
    }
    _removeListeners(event) {
        if (this.connectedDevices.has(event.id)) {
            const device = this.connectedDevices.get(event.id);
            this.connectedDevices.delete(event.id);
            device.removeListener('noteon');
            device.removeListener('noteoff');
            device.removeListener('controlchange');
        }
    }
}
exports.MidiKeyboard = MidiKeyboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWlkaUtleWJvYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTWlkaUtleWJvYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXFDO0FBS3JDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUVuQyxNQUFhLFlBQWEsU0FBUSxxQkFBWTtJQUsxQztRQUNJLEtBQUssRUFBRSxDQUFDO1FBSkoscUJBQWdCLEdBQXVCLElBQUksR0FBRyxFQUFFLENBQUM7UUFLckQsT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBRTVDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFFckMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUNqQixJQUFLLENBQUMsRUFBRztvQkFDTCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQ1g7Z0JBQ0QsT0FBTyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtvQkFFdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLFdBQVcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQztvQkFDakgsSUFBSyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUc7d0JBQy9CLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO3FCQUNqQztnQkFDTCxDQUFDLENBQUMsQ0FBQztnQkFDSCxPQUFPLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDO29CQUNwSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUNyQyxDQUFDLENBQUMsQ0FBQztnQkFDSCxJQUFJLEVBQUUsQ0FBQTtZQUNWLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFdkIsQ0FBQztJQUVPLGFBQWEsQ0FBQyxNQUFhO1FBRy9CLElBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRztZQUN6QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBdUIsRUFBRSxFQUFFO2dCQUU1RCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDakQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUNsRixDQUFDLENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQXdCLEVBQUUsRUFBRTtnQkFFOUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ2xELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDaEYsQ0FBQyxDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDakQsSUFBSyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUc7b0JBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtpQkFDbkQ7WUFDTCxDQUFDLENBQUMsQ0FBQTtTQUNMO0lBRUwsQ0FBQztJQUVPLGdCQUFnQixDQUFDLEtBQWtCO1FBQ3ZDLElBQUssSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUc7WUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoQyxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUE7U0FFekM7SUFDTCxDQUFDO0NBQ0o7QUFyRUQsb0NBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJ1xuaW1wb3J0IHsgSW5wdXQsIElucHV0RXZlbnROb3Rlb2ZmLCBJbnB1dEV2ZW50Tm90ZW9uLCBXZWJNaWRpIH0gZnJvbSBcIndlYm1pZGlcIjtcbi8vIGltcG9ydCAqIGFzIHdlYm1pZGkgZnJvbSAnd2VibWlkaSdcbi8vIHdlYm1pZGkgPSB3ZWJtaWRpIGFzIFdlYk1pZGk7XG5cbmNvbnN0IFdlYk1pZGkgPSByZXF1aXJlKCd3ZWJtaWRpJyk7XG5cbmV4cG9ydCBjbGFzcyBNaWRpS2V5Ym9hcmQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIFxuICAgIHByaXZhdGUgY29ubmVjdGVkRGV2aWNlczogTWFwPHN0cmluZywgSW5wdXQ+ID0gbmV3IE1hcCgpO1xuICAgIHJlYWRvbmx5IHJlYWR5OiBQcm9taXNlPHVua25vd24+O1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb25zb2xlLmdyb3VwKGBNaWRpS2V5Ym9hcmQuY29uc3RydWN0b3IoKWApO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5yZWFkeSA9IG5ldyBQcm9taXNlKChkb25lLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBXZWJNaWRpLmVuYWJsZSgoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICggZSApIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgV2ViTWlkaS5hZGRMaXN0ZW5lcignY29ubmVjdGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJWNXZWJNaWRpIGNvbm5lY3RlZCAobmFtZTogJHtldmVudC5wb3J0Lm5hbWV9LCB0eXBlOiAke2V2ZW50LnBvcnQudHlwZX0pYCwgJ2NvbG9yOiAjMEY5RDU4JywgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGV2ZW50LnBvcnQudHlwZSA9PT0gJ2lucHV0JyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZExpc3RlbmVycyhldmVudC5wb3J0KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgV2ViTWlkaS5hZGRMaXN0ZW5lcignZGlzY29ubmVjdGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAlY1dlYk1pZGkgZGlzY29ubmVjdGVkIChuYW1lOiAke2V2ZW50LnBvcnQubmFtZX0sIHR5cGU6ICR7ZXZlbnQucG9ydC50eXBlfSlgLCAnY29sb3I6ICNEQjQ0MzcnLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUxpc3RlbmVycyhldmVudC5wb3J0KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgX2FkZExpc3RlbmVycyhkZXZpY2U6IElucHV0KTogdm9pZCB7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgaWYgKCAhdGhpcy5jb25uZWN0ZWREZXZpY2VzLmhhcyhkZXZpY2UuaWQpICkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWREZXZpY2VzLnNldChkZXZpY2UuaWQsIGRldmljZSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgY29ubmVjdGVkIGRldmljZSBpZDogJHtkZXZpY2UuaWR9YCk7XG4gICAgICAgICAgICBkZXZpY2UuYWRkTGlzdGVuZXIoJ25vdGVvbicsICdhbGwnLCAoZXZlbnQ6IElucHV0RXZlbnROb3Rlb24pID0+IHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnJWNub3Rlb24nLCAnY29sb3I6ICMwRjlENTgnLCBldmVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdrZXlEb3duJywgYCR7ZXZlbnQubm90ZS5uYW1lfSR7ZXZlbnQubm90ZS5vY3RhdmV9YCwgZXZlbnQudmVsb2NpdHkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRldmljZS5hZGRMaXN0ZW5lcignbm90ZW9mZicsICdhbGwnLCAoZXZlbnQ6IElucHV0RXZlbnROb3Rlb2ZmKSA9PiB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJyVjbm90ZW9mZicsICdjb2xvcjogI0RCNDQzNycsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2tleVVwJywgYCR7ZXZlbnQubm90ZS5uYW1lfSR7ZXZlbnQubm90ZS5vY3RhdmV9YCwgZXZlbnQudmVsb2NpdHkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGV2aWNlLmFkZExpc3RlbmVyKCdjb250cm9sY2hhbmdlJywgJ2FsbCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICggZXZlbnQuY29udHJvbGxlci5uYW1lID09PSAnaG9sZHBlZGFsJyApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KGV2ZW50LnZhbHVlID8gJ3BlZGFsRG93bicgOiAncGVkYWxVcCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBfcmVtb3ZlTGlzdGVuZXJzKGV2ZW50OiB7IGlkOiBhbnkgfSk6IHZvaWQge1xuICAgICAgICBpZiAoIHRoaXMuY29ubmVjdGVkRGV2aWNlcy5oYXMoZXZlbnQuaWQpICkge1xuICAgICAgICAgICAgY29uc3QgZGV2aWNlID0gdGhpcy5jb25uZWN0ZWREZXZpY2VzLmdldChldmVudC5pZCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RlZERldmljZXMuZGVsZXRlKGV2ZW50LmlkKTtcbiAgICAgICAgICAgIGRldmljZS5yZW1vdmVMaXN0ZW5lcignbm90ZW9uJyk7XG4gICAgICAgICAgICBkZXZpY2UucmVtb3ZlTGlzdGVuZXIoJ25vdGVvZmYnKTtcbiAgICAgICAgICAgIGRldmljZS5yZW1vdmVMaXN0ZW5lcignY29udHJvbGNoYW5nZScpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==