"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.group('MyPyShell.index.ts');
const python_shell_1 = require("python-shell");
const enginePath = path.join(SRC_PATH_ABS, "engine");
const pyExecPath = path.join(enginePath, process.platform === "linux" ? "env/bin/python" : "env/Scripts/python.exe");
python_shell_1.PythonShell.defaultOptions = {
    pythonPath: pyExecPath,
    pythonOptions: ['-OO'],
};
class MyPyShell extends python_shell_1.PythonShell {
    constructor(scriptPath, options) {
        super(scriptPath, options);
    }
    async runAsync() {
        return new Promise((resolve, reject) => {
            const messages = [];
            this.on('message', message => {
                messages.push(message.removeAll(MyPyShell.colorRegex));
            });
            this.end((err, code, signal) => {
                if (err)
                    reject(err);
                resolve(messages);
            });
        });
    }
    static run(scriptPath, options, callback) {
        if (!options)
            options = { args: [], pythonOptions: ['-OO'] };
        if (scriptPath.startsWith('-m')) {
            scriptPath = scriptPath.slice(3);
            if (!options.pythonOptions) {
                options.pythonOptions = ['-m'];
            }
            else {
                if (!options.pythonOptions.includes('-m')) {
                    options.pythonOptions.push('-m');
                }
            }
        }
        options.args = [ROOT_PATH_ABS, ...options.args];
        if (DEBUG)
            options.args.push('debug');
        if (DRYRUN)
            options.args.push('dry-run');
        if (!callback) {
            callback = (err, output) => {
                if (err) {
                    console.error(err);
                }
                if (output) {
                    output = output.map(m => m.removeAll(MyPyShell.colorRegex));
                    console.log(`%c${scriptPath}\n`, 'font-weight: bold', output.join('\n'));
                }
            };
        }
        return python_shell_1.PythonShell.run(scriptPath, options, callback);
    }
}
MyPyShell.colorRegex = /.?\[\d{1,3}m/;
let isChecksDirsDone = false;
let isChecksCfgDone = false;
function isDone() {
    return isChecksDirsDone && isChecksCfgDone;
}
exports.isDone = isDone;
const PyChecksDirs = new MyPyShell('checks.dirs', {
    pythonOptions: ['-m',],
    args: [ROOT_PATH_ABS, 'debug', 'dry-run']
});
PyChecksDirs.runAsync().then(msgs => {
    isChecksDirsDone = true;
    console.log('PyChecksDirs msgs:', msgs.join('\n'));
});
const Store = new (require("electron-store"))();
console.log(`Store.path: `, Store.path);
const PyChecksCfg = new MyPyShell('checks.config', {
    pythonOptions: ['-m'],
    args: [ROOT_PATH_ABS, Store.path, 'debug', 'dry-run']
});
PyChecksCfg.runAsync().then(msgs => {
    isChecksCfgDone = true;
    console.log('PyChecksCfg msgs:', msgs.join('\n'));
});
console.groupEnd();
//# sourceMappingURL=data:application/json;base64,