"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
console.group('MyPyShell.index.ts');
const python_shell_1 = require("python-shell");
const enginePath = path.join(SRC_PATH_ABS, "engine");
const pyExecPath = path.join(enginePath, process.platform === "linux" ? "env/bin/python" : "env/Scripts/python.exe");
python_shell_1.PythonShell.defaultOptions = {
    pythonPath: pyExecPath,
    pythonOptions: ['-OO'],
};
class MyPyShell extends python_shell_1.PythonShell {
    constructor(scriptPath, options) {
        [scriptPath, options] = MyPyShell.handleArguments(scriptPath, options);
        super(scriptPath, options);
    }
    static handleArguments(scriptPath, options) {
        if (!util_1.bool(options)) {
            options = { args: [], pythonOptions: ['-OO'] };
        }
        else {
            if (options.args === undefined)
                options.args = [];
            if (options.pythonOptions === undefined)
                options.pythonOptions = ['-OO'];
        }
        if (scriptPath.startsWith('-m')) {
            scriptPath = scriptPath.slice(3);
            if (!options.pythonOptions) {
                options.pythonOptions = ['-m'];
            }
            else {
                if (!options.pythonOptions.includes('-m')) {
                    options.pythonOptions.push('-m');
                }
            }
        }
        options.args = [ROOT_PATH_ABS, ...options.args];
        if (DEBUG)
            options.args.push('debug');
        if (DRYRUN)
            options.args.push('dry-run');
        return [scriptPath, options];
    }
    async runAsync() {
        return new Promise((resolve, reject) => {
            const messages = [];
            this.on('message', message => {
                messages.push(message.removeAll(MyPyShell.colorRegex));
            });
            this.end((err, code, signal) => {
                if (err)
                    reject(err);
                resolve(messages);
            });
        });
    }
    static run(scriptPath, options, callback) {
        [scriptPath, options] = MyPyShell.handleArguments(scriptPath, options);
        if (!callback) {
            callback = (err, output) => {
                if (err) {
                    console.error(err);
                }
                if (output) {
                    output = output.map(m => m.removeAll(MyPyShell.colorRegex));
                    console.log(`%c${scriptPath}\n`, 'font-weight: bold', output.join('\n'));
                }
            };
        }
        return python_shell_1.PythonShell.run(scriptPath, options, callback);
    }
}
MyPyShell.colorRegex = /.?\[\d{1,3}m/;
let isChecksModuleDone = NOPYTHON;
function isDone() {
    return isChecksModuleDone;
}
exports.isDone = isDone;
if (!NOPYTHON) {
    const Store = new (require("electron-store"))();
    console.log(`Store.path: `, Store.path);
    const PyChecksModule = new MyPyShell('-m checks', {
        args: [Store.path]
    });
    PyChecksModule.runAsync().then(msgs => {
        isChecksModuleDone = true;
        console.log('PyChecksModule msgs:', msgs.join('\n'));
    });
}
console.groupEnd();
//# sourceMappingURL=data:application/json;base64,