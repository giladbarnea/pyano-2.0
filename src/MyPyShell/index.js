"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
console.group('MyPyShell.index.ts');
const python_shell_1 = require("python-shell");
const enginePath = path.join(SRC_PATH_ABS, "engine");
const pyExecPath = path.join(enginePath, process.platform === "linux" ? "env/bin/python" : "env/Scripts/python.exe");
const MyAlert_1 = require("../MyAlert");
python_shell_1.PythonShell.defaultOptions = {
    pythonPath: pyExecPath,
    pythonOptions: ['-OO'],
};
class MyPyShell extends python_shell_1.PythonShell {
    constructor(scriptPath, options) {
        console.log(`MyPyShell.constructor(scriptPath: ${scriptPath})`);
        [scriptPath, options] = MyPyShell.handleArguments(scriptPath, options);
        let json = false;
        if (options.mode && options.mode === "json") {
            delete options.mode;
            json = true;
        }
        super(scriptPath, options);
        this.json = json;
    }
    static handleArguments(scriptPath, options) {
        if (!util_1.bool(options)) {
            options = { args: [], pythonOptions: ['-OO'] };
        }
        else {
            if (options.args === undefined) {
                options.args = [];
            }
            if (options.pythonOptions === undefined) {
                options.pythonOptions = ['-OO'];
            }
        }
        if (scriptPath.startsWith('-m')) {
            scriptPath = scriptPath.slice(3);
            if (!options.pythonOptions) {
                options.pythonOptions = ['-m'];
            }
            else {
                if (!options.pythonOptions.includes('-m')) {
                    options.pythonOptions.push('-m');
                }
            }
        }
        options.args = [ROOT_PATH_ABS, ...options.args];
        if (DEBUG) {
            options.args.push('debug');
        }
        if (DRYRUN) {
            options.args.push('dry-run');
        }
        return [scriptPath, options];
    }
    static run(scriptPath, options, callback) {
        console.group(`MyPyShell.run(scriptPath: ${scriptPath})`);
        try {
            [scriptPath, options] = MyPyShell.handleArguments(scriptPath, options);
            if (!callback) {
                callback = (err, output) => {
                    if (err) {
                        console.error(err);
                    }
                    if (output) {
                        output = output.map(m => m.removeAll(MyPyShell.colorRegex));
                        console.log(`%c${scriptPath}\n`, 'font-weight: bold', output.join('\n'));
                    }
                };
            }
            return python_shell_1.PythonShell.run(scriptPath, options, callback);
        }
        catch (e) {
            const { what, where, cleanstack } = e.toObj();
            console.error('MyPyShell.run() error!', { what, where, cleanstack });
        }
        finally {
            console.groupEnd();
        }
    }
    async runAsync() {
        return new Promise((resolve, reject) => {
            try {
                console.group(`MyPyShell.runAsync()`);
                const messages = [];
                let push = DEBUG;
                let warn = false;
                let error = false;
                let log = false;
                const errors = [];
                this.on('message', message => {
                    if (message.startsWith('TONODE')) {
                        if (message.includes('WARN')) {
                            warn = message.endsWith('START');
                        }
                        else if (message.includes('ERROR')) {
                            error = message.endsWith('START');
                        }
                        else if (message.includes('LOG')) {
                            log = message.endsWith('START');
                        }
                        else if (message.includes('SEND')) {
                            if (message.endsWith('START')) {
                                push = true;
                            }
                            else {
                                push = DEBUG;
                            }
                        }
                        return;
                    }
                    if (push || warn || error || log) {
                        if (this.json) {
                            message = JSON.parse(message);
                        }
                        if (typeof message === "string") {
                            message = message.removeAll(MyPyShell.colorRegex);
                        }
                        if (push) {
                            messages.push(message);
                        }
                        if (warn) {
                            console.warn(`TONODE_WARN:`, message);
                        }
                        if (error) {
                            console.error(`TONODE_ERROR:`, message);
                            errors.push(message);
                        }
                        if (log) {
                            console.log(`TONODE_LOG:`, message);
                        }
                    }
                });
                this.end((err, code, signal) => {
                    if (err) {
                        reject(err);
                    }
                    if (util_1.bool(errors)) {
                        for (let e of errors) {
                            let html;
                            const typeofe = typeof e;
                            if (typeofe === "string") {
                                html = e.replaceAll('\n', '</br>');
                            }
                            else if (Array.isArray(e)) {
                                html = e.join('</br>');
                            }
                            else if (typeofe === "object") {
                                const { eargs, etype, filename, line, lineno } = e;
                                html = `
                     <style>
                     p > span {
                     font-family: monospace;
                     margin-left: 40px;
                     }
                     </style>
                     <div style="text-align: left">
                        <p><b>Exception args</b>: <span>${eargs.join('</br>')}</span></p>
                        <p><b>File</b>: <span>${filename}:${lineno}</span></p>
                        <p><b>Line</b>: <span>${line}</span></p>
                        <p><b>Type</b>: <span>${etype}</span></p>
                     </div>
                     
                     `;
                            }
                            else {
                                html = e;
                            }
                            MyAlert_1.default.big.error({ title: 'A python script threw an error', html });
                        }
                    }
                    resolve(messages[0]);
                });
            }
            catch (e) {
                const { what, where, cleanstack } = e.toObj();
                console.error(`${MyPyShell}.runAsync() error!`, { what, where, cleanstack });
                reject(what);
            }
            finally {
                console.groupEnd();
            }
        });
    }
}
exports.MyPyShell = MyPyShell;
MyPyShell.colorRegex = /.?\[\d{1,3}m/;
let isChecksModuleDone = NOPYTHON;
function isDone() {
    return isChecksModuleDone;
}
exports.isDone = isDone;
if (!NOPYTHON) {
    const Store = new (require("electron-store"))();
    console.log(`Store.path: `, Store.path);
    const PyChecksModule = new MyPyShell('-m checks', {
        args: [Store.path]
    });
    PyChecksModule.runAsync().then(msgs => {
        isChecksModuleDone = true;
        console.log('PyChecksModule msgs:', msgs);
    });
}
console.groupEnd();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUErQjtBQWUvQixPQUFPLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDcEMsK0NBQXNFO0FBRXRFLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3JELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUNySCx3Q0FBZ0M7QUFFaEMsMEJBQVcsQ0FBQyxjQUFjLEdBQUc7SUFDekIsVUFBVSxFQUFFLFVBQVU7SUFFdEIsYUFBYSxFQUFFLENBQUMsS0FBSyxDQUFDO0NBQ3pCLENBQUM7QUFFRixNQUFNLFNBQVUsU0FBUSwwQkFBVztJQUkvQixZQUFZLFVBQWtCLEVBQUUsT0FBaUI7UUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNoRSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsR0FBRyxTQUFTLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2RSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUM7UUFDakIsSUFBSSxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFO1lBQ3pDLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQztZQUNwQixJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQ2Y7UUFDRCxLQUFLLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBRXJCLENBQUM7SUFFRCxNQUFN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QUFJLENBQUMsQ0FBQTthQUNmO29CQUFTO2dCQUNOLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUV0QjtRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7QUFtRFksOEJBQVM7QUE1T04sb0JBQVUsR0FBRyxjQUFjLENBQUM7QUE0TGhELElBQUksa0JBQWtCLEdBQUcsUUFBUSxDQUFDO0FBRWxDLFNBQVMsTUFBTTtJQUVYLE9BQU8sa0JBQWtCLENBQUE7QUFDN0IsQ0FBQztBQTJDUSx3QkFBTTtBQXpDZixJQUFJLENBQUMsUUFBUSxFQUFFO0lBR1gsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUdoRCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsTUFBTSxjQUFjLEdBQUcsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFO1FBQzlDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7S0FDckIsQ0FBQyxDQUFDO0lBQ0gsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNsQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztDQUNOO0FBNEJELE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJvb2wgfSBmcm9tIFwiLi4vdXRpbFwiO1xuXG50eXBlIEtpbmQgPSAnb24nIHwgJ29mZidcblxuaW50ZXJmYWNlIElNc2cge1xuICAgIGtpbmQ6IEtpbmRcbiAgICBub3RlOiBudW1iZXJcbiAgICB0aW1lOiBudW1iZXJcbiAgICB0aW1lX2RlbHRhPzogbnVtYmVyIHwgbnVsbFxuICAgIGxhc3Rfb25tc2dfdGltZT86IG51bWJlciB8IG51bGxcbiAgICB2ZWxvY2l0eT86IG51bWJlciB8IG51bGxcbn1cblxudHlwZSBJUGFpcnMgPSBBcnJheTxbSU1zZywgSU1zZ10+XG5cbmNvbnNvbGUuZ3JvdXAoJ015UHlTaGVsbC5pbmRleC50cycpO1xuaW1wb3J0IHsgT3B0aW9ucywgUHl0aG9uU2hlbGwsIFB5dGhvblNoZWxsRXJyb3IgfSBmcm9tICdweXRob24tc2hlbGwnO1xuXG5jb25zdCBlbmdpbmVQYXRoID0gcGF0aC5qb2luKFNSQ19QQVRIX0FCUywgXCJlbmdpbmVcIik7XG5jb25zdCBweUV4ZWNQYXRoID0gcGF0aC5qb2luKGVuZ2luZVBhdGgsIHByb2Nlc3MucGxhdGZvcm0gPT09IFwibGludXhcIiA/IFwiZW52L2Jpbi9weXRob25cIiA6IFwiZW52L1NjcmlwdHMvcHl0aG9uLmV4ZVwiKTtcbmltcG9ydCBNeUFsZXJ0IGZyb20gJy4uL015QWxlcnQnXG5cblB5dGhvblNoZWxsLmRlZmF1bHRPcHRpb25zID0ge1xuICAgIHB5dGhvblBhdGg6IHB5RXhlY1BhdGgsXG4gICAgLy8gc2NyaXB0UGF0aCA6IGVuZ2luZVBhdGgsXG4gICAgcHl0aG9uT3B0aW9uczogWyctT08nXSxcbn07XG5cbmNsYXNzIE15UHlTaGVsbCBleHRlbmRzIFB5dGhvblNoZWxsIHtcbiAgICBzdGF0aWMgcmVhZG9ubHkgY29sb3JSZWdleCA9IC8uP1xcW1xcZHsxLDN9bS87XG4gICAgcHJpdmF0ZSByZWFkb25seSBqc29uOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3Ioc2NyaXB0UGF0aDogc3RyaW5nLCBvcHRpb25zPzogT3B0aW9ucykge1xuICAgICAgICBjb25zb2xlLmxvZyhgTXlQeVNoZWxsLmNvbnN0cnVjdG9yKHNjcmlwdFBhdGg6ICR7c2NyaXB0UGF0aH0pYCk7XG4gICAgICAgIFtzY3JpcHRQYXRoLCBvcHRpb25zXSA9IE15UHlTaGVsbC5oYW5kbGVBcmd1bWVudHMoc2NyaXB0UGF0aCwgb3B0aW9ucyk7XG4gICAgICAgIGxldCBqc29uID0gZmFsc2U7XG4gICAgICAgIGlmIChvcHRpb25zLm1vZGUgJiYgb3B0aW9ucy5tb2RlID09PSBcImpzb25cIikge1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMubW9kZTtcbiAgICAgICAgICAgIGpzb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKHNjcmlwdFBhdGgsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmpzb24gPSBqc29uO1xuXG4gICAgfVxuXG4gICAgc3RhdGljIGhhbmRsZUFyZ3VtZW50cyhzY3JpcHRQYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBPcHRpb25zKTogW3N0cmluZywgT3B0aW9uc10ge1xuICAgICAgICBpZiAoIWJvb2wob3B0aW9ucykpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7IGFyZ3M6IFtdLCBweXRob25PcHRpb25zOiBbJy1PTyddIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hcmdzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmFyZ3MgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnB5dGhvbk9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucHl0aG9uT3B0aW9ucyA9IFsnLU9PJ107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NyaXB0UGF0aC5zdGFydHNXaXRoKCctbScpKSB7XG4gICAgICAgICAgICBzY3JpcHRQYXRoID0gc2NyaXB0UGF0aC5zbGljZSgzKTtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5weXRob25PcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5weXRob25PcHRpb25zID0gWyctbSddXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5weXRob25PcHRpb25zLmluY2x1ZGVzKCctbScpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHl0aG9uT3B0aW9ucy5wdXNoKCctbScpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy5hcmdzID0gW1JPT1RfUEFUSF9BQlMsIC4uLm9wdGlvbnMuYXJnc107XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgb3B0aW9ucy5hcmdzLnB1c2goJ2RlYnVnJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERSWVJVTikge1xuICAgICAgICAgICAgb3B0aW9ucy5hcmdzLnB1c2goJ2RyeS1ydW4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3NjcmlwdFBhdGgsIG9wdGlvbnNdXG4gICAgfVxuXG4gICAgc3RhdGljIHJ1bihzY3JpcHRQYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBPcHRpb25zLCBjYWxsYmFjaz86IChlcnI/OiBQeXRob25TaGVsbEVycm9yLCBvdXRwdXQ/OiBhbnlbXSkgPT4gYW55KSB7XG4gICAgICAgIGNvbnNvbGUuZ3JvdXAoYE15UHlTaGVsbC5ydW4oc2NyaXB0UGF0aDogJHtzY3JpcHRQYXRofSlgKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFtzY3JpcHRQYXRoLCBvcHRpb25zXSA9IE15UHlTaGVsbC5oYW5kbGVBcmd1bWVudHMoc2NyaXB0UGF0aCwgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSAoZXJyOiBQeXRob25TaGVsbEVycm9yLCBvdXRwdXQ6IGFueVtdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQubWFwKG0gPT4gbS5yZW1vdmVBbGwoTXlQeVNoZWxsLmNvbG9yUmVnZXgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAlYyR7c2NyaXB0UGF0aH1cXG5gLCAnZm9udC13ZWlnaHQ6IGJvbGQnLCBvdXRwdXQuam9pbignXFxuJykpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHl0aG9uU2hlbGwucnVuKHNjcmlwdFBhdGgsIG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zdCB7IHdoYXQsIHdoZXJlLCBjbGVhbnN0YWNrIH0gPSBlLnRvT2JqKCk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdNeVB5U2hlbGwucnVuKCkgZXJyb3IhJywgeyB3aGF0LCB3aGVyZSwgY2xlYW5zdGFjayB9KTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgYXN5bmMgcnVuQXN5bmM8VD4oKTogUHJvbWlzZTxUTWFwPFQ+PlxuXG4gICAgYXN5bmMgcnVuQXN5bmMoKTogUHJvbWlzZTxUTWFwPGFueT4+IHtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmdyb3VwKGBNeVB5U2hlbGwucnVuQXN5bmMoKWApO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gW107XG4gICAgICAgICAgICAgICAgbGV0IHB1c2ggPSBERUJVRztcbiAgICAgICAgICAgICAgICBsZXQgd2FybiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGxldCBlcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGxldCBsb2cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uKCdtZXNzYWdlJywgbWVzc2FnZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnN0YXJ0c1dpdGgoJ1RPTk9ERScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pbmNsdWRlcygnV0FSTicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybiA9IG1lc3NhZ2UuZW5kc1dpdGgoJ1NUQVJUJylcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdFUlJPUicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBtZXNzYWdlLmVuZHNXaXRoKCdTVEFSVCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ0xPRycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nID0gbWVzc2FnZS5lbmRzV2l0aCgnU1RBUlQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLmluY2x1ZGVzKCdTRU5EJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5lbmRzV2l0aCgnU1RBUlQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXNoID0gREVCVUc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coeyBwdXNoLCB3YXJuLCBlcnJvciwgbWVzc2FnZSwgbWVzc2FnZXMsIFwidGhpcy5qc29uXCIgOiB0aGlzLmpzb24sIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHVzaCB8fCB3YXJuIHx8IGVycm9yIHx8IGxvZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuanNvbikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IEpTT04ucGFyc2UobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5yZW1vdmVBbGwoTXlQeVNoZWxsLmNvbG9yUmVnZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHB1c2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiByZXNvbHZlKG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2Fybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVE9OT0RFX1dBUk46YCwgbWVzc2FnZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFRPTk9ERV9FUlJPUjpgLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVE9OT0RFX0xPRzpgLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICB0aGlzLmVuZCgoZXJyLCBjb2RlLCBzaWduYWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvb2woZXJyb3JzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZSBvZiBlcnJvcnMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBodG1sO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVvZmUgPSB0eXBlb2YgZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mZSA9PT0gXCJzdHJpbmdcIikgeyAvLy8gdG9ub2RlLmVycm9yKG15dGIuZXhjX3N0cihlLCBsb2NhbHM9RmFsc2UpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sID0gZS5yZXBsYWNlQWxsKCdcXG4nLCAnPC9icj4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShlKSkgeyAvLy8gdG9ub2RlLmVycm9yKGUuYXJncylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCA9IGUuam9pbignPC9icj4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mZSA9PT0gXCJvYmplY3RcIikgeyAvLy8gdG9ub2RlLmVycm9yKG15dGIuZXhjX2RpY3QoZSwgbG9jYWxzPUZhbHNlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBlYXJncywgZXR5cGUsIGZpbGVuYW1lLCBsaW5lLCBsaW5lbm8gfSA9IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgPSBgXG4gICAgICAgICAgICAgICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgICAgICAgICAgICBwID4gc3BhbiB7XG4gICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xuICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDQwcHg7XG4gICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICA8L3N0eWxlPlxuICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cInRleHQtYWxpZ246IGxlZnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxiPkV4Y2VwdGlvbiBhcmdzPC9iPjogPHNwYW4+JHtlYXJncy5qb2luKCc8L2JyPicpfTwvc3Bhbj48L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD48Yj5GaWxlPC9iPjogPHNwYW4+JHtmaWxlbmFtZX06JHtsaW5lbm99PC9zcGFuPjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxiPkxpbmU8L2I+OiA8c3Bhbj4ke2xpbmV9PC9zcGFuPjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxiPlR5cGU8L2I+OiA8c3Bhbj4ke2V0eXBlfTwvc3Bhbj48L3A+XG4gICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgPSBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE15QWxlcnQuYmlnLmVycm9yKHsgdGl0bGU6ICdBIHB5dGhvbiBzY3JpcHQgdGhyZXcgYW4gZXJyb3InLCBodG1sIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qTXlBbGVydC5iaWcub25lQnV0dG9uKCdBIHB5dGhvbiBzY3JpcHQgdGhyZXcgYW4gZXJyb3IuIFBsZWFzZSB0YWtlIGEgc2NyZWVuc2hvdCB3aXRoIFBydFNjIGJ1dHRvbiBhbmQgc2F2ZSBpdC4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkqL1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlc1swXSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHdoYXQsIHdoZXJlLCBjbGVhbnN0YWNrIH0gPSBlLnRvT2JqKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHtNeVB5U2hlbGx9LnJ1bkFzeW5jKCkgZXJyb3IhYCwgeyB3aGF0LCB3aGVyZSwgY2xlYW5zdGFjayB9KTtcbiAgICAgICAgICAgICAgICByZWplY3Qod2hhdClcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxubGV0IGlzQ2hlY2tzTW9kdWxlRG9uZSA9IE5PUFlUSE9OOyAvLyBpZiBOT1BZVEhPTiA9PSB0cnVlLCB0aGVuIHdlJ3JlIGRvbmUuXG5cbmZ1bmN0aW9uIGlzRG9uZSgpOiBib29sZWFuIHtcbiAgICAvLyByZXR1cm4gaXNDaGVja3NEaXJzRG9uZSAmJiBpc0NoZWNrc0NmZ0RvbmVcbiAgICByZXR1cm4gaXNDaGVja3NNb2R1bGVEb25lXG59XG5cbmlmICghTk9QWVRIT04pIHtcblxuXG4gICAgY29uc3QgU3RvcmUgPSBuZXcgKHJlcXVpcmUoXCJlbGVjdHJvbi1zdG9yZVwiKSkoKTtcblxuXG4gICAgY29uc29sZS5sb2coYFN0b3JlLnBhdGg6IGAsIFN0b3JlLnBhdGgpO1xuICAgIGNvbnN0IFB5Q2hlY2tzTW9kdWxlID0gbmV3IE15UHlTaGVsbCgnLW0gY2hlY2tzJywge1xuICAgICAgICBhcmdzOiBbU3RvcmUucGF0aF1cbiAgICB9KTtcbiAgICBQeUNoZWNrc01vZHVsZS5ydW5Bc3luYygpLnRoZW4obXNncyA9PiB7XG4gICAgICAgIGlzQ2hlY2tzTW9kdWxlRG9uZSA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUubG9nKCdQeUNoZWNrc01vZHVsZSBtc2dzOicsIG1zZ3MpO1xuICAgIH0pO1xufVxuLypjb25zdCBQeUNoZWNrc0RpcnMgPSBuZXcgTXlQeVNoZWxsKCdjaGVja3MuZGlycycsIHtcbiBweXRob25PcHRpb25zIDogWyAnLW0nLCBdLFxuIGFyZ3MgOiBbIFJPT1RfUEFUSF9BQlMsICdkZWJ1ZycsICdkcnktcnVuJyBdXG4gfSk7XG4gUHlDaGVja3NEaXJzLnJ1bkFzeW5jKCkudGhlbihtc2dzID0+IHtcbiBpc0NoZWNrc0RpcnNEb25lID0gdHJ1ZTtcbiBjb25zb2xlLmxvZygnUHlDaGVja3NEaXJzIG1zZ3M6JywgbXNncy5qb2luKCdcXG4nKSk7XG4gfSk7XG4gXG4gLy8gTXlQeVNoZWxsLnJ1bihcIi1tIGNoZWNrcy5kaXJzXCIpO1xuIFxuIC8vICoqICBFbGVjdHJvbiBTdG9yZVxuIGNvbnN0IFN0b3JlID0gbmV3IChyZXF1aXJlKFwiZWxlY3Ryb24tc3RvcmVcIikpKCk7XG4gXG4gXG4gY29uc29sZS5sb2coYFN0b3JlLnBhdGg6IGAsIFN0b3JlLnBhdGgpO1xuIGNvbnN0IFB5Q2hlY2tzQ2ZnID0gbmV3IE15UHlTaGVsbCgnY2hlY2tzLmNvbmZpZycsIHtcbiBweXRob25PcHRpb25zIDogWyAnLW0nIF0sXG4gYXJncyA6IFsgUk9PVF9QQVRIX0FCUywgU3RvcmUucGF0aCwgJ2RlYnVnJywgJ2RyeS1ydW4nIF1cbiB9KTtcbiBQeUNoZWNrc0NmZy5ydW5Bc3luYygpLnRoZW4obXNncyA9PiB7XG4gaXNDaGVja3NDZmdEb25lID0gdHJ1ZTtcbiBjb25zb2xlLmxvZygnUHlDaGVja3NDZmcgbXNnczonLCBtc2dzLmpvaW4oJ1xcbicpKTtcbiB9KTtcbiAvLyBNeVB5U2hlbGwucnVuKFwiLW0gY2hlY2tzLmNvbmZpZ1wiLCB7IGFyZ3MgOiBbIFN0b3JlLnBhdGggXSB9KTsqL1xuXG5leHBvcnQgeyBpc0RvbmUsIE15UHlTaGVsbCwgSVBhaXJzLCBJTXNnLCBLaW5kIH07XG5jb25zb2xlLmdyb3VwRW5kKCk7XG4iXX0=