"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.group('MyPyShell.index.ts');
const python_shell_1 = require("python-shell");
const enginePath = path.join(SRC_PATH_ABS, "engine");
const pyExecPath = path.join(enginePath, process.platform === "linux" ? "env/bin/python" : "env/Scripts/python.exe");
python_shell_1.PythonShell.defaultOptions = {
    pythonPath: pyExecPath,
    pythonOptions: ['-OO'],
};
class MyPyShell extends python_shell_1.PythonShell {
    constructor(scriptPath, options) {
        super(scriptPath, options);
    }
    async runAsync() {
        return new Promise((resolve, reject) => {
            const messages = [];
            this.on('message', message => messages.push(message));
            this.end((err, code, signal) => {
                if (err)
                    reject(err);
                resolve(messages);
            });
        });
    }
    static run(scriptPath, options, callback) {
        if (!options)
            options = { args: [], pythonOptions: ['-OO'] };
        if (scriptPath.startsWith('-m')) {
            scriptPath = scriptPath.slice(3);
            if (!options.pythonOptions) {
                options.pythonOptions = ['-m'];
            }
            else {
                if (!options.pythonOptions.includes('-m')) {
                    options.pythonOptions.push('-m');
                }
            }
        }
        options.args = [ROOT_PATH_ABS, ...options.args];
        if (DEBUG)
            options.args.push('debug');
        if (DRYRUN)
            options.args.push('dry-run');
        if (!callback) {
            callback = (err, output) => {
                if (err) {
                    console.error(err);
                }
                if (output)
                    console.log(`%c${scriptPath}\n`, 'font-weight: bold', output.join('\n'));
            };
        }
        return python_shell_1.PythonShell.run(scriptPath, options, callback);
    }
}
let isChecksDirsDone = false;
exports.isChecksDirsDone = isChecksDirsDone;
let isChecksCfgDone = false;
exports.isChecksCfgDone = isChecksCfgDone;
const PyChecksDirs = new MyPyShell('checks.dirs', {
    pythonOptions: ['-m',],
    args: [ROOT_PATH_ABS, 'debug', 'dry-run']
});
PyChecksDirs.runAsync().then(msgs => {
    exports.isChecksDirsDone = isChecksDirsDone = true;
    console.log('PyChecksDirs msgs:', msgs);
});
const Store = new (require("electron-store"))();
console.log(`Store.path: `, Store.path);
const PyChecksCfg = new MyPyShell('checks.config', {
    pythonOptions: ['-m',],
    args: [ROOT_PATH_ABS, Store.path, 'debug', 'dry-run']
});
PyChecksCfg.runAsync().then(msgs => {
    exports.isChecksCfgDone = isChecksCfgDone = true;
    console.log('PyChecksCfg msgs:', msgs);
});
console.groupEnd();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNwQywrQ0FBc0U7QUFFdEUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDckQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBRXJILDBCQUFXLENBQUMsY0FBYyxHQUFHO0lBQ3pCLFVBQVUsRUFBRyxVQUFVO0lBRXZCLGFBQWEsRUFBRyxDQUFFLEtBQUssQ0FBRTtDQUM1QixDQUFDO0FBRUYsTUFBTSxTQUFVLFNBQVEsMEJBQVc7SUFDL0IsWUFBWSxVQUFrQixFQUFFLE9BQWlCO1FBQzdDLEtBQUssQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFL0IsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRO1FBQ1YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNuQyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFHdEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQzNCLElBQUssR0FBRztvQkFBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3ZCLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUNyQixDQUFD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QUMsSUFBSSxDQUFDLEVBQUU7SUFDL0IsMEJBQUEsZUFBZSxHQUFHLElBQUksQ0FBQztJQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQyxDQUFDO0FBSUgsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc29sZS5ncm91cCgnTXlQeVNoZWxsLmluZGV4LnRzJyk7XG5pbXBvcnQgeyBPcHRpb25zLCBQeXRob25TaGVsbCwgUHl0aG9uU2hlbGxFcnJvciB9IGZyb20gJ3B5dGhvbi1zaGVsbCc7XG5cbmNvbnN0IGVuZ2luZVBhdGggPSBwYXRoLmpvaW4oU1JDX1BBVEhfQUJTLCBcImVuZ2luZVwiKTtcbmNvbnN0IHB5RXhlY1BhdGggPSBwYXRoLmpvaW4oZW5naW5lUGF0aCwgcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gXCJsaW51eFwiID8gXCJlbnYvYmluL3B5dGhvblwiIDogXCJlbnYvU2NyaXB0cy9weXRob24uZXhlXCIpO1xuXG5QeXRob25TaGVsbC5kZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBweXRob25QYXRoIDogcHlFeGVjUGF0aCxcbiAgICAvLyBzY3JpcHRQYXRoIDogZW5naW5lUGF0aCxcbiAgICBweXRob25PcHRpb25zIDogWyAnLU9PJyBdLFxufTtcblxuY2xhc3MgTXlQeVNoZWxsIGV4dGVuZHMgUHl0aG9uU2hlbGwge1xuICAgIGNvbnN0cnVjdG9yKHNjcmlwdFBhdGg6IHN0cmluZywgb3B0aW9ucz86IE9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoc2NyaXB0UGF0aCwgb3B0aW9ucyk7XG4gICAgICAgIFxuICAgIH1cbiAgICBcbiAgICBhc3luYyBydW5Bc3luYygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5vbignbWVzc2FnZScsIG1lc3NhZ2UgPT4gbWVzc2FnZXMucHVzaChtZXNzYWdlKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5lbmQoKGVyciwgY29kZSwgc2lnbmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCBlcnIgKSByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2VzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgcnVuKHNjcmlwdFBhdGg6IHN0cmluZywgb3B0aW9ucz86IE9wdGlvbnMsIGNhbGxiYWNrPzogKGVycj86IFB5dGhvblNoZWxsRXJyb3IsIG91dHB1dD86IGFueVtdKSA9PiBhbnkpIHtcbiAgICAgICAgaWYgKCAhb3B0aW9ucyApIG9wdGlvbnMgPSB7IGFyZ3MgOiBbXSwgcHl0aG9uT3B0aW9ucyA6IFsgJy1PTycgXSB9O1xuICAgICAgICBpZiAoIHNjcmlwdFBhdGguc3RhcnRzV2l0aCgnLW0nKSApIHtcbiAgICAgICAgICAgIHNjcmlwdFBhdGggPSBzY3JpcHRQYXRoLnNsaWNlKDMpO1xuICAgICAgICAgICAgaWYgKCAhb3B0aW9ucy5weXRob25PcHRpb25zICkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucHl0aG9uT3B0aW9ucyA9IFsgJy1tJyBdXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICggIW9wdGlvbnMucHl0aG9uT3B0aW9ucy5pbmNsdWRlcygnLW0nKSApIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5weXRob25PcHRpb25zLnB1c2goJy1tJylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5hcmdzID0gWyBST09UX1BBVEhfQUJTLCAuLi5vcHRpb25zLmFyZ3MgXTtcbiAgICAgICAgaWYgKCBERUJVRyApXG4gICAgICAgICAgICBvcHRpb25zLmFyZ3MucHVzaCgnZGVidWcnKTtcbiAgICAgICAgaWYgKCBEUllSVU4gKVxuICAgICAgICAgICAgb3B0aW9ucy5hcmdzLnB1c2goJ2RyeS1ydW4nKTtcbiAgICAgICAgaWYgKCAhY2FsbGJhY2sgKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IChlcnI6IFB5dGhvblNoZWxsRXJyb3IsIG91dHB1dDogYW55W10pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIGVyciApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIG91dHB1dCApXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAlYyR7c2NyaXB0UGF0aH1cXG5gLCAnZm9udC13ZWlnaHQ6IGJvbGQnLCBvdXRwdXQuam9pbignXFxuJykpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFB5dGhvblNoZWxsLnJ1bihzY3JpcHRQYXRoLCBvcHRpb25zLCBjYWxsYmFjaylcbiAgICB9XG59XG5cblxubGV0IGlzQ2hlY2tzRGlyc0RvbmUgPSBmYWxzZTtcbmxldCBpc0NoZWNrc0NmZ0RvbmUgPSBmYWxzZTtcbmNvbnN0IFB5Q2hlY2tzRGlycyA9IG5ldyBNeVB5U2hlbGwoJ2NoZWNrcy5kaXJzJywge1xuICAgIHB5dGhvbk9wdGlvbnMgOiBbICctbScsIF0sXG4gICAgYXJncyA6IFsgUk9PVF9QQVRIX0FCUywgJ2RlYnVnJywgJ2RyeS1ydW4nIF1cbn0pO1xuUHlDaGVja3NEaXJzLnJ1bkFzeW5jKCkudGhlbihtc2dzID0+IHtcbiAgICBpc0NoZWNrc0RpcnNEb25lID0gdHJ1ZTtcbiAgICBjb25zb2xlLmxvZygnUHlDaGVja3NEaXJzIG1zZ3M6JywgbXNncyk7XG59KTtcblxuLy8gTXlQeVNoZWxsLnJ1bihcIi1tIGNoZWNrcy5kaXJzXCIpO1xuXG4vLyAqKiAgRWxlY3Ryb24gU3RvcmVcbmNvbnN0IFN0b3JlID0gbmV3IChyZXF1aXJlKFwiZWxlY3Ryb24tc3RvcmVcIikpKCk7XG5cblxuY29uc29sZS5sb2coYFN0b3JlLnBhdGg6IGAsIFN0b3JlLnBhdGgpO1xuY29uc3QgUHlDaGVja3NDZmcgPSBuZXcgTXlQeVNoZWxsKCdjaGVja3MuY29uZmlnJywge1xuICAgIHB5dGhvbk9wdGlvbnMgOiBbICctbScsIF0sXG4gICAgYXJncyA6IFsgUk9PVF9QQVRIX0FCUywgU3RvcmUucGF0aCwgJ2RlYnVnJywgJ2RyeS1ydW4nIF1cbn0pO1xuUHlDaGVja3NDZmcucnVuQXN5bmMoKS50aGVuKG1zZ3MgPT4ge1xuICAgIGlzQ2hlY2tzQ2ZnRG9uZSA9IHRydWU7XG4gICAgY29uc29sZS5sb2coJ1B5Q2hlY2tzQ2ZnIG1zZ3M6JywgbXNncyk7XG59KTtcbi8vIE15UHlTaGVsbC5ydW4oXCItbSBjaGVja3MuY29uZmlnXCIsIHsgYXJncyA6IFsgU3RvcmUucGF0aCBdIH0pO1xuXG5leHBvcnQgeyBpc0NoZWNrc0NmZ0RvbmUsIGlzQ2hlY2tzRGlyc0RvbmUgfTtcbmNvbnNvbGUuZ3JvdXBFbmQoKTtcbiJdfQ==