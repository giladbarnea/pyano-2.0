"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
console.group('MyPyShell.index.ts');
const python_shell_1 = require("python-shell");
const enginePath = path.join(SRC_PATH_ABS, "engine");
const pyExecPath = path.join(enginePath, process.platform === "linux" ? "env/bin/python" : "env/Scripts/python.exe");
python_shell_1.PythonShell.defaultOptions = {
    pythonPath: pyExecPath,
    pythonOptions: ['-OO'],
};
class MyPyShell extends python_shell_1.PythonShell {
    constructor(scriptPath, options) {
        super(scriptPath, options);
    }
    async runAsync() {
        return new Promise((resolve, reject) => {
            const messages = [];
            this.on('message', message => messages.push(message));
            this.end((err, code, signal) => {
                if (err)
                    reject(err);
                resolve(messages);
            });
        });
    }
    static run(scriptPath, options, callback) {
        if (!options)
            options = { args: [], pythonOptions: ['-OO'] };
        if (scriptPath.startsWith('-m')) {
            scriptPath = scriptPath.slice(3);
            if (!options.pythonOptions) {
                options.pythonOptions = ['-m'];
            }
            else {
                if (!options.pythonOptions.includes('-m')) {
                    options.pythonOptions.push('-m');
                }
            }
        }
        options.args = [ROOT_PATH_ABS, ...options.args];
        if (DEBUG)
            options.args.push('debug');
        if (DRYRUN)
            options.args.push('dry-run');
        if (!callback) {
            callback = (err, output) => {
                if (err) {
                    console.error(err);
                }
                if (output)
                    console.log(`%c${scriptPath}\n`, 'font-weight: bold', output.join('\n'));
            };
        }
        return python_shell_1.PythonShell.run(scriptPath, options, callback);
    }
}
MyPyShell.run("-m checks.dirs");
const Store = new (require("electron-store"))();
console.log(`Store.path: `, Store.path);
MyPyShell.run("-m checks.config", { args: [Store.path] });
console.log({ 'process.argv': process.argv });
console.groupEnd();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNwQywrQ0FBc0U7QUFFdEUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDckQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBRXJILDBCQUFXLENBQUMsY0FBYyxHQUFHO0lBQ3pCLFVBQVUsRUFBRyxVQUFVO0lBRXZCLGFBQWEsRUFBRyxDQUFFLEtBQUssQ0FBRTtDQUM1QixDQUFDO0FBRUYsTUFBTSxTQUFVLFNBQVEsMEJBQVc7SUFDL0IsWUFBWSxVQUFrQixFQUFFLE9BQWlCO1FBQzdDLEtBQUssQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFL0IsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRO1FBQ1YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNuQyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFHdEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQzNCLElBQUssR0FBRztvQkFBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3ZCLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUNyQixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBa0IsRUFBRSxPQUFpQixFQUFFLFFBQTBEO1FBQ3hHLElBQUssQ0FBQyxPQUFPO1lBQUcsT0FBTyxHQUFHLEVBQUUsSUFBSSxFQUFHLEVBQUUsRUFBRSxhQUFhLEVBQUcsQ0FBRSxLQUFLLENBQUUsRUFBRSxDQUFDO1FBQ25FLElBQUssVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRztZQUMvQixVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxJQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRztnQkFDMUIsT0FBTyxDQUFDLGFBQWEsR0FBRyxDQUFFLElBQUksQ0FBRSxDQUFBO2FBQ25DO2lCQUFNO2dCQUNILElBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRztvQkFDekMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7aUJBQ25DO2FBQ0o7U0FDSjtRQUNELE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBRSxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFFLENBQUM7UUFDbEQsSUFBSyxLQUFLO1lBQ04sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsSUFBSyxNQUFNO1lBQ1AsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakMsSUFBSyxDQUFDLFFBQVEsRUFBRztZQUNiLFFBQVEsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDdkIsSUFBSyxHQUFHLEVBQUc7b0JBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDdEI7Z0JBQ0QsSUFBSyxNQUFNO29CQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxVQUFVLElBQUksRUFBRSxtQkFBbUIsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7WUFDaEYsQ0FBQyxDQUFBO1NBQ0o7UUFDRCxPQUFPLDBCQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDekQsQ0FBQztDQUNKO0FBNkNELFNBQVMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUdoQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBRSxDQUFDO0FBS2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxTQUFTLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsSUFBSSxFQUFHLENBQUUsS0FBSyxDQUFDLElBQUksQ0FBRSxFQUFFLENBQUMsQ0FBQztBQUc3RCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsY0FBYyxFQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQy9DLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnNvbGUuZ3JvdXAoJ015UHlTaGVsbC5pbmRleC50cycpO1xuaW1wb3J0IHsgT3B0aW9ucywgUHl0aG9uU2hlbGwsIFB5dGhvblNoZWxsRXJyb3IgfSBmcm9tICdweXRob24tc2hlbGwnO1xuXG5jb25zdCBlbmdpbmVQYXRoID0gcGF0aC5qb2luKFNSQ19QQVRIX0FCUywgXCJlbmdpbmVcIik7XG5jb25zdCBweUV4ZWNQYXRoID0gcGF0aC5qb2luKGVuZ2luZVBhdGgsIHByb2Nlc3MucGxhdGZvcm0gPT09IFwibGludXhcIiA/IFwiZW52L2Jpbi9weXRob25cIiA6IFwiZW52L1NjcmlwdHMvcHl0aG9uLmV4ZVwiKTtcblxuUHl0aG9uU2hlbGwuZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgcHl0aG9uUGF0aCA6IHB5RXhlY1BhdGgsXG4gICAgLy8gc2NyaXB0UGF0aCA6IGVuZ2luZVBhdGgsXG4gICAgcHl0aG9uT3B0aW9ucyA6IFsgJy1PTycgXSxcbn07XG5cbmNsYXNzIE15UHlTaGVsbCBleHRlbmRzIFB5dGhvblNoZWxsIHtcbiAgICBjb25zdHJ1Y3RvcihzY3JpcHRQYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHNjcmlwdFBhdGgsIG9wdGlvbnMpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgcnVuQXN5bmMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMub24oJ21lc3NhZ2UnLCBtZXNzYWdlID0+IG1lc3NhZ2VzLnB1c2gobWVzc2FnZSkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZW5kKChlcnIsIGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICggZXJyICkgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlcylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgc3RhdGljIHJ1bihzY3JpcHRQYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBPcHRpb25zLCBjYWxsYmFjaz86IChlcnI/OiBQeXRob25TaGVsbEVycm9yLCBvdXRwdXQ/OiBhbnlbXSkgPT4gYW55KSB7XG4gICAgICAgIGlmICggIW9wdGlvbnMgKSBvcHRpb25zID0geyBhcmdzIDogW10sIHB5dGhvbk9wdGlvbnMgOiBbICctT08nIF0gfTtcbiAgICAgICAgaWYgKCBzY3JpcHRQYXRoLnN0YXJ0c1dpdGgoJy1tJykgKSB7XG4gICAgICAgICAgICBzY3JpcHRQYXRoID0gc2NyaXB0UGF0aC5zbGljZSgzKTtcbiAgICAgICAgICAgIGlmICggIW9wdGlvbnMucHl0aG9uT3B0aW9ucyApIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnB5dGhvbk9wdGlvbnMgPSBbICctbScgXVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoICFvcHRpb25zLnB5dGhvbk9wdGlvbnMuaW5jbHVkZXMoJy1tJykgKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHl0aG9uT3B0aW9ucy5wdXNoKCctbScpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuYXJncyA9IFsgUk9PVF9QQVRIX0FCUywgLi4ub3B0aW9ucy5hcmdzIF07XG4gICAgICAgIGlmICggREVCVUcgKVxuICAgICAgICAgICAgb3B0aW9ucy5hcmdzLnB1c2goJ2RlYnVnJyk7XG4gICAgICAgIGlmICggRFJZUlVOIClcbiAgICAgICAgICAgIG9wdGlvbnMuYXJncy5wdXNoKCdkcnktcnVuJyk7XG4gICAgICAgIGlmICggIWNhbGxiYWNrICkge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSAoZXJyLCBvdXRwdXQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIGVyciApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIG91dHB1dCApXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAlYyR7c2NyaXB0UGF0aH1cXG5gLCAnZm9udC13ZWlnaHQ6IGJvbGQnLCBvdXRwdXQuam9pbignXFxuJykpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFB5dGhvblNoZWxsLnJ1bihzY3JpcHRQYXRoLCBvcHRpb25zLCBjYWxsYmFjaylcbiAgICB9XG59XG5cblxuLypQeXRob25TaGVsbC5wcm90b3R5cGUucnVuQXN5bmMgPSBmdW5jdGlvbiAoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gY29uc3QgbWVzc2FnZXMgPSBbXTtcbiB0aGlzLm9uKCdtZXNzYWdlJywgbWVzc2FnZSA9PiBtZXNzYWdlcy5wdXNoKG1lc3NhZ2UpKTtcbiBcbiBcbiB0aGlzLmVuZCgoZXJyLCBjb2RlLCBzaWduYWwpID0+IHtcbiBpZiAoIGVyciApIHJlamVjdChlcnIpO1xuIHJlc29sdmUobWVzc2FnZXMpXG4gfSk7XG4gfSk7XG4gfTtcbiBQeXRob25TaGVsbC5teXJ1biA9IGZ1bmN0aW9uIChzY3JpcHRQYXRoOiBzdHJpbmcsIG9wdGlvbnMgPSB7IGFyZ3MgOiBbXSwgcHl0aG9uT3B0aW9ucyA6IFsgJy1PTycgXSB9LCBjYWxsYmFjaykge1xuIFxuIGlmICggc2NyaXB0UGF0aC5zdGFydHNXaXRoKCctbScpICkge1xuIHNjcmlwdFBhdGggPSBzY3JpcHRQYXRoLnNsaWNlKDMpO1xuIGlmICggIW9wdGlvbnMucHl0aG9uT3B0aW9ucyApIHtcbiBvcHRpb25zLnB5dGhvbk9wdGlvbnMgPSBbICctbScgXVxuIH0gZWxzZSB7XG4gaWYgKCAhb3B0aW9ucy5weXRob25PcHRpb25zLmluY2x1ZGVzKCctbScpICkge1xuIG9wdGlvbnMucHl0aG9uT3B0aW9ucy5wdXNoKCctbScpXG4gfVxuIH1cbiB9XG4gb3B0aW9ucy5hcmdzID0gWyBST09UX1BBVEhfQUJTLCAuLi5vcHRpb25zLmFyZ3MgXTtcbiBpZiAoIERFQlVHIClcbiBvcHRpb25zLmFyZ3MucHVzaCgnZGVidWcnKTtcbiBpZiAoIERSWVJVTiApXG4gb3B0aW9ucy5hcmdzLnB1c2goJ2RyeS1ydW4nKTtcbiBpZiAoICFjYWxsYmFjayApIHtcbiBjYWxsYmFjayA9IChlcnIsIG91dHB1dCkgPT4ge1xuIGlmICggZXJyICkge1xuIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiB9XG4gaWYgKCBvdXRwdXQgKVxuIGNvbnNvbGUubG9nKGAlYyR7c2NyaXB0UGF0aH1cXG5gLCAnZm9udC13ZWlnaHQ6IGJvbGQnLCBvdXRwdXQuam9pbignXFxuJykpXG4gfVxuIH1cbiByZXR1cm4gUHl0aG9uU2hlbGwucnVuKHNjcmlwdFBhdGgsIG9wdGlvbnMsIGNhbGxiYWNrKVxuIH07Ki9cblxuXG5NeVB5U2hlbGwucnVuKFwiLW0gY2hlY2tzLmRpcnNcIik7XG5cbi8vICoqICBFbGVjdHJvbiBTdG9yZVxuY29uc3QgU3RvcmUgPSBuZXcgKHJlcXVpcmUoXCJlbGVjdHJvbi1zdG9yZVwiKSkoKTtcblxuLy8gY29uc3QgTXlTdG9yZSA9IHJlcXVpcmUoXCIuL015U3RvcmVcIik7XG5cbi8vIGNvbnN0IEVTdG9yZSA9IG5ldyBNeVN0b3JlLk15U3RvcmUodHJ1ZSk7XG5jb25zb2xlLmxvZyhgU3RvcmUucGF0aDogYCwgU3RvcmUucGF0aCk7XG5NeVB5U2hlbGwucnVuKFwiLW0gY2hlY2tzLmNvbmZpZ1wiLCB7IGFyZ3MgOiBbIFN0b3JlLnBhdGggXSB9KTtcblxuXG5jb25zb2xlLmxvZyh7ICdwcm9jZXNzLmFyZ3YnIDogcHJvY2Vzcy5hcmd2IH0pO1xuY29uc29sZS5ncm91cEVuZCgpO1xuIl19