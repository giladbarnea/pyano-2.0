// This file is required by the index.html file and will
// be executed in the renderer process for that window.
// No Node.js APIs are available in this process because
// `nodeIntegration` is turned off. Use `preload.js` to
// selectively enable features needed in the rendering
// process.
console.group('renderer.ts');
const { remote } = require('electron');
const argvars = remote.process.argv.slice(2).map(s => s.toLowerCase());
const DEBUG = argvars.includes('debug');
const DRYRUN = argvars.includes('dry-run');
// @ts-ignore
const path = require('path');
const fs = require('fs');
// **  PythonShell
const { PythonShell } = require("python-shell");
const enginePath = path.join(__dirname, "src", "engine");
const pyExecPath = path.join(enginePath, process.platform === "linux" ? "env/bin/python" : "env/Scripts/python.exe");
/*const { spawnSync } = require('child_process');
 const { output } = spawnSync(PythonShell.getPythonPath(), [ '-c print("hi")' ]);
 if ( output === null ) {
 // TODO: test
 console.error(`Spawning a PythonShell.getPythonPath() failed`);
 process.exit(0);
 }*/
PythonShell.defaultOptions = {
    pythonPath: pyExecPath,
    // scriptPath : enginePath,
    pythonOptions: ['-OO'],
};
PythonShell.prototype.runAsync = function () {
    return new Promise((resolve, reject) => {
        const messages = [];
        this.on('message', message => messages.push(message));
        this.end((err, code, signal) => {
            if (err)
                reject(err);
            resolve(messages);
        });
    });
};
PythonShell.myrun = function (scriptPath, options = { args: [], pythonOptions: ['-OO'] }, callback) {
    if (scriptPath.startsWith('-m')) {
        scriptPath = scriptPath.slice(3);
        if (!options.pythonOptions) {
            options.pythonOptions = ['-m'];
        }
        else {
            if (!options.pythonOptions.includes('-m')) {
                options.pythonOptions.push('-m');
            }
        }
    }
    options.args = [__dirname, ...options.args];
    if (DEBUG)
        options.args.push('debug');
    if (DRYRUN)
        options.args.push('dry-run');
    if (!callback) {
        callback = (err, output) => {
            if (err) {
                console.error(err);
            }
            if (output)
                console.log(`%c${scriptPath}\n`, 'font-weight: bold', output.join('\n'));
        };
    }
    return PythonShell.run(scriptPath, options, callback);
};
PythonShell.myrun("-m checks.dirs");
// **  Electron Store
const Store = new (require("electron-store"))();
console.log(`Store.path: ${Store.path}`);
PythonShell.myrun("-m checks.config", { args: [Store.path] });
let last_page = Store.get('last_page');
console.log(`last_page: ${last_page}`);
module.exports = Store;
console.groupEnd();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZW5kZXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3REFBd0Q7QUFDeEQsdURBQXVEO0FBQ3ZELHdEQUF3RDtBQUN4RCx1REFBdUQ7QUFDdkQsc0RBQXNEO0FBQ3RELFdBQVc7QUFHWCxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzdCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDdkMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZFLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDeEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMzQyxhQUFhO0FBQ2IsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV6QixrQkFBa0I7QUFDbEIsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNoRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDekQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3JI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akUsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUd2QyxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN2QixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgcmVxdWlyZWQgYnkgdGhlIGluZGV4Lmh0bWwgZmlsZSBhbmQgd2lsbFxuLy8gYmUgZXhlY3V0ZWQgaW4gdGhlIHJlbmRlcmVyIHByb2Nlc3MgZm9yIHRoYXQgd2luZG93LlxuLy8gTm8gTm9kZS5qcyBBUElzIGFyZSBhdmFpbGFibGUgaW4gdGhpcyBwcm9jZXNzIGJlY2F1c2Vcbi8vIGBub2RlSW50ZWdyYXRpb25gIGlzIHR1cm5lZCBvZmYuIFVzZSBgcHJlbG9hZC5qc2AgdG9cbi8vIHNlbGVjdGl2ZWx5IGVuYWJsZSBmZWF0dXJlcyBuZWVkZWQgaW4gdGhlIHJlbmRlcmluZ1xuLy8gcHJvY2Vzcy5cblxuXG5jb25zb2xlLmdyb3VwKCdyZW5kZXJlci50cycpO1xuY29uc3QgeyByZW1vdGUgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJyk7XG5jb25zdCBhcmd2YXJzID0gcmVtb3RlLnByb2Nlc3MuYXJndi5zbGljZSgyKS5tYXAocyA9PiBzLnRvTG93ZXJDYXNlKCkpO1xuY29uc3QgREVCVUcgPSBhcmd2YXJzLmluY2x1ZGVzKCdkZWJ1ZycpO1xuY29uc3QgRFJZUlVOID0gYXJndmFycy5pbmNsdWRlcygnZHJ5LXJ1bicpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcblxuLy8gKiogIFB5dGhvblNoZWxsXG5jb25zdCB7IFB5dGhvblNoZWxsIH0gPSByZXF1aXJlKFwicHl0aG9uLXNoZWxsXCIpO1xuY29uc3QgZW5naW5lUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsIFwic3JjXCIsIFwiZW5naW5lXCIpO1xuY29uc3QgcHlFeGVjUGF0aCA9IHBhdGguam9pbihlbmdpbmVQYXRoLCBwcm9jZXNzLnBsYXRmb3JtID09PSBcImxpbnV4XCIgPyBcImVudi9iaW4vcHl0aG9uXCIgOiBcImVudi9TY3JpcHRzL3B5dGhvbi5leGVcIik7XG4vKmNvbnN0IHsgc3Bhd25TeW5jIH0gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG4gY29uc3QgeyBvdXRwdXQgfSA9IHNwYXduU3luYyhQeXRob25TaGVsbC5nZXRQeXRob25QYXRoKCksIFsgJy1jIHByaW50KFwiaGlcIiknIF0pO1xuIGlmICggb3V0cHV0ID09PSBudWxsICkge1xuIC8vIFRPRE86IHRlc3RcbiBjb25zb2xlLmVycm9yKGBTcGF3bmluZyBhIFB5dGhvblNoZWxsLmdldFB5dGhvblBhdGgoKSBmYWlsZWRgKTtcbiBwcm9jZXNzLmV4aXQoMCk7XG4gfSovXG5QeXRob25TaGVsbC5kZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBweXRob25QYXRoIDogcHlFeGVjUGF0aCxcbiAgICAvLyBzY3JpcHRQYXRoIDogZW5naW5lUGF0aCxcbiAgICBweXRob25PcHRpb25zIDogWyAnLU9PJyBdLFxufTtcblxuXG5QeXRob25TaGVsbC5wcm90b3R5cGUucnVuQXN5bmMgPSBmdW5jdGlvbiAoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gW107XG4gICAgICAgIHRoaXMub24oJ21lc3NhZ2UnLCBtZXNzYWdlID0+IG1lc3NhZ2VzLnB1c2gobWVzc2FnZSkpO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZW5kKChlcnIsIGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgICAgICAgaWYgKCBlcnIgKSByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZXMpXG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblB5dGhvblNoZWxsLm15cnVuID0gZnVuY3Rpb24gKHNjcmlwdFBhdGg6IHN0cmluZywgb3B0aW9ucyA9IHsgYXJncyA6IFtdLCBweXRob25PcHRpb25zIDogWyAnLU9PJyBdIH0sIGNhbGxiYWNrKSB7XG4gICAgXG4gICAgaWYgKCBzY3JpcHRQYXRoLnN0YXJ0c1dpdGgoJy1tJykgKSB7XG4gICAgICAgIHNjcmlwdFBhdGggPSBzY3JpcHRQYXRoLnNsaWNlKDMpO1xuICAgICAgICBpZiAoICFvcHRpb25zLnB5dGhvbk9wdGlvbnMgKSB7XG4gICAgICAgICAgICBvcHRpb25zLnB5dGhvbk9wdGlvbnMgPSBbICctbScgXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCAhb3B0aW9ucy5weXRob25PcHRpb25zLmluY2x1ZGVzKCctbScpICkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucHl0aG9uT3B0aW9ucy5wdXNoKCctbScpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgb3B0aW9ucy5hcmdzID0gWyBfX2Rpcm5hbWUsIC4uLm9wdGlvbnMuYXJncyBdO1xuICAgIGlmICggREVCVUcgKVxuICAgICAgICBvcHRpb25zLmFyZ3MucHVzaCgnZGVidWcnKTtcbiAgICBpZiAoIERSWVJVTiApXG4gICAgICAgIG9wdGlvbnMuYXJncy5wdXNoKCdkcnktcnVuJyk7XG4gICAgaWYgKCAhY2FsbGJhY2sgKSB7XG4gICAgICAgIGNhbGxiYWNrID0gKGVyciwgb3V0cHV0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIGVyciApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIG91dHB1dCApXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYCVjJHtzY3JpcHRQYXRofVxcbmAsICdmb250LXdlaWdodDogYm9sZCcsIG91dHB1dC5qb2luKCdcXG4nKSlcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gUHl0aG9uU2hlbGwucnVuKHNjcmlwdFBhdGgsIG9wdGlvbnMsIGNhbGxiYWNrKVxufTtcblxuXG5QeXRob25TaGVsbC5teXJ1bihcIi1tIGNoZWNrcy5kaXJzXCIpO1xuLy8gKiogIEVsZWN0cm9uIFN0b3JlXG5jb25zdCBTdG9yZSA9IG5ldyAocmVxdWlyZShcImVsZWN0cm9uLXN0b3JlXCIpKSgpO1xuY29uc29sZS5sb2coYFN0b3JlLnBhdGg6ICR7U3RvcmUucGF0aH1gKTtcblB5dGhvblNoZWxsLm15cnVuKFwiLW0gY2hlY2tzLmNvbmZpZ1wiLCB7IGFyZ3MgOiBbIFN0b3JlLnBhdGggXSB9KTtcblxuXG5sZXQgbGFzdF9wYWdlID0gU3RvcmUuZ2V0KCdsYXN0X3BhZ2UnKTtcbmNvbnNvbGUubG9nKGBsYXN0X3BhZ2U6ICR7bGFzdF9wYWdlfWApO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gU3RvcmU7XG5jb25zb2xlLmdyb3VwRW5kKCk7XG4iXX0=