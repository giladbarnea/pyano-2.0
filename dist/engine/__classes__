import re
from typing import Dict, List, Literal, Union, Tuple
from collections import OrderedDict
from copy import deepcopy

from common import tonode

CHORD_THRESHOLD = 0.05




# logger = Logger('classes')


class Message:
    def __init__(self, line: str, last_onmsg_time: float = None):
        # "1549189615.55545  note=72 velocity=65 off"
        regexp = r'^\d{10}[\.]?\d{0,5}[ \t]note=\d{1,3}[ \t]velocity=\d{1,3}[ \t](on|off)\n?$'
        match = re.fullmatch(regexp, line)
        # if not match:
        #     logger.log_thin(dict(line=line, match=match, regexp=regexp), title="Message.__init__ no regex match")
        kind: str
        time, note, velocity, kind = line.split('\t')
        self.time = round(float(time), 5)
        self.note = int(note[note.index("=") + 1:])
        self.velocity = int(velocity[velocity.index("=") + 1:])
        self.kind: Kind = kind.strip()

        # self.last_onmsg_time = last_onmsg_time

        if last_onmsg_time:
            self.time_delta = round(self.time - last_onmsg_time, 5)
            self.last_onmsg_time = round(last_onmsg_time, 5)
        else:
            self.time_delta = None
            self.last_onmsg_time = None

    def __str__(self) -> str:
        return f'time: {self.time}  |  note: {self.note}  |  velocity: {self.velocity}  |  time_delta: {self.time_delta}  |  kind: {self.kind}'

    def __repr__(self) -> str:
        return self.__str__()

    def __eq__(self, o) -> bool:
        try:
            most_attrs_equal = (o.time == self.time
                                and o.note == self.note
                                and o.velocity == self.velocity
                                and o.kind == self.kind
                                and o.last_onmsg_time == self.last_onmsg_time)
            if o.time_delta is None or self.time_delta is None:
                return most_attrs_equal and o.time_delta == self.time_delta
            else:
                return most_attrs_equal and round(o.time_delta, 5) == round(self.time_delta, 5)
        except AttributeError:
            return False

    """@staticmethod
    def get_on_off_pairs(on_msgs: List['Message'], off_msgs: List['Message']) -> List[Tuple['Message', 'Message']]:
        pairs = []
        off_msgs_C = off_msgs[:]
        for on_msg in on_msgs:
            matching_off_msg = next((off_msg for off_msg in off_msgs_C
                                     if (off_msg.note == on_msg.note
                                         and off_msg.time > on_msg.time)),
                                    None)
            if matching_off_msg is not None:
                off_msgs_C.remove(matching_off_msg)
                pairs.append((on_msg, matching_off_msg))
        return pairs"""

    """@staticmethod
    def split_base_to_on_off(msgs: Union[List['Message'], Messages]) -> Tuple[List['Message'], List['Message']]:
        # TODO: should re-set last_onmsg_time?
        on_msgs = []
        off_msgs = []
        for m in msgs:
            if m.kind == 'on':
                on_msgs.append(m)
            else:
                off_msgs.append(m)
        return on_msgs, off_msgs"""

    @staticmethod
    def _raise_if_bad_file(file_path: str):
        import os
        if not os.path.isabs(file_path):
            raise FileNotFoundError(f"Not ABS path: {file_path}")
        if not os.path.isfile(file_path):
            raise FileNotFoundError(f"Not isfile(): {file_path}")
        if os.path.splitext(file_path)[1] != ".txt":
            raise ValueError(f"BAD extension, needs .txt: {file_path}")
        # if os.path.getsize(file_path) == 0:

    #     raise ValueError(f"File empty! file_path: {file_path}")

    """@staticmethod
    def init(*,
             time: float,
             note: int,
             velocity: int = None,
             kind: Kind,
             last_onmsg_time: float = None
             ) -> 'Message':
        if velocity is None:
            if kind == 'off':
                velocity = 999
            else:
                velocity = 100
        line = f'{float(time)}\tnote={note}\tvelocity={velocity}\t{kind}'
        return Message(line, last_onmsg_time)"""

    """@staticmethod
    def init_many(*msgs: dict) -> List['Message']:
        constructed = []
        for i, m in enumerate(msgs):
            if 'last_onmsg_time' not in m:
                if i != 0:
                    m.update(last_onmsg_time=msgs[i - 1]['time'])
                else:
                    m.update(last_onmsg_time=None)
            if 'velocity' not in m:
                if m['kind'] == 'off':
                    m.update(velocity=999)
                else:
                    m.update(velocity=100)
            constructed.append(Message.init(**m))
        return constructed"""

    """def to_line(self):
        s = f'{self.time}\tnote={self.note}\tvelocity={self.velocity}\t{self.kind}\n'
        return s"""

    """def to_dict(self) -> dict:
        return dict(time=self.time,
                    note=self.note,
                    time_delta=self.time_delta,
                    )"""

    @staticmethod
    def construct_many(lines: List[str]) -> List['Message']:
        container = [Message(lines[0])]
        for i, line in enumerate(lines[1:]):
            last_onmsg_time = container[i].time
            container.append(Message(line, last_onmsg_time))
        return container

    """@staticmethod
    def construct_many_from_file(file_path: str) -> List['Message']:
        # Message._raise_if_bad_file(file_path)
        with open(file_path, mode="r") as f:
            messages = Message.construct_many(f.readlines())
        return messages"""

    '''@staticmethod
    def get_chords(base_messages: List['Message']) -> Dict[int, List[int]]:
        """Handles base messages (same output for normalized / non-normalized)
        Warns node if passed only on messages but handles the same (same output for base messages)
        """

        def _open_new_chord(_root, _members):
            chords[_root] = _members
            root_isopen_map[_root] = True

        if all((m.kind == 'on' for m in base_messages)):
            tonode.warn(
                f'get_chords() got base_messages that only has on messages, len(base_messages): {len(base_messages)}')

        chords = OrderedDict()
        any_roots_open = False
        root_isopen_map = {}
        on_indices = []
        for i, message in enumerate(base_messages):
            if message.kind == "off" and any_roots_open:
                j = i - 1
                while j >= 0:
                    if base_messages[j].kind == 'on' and base_messages[j].note == message.note:
                        for root in reversed(chords):
                            if root == j:
                                root_isopen_map[root] = False
                                break
                    j -= 1
                any_roots_open = False

                continue
            on_indices.append(i)
            if message.time_delta is None:
                continue
            is_chord_with_prev = message.time_delta <= CHORD_THRESHOLD
            if is_chord_with_prev:
                any_roots_open = True
                last_on_index = on_indices[:-1][-1]
                if not chords:
                    _open_new_chord(last_on_index, [i])
                    continue

                last_root: int = next(reversed(chords))
                last_members: List[int] = chords[last_root]

                if last_root == last_on_index or last_on_index in last_members:
                    if root_isopen_map.get(last_root):
                        # last note was a chord root, or a part of an existing chord. append
                        chords[last_root].append(i)
                    else:
                        members = chords[last_root]
                        newroot, *newmembers = members + [i]
                        _open_new_chord(newroot, newmembers)
                else:
                    # last note not in chords at all. create a new chord.
                    _open_new_chord(last_on_index, [i])

        return chords'''

    @staticmethod
    def normalize_chords_in_file(file_path: str) -> List['Message']:
        """Doesnt change ref."""
        msgs = Message.construct_many_from_file(file_path)
        chords = Message.get_chords(msgs)
        normalized_messages, is_normalized = Message.normalize_chords(msgs, chords, True)

        if not is_normalized:
            import settings
            if settings.DRYRUN:
                from common import dbg
                dbg.debug(
                    f'Message.normalize_chords_in_file({file_path}), DRYRUN. NOT writing to file. Returning normalized_messages')
                return normalized_messages
            with open(file_path, mode="w") as f:
                for msg in normalized_messages:
                    msg_line = msg.to_line()
                    f.write(msg_line)

        return normalized_messages

    '''@staticmethod
    def normalize_chords(base_messages: List['Message'], chords: Dict[int, List[int]], copy: bool = True) -> Tuple[
        List['Message'], bool]:
        """Doesnt change ref."""
        is_normalized = True
        base_msgs_C = deepcopy(base_messages) if copy else base_messages
        msgs_len = len(base_msgs_C)
        for root, rest in chords.items():
            """Overwrite chord messages so they are sorted by note, all timed according to lowest pitch note, and share the time delta and preceding message time data of the first-played note"""
            chord_indices: List[int] = [root, *rest]
            if msgs_len <= chord_indices[-1]:
                return base_msgs_C, is_normalized

            chord_messages = [base_msgs_C[i] for i in chord_indices]
            sorted_chord_messages = sorted(deepcopy(chord_messages), key=lambda m: m.note)
            already_sorted = chord_messages == sorted_chord_messages
            if already_sorted:
                continue

            # not sorted
            is_normalized = False
            for i, msg_i in enumerate(chord_indices):
                base_msgs_C[msg_i].note = sorted_chord_messages[i].note
                base_msgs_C[msg_i].velocity = sorted_chord_messages[i].velocity
        return base_msgs_C, is_normalized'''

    @staticmethod
    def transform_to_tempo(on_msgs, actual_tempo: float) -> List['Message']:
        dectempo = actual_tempo / 100
        on_msgs_C = deepcopy(on_msgs)
        for i, msg in enumerate(on_msgs_C):
            if msg.time_delta is None:
                continue
            if msg.time_delta > CHORD_THRESHOLD:  # don't change chorded notes time delta
                msg.time_delta *= dectempo
            msg.time = round(on_msgs_C[i - 1].time + msg.time_delta, 5)
            msg.last_onmsg_time = on_msgs_C[i - 1].time
        return on_msgs_C


class Hit:
    def __init__(self, msg: Message, truth: Message, allowed_rhythm_deviation: int):
        if not (0 <= allowed_rhythm_deviation <= 100):
            # entry = logger.log(
            #     dict(self=self, msg=msg, truth=truth,
            #          allowed_rhythm_deviation=allowed_rhythm_deviation),
            #     title="Hit constructor ValueError bad allowed_rhythm_deviation")
            # raise ValueError(
            #     f"Hit constructor got bad allowed_rhythm_deviation, got: {allowed_rhythm_deviation}. see classes.log, entry: {entry}")
            raise ValueError(
                f"Hit constructor got bad allowed_rhythm_deviation, got: {allowed_rhythm_deviation}")
        self.is_accuracy_correct = msg.note == truth.note

        self._rhythm_deviation = Hit._get_rhythm_deviation(msg.time_delta, truth.time_delta)
        """if msg.time_delta and truth.time_delta:
            if truth.time_delta <= 0.05 and msg.time_delta <= 0.05:
                # if chord - as long as tight enough, counts as no deviation
                self._rhythm_deviation = 0
            else:
                # (0.3 / 0.25) x 100 = 1.2 x 100 = 120
                ratio = (msg.time_delta / truth.time_delta) * 100
                # abs(100 - 120) = 20
                self._rhythm_deviation = abs(100 - ratio)
        else:  # some time_delta is None
            self._rhythm_deviation = 0"""

        if self.is_accuracy_correct:  # interesting only if got accuracy right
            self._is_rhythm_correct = self._rhythm_deviation < allowed_rhythm_deviation
        else:  # rhythm isn't checked anyway if accuracy isn't right
            self._is_rhythm_correct = True

    def to_dict(self) -> dict:
        return dict(
            is_accuracy_correct=self.is_accuracy_correct,
            rhythm_deviation=self._rhythm_deviation,
            is_rhythm_correct=self._is_rhythm_correct)

    @staticmethod
    def _get_rhythm_deviation(msg_time_delta: float, truth_time_delta: float) -> float:
        if msg_time_delta is None or truth_time_delta is None:
            return 0  # some time_delta is None

        if truth_time_delta <= CHORD_THRESHOLD and msg_time_delta <= CHORD_THRESHOLD:
            # if chord - as long as tight enough, counts as no deviation
            return 0

        # (0.3 / 0.25) x 100 = 1.2 x 100 = 120
        #  OR
        # (0.2 / 0.25) x 100 = 0.8 x 100 = 80
        deltas_ratio = (msg_time_delta / truth_time_delta) * 100
        # abs(100 - 120) = 20.0 || OR || abs(100 - 80) = 20.0
        return abs(100 - deltas_ratio)

    def are_accuracy_and_rhythm_correct(self) -> bool:
        return self.is_accuracy_correct and self._is_rhythm_correct

    def get_mistake_kind(self) -> str or None:
        if not self.is_accuracy_correct:
            return "accuracy"
        if not self._is_rhythm_correct:
            return "rhythm"
        return None

    def __str__(self) -> str:
        return f'is_accuracy_correct: {self.is_accuracy_correct} | _rhythm_deviation: {self._rhythm_deviation} | _is_rhythm_correct: {self._is_rhythm_correct}'

    def __repr__(self) -> str:
        return self.__str__()


"""class HitOLD:
    def __init__(self, msg: Message, truth: Message, allowed_rhythm_deviation: int, tempo_floor: int,
                 tempo_estimation: int):
        if allowed_rhythm_deviation < 0 or allowed_rhythm_deviation > 100:
            entry = logger.log(
                dict(self=self, msg=msg, truth=truth,
                     allowed_rhythm_deviation=allowed_rhythm_deviation,
                     tempo_floor=tempo_floor, tempo_estimation=tempo_estimation),
                title="Hit constructor ValueError bad allowed_rhythm_deviation")
            raise ValueError(
                f"Hit constructor got bad allowed_rhythm_deviation, got: {allowed_rhythm_deviation}. see classes.log, entry: {entry}")

        if tempo_floor < 0 or tempo_floor > 150:
            entry = logger.log(
                dict(self=self, msg=msg, truth=truth,
                     allowed_rhythm_deviation=allowed_rhythm_deviation,
                     tempo_floor=tempo_floor, tempo_estimation=tempo_estimation),
                title="Hit constructor ValueError bad tempo_floor")
            raise ValueError(
                f"Hit constructor got tempo_floor not between 0 and 100, got: {tempo_floor}. see classes.log, entry: {entry}")

        self.is_accuracy_correct = msg.note == truth.note
        self._check_rhythm_and_tempo(msg.time_delta, truth.time_delta, allowed_rhythm_deviation,
                                     tempo_floor, tempo_estimation)

        self._is_tempo_correct = "IS IT??"
        self._rhythm_deviation = Hit._get_rhythm_deviation(msg.time_delta, truth.time_delta)

        if self.is_accuracy_correct:  # interesting only if got accuracy right
            self._is_rhythm_correct = self._rhythm_deviation < allowed_rhythm_deviation
        else:  # rhythm isn't checked anyway if accuracy isn't right
            self._is_rhythm_correct = True

    def _check_rhythm_and_tempo(self, msg_time_delta, truth_time_delta, allowed_rhythm_deviation,
                                tempo_floor, tempo_estimation):
        no_preceding_msg = msg_time_delta is None or truth_time_delta is None
        partof_chord = truth_time_delta <= 0.02 and msg_time_delta <= 0.02
        # TODO: Message.get_chords() uses <= 0.05!!
        if no_preceding_msg or partof_chord:
            self._rhythm_deviation = 0
            self._is_rhythm_correct = True
            self._is_tempo_correct = True
            return

        ####
        # Reaching here means subject played slower or equal to truth
        # Assume tempo_floor = 75, tempo_estimation = 80, allowed_rhythm_deviation = 25, truth_time_delta = 2
        # Therefore dectempo_floor = 0.75
        ####
        dectempo_floor = tempo_floor / 100

        # 2 / 0.75 = 2.666
        slowest_time_delta_allowed = truth_time_delta / dectempo_floor
        # 25 / 0.75 = 33.333
        if msg_time_delta > slowest_time_delta_allowed:
            # Assume msg_time_delta = 3.5
            # Therefore rhythm_deviation = 31.25
            largest_rhythm_deviation_allowed = allowed_rhythm_deviation / dectempo_floor
            self._rhythm_deviation = Hit._get_rhythm_deviation(msg_time_delta, slowest_time_delta_allowed)
            self._is_rhythm_correct = self._rhythm_deviation < largest_rhythm_deviation_allowed
            self._is_tempo_correct = self._is_rhythm_correct
            return

        # msg_time_delta is lower/equal to slowest_time_delta_allowed
        if msg_time_delta < truth_time_delta:
            # Assume msg_time_delta = 1.6
            # Therefore rhythm_deviation = 20.0
            self._rhythm_deviation = Hit._get_rhythm_deviation(msg_time_delta, truth_time_delta)
            self._is_rhythm_correct = self._rhythm_deviation < allowed_rhythm_deviation
            self._is_tempo_correct = self._is_rhythm_correct
            return

        # msg_time_delta is between truth_time_delta and slowest_time_delta_allowed (can be equal)
        self._is_tempo_correct = True
        if msg_time_delta > truth_time_delta:
            # Assume msg_time_delta = 2.5

            self._rhythm_deviation = Hit._get_rhythm_deviation(msg_time_delta, truth_time_delta)

        # 2.5 x 0.75 = 1.875
        # [OR]
        # 3 x 0.75 = 2.25
        # [OR]
        # 2 x 0.75 = 1.5
        # If subject played at the slowest valid tempo, this is the "calibrated"
        # delta that he would have had he played at 100% tempo
        tempo_calibrated_msg_time_delta = msg_time_delta * dectempo_floor

        # (0.3 / 0.25) x 100 = 1.2 x 100 = 120
        # [OR]
        # (0.2 / 0.25) x 100 = 0.8 x 100 = 80
        deltas_ratio = round5((msg_time_delta / truth_time_delta) * 100)
        # abs(100 - 120) = 20 [OR] abs(100 - 80) = 20
        rhythm_deviation = round5(abs(100 - deltas_ratio))

    @staticmethod
    def _get_rhythm_deviation(msg_time_delta, truth_time_delta) -> float:
        if msg_time_delta is None or truth_time_delta is None:
            return 0  # some time_delta is None

        if truth_time_delta <= 0.02 and msg_time_delta <= 0.02:
            # if chord - as long as tight enough, counts as no deviation
            return 0

        # (0.3 / 0.25) x 100 = 1.2 x 100 = 120
        #  OR
        # (0.2 / 0.25) x 100 = 0.8 x 100 = 80
        deltas_ratio = round5((msg_time_delta / truth_time_delta) * 100)
        # abs(100 - 120) = 20.0 || OR || abs(100 - 80) = 20.0
        return round5(abs(100 - deltas_ratio))

    def are_accuracy_and_rhythm_correct(self) -> bool:
        return self.is_accuracy_correct and self._is_rhythm_correct

    def get_mistake_kind(self) -> str or None:
        if not self.is_accuracy_correct:
            return "accuracy"
        if not self._is_rhythm_correct:
            return "rhythm"
        return None

    def __str__(self) -> str:
        return f'is_accuracy_correct: {self.is_accuracy_correct} | _rhythm_deviation: {self._rhythm_deviation} | _is_rhythm_correct: {self._is_rhythm_correct}'

    def __repr__(self) -> str:
        return self.__str__()"""
